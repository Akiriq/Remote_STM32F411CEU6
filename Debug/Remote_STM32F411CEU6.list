
Remote_STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800d480  0800d480  0000e480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6c0  0800d6c0  0000f150  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d6c0  0800d6c0  0000e6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6c8  0800d6c8  0000f150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6c8  0800d6c8  0000e6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d6cc  0800d6cc  0000e6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800d6d0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006968  20000150  0800d820  0000f150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ab8  0800d820  0000fab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a38b  00000000  00000000  0000f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005de8  00000000  00000000  0003950b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023d8  00000000  00000000  0003f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bd3  00000000  00000000  000416d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007b27  00000000  00000000  000432a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b30c  00000000  00000000  0004adca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae5e4  00000000  00000000  000760d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001246ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b20  00000000  00000000  00124700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0012e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d468 	.word	0x0800d468

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800d468 	.word	0x0800d468

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 fc64 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f84a 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f9f6 	bl	8000908 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 f9d4 	bl	80008c8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000520:	f000 f972 	bl	8000808 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000524:	f000 f942 	bl	80007ac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000528:	f000 f9a4 	bl	8000874 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800052c:	f000 f8a6 	bl	800067c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f009 fbe8 	bl	8009d04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000534:	4a11      	ldr	r2, [pc, #68]	@ (800057c <main+0x70>)
 8000536:	2100      	movs	r1, #0
 8000538:	4811      	ldr	r0, [pc, #68]	@ (8000580 <main+0x74>)
 800053a:	f009 fc2d 	bl	8009d98 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a10      	ldr	r2, [pc, #64]	@ (8000584 <main+0x78>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of send_usb_data */
  send_usb_dataHandle = osThreadNew(send_usb_data_func, NULL, &send_usb_data_attributes);
 8000544:	4a10      	ldr	r2, [pc, #64]	@ (8000588 <main+0x7c>)
 8000546:	2100      	movs	r1, #0
 8000548:	4810      	ldr	r0, [pc, #64]	@ (800058c <main+0x80>)
 800054a:	f009 fc25 	bl	8009d98 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0f      	ldr	r2, [pc, #60]	@ (8000590 <main+0x84>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of read_nrf */
  read_nrfHandle = osThreadNew(read_nrf_func, NULL, &read_nrf_attributes);
 8000554:	4a0f      	ldr	r2, [pc, #60]	@ (8000594 <main+0x88>)
 8000556:	2100      	movs	r1, #0
 8000558:	480f      	ldr	r0, [pc, #60]	@ (8000598 <main+0x8c>)
 800055a:	f009 fc1d 	bl	8009d98 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <main+0x90>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of send_nrf */
  send_nrfHandle = osThreadNew(send_nrf_func, NULL, &send_nrf_attributes);
 8000564:	4a0e      	ldr	r2, [pc, #56]	@ (80005a0 <main+0x94>)
 8000566:	2100      	movs	r1, #0
 8000568:	480e      	ldr	r0, [pc, #56]	@ (80005a4 <main+0x98>)
 800056a:	f009 fc15 	bl	8009d98 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <main+0x9c>)
 8000572:	6013      	str	r3, [r2, #0]

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f009 fbea 	bl	8009d4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x6c>
 800057c:	0800d5f8 	.word	0x0800d5f8
 8000580:	08000a8d 	.word	0x08000a8d
 8000584:	20000308 	.word	0x20000308
 8000588:	0800d61c 	.word	0x0800d61c
 800058c:	08000ab9 	.word	0x08000ab9
 8000590:	2000030c 	.word	0x2000030c
 8000594:	0800d640 	.word	0x0800d640
 8000598:	08000ac9 	.word	0x08000ac9
 800059c:	20000310 	.word	0x20000310
 80005a0:	0800d664 	.word	0x0800d664
 80005a4:	08000ad9 	.word	0x08000ad9
 80005a8:	20000314 	.word	0x20000314

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	@ 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f00c fe64 	bl	800d288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b27      	ldr	r3, [pc, #156]	@ (8000674 <SystemClock_Config+0xc8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	4a26      	ldr	r2, [pc, #152]	@ (8000674 <SystemClock_Config+0xc8>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <SystemClock_Config+0xcc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <SystemClock_Config+0xcc>)
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800061c:	2319      	movs	r3, #25
 800061e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000620:	23c0      	movs	r3, #192	@ 0xc0
 8000622:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f004 fb1b 	bl	8004c6c <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 fa63 	bl	8000b06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2103      	movs	r1, #3
 800065c:	4618      	mov	r0, r3
 800065e:	f004 fd7d 	bl	800515c <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000668:	f000 fa4d 	bl	8000b06 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	@ 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068e:	4b44      	ldr	r3, [pc, #272]	@ (80007a0 <MX_ADC1_Init+0x124>)
 8000690:	4a44      	ldr	r2, [pc, #272]	@ (80007a4 <MX_ADC1_Init+0x128>)
 8000692:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000694:	4b42      	ldr	r3, [pc, #264]	@ (80007a0 <MX_ADC1_Init+0x124>)
 8000696:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800069a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069c:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <MX_ADC1_Init+0x124>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006a2:	4b3f      	ldr	r3, [pc, #252]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a8:	4b3d      	ldr	r3, [pc, #244]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ae:	4b3c      	ldr	r3, [pc, #240]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b6:	4b3a      	ldr	r3, [pc, #232]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006bc:	4b38      	ldr	r3, [pc, #224]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006be:	4a3a      	ldr	r2, [pc, #232]	@ (80007a8 <MX_ADC1_Init+0x12c>)
 80006c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c2:	4b37      	ldr	r3, [pc, #220]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80006c8:	4b35      	ldr	r3, [pc, #212]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006ca:	2206      	movs	r2, #6
 80006cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ce:	4b34      	ldr	r3, [pc, #208]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006d8:	2201      	movs	r2, #1
 80006da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006dc:	4830      	ldr	r0, [pc, #192]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006de:	f001 fbe3 	bl	8001ea8 <HAL_ADC_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006e8:	f000 fa0d 	bl	8000b06 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006f4:	2307      	movs	r3, #7
 80006f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4828      	ldr	r0, [pc, #160]	@ (80007a0 <MX_ADC1_Init+0x124>)
 80006fe:	f001 fe43 	bl	8002388 <HAL_ADC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000708:	f000 f9fd 	bl	8000b06 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800070c:	2302      	movs	r3, #2
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	4821      	ldr	r0, [pc, #132]	@ (80007a0 <MX_ADC1_Init+0x124>)
 800071a:	f001 fe35 	bl	8002388 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000724:	f000 f9ef 	bl	8000b06 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000728:	2303      	movs	r3, #3
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800072c:	2303      	movs	r3, #3
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	481a      	ldr	r0, [pc, #104]	@ (80007a0 <MX_ADC1_Init+0x124>)
 8000736:	f001 fe27 	bl	8002388 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000740:	f000 f9e1 	bl	8000b06 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000744:	2304      	movs	r3, #4
 8000746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4813      	ldr	r0, [pc, #76]	@ (80007a0 <MX_ADC1_Init+0x124>)
 8000752:	f001 fe19 	bl	8002388 <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800075c:	f000 f9d3 	bl	8000b06 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000760:	2305      	movs	r3, #5
 8000762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000764:	2305      	movs	r3, #5
 8000766:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <MX_ADC1_Init+0x124>)
 800076e:	f001 fe0b 	bl	8002388 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000778:	f000 f9c5 	bl	8000b06 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800077c:	2306      	movs	r3, #6
 800077e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000780:	2306      	movs	r3, #6
 8000782:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_ADC1_Init+0x124>)
 800078a:	f001 fdfd 	bl	8002388 <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000794:	f000 f9b7 	bl	8000b06 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000016c 	.word	0x2000016c
 80007a4:	40012000 	.word	0x40012000
 80007a8:	0f000001 	.word	0x0f000001

080007ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007b2:	4a13      	ldr	r2, [pc, #76]	@ (8000800 <MX_I2C1_Init+0x54>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007b8:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <MX_I2C1_Init+0x58>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_I2C1_Init+0x50>)
 80007ea:	f002 fea9 	bl	8003540 <HAL_I2C_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f4:	f000 f987 	bl	8000b06 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000214 	.word	0x20000214
 8000800:	40005400 	.word	0x40005400
 8000804:	000186a0 	.word	0x000186a0

08000808 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_SPI1_Init+0x64>)
 800080e:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <MX_SPI1_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_SPI1_Init+0x64>)
 8000814:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_SPI1_Init+0x64>)
 8000834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000838:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_SPI1_Init+0x64>)
 800083c:	2220      	movs	r2, #32
 800083e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_SPI1_Init+0x64>)
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_SPI1_Init+0x64>)
 800085a:	f004 fe91 	bl	8005580 <HAL_SPI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 f94f 	bl	8000b06 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000268 	.word	0x20000268
 8000870:	40013000 	.word	0x40013000

08000874 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_USART1_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <MX_USART1_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_USART1_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_USART1_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_USART1_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_USART1_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_USART1_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_USART1_UART_Init+0x4c>)
 80008ac:	f005 fbe4 	bl	8006078 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f926 	bl	8000b06 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200002c0 	.word	0x200002c0
 80008c4:	40011000 	.word	0x40011000

080008c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_DMA_Init+0x3c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000904 <MX_DMA_Init+0x3c>)
 80008d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_DMA_Init+0x3c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2105      	movs	r1, #5
 80008ee:	2038      	movs	r0, #56	@ 0x38
 80008f0:	f002 f8bc 	bl	8002a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008f4:	2038      	movs	r0, #56	@ 0x38
 80008f6:	f002 f8d5 	bl	8002aa4 <HAL_NVIC_EnableIRQ>

}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b56      	ldr	r3, [pc, #344]	@ (8000a7c <MX_GPIO_Init+0x174>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a55      	ldr	r2, [pc, #340]	@ (8000a7c <MX_GPIO_Init+0x174>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b53      	ldr	r3, [pc, #332]	@ (8000a7c <MX_GPIO_Init+0x174>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a7c <MX_GPIO_Init+0x174>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a4e      	ldr	r2, [pc, #312]	@ (8000a7c <MX_GPIO_Init+0x174>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a7c <MX_GPIO_Init+0x174>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b48      	ldr	r3, [pc, #288]	@ (8000a7c <MX_GPIO_Init+0x174>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a47      	ldr	r2, [pc, #284]	@ (8000a7c <MX_GPIO_Init+0x174>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b45      	ldr	r3, [pc, #276]	@ (8000a7c <MX_GPIO_Init+0x174>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b41      	ldr	r3, [pc, #260]	@ (8000a7c <MX_GPIO_Init+0x174>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a40      	ldr	r2, [pc, #256]	@ (8000a7c <MX_GPIO_Init+0x174>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b3e      	ldr	r3, [pc, #248]	@ (8000a7c <MX_GPIO_Init+0x174>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000994:	483a      	ldr	r0, [pc, #232]	@ (8000a80 <MX_GPIO_Init+0x178>)
 8000996:	f002 fd9f 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_4_Pin|LED_3_Pin|LED_2_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f24e 0140 	movw	r1, #57408	@ 0xe040
 80009a0:	4838      	ldr	r0, [pc, #224]	@ (8000a84 <MX_GPIO_Init+0x17c>)
 80009a2:	f002 fd99 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80009ac:	4836      	ldr	r0, [pc, #216]	@ (8000a88 <MX_GPIO_Init+0x180>)
 80009ae:	f002 fd93 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009b8:	2311      	movs	r3, #17
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	482d      	ldr	r0, [pc, #180]	@ (8000a80 <MX_GPIO_Init+0x178>)
 80009cc:	f002 fbe8 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_Pin BP_G_Pin */
  GPIO_InitStruct.Pin = BP_Pin|BP_G_Pin;
 80009d0:	2381      	movs	r3, #129	@ 0x81
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4829      	ldr	r0, [pc, #164]	@ (8000a88 <MX_GPIO_Init+0x180>)
 80009e4:	f002 fbdc 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_M_Pin BP_D_Pin BP_SEL_Pin BP_JOY_Pin */
  GPIO_InitStruct.Pin = BP_M_Pin|BP_D_Pin|BP_SEL_Pin|BP_JOY_Pin;
 80009e8:	f241 0307 	movw	r3, #4103	@ 0x1007
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4821      	ldr	r0, [pc, #132]	@ (8000a84 <MX_GPIO_Init+0x17c>)
 80009fe:	f002 fbcf 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin;
 8000a02:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a08:	2311      	movs	r3, #17
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481a      	ldr	r0, [pc, #104]	@ (8000a84 <MX_GPIO_Init+0x17c>)
 8000a1c:	f002 fbc0 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|NRF_CSN_Pin;
 8000a20:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4813      	ldr	r0, [pc, #76]	@ (8000a88 <MX_GPIO_Init+0x180>)
 8000a3a:	f002 fbb1 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000a3e:	2340      	movs	r3, #64	@ 0x40
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	480b      	ldr	r0, [pc, #44]	@ (8000a84 <MX_GPIO_Init+0x17c>)
 8000a56:	f002 fba3 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000a5a:	2380      	movs	r3, #128	@ 0x80
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_GPIO_Init+0x17c>)
 8000a70:	f002 fb96 	bl	80031a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	@ 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020800 	.word	0x40020800
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40020000 	.word	0x40020000

08000a8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a94:	f00b fee8 	bl	800c868 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)readvalue, 6);
 8000a98:	2206      	movs	r2, #6
 8000a9a:	4905      	ldr	r1, [pc, #20]	@ (8000ab0 <StartDefaultTask+0x24>)
 8000a9c:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <StartDefaultTask+0x28>)
 8000a9e:	f001 fb57 	bl	8002150 <HAL_ADC_Start_DMA>
  runRadio();
 8000aa2:	f000 fe47 	bl	8001734 <runRadio>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f009 fa08 	bl	8009ebc <osDelay>
 8000aac:	e7fb      	b.n	8000aa6 <StartDefaultTask+0x1a>
 8000aae:	bf00      	nop
 8000ab0:	20000324 	.word	0x20000324
 8000ab4:	2000016c 	.word	0x2000016c

08000ab8 <send_usb_data_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_usb_data_func */
void send_usb_data_func(void *argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_usb_data_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f009 f9fb 	bl	8009ebc <osDelay>
 8000ac6:	e7fb      	b.n	8000ac0 <send_usb_data_func+0x8>

08000ac8 <read_nrf_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_nrf_func */
void read_nrf_func(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_nrf_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f009 f9f3 	bl	8009ebc <osDelay>
 8000ad6:	e7fb      	b.n	8000ad0 <read_nrf_func+0x8>

08000ad8 <send_nrf_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_nrf_func */
void send_nrf_func(void *argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_nrf_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f009 f9eb 	bl	8009ebc <osDelay>
 8000ae6:	e7fb      	b.n	8000ae0 <send_nrf_func+0x8>

08000ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000af8:	d101      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000afa:	f001 f991 	bl	8001e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0a:	b672      	cpsid	i
}
 8000b0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0e:	bf00      	nop
 8000b10:	e7fd      	b.n	8000b0e <Error_Handler+0x8>
	...

08000b14 <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b1e:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <nRF24_CSN_L+0x14>)
 8000b20:	f002 fcda 	bl	80034d8 <HAL_GPIO_WritePin>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40020000 	.word	0x40020000

08000b2c <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b36:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <nRF24_CSN_H+0x14>)
 8000b38:	f002 fcce 	bl	80034d8 <HAL_GPIO_WritePin>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40020000 	.word	0x40020000

08000b44 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 8000b4e:	f107 020f 	add.w	r2, r7, #15
 8000b52:	1df9      	adds	r1, r7, #7
 8000b54:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <nRF24_LL_RW+0x34>)
 8000b5e:	f004 fd98 	bl	8005692 <HAL_SPI_TransmitReceive>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <nRF24_LL_RW+0x28>
        Error_Handler();
 8000b68:	f7ff ffcd 	bl	8000b06 <Error_Handler>
    };
    return result;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000268 	.word	0x20000268

08000b7c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000b86:	f7ff ffc5 	bl	8000b14 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ffd6 	bl	8000b44 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000b98:	20ff      	movs	r0, #255	@ 0xff
 8000b9a:	f7ff ffd3 	bl	8000b44 <nRF24_LL_RW>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000ba2:	f7ff ffc3 	bl	8000b2c <nRF24_CSN_H>

	return value;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000bc0:	f7ff ffa8 	bl	8000b14 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b1f      	cmp	r3, #31
 8000bc8:	d810      	bhi.n	8000bec <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	f003 031f 	and.w	r3, r3, #31
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffb1 	bl	8000b44 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000be2:	79bb      	ldrb	r3, [r7, #6]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffad 	bl	8000b44 <nRF24_LL_RW>
 8000bea:	e013      	b.n	8000c14 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ffa8 	bl	8000b44 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2be1      	cmp	r3, #225	@ 0xe1
 8000bf8:	d00c      	beq.n	8000c14 <nRF24_WriteReg+0x64>
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2be2      	cmp	r3, #226	@ 0xe2
 8000bfe:	d009      	beq.n	8000c14 <nRF24_WriteReg+0x64>
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2be3      	cmp	r3, #227	@ 0xe3
 8000c04:	d006      	beq.n	8000c14 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2bff      	cmp	r3, #255	@ 0xff
 8000c0a:	d003      	beq.n	8000c14 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff98 	bl	8000b44 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000c14:	f7ff ff8a 	bl	8000b2c <nRF24_CSN_H>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000c30:	f7ff ff70 	bl	8000b14 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff84 	bl	8000b44 <nRF24_LL_RW>
	while (count--) {
 8000c3c:	e007      	b.n	8000c4e <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000c3e:	683c      	ldr	r4, [r7, #0]
 8000c40:	1c63      	adds	r3, r4, #1
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	20ff      	movs	r0, #255	@ 0xff
 8000c46:	f7ff ff7d 	bl	8000b44 <nRF24_LL_RW>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	71ba      	strb	r2, [r7, #6]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f2      	bne.n	8000c3e <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000c58:	f7ff ff68 	bl	8000b2c <nRF24_CSN_H>
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}

08000c64 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	4613      	mov	r3, r2
 8000c72:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000c74:	f7ff ff4e 	bl	8000b14 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff62 	bl	8000b44 <nRF24_LL_RW>
	while (count--) {
 8000c80:	e006      	b.n	8000c90 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	603a      	str	r2, [r7, #0]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff5a 	bl	8000b44 <nRF24_LL_RW>
	while (count--) {
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	1e5a      	subs	r2, r3, #1
 8000c94:	71ba      	strb	r2, [r7, #6]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1f3      	bne.n	8000c82 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000c9a:	f7ff ff47 	bl	8000b2c <nRF24_CSN_H>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8000caa:	2108      	movs	r1, #8
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ff7f 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000cb2:	213f      	movs	r1, #63	@ 0x3f
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff ff7b 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000cba:	2103      	movs	r1, #3
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f7ff ff77 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f7ff ff73 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000cca:	2103      	movs	r1, #3
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f7ff ff6f 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	2005      	movs	r0, #5
 8000cd6:	f7ff ff6b 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000cda:	210e      	movs	r1, #14
 8000cdc:	2006      	movs	r0, #6
 8000cde:	f7ff ff67 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2007      	movs	r0, #7
 8000ce6:	f7ff ff63 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2011      	movs	r0, #17
 8000cee:	f7ff ff5f 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2012      	movs	r0, #18
 8000cf6:	f7ff ff5b 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2013      	movs	r0, #19
 8000cfe:	f7ff ff57 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000d02:	2100      	movs	r1, #0
 8000d04:	2014      	movs	r0, #20
 8000d06:	f7ff ff53 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2015      	movs	r0, #21
 8000d0e:	f7ff ff4f 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000d12:	2100      	movs	r1, #0
 8000d14:	2016      	movs	r0, #22
 8000d16:	f7ff ff4b 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	201c      	movs	r0, #28
 8000d1e:	f7ff ff47 	bl	8000bb0 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8000d22:	2100      	movs	r1, #0
 8000d24:	201d      	movs	r0, #29
 8000d26:	f7ff ff43 	bl	8000bb0 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8000d2a:	f000 f9cd 	bl	80010c8 <nRF24_FlushRX>
	nRF24_FlushTX();
 8000d2e:	f000 f9c3 	bl	80010b8 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8000d32:	f000 f9d1 	bl	80010d8 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000d36:	f7ff fef9 	bl	8000b2c <nRF24_CSN_H>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8000d46:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <nRF24_Check+0x58>)
 8000d48:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000d4a:	2205      	movs	r2, #5
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	2030      	movs	r0, #48	@ 0x30
 8000d50:	f7ff ff88 	bl	8000c64 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000d54:	463b      	mov	r3, r7
 8000d56:	2205      	movs	r2, #5
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2010      	movs	r0, #16
 8000d5c:	f7ff ff60 	bl	8000c20 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e00f      	b.n	8000d86 <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	3310      	adds	r3, #16
 8000d6a:	443b      	add	r3, r7
 8000d6c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c59      	adds	r1, r3, #1
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d001      	beq.n	8000d80 <nRF24_Check+0x40>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e006      	b.n	8000d8e <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	3301      	adds	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d9ec      	bls.n	8000d66 <nRF24_Check+0x26>
	}

	return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0800d4b4 	.word	0x0800d4b4

08000d9c <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff fee8 	bl	8000b7c <nRF24_ReadReg>
 8000dac:	4603      	mov	r3, r0
 8000dae:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d104      	bne.n	8000dc0 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e003      	b.n	8000dc8 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	f023 0302 	bic.w	r3, r3, #2
 8000dc6:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff feef 	bl	8000bb0 <nRF24_WriteReg>
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fec9 	bl	8000b7c <nRF24_ReadReg>
 8000dea:	4603      	mov	r3, r0
 8000dec:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	f023 0301 	bic.w	r3, r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	b25a      	sxtb	r2, r3
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fece 	bl	8000bb0 <nRF24_WriteReg>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fea8 	bl	8000b7c <nRF24_ReadReg>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	f023 030c 	bic.w	r3, r3, #12
 8000e36:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	b25a      	sxtb	r2, r3
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fead 	bl	8000bb0 <nRF24_WriteReg>
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	2005      	movs	r0, #5
 8000e6e:	f7ff fe9f 	bl	8000bb0 <nRF24_WriteReg>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	3b02      	subs	r3, #2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f7ff fe8f 	bl	8000bb0 <nRF24_WriteReg>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d00a      	beq.n	8000ec4 <nRF24_SetAddr+0x28>
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	dc36      	bgt.n	8000f20 <nRF24_SetAddr+0x84>
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	dc02      	bgt.n	8000ebc <nRF24_SetAddr+0x20>
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	da04      	bge.n	8000ec4 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8000eba:	e031      	b.n	8000f20 <nRF24_SetAddr+0x84>
 8000ebc:	3b02      	subs	r3, #2
	switch (pipe) {
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d82e      	bhi.n	8000f20 <nRF24_SetAddr+0x84>
 8000ec2:	e023      	b.n	8000f0c <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f7ff fe59 	bl	8000b7c <nRF24_ReadReg>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	3301      	adds	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8000ed8:	f7ff fe1c 	bl	8000b14 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4a13      	ldr	r2, [pc, #76]	@ (8000f2c <nRF24_SetAddr+0x90>)
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	f043 0320 	orr.w	r3, r3, #32
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fe2b 	bl	8000b44 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	1e5a      	subs	r2, r3, #1
 8000ef2:	603a      	str	r2, [r7, #0]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fe24 	bl	8000b44 <nRF24_LL_RW>
			} while (addr_width--);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	1e5a      	subs	r2, r3, #1
 8000f00:	73fa      	strb	r2, [r7, #15]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f3      	bne.n	8000eee <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8000f06:	f7ff fe11 	bl	8000b2c <nRF24_CSN_H>
			break;
 8000f0a:	e00a      	b.n	8000f22 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4a07      	ldr	r2, [pc, #28]	@ (8000f2c <nRF24_SetAddr+0x90>)
 8000f10:	5cd2      	ldrb	r2, [r2, r3]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4610      	mov	r0, r2
 8000f1a:	f7ff fe49 	bl	8000bb0 <nRF24_WriteReg>
			break;
 8000f1e:	e000      	b.n	8000f22 <nRF24_SetAddr+0x86>
			break;
 8000f20:	bf00      	nop
	}
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	0800d690 	.word	0x0800d690

08000f30 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000f3a:	2006      	movs	r0, #6
 8000f3c:	f7ff fe1e 	bl	8000b7c <nRF24_ReadReg>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	f023 0306 	bic.w	r3, r3, #6
 8000f4a:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	4619      	mov	r1, r3
 8000f58:	2006      	movs	r0, #6
 8000f5a:	f7ff fe29 	bl	8000bb0 <nRF24_WriteReg>
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000f70:	2006      	movs	r0, #6
 8000f72:	f7ff fe03 	bl	8000b7c <nRF24_ReadReg>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000f80:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	2006      	movs	r0, #6
 8000f90:	f7ff fe0e 	bl	8000bb0 <nRF24_WriteReg>
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	71bb      	strb	r3, [r7, #6]
 8000faa:	4613      	mov	r3, r2
 8000fac:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f7ff fde4 	bl	8000b7c <nRF24_ReadReg>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2101      	movs	r1, #1
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fcc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f7ff fdec 	bl	8000bb0 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <nRF24_SetRXPipe+0xa4>)
 8000fdc:	5cd2      	ldrb	r2, [r2, r3]
 8000fde:	797b      	ldrb	r3, [r7, #5]
 8000fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4610      	mov	r0, r2
 8000fea:	f7ff fde1 	bl	8000bb0 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff fdc4 	bl	8000b7c <nRF24_ReadReg>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d10a      	bne.n	8001014 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2201      	movs	r2, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	b25a      	sxtb	r2, r3
 8001008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100c:	4313      	orrs	r3, r2
 800100e:	b25b      	sxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e00b      	b.n	800102c <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2201      	movs	r2, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	b25b      	sxtb	r3, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	b25a      	sxtb	r2, r3
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4013      	ands	r3, r2
 8001028:	b25b      	sxtb	r3, r3
 800102a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	4619      	mov	r1, r3
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fdbd 	bl	8000bb0 <nRF24_WriteReg>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0800d688 	.word	0x0800d688

08001044 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b05      	cmp	r3, #5
 8001052:	d904      	bls.n	800105e <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8001054:	2100      	movs	r1, #0
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff fdaa 	bl	8000bb0 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 800105c:	e015      	b.n	800108a <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff fd8c 	bl	8000b7c <nRF24_ReadReg>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2201      	movs	r2, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	b25b      	sxtb	r3, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	b25a      	sxtb	r2, r3
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4013      	ands	r3, r2
 800107c:	b25b      	sxtb	r3, r3
 800107e:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	4619      	mov	r1, r3
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff fd93 	bl	8000bb0 <nRF24_WriteReg>
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8001096:	2007      	movs	r0, #7
 8001098:	f7ff fd70 	bl	8000b7c <nRF24_ReadReg>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 80010a6:	2017      	movs	r0, #23
 80010a8:	f7ff fd68 	bl	8000b7c <nRF24_ReadReg>
 80010ac:	4603      	mov	r3, r0
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	b2db      	uxtb	r3, r3
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80010bc:	21ff      	movs	r1, #255	@ 0xff
 80010be:	20e1      	movs	r0, #225	@ 0xe1
 80010c0:	f7ff fd76 	bl	8000bb0 <nRF24_WriteReg>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80010cc:	21ff      	movs	r1, #255	@ 0xff
 80010ce:	20e2      	movs	r0, #226	@ 0xe2
 80010d0:	f7ff fd6e 	bl	8000bb0 <nRF24_WriteReg>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80010de:	2007      	movs	r0, #7
 80010e0:	f7ff fd4c 	bl	8000b7c <nRF24_ReadReg>
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80010ee:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	4619      	mov	r1, r3
 80010f4:	2007      	movs	r0, #7
 80010f6:	f7ff fd5b 	bl	8000bb0 <nRF24_WriteReg>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	461a      	mov	r2, r3
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	20a0      	movs	r0, #160	@ 0xa0
 8001116:	f7ff fda5 	bl	8000c64 <nRF24_WriteMBReg>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8001128:	f7ff fcf4 	bl	8000b14 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 800112c:	2060      	movs	r0, #96	@ 0x60
 800112e:	f7ff fd09 	bl	8000b44 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001132:	20ff      	movs	r0, #255	@ 0xff
 8001134:	f7ff fd06 	bl	8000b44 <nRF24_LL_RW>
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 800113c:	f7ff fcf6 	bl	8000b2c <nRF24_CSN_H>

	return value;
 8001140:	79fb      	ldrb	r3, [r7, #7]

}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	4613      	mov	r3, r2
 8001158:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800115a:	2007      	movs	r0, #7
 800115c:	f7ff fd0e 	bl	8000b7c <nRF24_ReadReg>
 8001160:	4603      	mov	r3, r0
 8001162:	105b      	asrs	r3, r3, #1
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b05      	cmp	r3, #5
 8001170:	d829      	bhi.n	80011c6 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00f      	beq.n	8001198 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8001178:	f7ff ffd3 	bl	8001122 <nRF24_GetRxDplPayloadWidth>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b20      	cmp	r3, #32
 800118a:	d90f      	bls.n	80011ac <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8001192:	f7ff ff99 	bl	80010c8 <nRF24_FlushRX>
 8001196:	e009      	b.n	80011ac <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <nRF24_ReadPayloadGeneric+0x8c>)
 800119c:	5cd3      	ldrb	r3, [r2, r3]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fcec 	bl	8000b7c <nRF24_ReadReg>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	68f9      	ldr	r1, [r7, #12]
 80011bc:	2061      	movs	r0, #97	@ 0x61
 80011be:	f7ff fd2f 	bl	8000c20 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	e003      	b.n	80011ce <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80011cc:	23ff      	movs	r3, #255	@ 0xff
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	0800d688 	.word	0x0800d688

080011dc <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffae 	bl	800114c <nRF24_ReadPayloadGeneric>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2140      	movs	r1, #64	@ 0x40
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <nRF24_CE_L+0x14>)
 8001206:	f002 f967 	bl	80034d8 <HAL_GPIO_WritePin>
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020400 	.word	0x40020400

08001214 <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2140      	movs	r1, #64	@ 0x40
 800121c:	4802      	ldr	r0, [pc, #8]	@ (8001228 <nRF24_CE_H+0x14>)
 800121e:	f002 f95b 	bl	80034d8 <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020400 	.word	0x40020400

0800122c <UART_SendChar>:
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);



void UART_SendChar(char b)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
    //HAL_UART_Transmit(&huart2, (uint8_t *) &b, 1, 200);
    CDC_Transmit_FS((uint8_t *) &b, 1);
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	2101      	movs	r1, #1
 800123a:	4618      	mov	r0, r3
 800123c:	f00b fbd2 	bl	800c9e4 <CDC_Transmit_FS>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <UART_SendStr>:

void UART_SendStr(char *string)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t *) string, (uint16_t) strlen(string), 200);

	CDC_Transmit_FS((uint8_t *) string,sizeof(string));
 8001250:	2104      	movs	r1, #4
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f00b fbc6 	bl	800c9e4 <CDC_Transmit_FS>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <Toggle_LED>:

void Toggle_LED()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001264:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <Toggle_LED+0x14>)
 800126a:	f002 f94e 	bl	800350a <HAL_GPIO_TogglePin>
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40020800 	.word	0x40020800

08001278 <UART_SendBufHex>:

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8001284:	2300      	movs	r3, #0
 8001286:	81fb      	strh	r3, [r7, #14]
 8001288:	e018      	b.n	80012bc <UART_SendBufHex+0x44>
        ch = *buf++;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	737b      	strb	r3, [r7, #13]
        UART_SendChar(HEX_CHARS[(ch >> 4) % 0x10]);
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	b2db      	uxtb	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <UART_SendBufHex+0x58>)
 800129e:	5c9b      	ldrb	r3, [r3, r2]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ffc3 	bl	800122c <UART_SendChar>
        UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 80012a6:	7b7b      	ldrb	r3, [r7, #13]
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <UART_SendBufHex+0x58>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ffbb 	bl	800122c <UART_SendChar>
    for (i = 0; i < bufsize; i++) {
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	3301      	adds	r3, #1
 80012ba:	81fb      	strh	r3, [r7, #14]
 80012bc:	89fa      	ldrh	r2, [r7, #14]
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3e2      	bcc.n	800128a <UART_SendBufHex+0x12>
    }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0800d4bc 	.word	0x0800d4bc

080012d4 <UART_SendHex8>:

void UART_SendHex8(uint16_t num) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
    UART_SendChar(HEX_CHARS[(num >> 4) % 0x10]);
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	4a08      	ldr	r2, [pc, #32]	@ (800130c <UART_SendHex8+0x38>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff9d 	bl	800122c <UART_SendChar>
    UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	4a04      	ldr	r2, [pc, #16]	@ (800130c <UART_SendHex8+0x38>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff95 	bl	800122c <UART_SendChar>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	0800d4bc 	.word	0x0800d4bc

08001310 <UART_SendInt>:

void UART_SendInt(int32_t num) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	da05      	bge.n	800132e <UART_SendInt+0x1e>
        UART_SendChar('-');
 8001322:	202d      	movs	r0, #45	@ 0x2d
 8001324:	f7ff ff82 	bl	800122c <UART_SendChar>
        num *= -1;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	425b      	negs	r3, r3
 800132c:	607b      	str	r3, [r7, #4]
    }
    do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <UART_SendInt+0x90>)
 8001332:	fb83 1302 	smull	r1, r3, r3, r2
 8001336:	1099      	asrs	r1, r3, #2
 8001338:	17d3      	asrs	r3, r2, #31
 800133a:	1ac9      	subs	r1, r1, r3
 800133c:	460b      	mov	r3, r1
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	1ad1      	subs	r1, r2, r3
 8001346:	b2ca      	uxtb	r2, r1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	1c59      	adds	r1, r3, #1
 800134c:	6179      	str	r1, [r7, #20]
 800134e:	3230      	adds	r2, #48	@ 0x30
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	3318      	adds	r3, #24
 8001354:	443b      	add	r3, r7
 8001356:	f803 2c10 	strb.w	r2, [r3, #-16]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a10      	ldr	r2, [pc, #64]	@ (80013a0 <UART_SendInt+0x90>)
 800135e:	fb82 1203 	smull	r1, r2, r2, r3
 8001362:	1092      	asrs	r2, r2, #2
 8001364:	17db      	asrs	r3, r3, #31
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dcde      	bgt.n	800132e <UART_SendInt+0x1e>
    for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3b01      	subs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e00a      	b.n	800138e <UART_SendInt+0x7e>
 8001378:	f107 0208 	add.w	r2, r7, #8
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	4413      	add	r3, r2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff52 	bl	800122c <UART_SendChar>
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3b01      	subs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b00      	cmp	r3, #0
 8001392:	daf1      	bge.n	8001378 <UART_SendInt+0x68>
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	66666667 	.word	0x66666667

080013a4 <nRF24_TransmitPacket>:
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 80013b0:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <nRF24_TransmitPacket+0x94>)
 80013b2:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 80013b4:	f7ff ff22 	bl	80011fc <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	4619      	mov	r1, r3
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fea0 	bl	8001102 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 80013c2:	f7ff ff27 	bl	8001214 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 80013c6:	f7ff fe64 	bl	8001092 <nRF24_GetStatus>
 80013ca:	4603      	mov	r3, r0
 80013cc:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f1      	bne.n	80013c6 <nRF24_TransmitPacket+0x22>
 80013e2:	e000      	b.n	80013e6 <nRF24_TransmitPacket+0x42>
			break;
 80013e4:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 80013e6:	f7ff ff09 	bl	80011fc <nRF24_CE_L>

	if (!wait) {
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 80013f0:	2302      	movs	r3, #2
 80013f2:	e01d      	b.n	8001430 <nRF24_TransmitPacket+0x8c>
	}

	// Check the flags in STATUS register
	UART_SendStr("[");
 80013f4:	4811      	ldr	r0, [pc, #68]	@ (800143c <nRF24_TransmitPacket+0x98>)
 80013f6:	f7ff ff27 	bl	8001248 <UART_SendStr>
	UART_SendHex8(status);
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff68 	bl	80012d4 <UART_SendHex8>
	UART_SendStr("] ");
 8001404:	480e      	ldr	r0, [pc, #56]	@ (8001440 <nRF24_TransmitPacket+0x9c>)
 8001406:	f7ff ff1f 	bl	8001248 <UART_SendStr>

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 800140a:	f7ff fe65 	bl	80010d8 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <nRF24_TransmitPacket+0x78>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8001418:	2303      	movs	r3, #3
 800141a:	e009      	b.n	8001430 <nRF24_TransmitPacket+0x8c>
	}

	if (status & nRF24_FLAG_TX_DS) {
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <nRF24_TransmitPacket+0x86>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8001426:	2301      	movs	r3, #1
 8001428:	e002      	b.n	8001430 <nRF24_TransmitPacket+0x8c>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 800142a:	f7ff fe45 	bl	80010b8 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	000fffff 	.word	0x000fffff
 800143c:	0800d4d0 	.word	0x0800d4d0
 8001440:	0800d4d4 	.word	0x0800d4d4

08001444 <send_payload>:

void send_payload(uint8_t* payload, uint8_t length)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff fcc2 	bl	8000dda <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8001456:	f7ff fe3f 	bl	80010d8 <nRF24_ClearIRQFlags>

	UART_SendStr("PAYLOAD:>");
 800145a:	481f      	ldr	r0, [pc, #124]	@ (80014d8 <send_payload+0x94>)
 800145c:	f7ff fef4 	bl	8001248 <UART_SendStr>
	UART_SendBufHex((char *)payload, length);
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff06 	bl	8001278 <UART_SendBufHex>
	UART_SendStr("< ... TX: ");
 800146c:	481b      	ldr	r0, [pc, #108]	@ (80014dc <send_payload+0x98>)
 800146e:	f7ff feeb 	bl	8001248 <UART_SendStr>

	// Transmit a packet
	tx_res = nRF24_TransmitPacket(payload, length);
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	4619      	mov	r1, r3
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff94 	bl	80013a4 <nRF24_TransmitPacket>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <send_payload+0x9c>)
 8001482:	701a      	strb	r2, [r3, #0]
	switch (tx_res) {
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <send_payload+0x9c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d00e      	beq.n	80014aa <send_payload+0x66>
 800148c:	2b03      	cmp	r3, #3
 800148e:	dc10      	bgt.n	80014b2 <send_payload+0x6e>
 8001490:	2b01      	cmp	r3, #1
 8001492:	d002      	beq.n	800149a <send_payload+0x56>
 8001494:	2b02      	cmp	r3, #2
 8001496:	d004      	beq.n	80014a2 <send_payload+0x5e>
 8001498:	e00b      	b.n	80014b2 <send_payload+0x6e>
		case nRF24_TX_SUCCESS:
			UART_SendStr("OK");
 800149a:	4812      	ldr	r0, [pc, #72]	@ (80014e4 <send_payload+0xa0>)
 800149c:	f7ff fed4 	bl	8001248 <UART_SendStr>
			break;
 80014a0:	e00b      	b.n	80014ba <send_payload+0x76>
		case nRF24_TX_TIMEOUT:
			UART_SendStr("TIMEOUT");
 80014a2:	4811      	ldr	r0, [pc, #68]	@ (80014e8 <send_payload+0xa4>)
 80014a4:	f7ff fed0 	bl	8001248 <UART_SendStr>
			break;
 80014a8:	e007      	b.n	80014ba <send_payload+0x76>
		case nRF24_TX_MAXRT:
			UART_SendStr("MAX RETRANSMIT");
 80014aa:	4810      	ldr	r0, [pc, #64]	@ (80014ec <send_payload+0xa8>)
 80014ac:	f7ff fecc 	bl	8001248 <UART_SendStr>
			break;
 80014b0:	e003      	b.n	80014ba <send_payload+0x76>
		default:
			UART_SendStr("ERROR");
 80014b2:	480f      	ldr	r0, [pc, #60]	@ (80014f0 <send_payload+0xac>)
 80014b4:	f7ff fec8 	bl	8001248 <UART_SendStr>
			break;
 80014b8:	bf00      	nop
	}
	UART_SendStr("\r\n");
 80014ba:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <send_payload+0xb0>)
 80014bc:	f7ff fec4 	bl	8001248 <UART_SendStr>
	osDelay(5);
 80014c0:	2005      	movs	r0, #5
 80014c2:	f008 fcfb 	bl	8009ebc <osDelay>
    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fc87 	bl	8000dda <nRF24_SetOperationalMode>


    // Put the transceiver to the RX mode
    nRF24_CE_H();
 80014cc:	f7ff fea2 	bl	8001214 <nRF24_CE_H>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0800d4d8 	.word	0x0800d4d8
 80014dc:	0800d4e4 	.word	0x0800d4e4
 80014e0:	2000035e 	.word	0x2000035e
 80014e4:	0800d4f0 	.word	0x0800d4f0
 80014e8:	0800d4f4 	.word	0x0800d4f4
 80014ec:	0800d4fc 	.word	0x0800d4fc
 80014f0:	0800d50c 	.word	0x0800d50c
 80014f4:	0800d514 	.word	0x0800d514

080014f8 <ecretage_joy>:

void ecretage_joy(uint16_t* val)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	uint16_t range = 400;
 8001500:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001504:	81fb      	strh	r3, [r7, #14]

	if 		(2084 - range < *val && *val < 2048 + range) 	*val = 2048;
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	f5c3 6302 	rsb	r3, r3, #2080	@ 0x820
 800150c:	3304      	adds	r3, #4
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	8812      	ldrh	r2, [r2, #0]
 8001512:	4293      	cmp	r3, r2
 8001514:	da0b      	bge.n	800152e <ecretage_joy+0x36>
 8001516:	89fb      	ldrh	r3, [r7, #14]
 8001518:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	8812      	ldrh	r2, [r2, #0]
 8001520:	4293      	cmp	r3, r2
 8001522:	db04      	blt.n	800152e <ecretage_joy+0x36>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800152a:	801a      	strh	r2, [r3, #0]
 800152c:	e015      	b.n	800155a <ecretage_joy+0x62>
	else if (4096 - range < *val)							*val = 4096 - range;
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	8812      	ldrh	r2, [r2, #0]
 8001538:	4293      	cmp	r3, r2
 800153a:	da06      	bge.n	800154a <ecretage_joy+0x52>
 800153c:	89fb      	ldrh	r3, [r7, #14]
 800153e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	801a      	strh	r2, [r3, #0]
 8001548:	e007      	b.n	800155a <ecretage_joy+0x62>
	else if (*val < range)									*val = range;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	89fa      	ldrh	r2, [r7, #14]
 8001550:	429a      	cmp	r2, r3
 8001552:	d902      	bls.n	800155a <ecretage_joy+0x62>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	89fa      	ldrh	r2, [r7, #14]
 8001558:	801a      	strh	r2, [r3, #0]

	if 		(*val < 2048) *val = 2048 - range - (2048 - range - *val)*(2048 - range)/(2048 - 2*range);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001562:	d21a      	bcs.n	800159a <ecretage_joy+0xa2>
 8001564:	89fb      	ldrh	r3, [r7, #14]
 8001566:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	8812      	ldrh	r2, [r2, #0]
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	89fa      	ldrh	r2, [r7, #14]
 8001572:	f5c2 6200 	rsb	r2, r2, #2048	@ 0x800
 8001576:	fb03 f202 	mul.w	r2, r3, r2
 800157a:	89fb      	ldrh	r3, [r7, #14]
 800157c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fb92 f3f3 	sdiv	r3, r2, r3
 8001586:	b29a      	uxth	r2, r3
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	4413      	add	r3, r2
 800158c:	b29b      	uxth	r3, r3
 800158e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	801a      	strh	r2, [r3, #0]
	else if (2048 < *val) *val = 2048 + range + (*val - 2048 - range)*(2048 - range)/(2048 - 2*range);
}
 8001598:	e01e      	b.n	80015d8 <ecretage_joy+0xe0>
	else if (2048 < *val) *val = 2048 + range + (*val - 2048 - range)*(2048 - range)/(2048 - 2*range);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015a2:	d919      	bls.n	80015d8 <ecretage_joy+0xe0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	f5a3 6200 	sub.w	r2, r3, #2048	@ 0x800
 80015ac:	89fb      	ldrh	r3, [r7, #14]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	89fa      	ldrh	r2, [r7, #14]
 80015b2:	f5c2 6200 	rsb	r2, r2, #2048	@ 0x800
 80015b6:	fb03 f202 	mul.w	r2, r3, r2
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	89fb      	ldrh	r3, [r7, #14]
 80015ca:	4413      	add	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	801a      	strh	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <ecretage_slide>:

void ecretage_slide(uint16_t* val)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	uint16_t range = 400;
 80015ec:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80015f0:	81fb      	strh	r3, [r7, #14]

	if		(4096 - range < *val)	*val =  4096 - range;
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	8812      	ldrh	r2, [r2, #0]
 80015fc:	4293      	cmp	r3, r2
 80015fe:	da06      	bge.n	800160e <ecretage_slide+0x2a>
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	e007      	b.n	800161e <ecretage_slide+0x3a>
	else if (*val < range)			*val = 0 ;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	89fa      	ldrh	r2, [r7, #14]
 8001614:	429a      	cmp	r2, r3
 8001616:	d902      	bls.n	800161e <ecretage_slide+0x3a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	801a      	strh	r2, [r3, #0]
	*val *= 4096/(4096-range);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	881a      	ldrh	r2, [r3, #0]
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001628:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800162c:	fb91 f3f3 	sdiv	r3, r1, r3
 8001630:	b29b      	uxth	r3, r3
 8001632:	fb12 f303 	smulbb	r3, r2, r3
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	801a      	strh	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <sendCommande>:

void sendCommande(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001654:	e022      	b.n	800169c <sendCommande+0x54>
	{
		pot1 = (uint16_t) readvalue[0];
 8001656:	4b2f      	ldr	r3, [pc, #188]	@ (8001714 <sendCommande+0xcc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <sendCommande+0xd0>)
 800165e:	801a      	strh	r2, [r3, #0]
		pot2 = (uint16_t) readvalue[1];
 8001660:	4b2c      	ldr	r3, [pc, #176]	@ (8001714 <sendCommande+0xcc>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <sendCommande+0xd4>)
 8001668:	801a      	strh	r2, [r3, #0]
		pot3 = (uint16_t) readvalue[2];
 800166a:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <sendCommande+0xcc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <sendCommande+0xd8>)
 8001672:	801a      	strh	r2, [r3, #0]
		pot4 = (uint16_t) readvalue[3];
 8001674:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <sendCommande+0xcc>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <sendCommande+0xdc>)
 800167c:	801a      	strh	r2, [r3, #0]
		pot5 = (uint16_t) readvalue[4];
 800167e:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <sendCommande+0xcc>)
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <sendCommande+0xe0>)
 8001686:	801a      	strh	r2, [r3, #0]
		pot6 = (uint16_t) readvalue[5];
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <sendCommande+0xcc>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b27      	ldr	r3, [pc, #156]	@ (800172c <sendCommande+0xe4>)
 8001690:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
 8001692:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001696:	3301      	adds	r3, #1
 8001698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800169c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80016a0:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <sendCommande+0xe8>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3d6      	bcc.n	8001656 <sendCommande+0xe>
	}

	ecretage_joy(&pot3);
 80016a8:	481d      	ldr	r0, [pc, #116]	@ (8001720 <sendCommande+0xd8>)
 80016aa:	f7ff ff25 	bl	80014f8 <ecretage_joy>
	ecretage_joy(&pot4);
 80016ae:	481d      	ldr	r0, [pc, #116]	@ (8001724 <sendCommande+0xdc>)
 80016b0:	f7ff ff22 	bl	80014f8 <ecretage_joy>
	ecretage_slide(&pot2);
 80016b4:	4819      	ldr	r0, [pc, #100]	@ (800171c <sendCommande+0xd4>)
 80016b6:	f7ff ff95 	bl	80015e4 <ecretage_slide>
	uint8_t payload[32] = {(uint8_t)(pot1/16),(uint8_t)(pot2/16),(uint8_t)(pot3/16),(uint8_t)(pot4/16),(uint8_t)(pot5/16)};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2220      	movs	r2, #32
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00b fde1 	bl	800d288 <memset>
 80016c6:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <sendCommande+0xd0>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	713b      	strb	r3, [r7, #4]
 80016d2:	4b12      	ldr	r3, [pc, #72]	@ (800171c <sendCommande+0xd4>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	717b      	strb	r3, [r7, #5]
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <sendCommande+0xd8>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	71bb      	strb	r3, [r7, #6]
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <sendCommande+0xdc>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <sendCommande+0xe0>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	723b      	strb	r3, [r7, #8]

	send_payload(payload, 5);
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2105      	movs	r1, #5
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fe9c 	bl	8001444 <send_payload>
}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	@ 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000324 	.word	0x20000324
 8001718:	20000318 	.word	0x20000318
 800171c:	2000031a 	.word	0x2000031a
 8001720:	2000031c 	.word	0x2000031c
 8001724:	2000031e 	.word	0x2000031e
 8001728:	20000320 	.word	0x20000320
 800172c:	20000322 	.word	0x20000322
 8001730:	2000016c 	.word	0x2000016c

08001734 <runRadio>:



void runRadio(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	@ 0x28
 8001738:	af00      	add	r7, sp, #0
	UART_SendStr("\r\nSTM32F411CEU6 is online.\r\n");
 800173a:	485a      	ldr	r0, [pc, #360]	@ (80018a4 <runRadio+0x170>)
 800173c:	f7ff fd84 	bl	8001248 <UART_SendStr>
	osDelay(1000);
 8001740:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001744:	f008 fbba 	bl	8009ebc <osDelay>
	// RX/TX disabled
	nRF24_CE_L();
 8001748:	f7ff fd58 	bl	80011fc <nRF24_CE_L>

	// Configure the nRF24L01+
	UART_SendStr("nRF24L01+ check: ");
 800174c:	4856      	ldr	r0, [pc, #344]	@ (80018a8 <runRadio+0x174>)
 800174e:	f7ff fd7b 	bl	8001248 <UART_SendStr>
	osDelay(1000);
 8001752:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001756:	f008 fbb1 	bl	8009ebc <osDelay>
	if (!nRF24_Check())
 800175a:	f7ff faf1 	bl	8000d40 <nRF24_Check>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10e      	bne.n	8001782 <runRadio+0x4e>
	{
		UART_SendStr("FAIL\r\n");
 8001764:	4851      	ldr	r0, [pc, #324]	@ (80018ac <runRadio+0x178>)
 8001766:	f7ff fd6f 	bl	8001248 <UART_SendStr>
		while (1)
		{
			Toggle_LED();
 800176a:	f7ff fd79 	bl	8001260 <Toggle_LED>
			osDelay(100);
 800176e:	2064      	movs	r0, #100	@ 0x64
 8001770:	f008 fba4 	bl	8009ebc <osDelay>
			if (nRF24_Check()) break;
 8001774:	f7ff fae4 	bl	8000d40 <nRF24_Check>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d100      	bne.n	8001780 <runRadio+0x4c>
			Toggle_LED();
 800177e:	e7f4      	b.n	800176a <runRadio+0x36>
			if (nRF24_Check()) break;
 8001780:	bf00      	nop
		}
	}

	UART_SendStr("OK\r\n");
 8001782:	484b      	ldr	r0, [pc, #300]	@ (80018b0 <runRadio+0x17c>)
 8001784:	f7ff fd60 	bl	8001248 <UART_SendStr>


	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 8001788:	f7ff fa8d 	bl	8000ca6 <nRF24_Init>
	//   - CRC scheme		: 2 byte

    // The transmitter sends a 5-byte packets to the address '0xE7 0x1C 0xE3' without Auto-ACK (ShockBurst disabled)

    // Disable ShockBurst for all RX pipes
    nRF24_DisableAA(0xFF);
 800178c:	20ff      	movs	r0, #255	@ 0xff
 800178e:	f7ff fc59 	bl	8001044 <nRF24_DisableAA>

    // Set RF channel
    nRF24_SetRFChannel(115);
 8001792:	2073      	movs	r0, #115	@ 0x73
 8001794:	f7ff fb63 	bl	8000e5e <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_DR_250kbps);
 8001798:	2020      	movs	r0, #32
 800179a:	f7ff fbe4 	bl	8000f66 <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 800179e:	200c      	movs	r0, #12
 80017a0:	f7ff fb3c 	bl	8000e1c <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f7ff fb68 	bl	8000e7a <nRF24_SetAddrWidth>

    // Configure RX PIPE#1
    static const uint8_t nRF24_ADDR_Rx[] = { 0xE7, 0x1C, 0xE4 };
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR_Rx); // program address for RX pipe #1
 80017aa:	4942      	ldr	r1, [pc, #264]	@ (80018b4 <runRadio+0x180>)
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff fb75 	bl	8000e9c <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 5); // Auto-ACK: disabled, payload length: 5 bytes
 80017b2:	2205      	movs	r2, #5
 80017b4:	2100      	movs	r1, #0
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7ff fbf0 	bl	8000f9c <nRF24_SetRXPipe>

    // Configure TX PIPE
    static const uint8_t nRF24_ADDR_Tx[] = { 0xE7, 0x1C, 0xE3 };
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR_Tx); // program TX address
 80017bc:	493e      	ldr	r1, [pc, #248]	@ (80018b8 <runRadio+0x184>)
 80017be:	2006      	movs	r0, #6
 80017c0:	f7ff fb6c 	bl	8000e9c <nRF24_SetAddr>

    // Set TX power (maximum)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 80017c4:	2006      	movs	r0, #6
 80017c6:	f7ff fbb3 	bl	8000f30 <nRF24_SetTXPower>

    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fb05 	bl	8000dda <nRF24_SetOperationalMode>

    // Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f7ff fae3 	bl	8000d9c <nRF24_SetPowerMode>

    // Put the transceiver to the RX mode
    nRF24_CE_H();
 80017d6:	f7ff fd1d 	bl	8001214 <nRF24_CE_H>

    uint8_t BP_released = 1;
 80017da:	2301      	movs	r3, #1
 80017dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    	//
    	// This is far from best solution, but it's ok for testing purposes
    	// More smart way is to use the IRQ pin :)
    	//

    	sendCommande();
 80017e0:	f7ff ff32 	bl	8001648 <sendCommande>


    	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 80017e4:	f7ff fc5d 	bl	80010a2 <nRF24_GetStatus_RXFIFO>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d020      	beq.n	8001830 <runRadio+0xfc>
    	{
    		// Get a payload from the transceiver
    		pipe = nRF24_ReadPayload(nRF24_payload, &payload_length);
 80017ee:	4933      	ldr	r1, [pc, #204]	@ (80018bc <runRadio+0x188>)
 80017f0:	4833      	ldr	r0, [pc, #204]	@ (80018c0 <runRadio+0x18c>)
 80017f2:	f7ff fcf3 	bl	80011dc <nRF24_ReadPayload>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b32      	ldr	r3, [pc, #200]	@ (80018c4 <runRadio+0x190>)
 80017fc:	701a      	strb	r2, [r3, #0]

    		// Clear all pending IRQ flags
			nRF24_ClearIRQFlags();
 80017fe:	f7ff fc6b 	bl	80010d8 <nRF24_ClearIRQFlags>

			// Print a payload contents to UART
			UART_SendStr("RCV PIPE#");
 8001802:	4831      	ldr	r0, [pc, #196]	@ (80018c8 <runRadio+0x194>)
 8001804:	f7ff fd20 	bl	8001248 <UART_SendStr>
			UART_SendInt(pipe);
 8001808:	4b2e      	ldr	r3, [pc, #184]	@ (80018c4 <runRadio+0x190>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fd7f 	bl	8001310 <UART_SendInt>
			UART_SendStr(" PAYLOAD:>");
 8001812:	482e      	ldr	r0, [pc, #184]	@ (80018cc <runRadio+0x198>)
 8001814:	f7ff fd18 	bl	8001248 <UART_SendStr>
			UART_SendBufHex((char *)nRF24_payload, payload_length);
 8001818:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <runRadio+0x188>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	4828      	ldr	r0, [pc, #160]	@ (80018c0 <runRadio+0x18c>)
 8001820:	f7ff fd2a 	bl	8001278 <UART_SendBufHex>
			UART_SendStr("<\r\n");
 8001824:	482a      	ldr	r0, [pc, #168]	@ (80018d0 <runRadio+0x19c>)
 8001826:	f7ff fd0f 	bl	8001248 <UART_SendStr>
			// send back the payload
//			HAL_Delay(100);
			osDelay(2);
 800182a:	2002      	movs	r0, #2
 800182c:	f008 fb46 	bl	8009ebc <osDelay>
//			uint8_t message[32] = {0xaa,0x44,0x11,0x22,0x55};
//			send_payload(message, 5);
//			send_payload(nRF24_payload, payload_length);
    	}
    	if(!HAL_GPIO_ReadPin(BP_GPIO_Port, BP_Pin)&& BP_released)
 8001830:	2101      	movs	r1, #1
 8001832:	4828      	ldr	r0, [pc, #160]	@ (80018d4 <runRadio+0x1a0>)
 8001834:	f001 fe38 	bl	80034a8 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11f      	bne.n	800187e <runRadio+0x14a>
 800183e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001842:	2b00      	cmp	r3, #0
 8001844:	d01b      	beq.n	800187e <runRadio+0x14a>
    	{
    		BP_released = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    		uint8_t payload[32] = {0x01,0x23,0x45,0x67,0x89};
 800184c:	4a22      	ldr	r2, [pc, #136]	@ (80018d8 <runRadio+0x1a4>)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001854:	6018      	str	r0, [r3, #0]
 8001856:	3304      	adds	r3, #4
 8001858:	8019      	strh	r1, [r3, #0]
 800185a:	f107 030a 	add.w	r3, r7, #10
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	831a      	strh	r2, [r3, #24]
//        		payload[i] = j++;
//        		if (j > 0x000000FF) j = 0;
//        	}


    		send_payload(payload, 5);
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2105      	movs	r1, #5
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fde6 	bl	8001444 <send_payload>
    		osDelay(10);
 8001878:	200a      	movs	r0, #10
 800187a:	f008 fb1f 	bl	8009ebc <osDelay>
    	}
    	if(HAL_GPIO_ReadPin(BP_GPIO_Port, BP_Pin) && !BP_released)
 800187e:	2101      	movs	r1, #1
 8001880:	4814      	ldr	r0, [pc, #80]	@ (80018d4 <runRadio+0x1a0>)
 8001882:	f001 fe11 	bl	80034a8 <HAL_GPIO_ReadPin>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0a9      	beq.n	80017e0 <runRadio+0xac>
 800188c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1a5      	bne.n	80017e0 <runRadio+0xac>
    	{

    		BP_released = 1;
 8001894:	2301      	movs	r3, #1
 8001896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    		osDelay(10);
 800189a:	200a      	movs	r0, #10
 800189c:	f008 fb0e 	bl	8009ebc <osDelay>
    	sendCommande();
 80018a0:	e79e      	b.n	80017e0 <runRadio+0xac>
 80018a2:	bf00      	nop
 80018a4:	0800d518 	.word	0x0800d518
 80018a8:	0800d538 	.word	0x0800d538
 80018ac:	0800d54c 	.word	0x0800d54c
 80018b0:	0800d554 	.word	0x0800d554
 80018b4:	0800d698 	.word	0x0800d698
 80018b8:	0800d69c 	.word	0x0800d69c
 80018bc:	2000035d 	.word	0x2000035d
 80018c0:	2000033c 	.word	0x2000033c
 80018c4:	2000035c 	.word	0x2000035c
 80018c8:	0800d55c 	.word	0x0800d55c
 80018cc:	0800d568 	.word	0x0800d568
 80018d0:	0800d574 	.word	0x0800d574
 80018d4:	40020000 	.word	0x40020000
 80018d8:	0800d578 	.word	0x0800d578

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_MspInit+0x54>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	4a11      	ldr	r2, [pc, #68]	@ (8001930 <HAL_MspInit+0x54>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_MspInit+0x54>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_MspInit+0x54>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <HAL_MspInit+0x54>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800190c:	6413      	str	r3, [r2, #64]	@ 0x40
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <HAL_MspInit+0x54>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	210f      	movs	r1, #15
 800191e:	f06f 0001 	mvn.w	r0, #1
 8001922:	f001 f8a3 	bl	8002a6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	@ 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a33      	ldr	r2, [pc, #204]	@ (8001a20 <HAL_ADC_MspInit+0xec>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d160      	bne.n	8001a18 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b32      	ldr	r3, [pc, #200]	@ (8001a24 <HAL_ADC_MspInit+0xf0>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	4a31      	ldr	r2, [pc, #196]	@ (8001a24 <HAL_ADC_MspInit+0xf0>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001964:	6453      	str	r3, [r2, #68]	@ 0x44
 8001966:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <HAL_ADC_MspInit+0xf0>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <HAL_ADC_MspInit+0xf0>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a2a      	ldr	r2, [pc, #168]	@ (8001a24 <HAL_ADC_MspInit+0xf0>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b28      	ldr	r3, [pc, #160]	@ (8001a24 <HAL_ADC_MspInit+0xf0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_SPAR_Pin|ADC1_SLIDE_Pin|ADC1_JOY_X_Pin|ADC1_JOY_Y_Pin
 800198e:	237e      	movs	r3, #126	@ 0x7e
 8001990:	617b      	str	r3, [r7, #20]
                          |ADC1_POT_A_Pin|ADC1_POT_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001992:	2303      	movs	r3, #3
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4821      	ldr	r0, [pc, #132]	@ (8001a28 <HAL_ADC_MspInit+0xf4>)
 80019a2:	f001 fbfd 	bl	80031a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019a6:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019a8:	4a21      	ldr	r2, [pc, #132]	@ (8001a30 <HAL_ADC_MspInit+0xfc>)
 80019aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019c6:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019ce:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019ec:	480f      	ldr	r0, [pc, #60]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 80019ee:	f001 f867 	bl	8002ac0 <HAL_DMA_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80019f8:	f7ff f885 	bl	8000b06 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 8001a00:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a02:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <HAL_ADC_MspInit+0xf8>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2105      	movs	r1, #5
 8001a0c:	2012      	movs	r0, #18
 8001a0e:	f001 f82d 	bl	8002a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a12:	2012      	movs	r0, #18
 8001a14:	f001 f846 	bl	8002aa4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a18:	bf00      	nop
 8001a1a:	3728      	adds	r7, #40	@ 0x28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40012000 	.word	0x40012000
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	200001b4 	.word	0x200001b4
 8001a30:	40026410 	.word	0x40026410

08001a34 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	@ 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a19      	ldr	r2, [pc, #100]	@ (8001ab8 <HAL_I2C_MspInit+0x84>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d12c      	bne.n	8001ab0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a17      	ldr	r2, [pc, #92]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a78:	2312      	movs	r3, #18
 8001a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a84:	2304      	movs	r3, #4
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <HAL_I2C_MspInit+0x8c>)
 8001a90:	f001 fb86 	bl	80031a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001a9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <HAL_I2C_MspInit+0x88>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	@ 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40005400 	.word	0x40005400
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	@ (8001b48 <HAL_SPI_MspInit+0x84>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12b      	bne.n	8001b3e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b1e:	2338      	movs	r3, #56	@ 0x38
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <HAL_SPI_MspInit+0x8c>)
 8001b3a:	f001 fb31 	bl	80031a0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	@ 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40013000 	.word	0x40013000
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020400 	.word	0x40020400

08001b54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a19      	ldr	r2, [pc, #100]	@ (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12c      	bne.n	8001bd0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	4a17      	ldr	r2, [pc, #92]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001b80:	f043 0310 	orr.w	r3, r3, #16
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a10      	ldr	r2, [pc, #64]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4805      	ldr	r0, [pc, #20]	@ (8001be0 <HAL_UART_MspInit+0x8c>)
 8001bcc:	f001 fae8 	bl	80031a0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	@ 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000

08001be4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	@ 0x38
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <HAL_InitTick+0xe8>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	4a33      	ldr	r2, [pc, #204]	@ (8001ccc <HAL_InitTick+0xe8>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c04:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <HAL_InitTick+0xe8>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c10:	f107 0210 	add.w	r2, r7, #16
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fc7e 	bl	800551c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c2a:	f003 fc4f 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 8001c2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c30:	e004      	b.n	8001c3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c32:	f003 fc4b 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 8001c36:	4603      	mov	r3, r0
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c3e:	4a24      	ldr	r2, [pc, #144]	@ (8001cd0 <HAL_InitTick+0xec>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	0c9b      	lsrs	r3, r3, #18
 8001c46:	3b01      	subs	r3, #1
 8001c48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c4a:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <HAL_InitTick+0xf0>)
 8001c4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c50:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <HAL_InitTick+0xf0>)
 8001c54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c58:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd4 <HAL_InitTick+0xf0>)
 8001c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c60:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <HAL_InitTick+0xf0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <HAL_InitTick+0xf0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <HAL_InitTick+0xf0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001c72:	4818      	ldr	r0, [pc, #96]	@ (8001cd4 <HAL_InitTick+0xf0>)
 8001c74:	f003 ff92 	bl	8005b9c <HAL_TIM_Base_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d11b      	bne.n	8001cbe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001c86:	4813      	ldr	r0, [pc, #76]	@ (8001cd4 <HAL_InitTick+0xf0>)
 8001c88:	f003 ffe2 	bl	8005c50 <HAL_TIM_Base_Start_IT>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d111      	bne.n	8001cbe <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c9a:	201c      	movs	r0, #28
 8001c9c:	f000 ff02 	bl	8002aa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	d808      	bhi.n	8001cb8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	201c      	movs	r0, #28
 8001cac:	f000 fede 	bl	8002a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cb0:	4a09      	ldr	r2, [pc, #36]	@ (8001cd8 <HAL_InitTick+0xf4>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e002      	b.n	8001cbe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3738      	adds	r7, #56	@ 0x38
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	431bde83 	.word	0x431bde83
 8001cd4:	20000360 	.word	0x20000360
 8001cd8:	20000004 	.word	0x20000004

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <ADC_IRQHandler+0x10>)
 8001d1a:	f000 f908 	bl	8001f2e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000016c 	.word	0x2000016c

08001d28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <TIM2_IRQHandler+0x10>)
 8001d2e:	f003 fff1 	bl	8005d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000360 	.word	0x20000360

08001d3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <DMA2_Stream0_IRQHandler+0x10>)
 8001d42:	f000 ffc3 	bl	8002ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200001b4 	.word	0x200001b4

08001d50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <OTG_FS_IRQHandler+0x10>)
 8001d56:	f001 fe7b 	bl	8003a50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20006274 	.word	0x20006274

08001d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d8c:	f7ff ffea 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d92:	490d      	ldr	r1, [pc, #52]	@ (8001dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d94:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001da8:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db6:	f00b facd 	bl	800d354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dba:	f7fe fba7 	bl	800050c <main>
  bx  lr    
 8001dbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001dcc:	0800d6d0 	.word	0x0800d6d0
  ldr r2, =_sbss
 8001dd0:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001dd4:	20006ab8 	.word	0x20006ab8

08001dd8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <DMA1_Stream0_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <HAL_Init+0x40>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_Init+0x40>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HAL_Init+0x40>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 fe26 	bl	8002a56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	200f      	movs	r0, #15
 8001e0c:	f7ff feea 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fd64 	bl	80018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	@ (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008
 8001e44:	200003a8 	.word	0x200003a8

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	@ (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	200003a8 	.word	0x200003a8

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_Delay+0x44>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e033      	b.n	8001f26 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fd34 	bl	8001934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eee:	f023 0302 	bic.w	r3, r3, #2
 8001ef2:	f043 0202 	orr.w	r2, r3, #2
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fb76 	bl	80025ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f023 0303 	bic.w	r3, r3, #3
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f16:	e001      	b.n	8001f1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d049      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0xca>
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d046      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d12b      	bne.n	8001fe8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d127      	bne.n	8001fe8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d119      	bne.n	8001fe8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0220 	bic.w	r2, r2, #32
 8001fc2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f9a5 	bl	8002338 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0212 	mvn.w	r2, #18
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002006:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d057      	beq.n	80020be <HAL_ADC_IRQHandler+0x190>
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d054      	beq.n	80020be <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d139      	bne.n	80020ae <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002040:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002052:	2b00      	cmp	r3, #0
 8002054:	d12b      	bne.n	80020ae <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002060:	2b00      	cmp	r3, #0
 8002062:	d124      	bne.n	80020ae <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11d      	bne.n	80020ae <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002076:	2b00      	cmp	r3, #0
 8002078:	d119      	bne.n	80020ae <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002088:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fc1a 	bl	80028e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 020c 	mvn.w	r2, #12
 80020bc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020cc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d017      	beq.n	8002104 <HAL_ADC_IRQHandler+0x1d6>
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d014      	beq.n	8002104 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d10d      	bne.n	8002104 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f933 	bl	8002360 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f06f 0201 	mvn.w	r2, #1
 8002102:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002112:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d015      	beq.n	8002146 <HAL_ADC_IRQHandler+0x218>
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d012      	beq.n	8002146 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002124:	f043 0202 	orr.w	r2, r3, #2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0220 	mvn.w	r2, #32
 8002134:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f91c 	bl	8002374 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0220 	mvn.w	r2, #32
 8002144:	601a      	str	r2, [r3, #0]
  }
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_ADC_Start_DMA+0x22>
 800216e:	2302      	movs	r3, #2
 8002170:	e0d0      	b.n	8002314 <HAL_ADC_Start_DMA+0x1c4>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d018      	beq.n	80021ba <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002198:	4b60      	ldr	r3, [pc, #384]	@ (800231c <HAL_ADC_Start_DMA+0x1cc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a60      	ldr	r2, [pc, #384]	@ (8002320 <HAL_ADC_Start_DMA+0x1d0>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0c9a      	lsrs	r2, r3, #18
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80021ac:	e002      	b.n	80021b4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f9      	bne.n	80021ae <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021c8:	d107      	bne.n	80021da <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021d8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	f040 8088 	bne.w	80022fa <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002214:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002228:	d106      	bne.n	8002238 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	f023 0206 	bic.w	r2, r3, #6
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	645a      	str	r2, [r3, #68]	@ 0x44
 8002236:	e002      	b.n	800223e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002246:	4b37      	ldr	r3, [pc, #220]	@ (8002324 <HAL_ADC_Start_DMA+0x1d4>)
 8002248:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224e:	4a36      	ldr	r2, [pc, #216]	@ (8002328 <HAL_ADC_Start_DMA+0x1d8>)
 8002250:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002256:	4a35      	ldr	r2, [pc, #212]	@ (800232c <HAL_ADC_Start_DMA+0x1dc>)
 8002258:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225e:	4a34      	ldr	r2, [pc, #208]	@ (8002330 <HAL_ADC_Start_DMA+0x1e0>)
 8002260:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800226a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800227a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800228a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	334c      	adds	r3, #76	@ 0x4c
 8002296:	4619      	mov	r1, r3
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f000 fcbe 	bl	8002c1c <HAL_DMA_Start_IT>
 80022a0:	4603      	mov	r3, r0
 80022a2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10f      	bne.n	80022d0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d129      	bne.n	8002312 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	e020      	b.n	8002312 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <HAL_ADC_Start_DMA+0x1e4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d11b      	bne.n	8002312 <HAL_ADC_Start_DMA+0x1c2>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d114      	bne.n	8002312 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	e00b      	b.n	8002312 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002312:	7ffb      	ldrb	r3, [r7, #31]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000000 	.word	0x20000000
 8002320:	431bde83 	.word	0x431bde83
 8002324:	40012300 	.word	0x40012300
 8002328:	080027e5 	.word	0x080027e5
 800232c:	0800289f 	.word	0x0800289f
 8002330:	080028bb 	.word	0x080028bb
 8002334:	40012000 	.word	0x40012000

08002338 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1c>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e113      	b.n	80025cc <HAL_ADC_ConfigChannel+0x244>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b09      	cmp	r3, #9
 80023b2:	d925      	bls.n	8002400 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68d9      	ldr	r1, [r3, #12]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1e      	subs	r3, #30
 80023ca:	2207      	movs	r2, #7
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43da      	mvns	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	400a      	ands	r2, r1
 80023d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68d9      	ldr	r1, [r3, #12]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	4603      	mov	r3, r0
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4403      	add	r3, r0
 80023f2:	3b1e      	subs	r3, #30
 80023f4:	409a      	lsls	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	e022      	b.n	8002446 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6919      	ldr	r1, [r3, #16]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	2207      	movs	r2, #7
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	4603      	mov	r3, r0
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4403      	add	r3, r0
 800243c:	409a      	lsls	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b06      	cmp	r3, #6
 800244c:	d824      	bhi.n	8002498 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b05      	subs	r3, #5
 8002460:	221f      	movs	r2, #31
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	400a      	ands	r2, r1
 800246e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b05      	subs	r3, #5
 800248a:	fa00 f203 	lsl.w	r2, r0, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	635a      	str	r2, [r3, #52]	@ 0x34
 8002496:	e04c      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	d824      	bhi.n	80024ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b23      	subs	r3, #35	@ 0x23
 80024b2:	221f      	movs	r2, #31
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43da      	mvns	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	400a      	ands	r2, r1
 80024c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	3b23      	subs	r3, #35	@ 0x23
 80024dc:	fa00 f203 	lsl.w	r2, r0, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024e8:	e023      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b41      	subs	r3, #65	@ 0x41
 80024fc:	221f      	movs	r2, #31
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	400a      	ands	r2, r1
 800250a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	3b41      	subs	r3, #65	@ 0x41
 8002526:	fa00 f203 	lsl.w	r2, r0, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <HAL_ADC_ConfigChannel+0x250>)
 8002534:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a28      	ldr	r2, [pc, #160]	@ (80025dc <HAL_ADC_ConfigChannel+0x254>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d10f      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1d8>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d10b      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <HAL_ADC_ConfigChannel+0x254>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d12b      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x23a>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1c      	ldr	r2, [pc, #112]	@ (80025e0 <HAL_ADC_ConfigChannel+0x258>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d003      	beq.n	800257c <HAL_ADC_ConfigChannel+0x1f4>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b11      	cmp	r3, #17
 800257a:	d122      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <HAL_ADC_ConfigChannel+0x258>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d111      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800259e:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <HAL_ADC_ConfigChannel+0x25c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_ADC_ConfigChannel+0x260>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	0c9a      	lsrs	r2, r3, #18
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025b4:	e002      	b.n	80025bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f9      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40012300 	.word	0x40012300
 80025dc:	40012000 	.word	0x40012000
 80025e0:	10000012 	.word	0x10000012
 80025e4:	20000000 	.word	0x20000000
 80025e8:	431bde83 	.word	0x431bde83

080025ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f4:	4b79      	ldr	r3, [pc, #484]	@ (80027dc <ADC_Init+0x1f0>)
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	021a      	lsls	r2, r3, #8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267e:	4a58      	ldr	r2, [pc, #352]	@ (80027e0 <ADC_Init+0x1f4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002692:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6899      	ldr	r1, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	e00f      	b.n	80026ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0202 	bic.w	r2, r2, #2
 80026f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7e1b      	ldrb	r3, [r3, #24]
 8002704:	005a      	lsls	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01b      	beq.n	8002750 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002726:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002736:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	3b01      	subs	r3, #1
 8002744:	035a      	lsls	r2, r3, #13
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	e007      	b.n	8002760 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800276e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	3b01      	subs	r3, #1
 800277c:	051a      	lsls	r2, r3, #20
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6899      	ldr	r1, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027a2:	025a      	lsls	r2, r3, #9
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	029a      	lsls	r2, r3, #10
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40012300 	.word	0x40012300
 80027e0:	0f000001 	.word	0x0f000001

080027e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d13c      	bne.n	8002878 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d12b      	bne.n	8002870 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800281c:	2b00      	cmp	r3, #0
 800281e:	d127      	bne.n	8002870 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002826:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002838:	2b00      	cmp	r3, #0
 800283a:	d119      	bne.n	8002870 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0220 	bic.w	r2, r2, #32
 800284a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7ff fd61 	bl	8002338 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002876:	e00e      	b.n	8002896 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff fd75 	bl	8002374 <HAL_ADC_ErrorCallback>
}
 800288a:	e004      	b.n	8002896 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028aa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff fd4d 	bl	800234c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2240      	movs	r2, #64	@ 0x40
 80028cc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	f043 0204 	orr.w	r2, r3, #4
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff fd4a 	bl	8002374 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002918:	4013      	ands	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800292c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292e:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60d3      	str	r3, [r2, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002948:	4b04      	ldr	r3, [pc, #16]	@ (800295c <__NVIC_GetPriorityGrouping+0x18>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	f003 0307 	and.w	r3, r3, #7
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	db0b      	blt.n	800298a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	4907      	ldr	r1, [pc, #28]	@ (8002998 <__NVIC_EnableIRQ+0x38>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2001      	movs	r0, #1
 8002982:	fa00 f202 	lsl.w	r2, r0, r2
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000e100 	.word	0xe000e100

0800299c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	6039      	str	r1, [r7, #0]
 80029a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	db0a      	blt.n	80029c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	490c      	ldr	r1, [pc, #48]	@ (80029e8 <__NVIC_SetPriority+0x4c>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	440b      	add	r3, r1
 80029c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c4:	e00a      	b.n	80029dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4908      	ldr	r1, [pc, #32]	@ (80029ec <__NVIC_SetPriority+0x50>)
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	3b04      	subs	r3, #4
 80029d4:	0112      	lsls	r2, r2, #4
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	440b      	add	r3, r1
 80029da:	761a      	strb	r2, [r3, #24]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000e100 	.word	0xe000e100
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	@ 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f1c3 0307 	rsb	r3, r3, #7
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	bf28      	it	cs
 8002a0e:	2304      	movcs	r3, #4
 8002a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d902      	bls.n	8002a20 <NVIC_EncodePriority+0x30>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3b03      	subs	r3, #3
 8002a1e:	e000      	b.n	8002a22 <NVIC_EncodePriority+0x32>
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	401a      	ands	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a38:	f04f 31ff 	mov.w	r1, #4294967295
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43d9      	mvns	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	4313      	orrs	r3, r2
         );
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3724      	adds	r7, #36	@ 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ff4c 	bl	80028fc <__NVIC_SetPriorityGrouping>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a7e:	f7ff ff61 	bl	8002944 <__NVIC_GetPriorityGrouping>
 8002a82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	6978      	ldr	r0, [r7, #20]
 8002a8a:	f7ff ffb1 	bl	80029f0 <NVIC_EncodePriority>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ff80 	bl	800299c <__NVIC_SetPriority>
}
 8002a9c:	bf00      	nop
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ff54 	bl	8002960 <__NVIC_EnableIRQ>
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff f9bc 	bl	8001e48 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e099      	b.n	8002c10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002afc:	e00f      	b.n	8002b1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002afe:	f7ff f9a3 	bl	8001e48 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d908      	bls.n	8002b1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2203      	movs	r2, #3
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e078      	b.n	8002c10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e8      	bne.n	8002afe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4b38      	ldr	r3, [pc, #224]	@ (8002c18 <HAL_DMA_Init+0x158>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d107      	bne.n	8002b88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	4313      	orrs	r3, r2
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f023 0307 	bic.w	r3, r3, #7
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d117      	bne.n	8002be2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fa6f 	bl	80030a8 <DMA_CheckFifoParam>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2240      	movs	r2, #64	@ 0x40
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bde:	2301      	movs	r3, #1
 8002be0:	e016      	b.n	8002c10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa26 	bl	800303c <DMA_CalcBaseAndBitshift>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf8:	223f      	movs	r2, #63	@ 0x3f
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	f010803f 	.word	0xf010803f

08002c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_DMA_Start_IT+0x26>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e040      	b.n	8002cc4 <HAL_DMA_Start_IT+0xa8>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d12f      	bne.n	8002cb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f9b8 	bl	8002fe0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	223f      	movs	r2, #63	@ 0x3f
 8002c76:	409a      	lsls	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0216 	orr.w	r2, r2, #22
 8002c8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e005      	b.n	8002cc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cd8:	4b8e      	ldr	r3, [pc, #568]	@ (8002f14 <HAL_DMA_IRQHandler+0x248>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a8e      	ldr	r2, [pc, #568]	@ (8002f18 <HAL_DMA_IRQHandler+0x24c>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0a9b      	lsrs	r3, r3, #10
 8002ce4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01a      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0204 	bic.w	r2, r2, #4
 8002d1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d24:	2208      	movs	r2, #8
 8002d26:	409a      	lsls	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d012      	beq.n	8002d6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d66:	f043 0202 	orr.w	r2, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d72:	2204      	movs	r2, #4
 8002d74:	409a      	lsls	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d012      	beq.n	8002da4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d90:	2204      	movs	r2, #4
 8002d92:	409a      	lsls	r2, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	f043 0204 	orr.w	r2, r3, #4
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da8:	2210      	movs	r2, #16
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d043      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d03c      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d018      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d108      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d024      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
 8002dfa:	e01f      	b.n	8002e3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01b      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
 8002e0c:	e016      	b.n	8002e3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0208 	bic.w	r2, r2, #8
 8002e2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e40:	2220      	movs	r2, #32
 8002e42:	409a      	lsls	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 808f 	beq.w	8002f6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8087 	beq.w	8002f6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e62:	2220      	movs	r2, #32
 8002e64:	409a      	lsls	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	d136      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0216 	bic.w	r2, r2, #22
 8002e84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d103      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0x1da>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0208 	bic.w	r2, r2, #8
 8002eb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	223f      	movs	r2, #63	@ 0x3f
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d07e      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
        }
        return;
 8002ee2:	e079      	b.n	8002fd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01d      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d031      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
 8002f10:	e02c      	b.n	8002f6c <HAL_DMA_IRQHandler+0x2a0>
 8002f12:	bf00      	nop
 8002f14:	20000000 	.word	0x20000000
 8002f18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d023      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
 8002f2c:	e01e      	b.n	8002f6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10f      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0210 	bic.w	r2, r2, #16
 8002f4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d032      	beq.n	8002fda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d022      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2205      	movs	r2, #5
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d307      	bcc.n	8002fb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f2      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x2cc>
 8002fb2:	e000      	b.n	8002fb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4798      	blx	r3
 8002fd6:	e000      	b.n	8002fda <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fd8:	bf00      	nop
    }
  }
}
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ffc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b40      	cmp	r3, #64	@ 0x40
 800300c:	d108      	bne.n	8003020 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800301e:	e007      	b.n	8003030 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	3b10      	subs	r3, #16
 800304c:	4a14      	ldr	r2, [pc, #80]	@ (80030a0 <DMA_CalcBaseAndBitshift+0x64>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003056:	4a13      	ldr	r2, [pc, #76]	@ (80030a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d909      	bls.n	800307e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	1d1a      	adds	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	659a      	str	r2, [r3, #88]	@ 0x58
 800307c:	e007      	b.n	800308e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	aaaaaaab 	.word	0xaaaaaaab
 80030a4:	0800d6b8 	.word	0x0800d6b8

080030a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d11f      	bne.n	8003102 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d856      	bhi.n	8003176 <DMA_CheckFifoParam+0xce>
 80030c8:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <DMA_CheckFifoParam+0x28>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030f3 	.word	0x080030f3
 80030d8:	080030e1 	.word	0x080030e1
 80030dc:	08003177 	.word	0x08003177
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d046      	beq.n	800317a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f0:	e043      	b.n	800317a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030fa:	d140      	bne.n	800317e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003100:	e03d      	b.n	800317e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800310a:	d121      	bne.n	8003150 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d837      	bhi.n	8003182 <DMA_CheckFifoParam+0xda>
 8003112:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <DMA_CheckFifoParam+0x70>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	08003129 	.word	0x08003129
 800311c:	0800312f 	.word	0x0800312f
 8003120:	08003129 	.word	0x08003129
 8003124:	08003141 	.word	0x08003141
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e030      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003132:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d025      	beq.n	8003186 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313e:	e022      	b.n	8003186 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003148:	d11f      	bne.n	800318a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800314e:	e01c      	b.n	800318a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d903      	bls.n	800315e <DMA_CheckFifoParam+0xb6>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d003      	beq.n	8003164 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800315c:	e018      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
      break;
 8003162:	e015      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00e      	beq.n	800318e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
      break;
 8003174:	e00b      	b.n	800318e <DMA_CheckFifoParam+0xe6>
      break;
 8003176:	bf00      	nop
 8003178:	e00a      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;
 800317a:	bf00      	nop
 800317c:	e008      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;
 800317e:	bf00      	nop
 8003180:	e006      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e004      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;   
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <DMA_CheckFifoParam+0xe8>
      break;
 800318e:	bf00      	nop
    }
  } 
  
  return status; 
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop

080031a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	@ 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	e159      	b.n	8003470 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f040 8148 	bne.w	800346a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d005      	beq.n	80031f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d130      	bne.n	8003254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 0201 	and.w	r2, r3, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b03      	cmp	r3, #3
 800325e:	d017      	beq.n	8003290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d123      	bne.n	80032e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	08da      	lsrs	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3208      	adds	r2, #8
 80032a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	08da      	lsrs	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3208      	adds	r2, #8
 80032de:	69b9      	ldr	r1, [r7, #24]
 80032e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80a2 	beq.w	800346a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4b57      	ldr	r3, [pc, #348]	@ (8003488 <HAL_GPIO_Init+0x2e8>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	4a56      	ldr	r2, [pc, #344]	@ (8003488 <HAL_GPIO_Init+0x2e8>)
 8003330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003334:	6453      	str	r3, [r2, #68]	@ 0x44
 8003336:	4b54      	ldr	r3, [pc, #336]	@ (8003488 <HAL_GPIO_Init+0x2e8>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003342:	4a52      	ldr	r2, [pc, #328]	@ (800348c <HAL_GPIO_Init+0x2ec>)
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	3302      	adds	r3, #2
 800334a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	220f      	movs	r2, #15
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a49      	ldr	r2, [pc, #292]	@ (8003490 <HAL_GPIO_Init+0x2f0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d019      	beq.n	80033a2 <HAL_GPIO_Init+0x202>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a48      	ldr	r2, [pc, #288]	@ (8003494 <HAL_GPIO_Init+0x2f4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_GPIO_Init+0x1fe>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a47      	ldr	r2, [pc, #284]	@ (8003498 <HAL_GPIO_Init+0x2f8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00d      	beq.n	800339a <HAL_GPIO_Init+0x1fa>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a46      	ldr	r2, [pc, #280]	@ (800349c <HAL_GPIO_Init+0x2fc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d007      	beq.n	8003396 <HAL_GPIO_Init+0x1f6>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a45      	ldr	r2, [pc, #276]	@ (80034a0 <HAL_GPIO_Init+0x300>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_GPIO_Init+0x1f2>
 800338e:	2304      	movs	r3, #4
 8003390:	e008      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 8003392:	2307      	movs	r3, #7
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 8003396:	2303      	movs	r3, #3
 8003398:	e004      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 800339a:	2302      	movs	r3, #2
 800339c:	e002      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 80033a2:	2300      	movs	r3, #0
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	f002 0203 	and.w	r2, r2, #3
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	4093      	lsls	r3, r2
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033b4:	4935      	ldr	r1, [pc, #212]	@ (800348c <HAL_GPIO_Init+0x2ec>)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	3302      	adds	r3, #2
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033c2:	4b38      	ldr	r3, [pc, #224]	@ (80034a4 <HAL_GPIO_Init+0x304>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033e6:	4a2f      	ldr	r2, [pc, #188]	@ (80034a4 <HAL_GPIO_Init+0x304>)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ec:	4b2d      	ldr	r3, [pc, #180]	@ (80034a4 <HAL_GPIO_Init+0x304>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003410:	4a24      	ldr	r2, [pc, #144]	@ (80034a4 <HAL_GPIO_Init+0x304>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003416:	4b23      	ldr	r3, [pc, #140]	@ (80034a4 <HAL_GPIO_Init+0x304>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343a:	4a1a      	ldr	r2, [pc, #104]	@ (80034a4 <HAL_GPIO_Init+0x304>)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003440:	4b18      	ldr	r3, [pc, #96]	@ (80034a4 <HAL_GPIO_Init+0x304>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003464:	4a0f      	ldr	r2, [pc, #60]	@ (80034a4 <HAL_GPIO_Init+0x304>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3301      	adds	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b0f      	cmp	r3, #15
 8003474:	f67f aea2 	bls.w	80031bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3724      	adds	r7, #36	@ 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	40013800 	.word	0x40013800
 8003490:	40020000 	.word	0x40020000
 8003494:	40020400 	.word	0x40020400
 8003498:	40020800 	.word	0x40020800
 800349c:	40020c00 	.word	0x40020c00
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e001      	b.n	80034ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
 80034e4:	4613      	mov	r3, r2
 80034e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e8:	787b      	ldrb	r3, [r7, #1]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034f4:	e003      	b.n	80034fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	041a      	lsls	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	619a      	str	r2, [r3, #24]
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800351c:	887a      	ldrh	r2, [r7, #2]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4013      	ands	r3, r2
 8003522:	041a      	lsls	r2, r3, #16
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43d9      	mvns	r1, r3
 8003528:	887b      	ldrh	r3, [r7, #2]
 800352a:	400b      	ands	r3, r1
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	619a      	str	r2, [r3, #24]
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e12b      	b.n	80037aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe fa64 	bl	8001a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	@ 0x24
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a4:	f001 ff92 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 80035a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4a81      	ldr	r2, [pc, #516]	@ (80037b4 <HAL_I2C_Init+0x274>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d807      	bhi.n	80035c4 <HAL_I2C_Init+0x84>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a80      	ldr	r2, [pc, #512]	@ (80037b8 <HAL_I2C_Init+0x278>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e006      	b.n	80035d2 <HAL_I2C_Init+0x92>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a7d      	ldr	r2, [pc, #500]	@ (80037bc <HAL_I2C_Init+0x27c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bf94      	ite	ls
 80035cc:	2301      	movls	r3, #1
 80035ce:	2300      	movhi	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0e7      	b.n	80037aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a78      	ldr	r2, [pc, #480]	@ (80037c0 <HAL_I2C_Init+0x280>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0c9b      	lsrs	r3, r3, #18
 80035e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a6a      	ldr	r2, [pc, #424]	@ (80037b4 <HAL_I2C_Init+0x274>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d802      	bhi.n	8003614 <HAL_I2C_Init+0xd4>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3301      	adds	r3, #1
 8003612:	e009      	b.n	8003628 <HAL_I2C_Init+0xe8>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	4a69      	ldr	r2, [pc, #420]	@ (80037c4 <HAL_I2C_Init+0x284>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	3301      	adds	r3, #1
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800363a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	495c      	ldr	r1, [pc, #368]	@ (80037b4 <HAL_I2C_Init+0x274>)
 8003644:	428b      	cmp	r3, r1
 8003646:	d819      	bhi.n	800367c <HAL_I2C_Init+0x13c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e59      	subs	r1, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fbb1 f3f3 	udiv	r3, r1, r3
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800365c:	400b      	ands	r3, r1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_I2C_Init+0x138>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1e59      	subs	r1, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003676:	e051      	b.n	800371c <HAL_I2C_Init+0x1dc>
 8003678:	2304      	movs	r3, #4
 800367a:	e04f      	b.n	800371c <HAL_I2C_Init+0x1dc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <HAL_I2C_Init+0x168>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e58      	subs	r0, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e012      	b.n	80036ce <HAL_I2C_Init+0x18e>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	0099      	lsls	r1, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Init+0x196>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e022      	b.n	800371c <HAL_I2C_Init+0x1dc>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10e      	bne.n	80036fc <HAL_I2C_Init+0x1bc>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1e58      	subs	r0, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	440b      	add	r3, r1
 80036ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036fa:	e00f      	b.n	800371c <HAL_I2C_Init+0x1dc>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1e58      	subs	r0, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	0099      	lsls	r1, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	6809      	ldr	r1, [r1, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800374a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6911      	ldr	r1, [r2, #16]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	4311      	orrs	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	430b      	orrs	r3, r1
 800375e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	000186a0 	.word	0x000186a0
 80037b8:	001e847f 	.word	0x001e847f
 80037bc:	003d08ff 	.word	0x003d08ff
 80037c0:	431bde83 	.word	0x431bde83
 80037c4:	10624dd3 	.word	0x10624dd3

080037c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e101      	b.n	80039de <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f009 fa3d 	bl	800cc74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2203      	movs	r2, #3
 80037fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003808:	d102      	bne.n	8003810 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f003 f80a 	bl	800682e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7c1a      	ldrb	r2, [r3, #16]
 8003822:	f88d 2000 	strb.w	r2, [sp]
 8003826:	3304      	adds	r3, #4
 8003828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382a:	f002 fee9 	bl	8006600 <USB_CoreInit>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0ce      	b.n	80039de <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f003 f802 	bl	8006850 <USB_SetCurrentMode>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e0bf      	b.n	80039de <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
 8003862:	e04a      	b.n	80038fa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003864:	7bfa      	ldrb	r2, [r7, #15]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3315      	adds	r3, #21
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	3314      	adds	r3, #20
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	b298      	uxth	r0, r3
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	332e      	adds	r3, #46	@ 0x2e
 80038a0:	4602      	mov	r2, r0
 80038a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	3318      	adds	r3, #24
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	331c      	adds	r3, #28
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3320      	adds	r3, #32
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3324      	adds	r3, #36	@ 0x24
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	3301      	adds	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	791b      	ldrb	r3, [r3, #4]
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	429a      	cmp	r2, r3
 8003902:	d3af      	bcc.n	8003864 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	e044      	b.n	8003994 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	3301      	adds	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	791b      	ldrb	r3, [r3, #4]
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	429a      	cmp	r2, r3
 800399c:	d3b5      	bcc.n	800390a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	7c1a      	ldrb	r2, [r3, #16]
 80039a6:	f88d 2000 	strb.w	r2, [sp]
 80039aa:	3304      	adds	r3, #4
 80039ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ae:	f002 ff9b 	bl	80068e8 <USB_DevInit>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e00c      	b.n	80039de <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f003 ffe5 	bl	80079a6 <USB_DevDisconnect>

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_PCD_Start+0x1c>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e022      	b.n	8003a48 <HAL_PCD_Start+0x62>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d105      	bne.n	8003a2a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f002 feec 	bl	800680c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f003 ff93 	bl	8007964 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b08d      	sub	sp, #52	@ 0x34
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f004 f851 	bl	8007b0e <USB_GetMode>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 848c 	bne.w	800438c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f003 ffb5 	bl	80079e8 <USB_ReadInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8482 	beq.w	800438a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f003 ffa2 	bl	80079e8 <USB_ReadInterrupts>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d107      	bne.n	8003abe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f002 0202 	and.w	r2, r2, #2
 8003abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 ff90 	bl	80079e8 <USB_ReadInterrupts>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d161      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0210 	bic.w	r2, r2, #16
 8003ae0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f003 020f 	and.w	r2, r3, #15
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	3304      	adds	r3, #4
 8003b00:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b0c:	d124      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d035      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6a38      	ldr	r0, [r7, #32]
 8003b2e:	f003 fdc7 	bl	80076c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b3e:	441a      	add	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b50:	441a      	add	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	615a      	str	r2, [r3, #20]
 8003b56:	e016      	b.n	8003b86 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b5e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b62:	d110      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6a38      	ldr	r0, [r7, #32]
 8003b70:	f003 fda6 	bl	80076c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b80:	441a      	add	r2, r3
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0210 	orr.w	r2, r2, #16
 8003b94:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f003 ff24 	bl	80079e8 <USB_ReadInterrupts>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003baa:	f040 80a7 	bne.w	8003cfc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f003 ff29 	bl	8007a0e <USB_ReadDevAllOutEpInterrupt>
 8003bbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003bbe:	e099      	b.n	8003cf4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 808e 	beq.w	8003ce8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 ff4d 	bl	8007a76 <USB_ReadDevOutEPInterrupt>
 8003bdc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00c      	beq.n	8003c02 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fea3 	bl	8004948 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00c      	beq.n	8003c26 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 ff79 	bl	8004b18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2310      	movs	r3, #16
 8003c40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d030      	beq.n	8003cae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	2b80      	cmp	r3, #128	@ 0x80
 8003c56:	d109      	bne.n	8003c6c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	69fa      	ldr	r2, [r7, #28]
 8003c62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c6a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3304      	adds	r3, #4
 8003c80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	78db      	ldrb	r3, [r3, #3]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d108      	bne.n	8003c9c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f009 f8e8 	bl	800ce6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2302      	movs	r3, #2
 8003cac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2320      	movs	r3, #32
 8003cc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ce6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	3301      	adds	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f47f af62 	bne.w	8003bc0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f003 fe71 	bl	80079e8 <USB_ReadInterrupts>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d10:	f040 80db 	bne.w	8003eca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f003 fe92 	bl	8007a42 <USB_ReadDevAllInEpInterrupt>
 8003d1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003d24:	e0cd      	b.n	8003ec2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80c2 	beq.w	8003eb6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 feb8 	bl	8007ab2 <USB_ReadDevInEPInterrupt>
 8003d42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d057      	beq.n	8003dfe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	2201      	movs	r2, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69f9      	ldr	r1, [r7, #28]
 8003d6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d6e:	4013      	ands	r3, r2
 8003d70:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2301      	movs	r3, #1
 8003d82:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	799b      	ldrb	r3, [r3, #6]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d132      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3320      	adds	r3, #32
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4403      	add	r3, r0
 8003dac:	331c      	adds	r3, #28
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4419      	add	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db6:	4613      	mov	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4403      	add	r3, r0
 8003dc0:	3320      	adds	r3, #32
 8003dc2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d113      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x3a2>
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3324      	adds	r3, #36	@ 0x24
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d108      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dea:	461a      	mov	r2, r3
 8003dec:	2101      	movs	r1, #1
 8003dee:	f003 febf 	bl	8007b70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	4619      	mov	r1, r3
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f008 ffbc 	bl	800cd76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e14:	461a      	mov	r2, r3
 8003e16:	2308      	movs	r3, #8
 8003e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e30:	461a      	mov	r2, r3
 8003e32:	2310      	movs	r3, #16
 8003e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2340      	movs	r3, #64	@ 0x40
 8003e50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d023      	beq.n	8003ea4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e5e:	6a38      	ldr	r0, [r7, #32]
 8003e60:	f002 fea6 	bl	8006bb0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	3310      	adds	r3, #16
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	3304      	adds	r3, #4
 8003e76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	78db      	ldrb	r3, [r3, #3]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d108      	bne.n	8003e92 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2200      	movs	r2, #0
 8003e84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f008 ffff 	bl	800ce90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003eae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fcbd 	bl	8004830 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	3301      	adds	r3, #1
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f47f af2e 	bne.w	8003d26 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f003 fd8a 	bl	80079e8 <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ede:	d122      	bne.n	8003f26 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d108      	bne.n	8003f10 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f06:	2100      	movs	r1, #0
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fea3 	bl	8004c54 <HAL_PCDEx_LPM_Callback>
 8003f0e:	e002      	b.n	8003f16 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f008 ff9d 	bl	800ce50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f003 fd5c 	bl	80079e8 <USB_ReadInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f3a:	d112      	bne.n	8003f62 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d102      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f008 ff59 	bl	800ce04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f60:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f003 fd3e 	bl	80079e8 <USB_ReadInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f76:	f040 80b7 	bne.w	80040e8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2110      	movs	r1, #16
 8003f94:	4618      	mov	r0, r3
 8003f96:	f002 fe0b 	bl	8006bb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f9e:	e046      	b.n	800402e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fac:	461a      	mov	r2, r3
 8003fae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fb2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fe6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004002:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004006:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004022:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004026:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	3301      	adds	r3, #1
 800402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	791b      	ldrb	r3, [r3, #4]
 8004032:	461a      	mov	r2, r3
 8004034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004036:	4293      	cmp	r3, r2
 8004038:	d3b2      	bcc.n	8003fa0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004048:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800404c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	7bdb      	ldrb	r3, [r3, #15]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800405c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004066:	f043 030b 	orr.w	r3, r3, #11
 800406a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800407c:	f043 030b 	orr.w	r3, r3, #11
 8004080:	6453      	str	r3, [r2, #68]	@ 0x44
 8004082:	e015      	b.n	80040b0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004092:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004096:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800409a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040aa:	f043 030b 	orr.w	r3, r3, #11
 80040ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80040c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040d2:	461a      	mov	r2, r3
 80040d4:	f003 fd4c 	bl	8007b70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80040e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f003 fc7b 	bl	80079e8 <USB_ReadInterrupts>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040fc:	d123      	bne.n	8004146 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f003 fd11 	bl	8007b2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f002 fdc8 	bl	8006ca2 <USB_GetDevSpeed>
 8004112:	4603      	mov	r3, r0
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681c      	ldr	r4, [r3, #0]
 800411e:	f001 f9c9 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 8004122:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004128:	461a      	mov	r2, r3
 800412a:	4620      	mov	r0, r4
 800412c:	f002 facc 	bl	80066c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f008 fe48 	bl	800cdc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004144:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f003 fc4c 	bl	80079e8 <USB_ReadInterrupts>
 8004150:	4603      	mov	r3, r0
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b08      	cmp	r3, #8
 8004158:	d10a      	bne.n	8004170 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f008 fe25 	bl	800cdaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f002 0208 	and.w	r2, r2, #8
 800416e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f003 fc37 	bl	80079e8 <USB_ReadInterrupts>
 800417a:	4603      	mov	r3, r0
 800417c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004180:	2b80      	cmp	r3, #128	@ 0x80
 8004182:	d123      	bne.n	80041cc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004190:	2301      	movs	r3, #1
 8004192:	627b      	str	r3, [r7, #36]	@ 0x24
 8004194:	e014      	b.n	80041c0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d105      	bne.n	80041ba <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fb0a 	bl	80047ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	3301      	adds	r3, #1
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	791b      	ldrb	r3, [r3, #4]
 80041c4:	461a      	mov	r2, r3
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d3e4      	bcc.n	8004196 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f003 fc09 	bl	80079e8 <USB_ReadInterrupts>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e0:	d13c      	bne.n	800425c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041e2:	2301      	movs	r3, #1
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041e6:	e02b      	b.n	8004240 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	3318      	adds	r3, #24
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d115      	bne.n	800423a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800420e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004210:	2b00      	cmp	r3, #0
 8004212:	da12      	bge.n	800423a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	3317      	adds	r3, #23
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4619      	mov	r1, r3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 faca 	bl	80047ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	3301      	adds	r3, #1
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	791b      	ldrb	r3, [r3, #4]
 8004244:	461a      	mov	r2, r3
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	4293      	cmp	r3, r2
 800424a:	d3cd      	bcc.n	80041e8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800425a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f003 fbc1 	bl	80079e8 <USB_ReadInterrupts>
 8004266:	4603      	mov	r3, r0
 8004268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800426c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004270:	d156      	bne.n	8004320 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004272:	2301      	movs	r3, #1
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
 8004276:	e045      	b.n	8004304 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d12e      	bne.n	80042fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	da2b      	bge.n	80042fe <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	0c1a      	lsrs	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80042b0:	4053      	eors	r3, r2
 80042b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d121      	bne.n	80042fe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042fa:	6053      	str	r3, [r2, #4]
            break;
 80042fc:	e008      	b.n	8004310 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	3301      	adds	r3, #1
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	791b      	ldrb	r3, [r3, #4]
 8004308:	461a      	mov	r2, r3
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	4293      	cmp	r3, r2
 800430e:	d3b3      	bcc.n	8004278 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800431e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f003 fb5f 	bl	80079e8 <USB_ReadInterrupts>
 800432a:	4603      	mov	r3, r0
 800432c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004334:	d10a      	bne.n	800434c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f008 fdbc 	bl	800ceb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800434a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f003 fb49 	bl	80079e8 <USB_ReadInterrupts>
 8004356:	4603      	mov	r3, r0
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d115      	bne.n	800438c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f008 fdac 	bl	800ced0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	e000      	b.n	800438c <HAL_PCD_IRQHandler+0x93c>
      return;
 800438a:	bf00      	nop
    }
  }
}
 800438c:	3734      	adds	r7, #52	@ 0x34
 800438e:	46bd      	mov	sp, r7
 8004390:	bd90      	pop	{r4, r7, pc}

08004392 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_PCD_SetAddress+0x1a>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e012      	b.n	80043d2 <HAL_PCD_SetAddress+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f003 faa8 	bl	8007918 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	4608      	mov	r0, r1
 80043e4:	4611      	mov	r1, r2
 80043e6:	461a      	mov	r2, r3
 80043e8:	4603      	mov	r3, r0
 80043ea:	70fb      	strb	r3, [r7, #3]
 80043ec:	460b      	mov	r3, r1
 80043ee:	803b      	strh	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	da0f      	bge.n	8004420 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	f003 020f 	and.w	r2, r3, #15
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	3310      	adds	r3, #16
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	3304      	adds	r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	705a      	strb	r2, [r3, #1]
 800441e:	e00f      	b.n	8004440 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	f003 020f 	and.w	r2, r3, #15
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	3304      	adds	r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800444c:	883b      	ldrh	r3, [r7, #0]
 800444e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	78ba      	ldrb	r2, [r7, #2]
 800445a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d004      	beq.n	800446e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800446e:	78bb      	ldrb	r3, [r7, #2]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d102      	bne.n	800447a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_PCD_EP_Open+0xae>
 8004484:	2302      	movs	r3, #2
 8004486:	e00e      	b.n	80044a6 <HAL_PCD_EP_Open+0xcc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68f9      	ldr	r1, [r7, #12]
 8004496:	4618      	mov	r0, r3
 8004498:	f002 fc28 	bl	8006cec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80044a4:	7afb      	ldrb	r3, [r7, #11]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da0f      	bge.n	80044e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	f003 020f 	and.w	r2, r3, #15
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	3310      	adds	r3, #16
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4413      	add	r3, r2
 80044d6:	3304      	adds	r3, #4
 80044d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	705a      	strb	r2, [r3, #1]
 80044e0:	e00f      	b.n	8004502 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	f003 020f 	and.w	r2, r3, #15
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	3304      	adds	r3, #4
 80044fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_PCD_EP_Close+0x6e>
 8004518:	2302      	movs	r3, #2
 800451a:	e00e      	b.n	800453a <HAL_PCD_EP_Close+0x8c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68f9      	ldr	r1, [r7, #12]
 800452a:	4618      	mov	r0, r3
 800452c:	f002 fc66 	bl	8006dfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b086      	sub	sp, #24
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	460b      	mov	r3, r1
 8004550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004552:	7afb      	ldrb	r3, [r7, #11]
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2200      	movs	r2, #0
 800457c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2200      	movs	r2, #0
 8004582:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004584:	7afb      	ldrb	r3, [r7, #11]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	b2da      	uxtb	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	799b      	ldrb	r3, [r3, #6]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d102      	bne.n	800459e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	799b      	ldrb	r3, [r3, #6]
 80045a6:	461a      	mov	r2, r3
 80045a8:	6979      	ldr	r1, [r7, #20]
 80045aa:	f002 fd03 	bl	8006fb4 <USB_EPStartXfer>

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	f003 020f 	and.w	r2, r3, #15
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80045da:	681b      	ldr	r3, [r3, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	460b      	mov	r3, r1
 80045f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f8:	7afb      	ldrb	r3, [r7, #11]
 80045fa:	f003 020f 	and.w	r2, r3, #15
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	3310      	adds	r3, #16
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	3304      	adds	r3, #4
 800460e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2200      	movs	r2, #0
 8004620:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2201      	movs	r2, #1
 8004626:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004628:	7afb      	ldrb	r3, [r7, #11]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	b2da      	uxtb	r2, r3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	799b      	ldrb	r3, [r3, #6]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d102      	bne.n	8004642 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	799b      	ldrb	r3, [r3, #6]
 800464a:	461a      	mov	r2, r3
 800464c:	6979      	ldr	r1, [r7, #20]
 800464e:	f002 fcb1 	bl	8006fb4 <USB_EPStartXfer>

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	7912      	ldrb	r2, [r2, #4]
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e04f      	b.n	800471a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800467a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800467e:	2b00      	cmp	r3, #0
 8004680:	da0f      	bge.n	80046a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	3310      	adds	r3, #16
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	3304      	adds	r3, #4
 8004698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	705a      	strb	r2, [r3, #1]
 80046a0:	e00d      	b.n	80046be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	4413      	add	r3, r2
 80046b4:	3304      	adds	r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_PCD_EP_SetStall+0x82>
 80046da:	2302      	movs	r3, #2
 80046dc:	e01d      	b.n	800471a <HAL_PCD_EP_SetStall+0xbe>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f003 f83f 	bl	8007770 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	7999      	ldrb	r1, [r3, #6]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800470a:	461a      	mov	r2, r3
 800470c:	f003 fa30 	bl	8007b70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	7912      	ldrb	r2, [r2, #4]
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e042      	b.n	80047c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004744:	2b00      	cmp	r3, #0
 8004746:	da0f      	bge.n	8004768 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	3310      	adds	r3, #16
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4413      	add	r3, r2
 800475c:	3304      	adds	r3, #4
 800475e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	705a      	strb	r2, [r3, #1]
 8004766:	e00f      	b.n	8004788 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 020f 	and.w	r2, r3, #15
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	3304      	adds	r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_PCD_EP_ClrStall+0x86>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e00e      	b.n	80047c6 <HAL_PCD_EP_ClrStall+0xa4>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f003 f848 	bl	800784c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	460b      	mov	r3, r1
 80047d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	da0c      	bge.n	80047fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	f003 020f 	and.w	r2, r3, #15
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	3310      	adds	r3, #16
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	3304      	adds	r3, #4
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	e00c      	b.n	8004816 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	f003 020f 	and.w	r2, r3, #15
 8004802:	4613      	mov	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4413      	add	r3, r2
 8004812:	3304      	adds	r3, #4
 8004814:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	4618      	mov	r0, r3
 800481e:	f002 fe67 	bl	80074f0 <USB_EPStopXfer>
 8004822:	4603      	mov	r3, r0
 8004824:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004826:	7afb      	ldrb	r3, [r7, #11]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	@ 0x28
 8004834:	af02      	add	r7, sp, #8
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	3310      	adds	r3, #16
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	4413      	add	r3, r2
 8004854:	3304      	adds	r3, #4
 8004856:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	429a      	cmp	r2, r3
 8004862:	d901      	bls.n	8004868 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e06b      	b.n	8004940 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	429a      	cmp	r2, r3
 800487c:	d902      	bls.n	8004884 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	3303      	adds	r3, #3
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800488c:	e02a      	b.n	80048e4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d902      	bls.n	80048aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3303      	adds	r3, #3
 80048ae:	089b      	lsrs	r3, r3, #2
 80048b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68d9      	ldr	r1, [r3, #12]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4603      	mov	r3, r0
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f002 febc 	bl	8007644 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	441a      	add	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	441a      	add	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d809      	bhi.n	800490e <PCD_WriteEmptyTxFifo+0xde>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004902:	429a      	cmp	r2, r3
 8004904:	d203      	bcs.n	800490e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1bf      	bne.n	800488e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	429a      	cmp	r2, r3
 8004918:	d811      	bhi.n	800493e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	2201      	movs	r2, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	43db      	mvns	r3, r3
 8004934:	6939      	ldr	r1, [r7, #16]
 8004936:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800493a:	4013      	ands	r3, r2
 800493c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	333c      	adds	r3, #60	@ 0x3c
 8004960:	3304      	adds	r3, #4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	799b      	ldrb	r3, [r3, #6]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d17b      	bne.n	8004a76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4a61      	ldr	r2, [pc, #388]	@ (8004b10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	f240 80b9 	bls.w	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80b3 	beq.w	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049b0:	6093      	str	r3, [r2, #8]
 80049b2:	e0a7      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	2320      	movs	r3, #32
 80049ce:	6093      	str	r3, [r2, #8]
 80049d0:	e098      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f040 8093 	bne.w	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004b10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d90f      	bls.n	8004a06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fc:	461a      	mov	r2, r3
 80049fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a02:	6093      	str	r3, [r2, #8]
 8004a04:	e07e      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	3304      	adds	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1a      	ldr	r2, [r3, #32]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	0159      	lsls	r1, r3, #5
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	440b      	add	r3, r1
 8004a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d114      	bne.n	8004a68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a50:	461a      	mov	r2, r3
 8004a52:	2101      	movs	r1, #1
 8004a54:	f003 f88c 	bl	8007b70 <USB_EP0_OutStart>
 8004a58:	e006      	b.n	8004a68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	441a      	add	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f008 f966 	bl	800cd40 <HAL_PCD_DataOutStageCallback>
 8004a74:	e046      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4a26      	ldr	r2, [pc, #152]	@ (8004b14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d124      	bne.n	8004ac8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a94:	461a      	mov	r2, r3
 8004a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9a:	6093      	str	r3, [r2, #8]
 8004a9c:	e032      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2320      	movs	r3, #32
 8004ab8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f008 f93d 	bl	800cd40 <HAL_PCD_DataOutStageCallback>
 8004ac6:	e01d      	b.n	8004b04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d114      	bne.n	8004af8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d108      	bne.n	8004af8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004af0:	461a      	mov	r2, r3
 8004af2:	2100      	movs	r1, #0
 8004af4:	f003 f83c 	bl	8007b70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f008 f91e 	bl	800cd40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	4f54300a 	.word	0x4f54300a
 8004b14:	4f54310a 	.word	0x4f54310a

08004b18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	333c      	adds	r3, #60	@ 0x3c
 8004b30:	3304      	adds	r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a15      	ldr	r2, [pc, #84]	@ (8004ba0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d90e      	bls.n	8004b6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d009      	beq.n	8004b6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b64:	461a      	mov	r2, r3
 8004b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f008 f8d5 	bl	800cd1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d90c      	bls.n	8004b94 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	799b      	ldrb	r3, [r3, #6]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d108      	bne.n	8004b94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2101      	movs	r1, #1
 8004b90:	f002 ffee 	bl	8007b70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	4f54300a 	.word	0x4f54300a

08004ba4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bc2:	883b      	ldrh	r3, [r7, #0]
 8004bc4:	0419      	lsls	r1, r3, #16
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bd0:	e028      	b.n	8004c24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4413      	add	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004be0:	2300      	movs	r3, #0
 8004be2:	73fb      	strb	r3, [r7, #15]
 8004be4:	e00d      	b.n	8004c02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	3340      	adds	r3, #64	@ 0x40
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
 8004c02:	7bfa      	ldrb	r2, [r7, #15]
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3ec      	bcc.n	8004be6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c0c:	883b      	ldrh	r3, [r7, #0]
 8004c0e:	0418      	lsls	r0, r3, #16
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6819      	ldr	r1, [r3, #0]
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	4302      	orrs	r2, r0
 8004c1c:	3340      	adds	r3, #64	@ 0x40
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	887a      	ldrh	r2, [r7, #2]
 8004c44:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e267      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d075      	beq.n	8004d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c8a:	4b88      	ldr	r3, [pc, #544]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 030c 	and.w	r3, r3, #12
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d00c      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c96:	4b85      	ldr	r3, [pc, #532]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d112      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ca2:	4b82      	ldr	r3, [pc, #520]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cae:	d10b      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d05b      	beq.n	8004d74 <HAL_RCC_OscConfig+0x108>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d157      	bne.n	8004d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e242      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd0:	d106      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x74>
 8004cd2:	4b76      	ldr	r3, [pc, #472]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a75      	ldr	r2, [pc, #468]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	e01d      	b.n	8004d1c <HAL_RCC_OscConfig+0xb0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x98>
 8004cea:	4b70      	ldr	r3, [pc, #448]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6f      	ldr	r2, [pc, #444]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a6c      	ldr	r2, [pc, #432]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	e00b      	b.n	8004d1c <HAL_RCC_OscConfig+0xb0>
 8004d04:	4b69      	ldr	r3, [pc, #420]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a68      	ldr	r2, [pc, #416]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4b66      	ldr	r3, [pc, #408]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a65      	ldr	r2, [pc, #404]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d013      	beq.n	8004d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d24:	f7fd f890 	bl	8001e48 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fd f88c 	bl	8001e48 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	@ 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e207      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0xc0>
 8004d4a:	e014      	b.n	8004d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fd f87c 	bl	8001e48 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d54:	f7fd f878 	bl	8001e48 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	@ 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e1f3      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d66:	4b51      	ldr	r3, [pc, #324]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0xe8>
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d063      	beq.n	8004e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d82:	4b4a      	ldr	r3, [pc, #296]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8e:	4b47      	ldr	r3, [pc, #284]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d11c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9a:	4b44      	ldr	r3, [pc, #272]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d116      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da6:	4b41      	ldr	r3, [pc, #260]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_RCC_OscConfig+0x152>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d001      	beq.n	8004dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e1c7      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4937      	ldr	r1, [pc, #220]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd2:	e03a      	b.n	8004e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d020      	beq.n	8004e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ddc:	4b34      	ldr	r3, [pc, #208]	@ (8004eb0 <HAL_RCC_OscConfig+0x244>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de2:	f7fd f831 	bl	8001e48 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dea:	f7fd f82d 	bl	8001e48 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e1a8      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e08:	4b28      	ldr	r3, [pc, #160]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4925      	ldr	r1, [pc, #148]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	600b      	str	r3, [r1, #0]
 8004e1c:	e015      	b.n	8004e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1e:	4b24      	ldr	r3, [pc, #144]	@ (8004eb0 <HAL_RCC_OscConfig+0x244>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fd f810 	bl	8001e48 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2c:	f7fd f80c 	bl	8001e48 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e187      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d036      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d016      	beq.n	8004e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e5e:	4b15      	ldr	r3, [pc, #84]	@ (8004eb4 <HAL_RCC_OscConfig+0x248>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fc fff0 	bl	8001e48 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6c:	f7fc ffec 	bl	8001e48 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e167      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <HAL_RCC_OscConfig+0x240>)
 8004e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x200>
 8004e8a:	e01b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8c:	4b09      	ldr	r3, [pc, #36]	@ (8004eb4 <HAL_RCC_OscConfig+0x248>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e92:	f7fc ffd9 	bl	8001e48 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e98:	e00e      	b.n	8004eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9a:	f7fc ffd5 	bl	8001e48 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d907      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e150      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	42470000 	.word	0x42470000
 8004eb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	4b88      	ldr	r3, [pc, #544]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ea      	bne.n	8004e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8097 	beq.w	8005000 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ed6:	4b81      	ldr	r3, [pc, #516]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10f      	bne.n	8004f02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	4a7c      	ldr	r2, [pc, #496]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ef2:	4b7a      	ldr	r3, [pc, #488]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f02:	4b77      	ldr	r3, [pc, #476]	@ (80050e0 <HAL_RCC_OscConfig+0x474>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d118      	bne.n	8004f40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f0e:	4b74      	ldr	r3, [pc, #464]	@ (80050e0 <HAL_RCC_OscConfig+0x474>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a73      	ldr	r2, [pc, #460]	@ (80050e0 <HAL_RCC_OscConfig+0x474>)
 8004f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1a:	f7fc ff95 	bl	8001e48 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f22:	f7fc ff91 	bl	8001e48 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e10c      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f34:	4b6a      	ldr	r3, [pc, #424]	@ (80050e0 <HAL_RCC_OscConfig+0x474>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0f0      	beq.n	8004f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d106      	bne.n	8004f56 <HAL_RCC_OscConfig+0x2ea>
 8004f48:	4b64      	ldr	r3, [pc, #400]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4c:	4a63      	ldr	r2, [pc, #396]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f54:	e01c      	b.n	8004f90 <HAL_RCC_OscConfig+0x324>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b05      	cmp	r3, #5
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x30c>
 8004f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f62:	4a5e      	ldr	r2, [pc, #376]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f64:	f043 0304 	orr.w	r3, r3, #4
 8004f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6e:	4a5b      	ldr	r2, [pc, #364]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f76:	e00b      	b.n	8004f90 <HAL_RCC_OscConfig+0x324>
 8004f78:	4b58      	ldr	r3, [pc, #352]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7c:	4a57      	ldr	r2, [pc, #348]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f84:	4b55      	ldr	r3, [pc, #340]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4a54      	ldr	r2, [pc, #336]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004f8a:	f023 0304 	bic.w	r3, r3, #4
 8004f8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d015      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7fc ff56 	bl	8001e48 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa0:	f7fc ff52 	bl	8001e48 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e0cb      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb6:	4b49      	ldr	r3, [pc, #292]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0ee      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x334>
 8004fc2:	e014      	b.n	8004fee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc4:	f7fc ff40 	bl	8001e48 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fc ff3c 	bl	8001e48 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e0b5      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ee      	bne.n	8004fcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d105      	bne.n	8005000 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff4:	4b39      	ldr	r3, [pc, #228]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff8:	4a38      	ldr	r2, [pc, #224]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8004ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ffe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80a1 	beq.w	800514c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800500a:	4b34      	ldr	r3, [pc, #208]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
 8005012:	2b08      	cmp	r3, #8
 8005014:	d05c      	beq.n	80050d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d141      	bne.n	80050a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501e:	4b31      	ldr	r3, [pc, #196]	@ (80050e4 <HAL_RCC_OscConfig+0x478>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fc ff10 	bl	8001e48 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502c:	f7fc ff0c 	bl	8001e48 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e087      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	4b27      	ldr	r3, [pc, #156]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	019b      	lsls	r3, r3, #6
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	3b01      	subs	r3, #1
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	061b      	lsls	r3, r3, #24
 800506e:	491b      	ldr	r1, [pc, #108]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005074:	4b1b      	ldr	r3, [pc, #108]	@ (80050e4 <HAL_RCC_OscConfig+0x478>)
 8005076:	2201      	movs	r2, #1
 8005078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507a:	f7fc fee5 	bl	8001e48 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005082:	f7fc fee1 	bl	8001e48 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e05c      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005094:	4b11      	ldr	r3, [pc, #68]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <HAL_RCC_OscConfig+0x416>
 80050a0:	e054      	b.n	800514c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a2:	4b10      	ldr	r3, [pc, #64]	@ (80050e4 <HAL_RCC_OscConfig+0x478>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7fc fece 	bl	8001e48 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b0:	f7fc feca 	bl	8001e48 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e045      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c2:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <HAL_RCC_OscConfig+0x470>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0x444>
 80050ce:	e03d      	b.n	800514c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d107      	bne.n	80050e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e038      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40007000 	.word	0x40007000
 80050e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005158 <HAL_RCC_OscConfig+0x4ec>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d028      	beq.n	8005148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d121      	bne.n	8005148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d11a      	bne.n	8005148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800511e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005120:	4293      	cmp	r3, r2
 8005122:	d111      	bne.n	8005148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	3b01      	subs	r3, #1
 8005132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d107      	bne.n	8005148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800

0800515c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0cc      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005170:	4b68      	ldr	r3, [pc, #416]	@ (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d90c      	bls.n	8005198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b65      	ldr	r3, [pc, #404]	@ (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b63      	ldr	r3, [pc, #396]	@ (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0b8      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d020      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051b0:	4b59      	ldr	r3, [pc, #356]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	4a58      	ldr	r2, [pc, #352]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051c8:	4b53      	ldr	r3, [pc, #332]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	4a52      	ldr	r2, [pc, #328]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d4:	4b50      	ldr	r3, [pc, #320]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	494d      	ldr	r1, [pc, #308]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d044      	beq.n	800527c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d107      	bne.n	800520a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fa:	4b47      	ldr	r3, [pc, #284]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d119      	bne.n	800523a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e07f      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d003      	beq.n	800521a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005216:	2b03      	cmp	r3, #3
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	4b3f      	ldr	r3, [pc, #252]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e06f      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522a:	4b3b      	ldr	r3, [pc, #236]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e067      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800523a:	4b37      	ldr	r3, [pc, #220]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f023 0203 	bic.w	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4934      	ldr	r1, [pc, #208]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800524c:	f7fc fdfc 	bl	8001e48 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	e00a      	b.n	800526a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005254:	f7fc fdf8 	bl	8001e48 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e04f      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526a:	4b2b      	ldr	r3, [pc, #172]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 020c 	and.w	r2, r3, #12
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	429a      	cmp	r2, r3
 800527a:	d1eb      	bne.n	8005254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800527c:	4b25      	ldr	r3, [pc, #148]	@ (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d20c      	bcs.n	80052a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b22      	ldr	r3, [pc, #136]	@ (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005292:	4b20      	ldr	r3, [pc, #128]	@ (8005314 <HAL_RCC_ClockConfig+0x1b8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d001      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e032      	b.n	800530a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b0:	4b19      	ldr	r3, [pc, #100]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4916      	ldr	r1, [pc, #88]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d009      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ce:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	490e      	ldr	r1, [pc, #56]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052e2:	f000 f821 	bl	8005328 <HAL_RCC_GetSysClockFreq>
 80052e6:	4602      	mov	r2, r0
 80052e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005318 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	490a      	ldr	r1, [pc, #40]	@ (800531c <HAL_RCC_ClockConfig+0x1c0>)
 80052f4:	5ccb      	ldrb	r3, [r1, r3]
 80052f6:	fa22 f303 	lsr.w	r3, r2, r3
 80052fa:	4a09      	ldr	r2, [pc, #36]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80052fe:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <HAL_RCC_ClockConfig+0x1c8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fc fc6e 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40023c00 	.word	0x40023c00
 8005318:	40023800 	.word	0x40023800
 800531c:	0800d6a0 	.word	0x0800d6a0
 8005320:	20000000 	.word	0x20000000
 8005324:	20000004 	.word	0x20000004

08005328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b090      	sub	sp, #64	@ 0x40
 800532e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005340:	4b59      	ldr	r3, [pc, #356]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 030c 	and.w	r3, r3, #12
 8005348:	2b08      	cmp	r3, #8
 800534a:	d00d      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x40>
 800534c:	2b08      	cmp	r3, #8
 800534e:	f200 80a1 	bhi.w	8005494 <HAL_RCC_GetSysClockFreq+0x16c>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0x34>
 8005356:	2b04      	cmp	r3, #4
 8005358:	d003      	beq.n	8005362 <HAL_RCC_GetSysClockFreq+0x3a>
 800535a:	e09b      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800535c:	4b53      	ldr	r3, [pc, #332]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x184>)
 800535e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005360:	e09b      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005362:	4b53      	ldr	r3, [pc, #332]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005364:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005366:	e098      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005368:	4b4f      	ldr	r3, [pc, #316]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005370:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005372:	4b4d      	ldr	r3, [pc, #308]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d028      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537e:	4b4a      	ldr	r3, [pc, #296]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	2200      	movs	r2, #0
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	627a      	str	r2, [r7, #36]	@ 0x24
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005390:	2100      	movs	r1, #0
 8005392:	4b47      	ldr	r3, [pc, #284]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005394:	fb03 f201 	mul.w	r2, r3, r1
 8005398:	2300      	movs	r3, #0
 800539a:	fb00 f303 	mul.w	r3, r0, r3
 800539e:	4413      	add	r3, r2
 80053a0:	4a43      	ldr	r2, [pc, #268]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053a2:	fba0 1202 	umull	r1, r2, r0, r2
 80053a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053a8:	460a      	mov	r2, r1
 80053aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ae:	4413      	add	r3, r2
 80053b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b4:	2200      	movs	r2, #0
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	61fa      	str	r2, [r7, #28]
 80053ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053c2:	f7fa ff0d 	bl	80001e0 <__aeabi_uldivmod>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4613      	mov	r3, r2
 80053cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ce:	e053      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d0:	4b35      	ldr	r3, [pc, #212]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	099b      	lsrs	r3, r3, #6
 80053d6:	2200      	movs	r2, #0
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	617a      	str	r2, [r7, #20]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80053e2:	f04f 0b00 	mov.w	fp, #0
 80053e6:	4652      	mov	r2, sl
 80053e8:	465b      	mov	r3, fp
 80053ea:	f04f 0000 	mov.w	r0, #0
 80053ee:	f04f 0100 	mov.w	r1, #0
 80053f2:	0159      	lsls	r1, r3, #5
 80053f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053f8:	0150      	lsls	r0, r2, #5
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	ebb2 080a 	subs.w	r8, r2, sl
 8005402:	eb63 090b 	sbc.w	r9, r3, fp
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005412:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005416:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800541a:	ebb2 0408 	subs.w	r4, r2, r8
 800541e:	eb63 0509 	sbc.w	r5, r3, r9
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	00eb      	lsls	r3, r5, #3
 800542c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005430:	00e2      	lsls	r2, r4, #3
 8005432:	4614      	mov	r4, r2
 8005434:	461d      	mov	r5, r3
 8005436:	eb14 030a 	adds.w	r3, r4, sl
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	eb45 030b 	adc.w	r3, r5, fp
 8005440:	607b      	str	r3, [r7, #4]
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800544e:	4629      	mov	r1, r5
 8005450:	028b      	lsls	r3, r1, #10
 8005452:	4621      	mov	r1, r4
 8005454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005458:	4621      	mov	r1, r4
 800545a:	028a      	lsls	r2, r1, #10
 800545c:	4610      	mov	r0, r2
 800545e:	4619      	mov	r1, r3
 8005460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005462:	2200      	movs	r2, #0
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	60fa      	str	r2, [r7, #12]
 8005468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800546c:	f7fa feb8 	bl	80001e0 <__aeabi_uldivmod>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4613      	mov	r3, r2
 8005476:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005478:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	3301      	adds	r3, #1
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005488:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005490:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005492:	e002      	b.n	800549a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x184>)
 8005496:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800549a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800549c:	4618      	mov	r0, r3
 800549e:	3740      	adds	r7, #64	@ 0x40
 80054a0:	46bd      	mov	sp, r7
 80054a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054a6:	bf00      	nop
 80054a8:	40023800 	.word	0x40023800
 80054ac:	00f42400 	.word	0x00f42400
 80054b0:	017d7840 	.word	0x017d7840

080054b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b8:	4b03      	ldr	r3, [pc, #12]	@ (80054c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ba:	681b      	ldr	r3, [r3, #0]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000000 	.word	0x20000000

080054cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054d0:	f7ff fff0 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	0a9b      	lsrs	r3, r3, #10
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4903      	ldr	r1, [pc, #12]	@ (80054f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40023800 	.word	0x40023800
 80054f0:	0800d6b0 	.word	0x0800d6b0

080054f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054f8:	f7ff ffdc 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	0b5b      	lsrs	r3, r3, #13
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	@ (8005518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40023800 	.word	0x40023800
 8005518:	0800d6b0 	.word	0x0800d6b0

0800551c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	220f      	movs	r2, #15
 800552a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800552c:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <HAL_RCC_GetClockConfig+0x5c>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0203 	and.w	r2, r3, #3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005538:	4b0f      	ldr	r3, [pc, #60]	@ (8005578 <HAL_RCC_GetClockConfig+0x5c>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005544:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <HAL_RCC_GetClockConfig+0x5c>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005550:	4b09      	ldr	r3, [pc, #36]	@ (8005578 <HAL_RCC_GetClockConfig+0x5c>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	08db      	lsrs	r3, r3, #3
 8005556:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800555e:	4b07      	ldr	r3, [pc, #28]	@ (800557c <HAL_RCC_GetClockConfig+0x60>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0207 	and.w	r2, r3, #7
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	601a      	str	r2, [r3, #0]
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40023800 	.word	0x40023800
 800557c:	40023c00 	.word	0x40023c00

08005580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e07b      	b.n	800568a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d108      	bne.n	80055ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055a2:	d009      	beq.n	80055b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	61da      	str	r2, [r3, #28]
 80055aa:	e005      	b.n	80055b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fc fa76 	bl	8001ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563c:	ea42 0103 	orr.w	r1, r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005644:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	f003 0104 	and.w	r1, r3, #4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	f003 0210 	and.w	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005678:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b08a      	sub	sp, #40	@ 0x28
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056a0:	2301      	movs	r3, #1
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056a4:	f7fc fbd0 	bl	8001e48 <HAL_GetTick>
 80056a8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056b0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056b8:	887b      	ldrh	r3, [r7, #2]
 80056ba:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056bc:	7ffb      	ldrb	r3, [r7, #31]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d00c      	beq.n	80056dc <HAL_SPI_TransmitReceive+0x4a>
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c8:	d106      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d102      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x46>
 80056d2:	7ffb      	ldrb	r3, [r7, #31]
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d001      	beq.n	80056dc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
 80056da:	e17f      	b.n	80059dc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_SPI_TransmitReceive+0x5c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <HAL_SPI_TransmitReceive+0x5c>
 80056e8:	887b      	ldrh	r3, [r7, #2]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e174      	b.n	80059dc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_SPI_TransmitReceive+0x6e>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e16d      	b.n	80059dc <HAL_SPI_TransmitReceive+0x34a>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b04      	cmp	r3, #4
 8005712:	d003      	beq.n	800571c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2205      	movs	r2, #5
 8005718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	887a      	ldrh	r2, [r7, #2]
 800572c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	887a      	ldrh	r2, [r7, #2]
 8005732:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	887a      	ldrh	r2, [r7, #2]
 800573e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	887a      	ldrh	r2, [r7, #2]
 8005744:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575c:	2b40      	cmp	r3, #64	@ 0x40
 800575e:	d007      	beq.n	8005770 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800576e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005778:	d17e      	bne.n	8005878 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <HAL_SPI_TransmitReceive+0xf6>
 8005782:	8afb      	ldrh	r3, [r7, #22]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d16c      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578c:	881a      	ldrh	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005798:	1c9a      	adds	r2, r3, #2
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ac:	e059      	b.n	8005862 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d11b      	bne.n	80057f4 <HAL_SPI_TransmitReceive+0x162>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d016      	beq.n	80057f4 <HAL_SPI_TransmitReceive+0x162>
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d113      	bne.n	80057f4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d0:	881a      	ldrh	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057dc:	1c9a      	adds	r2, r3, #2
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d119      	bne.n	8005836 <HAL_SPI_TransmitReceive+0x1a4>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d014      	beq.n	8005836 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005816:	b292      	uxth	r2, r2
 8005818:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581e:	1c9a      	adds	r2, r3, #2
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005832:	2301      	movs	r3, #1
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005836:	f7fc fb07 	bl	8001e48 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005842:	429a      	cmp	r2, r3
 8005844:	d80d      	bhi.n	8005862 <HAL_SPI_TransmitReceive+0x1d0>
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d009      	beq.n	8005862 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e0bc      	b.n	80059dc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1a0      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x11c>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d19b      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x11c>
 8005876:	e082      	b.n	800597e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <HAL_SPI_TransmitReceive+0x1f4>
 8005880:	8afb      	ldrh	r3, [r7, #22]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d171      	bne.n	800596a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ac:	e05d      	b.n	800596a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d11c      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x264>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d017      	beq.n	80058f6 <HAL_SPI_TransmitReceive+0x264>
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d114      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	7812      	ldrb	r2, [r2, #0]
 80058d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	d119      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x2a6>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d014      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005934:	2301      	movs	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005938:	f7fc fa86 	bl	8001e48 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005944:	429a      	cmp	r2, r3
 8005946:	d803      	bhi.n	8005950 <HAL_SPI_TransmitReceive+0x2be>
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594e:	d102      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x2c4>
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e038      	b.n	80059dc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d19c      	bne.n	80058ae <HAL_SPI_TransmitReceive+0x21c>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d197      	bne.n	80058ae <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f8b6 	bl	8005af4 <SPI_EndRxTxTransaction>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d008      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e01d      	b.n	80059dc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059a8:	2300      	movs	r3, #0
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80059da:	2300      	movs	r3, #0
  }
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	@ 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059f4:	f7fc fa28 	bl	8001e48 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	4413      	add	r3, r2
 8005a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a04:	f7fc fa20 	bl	8001e48 <HAL_GetTick>
 8005a08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a0a:	4b39      	ldr	r3, [pc, #228]	@ (8005af0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	015b      	lsls	r3, r3, #5
 8005a10:	0d1b      	lsrs	r3, r3, #20
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	fb02 f303 	mul.w	r3, r2, r3
 8005a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a1a:	e055      	b.n	8005ac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d051      	beq.n	8005ac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a24:	f7fc fa10 	bl	8001e48 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d902      	bls.n	8005a3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d13d      	bne.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a52:	d111      	bne.n	8005a78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a5c:	d004      	beq.n	8005a68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a66:	d107      	bne.n	8005a78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a80:	d10f      	bne.n	8005aa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005aa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e018      	b.n	8005ae8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	e002      	b.n	8005ac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d19a      	bne.n	8005a1c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20000000 	.word	0x20000000

08005af4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2201      	movs	r2, #1
 8005b08:	2102      	movs	r1, #2
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f7ff ff6a 	bl	80059e4 <SPI_WaitFlagStateUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d007      	beq.n	8005b26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1a:	f043 0220 	orr.w	r2, r3, #32
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e032      	b.n	8005b8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b26:	4b1b      	ldr	r3, [pc, #108]	@ (8005b94 <SPI_EndRxTxTransaction+0xa0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b98 <SPI_EndRxTxTransaction+0xa4>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	0d5b      	lsrs	r3, r3, #21
 8005b32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b44:	d112      	bne.n	8005b6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2180      	movs	r1, #128	@ 0x80
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff ff47 	bl	80059e4 <SPI_WaitFlagStateUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d016      	beq.n	8005b8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b60:	f043 0220 	orr.w	r2, r3, #32
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e00f      	b.n	8005b8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b82:	2b80      	cmp	r3, #128	@ 0x80
 8005b84:	d0f2      	beq.n	8005b6c <SPI_EndRxTxTransaction+0x78>
 8005b86:	e000      	b.n	8005b8a <SPI_EndRxTxTransaction+0x96>
        break;
 8005b88:	bf00      	nop
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000000 	.word	0x20000000
 8005b98:	165e9f81 	.word	0x165e9f81

08005b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e041      	b.n	8005c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f839 	bl	8005c3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f000 f9b2 	bl	8005f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d001      	beq.n	8005c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e044      	b.n	8005cf2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1e      	ldr	r2, [pc, #120]	@ (8005d00 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x6c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c92:	d013      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x6c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1a      	ldr	r2, [pc, #104]	@ (8005d04 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x6c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a19      	ldr	r2, [pc, #100]	@ (8005d08 <HAL_TIM_Base_Start_IT+0xb8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x6c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a17      	ldr	r2, [pc, #92]	@ (8005d0c <HAL_TIM_Base_Start_IT+0xbc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x6c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a16      	ldr	r2, [pc, #88]	@ (8005d10 <HAL_TIM_Base_Start_IT+0xc0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d111      	bne.n	8005ce0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b06      	cmp	r3, #6
 8005ccc:	d010      	beq.n	8005cf0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cde:	e007      	b.n	8005cf0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40014000 	.word	0x40014000

08005d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d020      	beq.n	8005d78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01b      	beq.n	8005d78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0202 	mvn.w	r2, #2
 8005d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f8d2 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f8c4 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f8d5 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0204 	mvn.w	r2, #4
 8005d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f8ac 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f89e 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f8af 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d020      	beq.n	8005e10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01b      	beq.n	8005e10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0208 	mvn.w	r2, #8
 8005de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f886 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005dfc:	e005      	b.n	8005e0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f878 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f889 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d020      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01b      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0210 	mvn.w	r2, #16
 8005e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2208      	movs	r2, #8
 8005e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f860 	bl	8005f08 <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f852 	bl	8005ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f863 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00c      	beq.n	8005e80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0201 	mvn.w	r2, #1
 8005e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fa fe34 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00c      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d007      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f8e0 	bl	8006064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00c      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f834 	bl	8005f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00c      	beq.n	8005eec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0220 	mvn.w	r2, #32
 8005ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f8b2 	bl	8006050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a37      	ldr	r2, [pc, #220]	@ (8006034 <TIM_Base_SetConfig+0xf0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00f      	beq.n	8005f7c <TIM_Base_SetConfig+0x38>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f62:	d00b      	beq.n	8005f7c <TIM_Base_SetConfig+0x38>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a34      	ldr	r2, [pc, #208]	@ (8006038 <TIM_Base_SetConfig+0xf4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d007      	beq.n	8005f7c <TIM_Base_SetConfig+0x38>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a33      	ldr	r2, [pc, #204]	@ (800603c <TIM_Base_SetConfig+0xf8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_Base_SetConfig+0x38>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a32      	ldr	r2, [pc, #200]	@ (8006040 <TIM_Base_SetConfig+0xfc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d108      	bne.n	8005f8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a28      	ldr	r2, [pc, #160]	@ (8006034 <TIM_Base_SetConfig+0xf0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01b      	beq.n	8005fce <TIM_Base_SetConfig+0x8a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9c:	d017      	beq.n	8005fce <TIM_Base_SetConfig+0x8a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a25      	ldr	r2, [pc, #148]	@ (8006038 <TIM_Base_SetConfig+0xf4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d013      	beq.n	8005fce <TIM_Base_SetConfig+0x8a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a24      	ldr	r2, [pc, #144]	@ (800603c <TIM_Base_SetConfig+0xf8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00f      	beq.n	8005fce <TIM_Base_SetConfig+0x8a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a23      	ldr	r2, [pc, #140]	@ (8006040 <TIM_Base_SetConfig+0xfc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00b      	beq.n	8005fce <TIM_Base_SetConfig+0x8a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a22      	ldr	r2, [pc, #136]	@ (8006044 <TIM_Base_SetConfig+0x100>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d007      	beq.n	8005fce <TIM_Base_SetConfig+0x8a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a21      	ldr	r2, [pc, #132]	@ (8006048 <TIM_Base_SetConfig+0x104>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_Base_SetConfig+0x8a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a20      	ldr	r2, [pc, #128]	@ (800604c <TIM_Base_SetConfig+0x108>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d108      	bne.n	8005fe0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a0c      	ldr	r2, [pc, #48]	@ (8006034 <TIM_Base_SetConfig+0xf0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d103      	bne.n	800600e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f043 0204 	orr.w	r2, r3, #4
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	601a      	str	r2, [r3, #0]
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000
 8006038:	40000400 	.word	0x40000400
 800603c:	40000800 	.word	0x40000800
 8006040:	40000c00 	.word	0x40000c00
 8006044:	40014000 	.word	0x40014000
 8006048:	40014400 	.word	0x40014400
 800604c:	40014800 	.word	0x40014800

08006050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e042      	b.n	8006110 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fb fd58 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2224      	movs	r2, #36	@ 0x24
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f82b 	bl	8006118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800611c:	b0c0      	sub	sp, #256	@ 0x100
 800611e:	af00      	add	r7, sp, #0
 8006120:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006134:	68d9      	ldr	r1, [r3, #12]
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	ea40 0301 	orr.w	r3, r0, r1
 8006140:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	431a      	orrs	r2, r3
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	431a      	orrs	r2, r3
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006170:	f021 010c 	bic.w	r1, r1, #12
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800617e:	430b      	orrs	r3, r1
 8006180:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800618e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006192:	6999      	ldr	r1, [r3, #24]
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	ea40 0301 	orr.w	r3, r0, r1
 800619e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b8f      	ldr	r3, [pc, #572]	@ (80063e4 <UART_SetConfig+0x2cc>)
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d005      	beq.n	80061b8 <UART_SetConfig+0xa0>
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b8d      	ldr	r3, [pc, #564]	@ (80063e8 <UART_SetConfig+0x2d0>)
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d104      	bne.n	80061c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061b8:	f7ff f99c 	bl	80054f4 <HAL_RCC_GetPCLK2Freq>
 80061bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061c0:	e003      	b.n	80061ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c2:	f7ff f983 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 80061c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d4:	f040 810c 	bne.w	80063f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061dc:	2200      	movs	r2, #0
 80061de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061ea:	4622      	mov	r2, r4
 80061ec:	462b      	mov	r3, r5
 80061ee:	1891      	adds	r1, r2, r2
 80061f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061f2:	415b      	adcs	r3, r3
 80061f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061fa:	4621      	mov	r1, r4
 80061fc:	eb12 0801 	adds.w	r8, r2, r1
 8006200:	4629      	mov	r1, r5
 8006202:	eb43 0901 	adc.w	r9, r3, r1
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800621a:	4690      	mov	r8, r2
 800621c:	4699      	mov	r9, r3
 800621e:	4623      	mov	r3, r4
 8006220:	eb18 0303 	adds.w	r3, r8, r3
 8006224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006228:	462b      	mov	r3, r5
 800622a:	eb49 0303 	adc.w	r3, r9, r3
 800622e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800623e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006246:	460b      	mov	r3, r1
 8006248:	18db      	adds	r3, r3, r3
 800624a:	653b      	str	r3, [r7, #80]	@ 0x50
 800624c:	4613      	mov	r3, r2
 800624e:	eb42 0303 	adc.w	r3, r2, r3
 8006252:	657b      	str	r3, [r7, #84]	@ 0x54
 8006254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006258:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800625c:	f7f9 ffc0 	bl	80001e0 <__aeabi_uldivmod>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4b61      	ldr	r3, [pc, #388]	@ (80063ec <UART_SetConfig+0x2d4>)
 8006266:	fba3 2302 	umull	r2, r3, r3, r2
 800626a:	095b      	lsrs	r3, r3, #5
 800626c:	011c      	lsls	r4, r3, #4
 800626e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006272:	2200      	movs	r2, #0
 8006274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006278:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800627c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006280:	4642      	mov	r2, r8
 8006282:	464b      	mov	r3, r9
 8006284:	1891      	adds	r1, r2, r2
 8006286:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006288:	415b      	adcs	r3, r3
 800628a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800628c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006290:	4641      	mov	r1, r8
 8006292:	eb12 0a01 	adds.w	sl, r2, r1
 8006296:	4649      	mov	r1, r9
 8006298:	eb43 0b01 	adc.w	fp, r3, r1
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062b0:	4692      	mov	sl, r2
 80062b2:	469b      	mov	fp, r3
 80062b4:	4643      	mov	r3, r8
 80062b6:	eb1a 0303 	adds.w	r3, sl, r3
 80062ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062be:	464b      	mov	r3, r9
 80062c0:	eb4b 0303 	adc.w	r3, fp, r3
 80062c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062dc:	460b      	mov	r3, r1
 80062de:	18db      	adds	r3, r3, r3
 80062e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80062e2:	4613      	mov	r3, r2
 80062e4:	eb42 0303 	adc.w	r3, r2, r3
 80062e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062f2:	f7f9 ff75 	bl	80001e0 <__aeabi_uldivmod>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	4b3b      	ldr	r3, [pc, #236]	@ (80063ec <UART_SetConfig+0x2d4>)
 80062fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	2264      	movs	r2, #100	@ 0x64
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	1acb      	subs	r3, r1, r3
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006312:	4b36      	ldr	r3, [pc, #216]	@ (80063ec <UART_SetConfig+0x2d4>)
 8006314:	fba3 2302 	umull	r2, r3, r3, r2
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006320:	441c      	add	r4, r3
 8006322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006326:	2200      	movs	r2, #0
 8006328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800632c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006330:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006334:	4642      	mov	r2, r8
 8006336:	464b      	mov	r3, r9
 8006338:	1891      	adds	r1, r2, r2
 800633a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800633c:	415b      	adcs	r3, r3
 800633e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006344:	4641      	mov	r1, r8
 8006346:	1851      	adds	r1, r2, r1
 8006348:	6339      	str	r1, [r7, #48]	@ 0x30
 800634a:	4649      	mov	r1, r9
 800634c:	414b      	adcs	r3, r1
 800634e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800635c:	4659      	mov	r1, fp
 800635e:	00cb      	lsls	r3, r1, #3
 8006360:	4651      	mov	r1, sl
 8006362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006366:	4651      	mov	r1, sl
 8006368:	00ca      	lsls	r2, r1, #3
 800636a:	4610      	mov	r0, r2
 800636c:	4619      	mov	r1, r3
 800636e:	4603      	mov	r3, r0
 8006370:	4642      	mov	r2, r8
 8006372:	189b      	adds	r3, r3, r2
 8006374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006378:	464b      	mov	r3, r9
 800637a:	460a      	mov	r2, r1
 800637c:	eb42 0303 	adc.w	r3, r2, r3
 8006380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006390:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006394:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006398:	460b      	mov	r3, r1
 800639a:	18db      	adds	r3, r3, r3
 800639c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800639e:	4613      	mov	r3, r2
 80063a0:	eb42 0303 	adc.w	r3, r2, r3
 80063a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063ae:	f7f9 ff17 	bl	80001e0 <__aeabi_uldivmod>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4b0d      	ldr	r3, [pc, #52]	@ (80063ec <UART_SetConfig+0x2d4>)
 80063b8:	fba3 1302 	umull	r1, r3, r3, r2
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	2164      	movs	r1, #100	@ 0x64
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	3332      	adds	r3, #50	@ 0x32
 80063ca:	4a08      	ldr	r2, [pc, #32]	@ (80063ec <UART_SetConfig+0x2d4>)
 80063cc:	fba2 2303 	umull	r2, r3, r2, r3
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	f003 0207 	and.w	r2, r3, #7
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4422      	add	r2, r4
 80063de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063e0:	e106      	b.n	80065f0 <UART_SetConfig+0x4d8>
 80063e2:	bf00      	nop
 80063e4:	40011000 	.word	0x40011000
 80063e8:	40011400 	.word	0x40011400
 80063ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006402:	4642      	mov	r2, r8
 8006404:	464b      	mov	r3, r9
 8006406:	1891      	adds	r1, r2, r2
 8006408:	6239      	str	r1, [r7, #32]
 800640a:	415b      	adcs	r3, r3
 800640c:	627b      	str	r3, [r7, #36]	@ 0x24
 800640e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006412:	4641      	mov	r1, r8
 8006414:	1854      	adds	r4, r2, r1
 8006416:	4649      	mov	r1, r9
 8006418:	eb43 0501 	adc.w	r5, r3, r1
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	00eb      	lsls	r3, r5, #3
 8006426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800642a:	00e2      	lsls	r2, r4, #3
 800642c:	4614      	mov	r4, r2
 800642e:	461d      	mov	r5, r3
 8006430:	4643      	mov	r3, r8
 8006432:	18e3      	adds	r3, r4, r3
 8006434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006438:	464b      	mov	r3, r9
 800643a:	eb45 0303 	adc.w	r3, r5, r3
 800643e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800644e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800645e:	4629      	mov	r1, r5
 8006460:	008b      	lsls	r3, r1, #2
 8006462:	4621      	mov	r1, r4
 8006464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006468:	4621      	mov	r1, r4
 800646a:	008a      	lsls	r2, r1, #2
 800646c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006470:	f7f9 feb6 	bl	80001e0 <__aeabi_uldivmod>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4b60      	ldr	r3, [pc, #384]	@ (80065fc <UART_SetConfig+0x4e4>)
 800647a:	fba3 2302 	umull	r2, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	011c      	lsls	r4, r3, #4
 8006482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006486:	2200      	movs	r2, #0
 8006488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800648c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006490:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006494:	4642      	mov	r2, r8
 8006496:	464b      	mov	r3, r9
 8006498:	1891      	adds	r1, r2, r2
 800649a:	61b9      	str	r1, [r7, #24]
 800649c:	415b      	adcs	r3, r3
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064a4:	4641      	mov	r1, r8
 80064a6:	1851      	adds	r1, r2, r1
 80064a8:	6139      	str	r1, [r7, #16]
 80064aa:	4649      	mov	r1, r9
 80064ac:	414b      	adcs	r3, r1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064bc:	4659      	mov	r1, fp
 80064be:	00cb      	lsls	r3, r1, #3
 80064c0:	4651      	mov	r1, sl
 80064c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c6:	4651      	mov	r1, sl
 80064c8:	00ca      	lsls	r2, r1, #3
 80064ca:	4610      	mov	r0, r2
 80064cc:	4619      	mov	r1, r3
 80064ce:	4603      	mov	r3, r0
 80064d0:	4642      	mov	r2, r8
 80064d2:	189b      	adds	r3, r3, r2
 80064d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064d8:	464b      	mov	r3, r9
 80064da:	460a      	mov	r2, r1
 80064dc:	eb42 0303 	adc.w	r3, r2, r3
 80064e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064fc:	4649      	mov	r1, r9
 80064fe:	008b      	lsls	r3, r1, #2
 8006500:	4641      	mov	r1, r8
 8006502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006506:	4641      	mov	r1, r8
 8006508:	008a      	lsls	r2, r1, #2
 800650a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800650e:	f7f9 fe67 	bl	80001e0 <__aeabi_uldivmod>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4611      	mov	r1, r2
 8006518:	4b38      	ldr	r3, [pc, #224]	@ (80065fc <UART_SetConfig+0x4e4>)
 800651a:	fba3 2301 	umull	r2, r3, r3, r1
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	2264      	movs	r2, #100	@ 0x64
 8006522:	fb02 f303 	mul.w	r3, r2, r3
 8006526:	1acb      	subs	r3, r1, r3
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	3332      	adds	r3, #50	@ 0x32
 800652c:	4a33      	ldr	r2, [pc, #204]	@ (80065fc <UART_SetConfig+0x4e4>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006538:	441c      	add	r4, r3
 800653a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800653e:	2200      	movs	r2, #0
 8006540:	673b      	str	r3, [r7, #112]	@ 0x70
 8006542:	677a      	str	r2, [r7, #116]	@ 0x74
 8006544:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006548:	4642      	mov	r2, r8
 800654a:	464b      	mov	r3, r9
 800654c:	1891      	adds	r1, r2, r2
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	415b      	adcs	r3, r3
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006558:	4641      	mov	r1, r8
 800655a:	1851      	adds	r1, r2, r1
 800655c:	6039      	str	r1, [r7, #0]
 800655e:	4649      	mov	r1, r9
 8006560:	414b      	adcs	r3, r1
 8006562:	607b      	str	r3, [r7, #4]
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006570:	4659      	mov	r1, fp
 8006572:	00cb      	lsls	r3, r1, #3
 8006574:	4651      	mov	r1, sl
 8006576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800657a:	4651      	mov	r1, sl
 800657c:	00ca      	lsls	r2, r1, #3
 800657e:	4610      	mov	r0, r2
 8006580:	4619      	mov	r1, r3
 8006582:	4603      	mov	r3, r0
 8006584:	4642      	mov	r2, r8
 8006586:	189b      	adds	r3, r3, r2
 8006588:	66bb      	str	r3, [r7, #104]	@ 0x68
 800658a:	464b      	mov	r3, r9
 800658c:	460a      	mov	r2, r1
 800658e:	eb42 0303 	adc.w	r3, r2, r3
 8006592:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	663b      	str	r3, [r7, #96]	@ 0x60
 800659e:	667a      	str	r2, [r7, #100]	@ 0x64
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065ac:	4649      	mov	r1, r9
 80065ae:	008b      	lsls	r3, r1, #2
 80065b0:	4641      	mov	r1, r8
 80065b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065b6:	4641      	mov	r1, r8
 80065b8:	008a      	lsls	r2, r1, #2
 80065ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065be:	f7f9 fe0f 	bl	80001e0 <__aeabi_uldivmod>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4b0d      	ldr	r3, [pc, #52]	@ (80065fc <UART_SetConfig+0x4e4>)
 80065c8:	fba3 1302 	umull	r1, r3, r3, r2
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	2164      	movs	r1, #100	@ 0x64
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	3332      	adds	r3, #50	@ 0x32
 80065da:	4a08      	ldr	r2, [pc, #32]	@ (80065fc <UART_SetConfig+0x4e4>)
 80065dc:	fba2 2303 	umull	r2, r3, r2, r3
 80065e0:	095b      	lsrs	r3, r3, #5
 80065e2:	f003 020f 	and.w	r2, r3, #15
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4422      	add	r2, r4
 80065ee:	609a      	str	r2, [r3, #8]
}
 80065f0:	bf00      	nop
 80065f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80065f6:	46bd      	mov	sp, r7
 80065f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065fc:	51eb851f 	.word	0x51eb851f

08006600 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006600:	b084      	sub	sp, #16
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	f107 001c 	add.w	r0, r7, #28
 800660e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006612:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006616:	2b01      	cmp	r3, #1
 8006618:	d123      	bne.n	8006662 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800662e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006642:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006646:	2b01      	cmp	r3, #1
 8006648:	d105      	bne.n	8006656 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 fae8 	bl	8007c2c <USB_CoreReset>
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
 8006660:	e01b      	b.n	800669a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f001 fadc 	bl	8007c2c <USB_CoreReset>
 8006674:	4603      	mov	r3, r0
 8006676:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006678:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006684:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	639a      	str	r2, [r3, #56]	@ 0x38
 800668c:	e005      	b.n	800669a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006692:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800669a:	7fbb      	ldrb	r3, [r7, #30]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10b      	bne.n	80066b8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f043 0206 	orr.w	r2, r3, #6
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f043 0220 	orr.w	r2, r3, #32
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066c4:	b004      	add	sp, #16
 80066c6:	4770      	bx	lr

080066c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d165      	bne.n	80067a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4a41      	ldr	r2, [pc, #260]	@ (80067e4 <USB_SetTurnaroundTime+0x11c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d906      	bls.n	80066f2 <USB_SetTurnaroundTime+0x2a>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4a40      	ldr	r2, [pc, #256]	@ (80067e8 <USB_SetTurnaroundTime+0x120>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d202      	bcs.n	80066f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066ec:	230f      	movs	r3, #15
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e062      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4a3c      	ldr	r2, [pc, #240]	@ (80067e8 <USB_SetTurnaroundTime+0x120>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d306      	bcc.n	8006708 <USB_SetTurnaroundTime+0x40>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4a3b      	ldr	r2, [pc, #236]	@ (80067ec <USB_SetTurnaroundTime+0x124>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d202      	bcs.n	8006708 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006702:	230e      	movs	r3, #14
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	e057      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4a38      	ldr	r2, [pc, #224]	@ (80067ec <USB_SetTurnaroundTime+0x124>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d306      	bcc.n	800671e <USB_SetTurnaroundTime+0x56>
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4a37      	ldr	r2, [pc, #220]	@ (80067f0 <USB_SetTurnaroundTime+0x128>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d202      	bcs.n	800671e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006718:	230d      	movs	r3, #13
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	e04c      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4a33      	ldr	r2, [pc, #204]	@ (80067f0 <USB_SetTurnaroundTime+0x128>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d306      	bcc.n	8006734 <USB_SetTurnaroundTime+0x6c>
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	4a32      	ldr	r2, [pc, #200]	@ (80067f4 <USB_SetTurnaroundTime+0x12c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d802      	bhi.n	8006734 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800672e:	230c      	movs	r3, #12
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	e041      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4a2f      	ldr	r2, [pc, #188]	@ (80067f4 <USB_SetTurnaroundTime+0x12c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d906      	bls.n	800674a <USB_SetTurnaroundTime+0x82>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4a2e      	ldr	r2, [pc, #184]	@ (80067f8 <USB_SetTurnaroundTime+0x130>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d802      	bhi.n	800674a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006744:	230b      	movs	r3, #11
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	e036      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	4a2a      	ldr	r2, [pc, #168]	@ (80067f8 <USB_SetTurnaroundTime+0x130>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d906      	bls.n	8006760 <USB_SetTurnaroundTime+0x98>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4a29      	ldr	r2, [pc, #164]	@ (80067fc <USB_SetTurnaroundTime+0x134>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d802      	bhi.n	8006760 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800675a:	230a      	movs	r3, #10
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e02b      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4a26      	ldr	r2, [pc, #152]	@ (80067fc <USB_SetTurnaroundTime+0x134>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d906      	bls.n	8006776 <USB_SetTurnaroundTime+0xae>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4a25      	ldr	r2, [pc, #148]	@ (8006800 <USB_SetTurnaroundTime+0x138>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d202      	bcs.n	8006776 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006770:	2309      	movs	r3, #9
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e020      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	4a21      	ldr	r2, [pc, #132]	@ (8006800 <USB_SetTurnaroundTime+0x138>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d306      	bcc.n	800678c <USB_SetTurnaroundTime+0xc4>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4a20      	ldr	r2, [pc, #128]	@ (8006804 <USB_SetTurnaroundTime+0x13c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d802      	bhi.n	800678c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006786:	2308      	movs	r3, #8
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	e015      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	4a1d      	ldr	r2, [pc, #116]	@ (8006804 <USB_SetTurnaroundTime+0x13c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d906      	bls.n	80067a2 <USB_SetTurnaroundTime+0xda>
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	4a1c      	ldr	r2, [pc, #112]	@ (8006808 <USB_SetTurnaroundTime+0x140>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d202      	bcs.n	80067a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800679c:	2307      	movs	r3, #7
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e00a      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80067a2:	2306      	movs	r3, #6
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	e007      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d102      	bne.n	80067b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80067ae:	2309      	movs	r3, #9
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	e001      	b.n	80067b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80067b4:	2309      	movs	r3, #9
 80067b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	029b      	lsls	r3, r3, #10
 80067cc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80067d0:	431a      	orrs	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	00d8acbf 	.word	0x00d8acbf
 80067e8:	00e4e1c0 	.word	0x00e4e1c0
 80067ec:	00f42400 	.word	0x00f42400
 80067f0:	01067380 	.word	0x01067380
 80067f4:	011a499f 	.word	0x011a499f
 80067f8:	01312cff 	.word	0x01312cff
 80067fc:	014ca43f 	.word	0x014ca43f
 8006800:	016e3600 	.word	0x016e3600
 8006804:	01a6ab1f 	.word	0x01a6ab1f
 8006808:	01e84800 	.word	0x01e84800

0800680c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f043 0201 	orr.w	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f023 0201 	bic.w	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d115      	bne.n	800689e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800687e:	200a      	movs	r0, #10
 8006880:	f7fb faee 	bl	8001e60 <HAL_Delay>
      ms += 10U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	330a      	adds	r3, #10
 8006888:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 f93f 	bl	8007b0e <USB_GetMode>
 8006890:	4603      	mov	r3, r0
 8006892:	2b01      	cmp	r3, #1
 8006894:	d01e      	beq.n	80068d4 <USB_SetCurrentMode+0x84>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2bc7      	cmp	r3, #199	@ 0xc7
 800689a:	d9f0      	bls.n	800687e <USB_SetCurrentMode+0x2e>
 800689c:	e01a      	b.n	80068d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d115      	bne.n	80068d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068b0:	200a      	movs	r0, #10
 80068b2:	f7fb fad5 	bl	8001e60 <HAL_Delay>
      ms += 10U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	330a      	adds	r3, #10
 80068ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 f926 	bl	8007b0e <USB_GetMode>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <USB_SetCurrentMode+0x84>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80068cc:	d9f0      	bls.n	80068b0 <USB_SetCurrentMode+0x60>
 80068ce:	e001      	b.n	80068d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e005      	b.n	80068e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2bc8      	cmp	r3, #200	@ 0xc8
 80068d8:	d101      	bne.n	80068de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068e8:	b084      	sub	sp, #16
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b086      	sub	sp, #24
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80068f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006902:	2300      	movs	r3, #0
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	e009      	b.n	800691c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	3340      	adds	r3, #64	@ 0x40
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	2200      	movs	r2, #0
 8006914:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3301      	adds	r3, #1
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b0e      	cmp	r3, #14
 8006920:	d9f2      	bls.n	8006908 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006922:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006926:	2b00      	cmp	r3, #0
 8006928:	d11c      	bne.n	8006964 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006938:	f043 0302 	orr.w	r3, r3, #2
 800693c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006942:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	639a      	str	r2, [r3, #56]	@ 0x38
 8006962:	e00b      	b.n	800697c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006968:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006974:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006982:	461a      	mov	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006988:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10d      	bne.n	80069ac <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006994:	2b00      	cmp	r3, #0
 8006996:	d104      	bne.n	80069a2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006998:	2100      	movs	r1, #0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f968 	bl	8006c70 <USB_SetDevSpeed>
 80069a0:	e008      	b.n	80069b4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069a2:	2101      	movs	r1, #1
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f963 	bl	8006c70 <USB_SetDevSpeed>
 80069aa:	e003      	b.n	80069b4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069ac:	2103      	movs	r1, #3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f95e 	bl	8006c70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069b4:	2110      	movs	r1, #16
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f8fa 	bl	8006bb0 <USB_FlushTxFifo>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f924 	bl	8006c14 <USB_FlushRxFifo>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069dc:	461a      	mov	r2, r3
 80069de:	2300      	movs	r3, #0
 80069e0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e8:	461a      	mov	r2, r3
 80069ea:	2300      	movs	r3, #0
 80069ec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f4:	461a      	mov	r2, r3
 80069f6:	2300      	movs	r3, #0
 80069f8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069fa:	2300      	movs	r3, #0
 80069fc:	613b      	str	r3, [r7, #16]
 80069fe:	e043      	b.n	8006a88 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a16:	d118      	bne.n	8006a4a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	e013      	b.n	8006a5c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a40:	461a      	mov	r2, r3
 8006a42:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	e008      	b.n	8006a5c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a56:	461a      	mov	r2, r3
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	3301      	adds	r3, #1
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d3b5      	bcc.n	8006a00 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	e043      	b.n	8006b22 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006aac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ab0:	d118      	bne.n	8006ae4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e013      	b.n	8006af6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ada:	461a      	mov	r2, r3
 8006adc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	e008      	b.n	8006af6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af0:	461a      	mov	r2, r3
 8006af2:	2300      	movs	r3, #0
 8006af4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b02:	461a      	mov	r2, r3
 8006b04:	2300      	movs	r3, #0
 8006b06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b14:	461a      	mov	r2, r3
 8006b16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b26:	461a      	mov	r2, r3
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d3b5      	bcc.n	8006a9a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b40:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006b4e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d105      	bne.n	8006b64 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	f043 0210 	orr.w	r2, r3, #16
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699a      	ldr	r2, [r3, #24]
 8006b68:	4b10      	ldr	r3, [pc, #64]	@ (8006bac <USB_DevInit+0x2c4>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	f043 0208 	orr.w	r2, r3, #8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d107      	bne.n	8006b9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b94:	f043 0304 	orr.w	r3, r3, #4
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ba8:	b004      	add	sp, #16
 8006baa:	4770      	bx	lr
 8006bac:	803c3800 	.word	0x803c3800

08006bb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bca:	d901      	bls.n	8006bd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e01b      	b.n	8006c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	daf2      	bge.n	8006bbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	019b      	lsls	r3, r3, #6
 8006be0:	f043 0220 	orr.w	r2, r3, #32
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3301      	adds	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bf4:	d901      	bls.n	8006bfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e006      	b.n	8006c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0320 	and.w	r3, r3, #32
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d0f0      	beq.n	8006be8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c2c:	d901      	bls.n	8006c32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e018      	b.n	8006c64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	daf2      	bge.n	8006c20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2210      	movs	r2, #16
 8006c42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3301      	adds	r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c50:	d901      	bls.n	8006c56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e006      	b.n	8006c64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0310 	and.w	r3, r3, #16
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d0f0      	beq.n	8006c44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c90:	4313      	orrs	r3, r2
 8006c92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b087      	sub	sp, #28
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 0306 	and.w	r3, r3, #6
 8006cba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d102      	bne.n	8006cc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]
 8006cc6:	e00a      	b.n	8006cde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d002      	beq.n	8006cd4 <USB_GetDevSpeed+0x32>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2b06      	cmp	r3, #6
 8006cd2:	d102      	bne.n	8006cda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	75fb      	strb	r3, [r7, #23]
 8006cd8:	e001      	b.n	8006cde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006cda:	230f      	movs	r3, #15
 8006cdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d13a      	bne.n	8006d7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	2101      	movs	r1, #1
 8006d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	68f9      	ldr	r1, [r7, #12]
 8006d22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d26:	4313      	orrs	r3, r2
 8006d28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d155      	bne.n	8006dec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	791b      	ldrb	r3, [r3, #4]
 8006d5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	059b      	lsls	r3, r3, #22
 8006d62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d64:	4313      	orrs	r3, r2
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	e036      	b.n	8006dec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d84:	69da      	ldr	r2, [r3, #28]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	2101      	movs	r1, #1
 8006d90:	fa01 f303 	lsl.w	r3, r1, r3
 8006d94:	041b      	lsls	r3, r3, #16
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d11a      	bne.n	8006dec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	791b      	ldrb	r3, [r3, #4]
 8006dd0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dd2:	430b      	orrs	r3, r1
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d161      	bne.n	8006edc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e2e:	d11f      	bne.n	8006e70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	0151      	lsls	r1, r2, #5
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	440a      	add	r2, r1
 8006e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	2101      	movs	r1, #1
 8006e82:	fa01 f303 	lsl.w	r3, r1, r3
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e90:	4013      	ands	r3, r2
 8006e92:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	43db      	mvns	r3, r3
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	0159      	lsls	r1, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	440b      	add	r3, r1
 8006ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4b35      	ldr	r3, [pc, #212]	@ (8006fac <USB_DeactivateEndpoint+0x1b0>)
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	600b      	str	r3, [r1, #0]
 8006eda:	e060      	b.n	8006f9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ef2:	d11f      	bne.n	8006f34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f0e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f003 030f 	and.w	r3, r3, #15
 8006f44:	2101      	movs	r1, #1
 8006f46:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4a:	041b      	lsls	r3, r3, #16
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f54:	4013      	ands	r3, r2
 8006f56:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	f003 030f 	and.w	r3, r3, #15
 8006f68:	2101      	movs	r1, #1
 8006f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6e:	041b      	lsls	r3, r3, #16
 8006f70:	43db      	mvns	r3, r3
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f78:	4013      	ands	r3, r2
 8006f7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	0159      	lsls	r1, r3, #5
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	440b      	add	r3, r1
 8006f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f96:	4619      	mov	r1, r3
 8006f98:	4b05      	ldr	r3, [pc, #20]	@ (8006fb0 <USB_DeactivateEndpoint+0x1b4>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	ec337800 	.word	0xec337800
 8006fb0:	eff37800 	.word	0xeff37800

08006fb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	@ 0x28
 8006fb8:	af02      	add	r7, sp, #8
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	f040 817f 	bne.w	80072d4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d132      	bne.n	8007044 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ff8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ffc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800701c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007020:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	69fa      	ldr	r2, [r7, #28]
 8007036:	440a      	add	r2, r1
 8007038:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800703c:	0cdb      	lsrs	r3, r3, #19
 800703e:	04db      	lsls	r3, r3, #19
 8007040:	6113      	str	r3, [r2, #16]
 8007042:	e097      	b.n	8007174 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800705e:	0cdb      	lsrs	r3, r3, #19
 8007060:	04db      	lsls	r3, r3, #19
 8007062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800707e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007082:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007086:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d11a      	bne.n	80070c4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	d903      	bls.n	80070a2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070c0:	6113      	str	r3, [r2, #16]
 80070c2:	e044      	b.n	800714e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4413      	add	r3, r2
 80070ce:	1e5a      	subs	r2, r3, #1
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	8afb      	ldrh	r3, [r7, #22]
 80070ea:	04d9      	lsls	r1, r3, #19
 80070ec:	4ba4      	ldr	r3, [pc, #656]	@ (8007380 <USB_EPStartXfer+0x3cc>)
 80070ee:	400b      	ands	r3, r1
 80070f0:	69b9      	ldr	r1, [r7, #24]
 80070f2:	0148      	lsls	r0, r1, #5
 80070f4:	69f9      	ldr	r1, [r7, #28]
 80070f6:	4401      	add	r1, r0
 80070f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070fc:	4313      	orrs	r3, r2
 80070fe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	791b      	ldrb	r3, [r3, #4]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d122      	bne.n	800714e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	0151      	lsls	r1, r2, #5
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	440a      	add	r2, r1
 800711e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007122:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007126:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	8afb      	ldrh	r3, [r7, #22]
 8007138:	075b      	lsls	r3, r3, #29
 800713a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800713e:	69b9      	ldr	r1, [r7, #24]
 8007140:	0148      	lsls	r0, r1, #5
 8007142:	69f9      	ldr	r1, [r7, #28]
 8007144:	4401      	add	r1, r0
 8007146:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800714a:	4313      	orrs	r3, r2
 800714c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007164:	69b9      	ldr	r1, [r7, #24]
 8007166:	0148      	lsls	r0, r1, #5
 8007168:	69f9      	ldr	r1, [r7, #28]
 800716a:	4401      	add	r1, r0
 800716c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007170:	4313      	orrs	r3, r2
 8007172:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d14b      	bne.n	8007212 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d009      	beq.n	8007196 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800718e:	461a      	mov	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	791b      	ldrb	r3, [r3, #4]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d128      	bne.n	80071f0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d110      	bne.n	80071d0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	69fa      	ldr	r2, [r7, #28]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	e00f      	b.n	80071f0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ee:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	440a      	add	r2, r1
 8007206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800720a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	e166      	b.n	80074e0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800722c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007230:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	791b      	ldrb	r3, [r3, #4]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d015      	beq.n	8007266 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 814e 	beq.w	80074e0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800724a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	2101      	movs	r1, #1
 8007256:	fa01 f303 	lsl.w	r3, r1, r3
 800725a:	69f9      	ldr	r1, [r7, #28]
 800725c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007260:	4313      	orrs	r3, r2
 8007262:	634b      	str	r3, [r1, #52]	@ 0x34
 8007264:	e13c      	b.n	80074e0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d110      	bne.n	8007298 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	0151      	lsls	r1, r2, #5
 8007288:	69fa      	ldr	r2, [r7, #28]
 800728a:	440a      	add	r2, r1
 800728c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007290:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	e00f      	b.n	80072b8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072b6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	68d9      	ldr	r1, [r3, #12]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	b298      	uxth	r0, r3
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	4603      	mov	r3, r0
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f9b9 	bl	8007644 <USB_WritePacket>
 80072d2:	e105      	b.n	80074e0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072ee:	0cdb      	lsrs	r3, r3, #19
 80072f0:	04db      	lsls	r3, r3, #19
 80072f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800730e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007312:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007316:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d132      	bne.n	8007384 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800734c:	69b9      	ldr	r1, [r7, #24]
 800734e:	0148      	lsls	r0, r1, #5
 8007350:	69f9      	ldr	r1, [r7, #28]
 8007352:	4401      	add	r1, r0
 8007354:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007358:	4313      	orrs	r3, r2
 800735a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	0151      	lsls	r1, r2, #5
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	440a      	add	r2, r1
 8007372:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007376:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800737a:	6113      	str	r3, [r2, #16]
 800737c:	e062      	b.n	8007444 <USB_EPStartXfer+0x490>
 800737e:	bf00      	nop
 8007380:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d123      	bne.n	80073d4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073a2:	69b9      	ldr	r1, [r7, #24]
 80073a4:	0148      	lsls	r0, r1, #5
 80073a6:	69f9      	ldr	r1, [r7, #28]
 80073a8:	4401      	add	r1, r0
 80073aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80073ae:	4313      	orrs	r3, r2
 80073b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073d0:	6113      	str	r3, [r2, #16]
 80073d2:	e037      	b.n	8007444 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	691a      	ldr	r2, [r3, #16]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	4413      	add	r3, r2
 80073de:	1e5a      	subs	r2, r3, #1
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	8afa      	ldrh	r2, [r7, #22]
 80073f0:	fb03 f202 	mul.w	r2, r3, r2
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007404:	691a      	ldr	r2, [r3, #16]
 8007406:	8afb      	ldrh	r3, [r7, #22]
 8007408:	04d9      	lsls	r1, r3, #19
 800740a:	4b38      	ldr	r3, [pc, #224]	@ (80074ec <USB_EPStartXfer+0x538>)
 800740c:	400b      	ands	r3, r1
 800740e:	69b9      	ldr	r1, [r7, #24]
 8007410:	0148      	lsls	r0, r1, #5
 8007412:	69f9      	ldr	r1, [r7, #28]
 8007414:	4401      	add	r1, r0
 8007416:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800741a:	4313      	orrs	r3, r2
 800741c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007434:	69b9      	ldr	r1, [r7, #24]
 8007436:	0148      	lsls	r0, r1, #5
 8007438:	69f9      	ldr	r1, [r7, #28]
 800743a:	4401      	add	r1, r0
 800743c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007440:	4313      	orrs	r3, r2
 8007442:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d10d      	bne.n	8007466 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	68d9      	ldr	r1, [r3, #12]
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007462:	460a      	mov	r2, r1
 8007464:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	791b      	ldrb	r3, [r3, #4]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d128      	bne.n	80074c0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800747a:	2b00      	cmp	r3, #0
 800747c:	d110      	bne.n	80074a0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	0151      	lsls	r1, r2, #5
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	440a      	add	r2, r1
 8007494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007498:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	e00f      	b.n	80074c0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	0151      	lsls	r1, r2, #5
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	440a      	add	r2, r1
 80074d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80074de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3720      	adds	r7, #32
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	1ff80000 	.word	0x1ff80000

080074f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d14a      	bne.n	80075a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007522:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007526:	f040 8086 	bne.w	8007636 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	7812      	ldrb	r2, [r2, #0]
 800753e:	0151      	lsls	r1, r2, #5
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	440a      	add	r2, r1
 8007544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007548:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800754c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	7812      	ldrb	r2, [r2, #0]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	440a      	add	r2, r1
 8007568:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800756c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007570:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3301      	adds	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800757e:	4293      	cmp	r3, r2
 8007580:	d902      	bls.n	8007588 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	75fb      	strb	r3, [r7, #23]
          break;
 8007586:	e056      	b.n	8007636 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800759c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075a0:	d0e7      	beq.n	8007572 <USB_EPStopXfer+0x82>
 80075a2:	e048      	b.n	8007636 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075bc:	d13b      	bne.n	8007636 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	7812      	ldrb	r2, [r2, #0]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	7812      	ldrb	r2, [r2, #0]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007600:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007604:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3301      	adds	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007612:	4293      	cmp	r3, r2
 8007614:	d902      	bls.n	800761c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	75fb      	strb	r3, [r7, #23]
          break;
 800761a:	e00c      	b.n	8007636 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007630:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007634:	d0e7      	beq.n	8007606 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007636:	7dfb      	ldrb	r3, [r7, #23]
}
 8007638:	4618      	mov	r0, r3
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007644:	b480      	push	{r7}
 8007646:	b089      	sub	sp, #36	@ 0x24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4611      	mov	r1, r2
 8007650:	461a      	mov	r2, r3
 8007652:	460b      	mov	r3, r1
 8007654:	71fb      	strb	r3, [r7, #7]
 8007656:	4613      	mov	r3, r2
 8007658:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007662:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007666:	2b00      	cmp	r3, #0
 8007668:	d123      	bne.n	80076b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800766a:	88bb      	ldrh	r3, [r7, #4]
 800766c:	3303      	adds	r3, #3
 800766e:	089b      	lsrs	r3, r3, #2
 8007670:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007672:	2300      	movs	r3, #0
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	e018      	b.n	80076aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	031a      	lsls	r2, r3, #12
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	4413      	add	r3, r2
 8007680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007684:	461a      	mov	r2, r3
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	3301      	adds	r3, #1
 8007690:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	3301      	adds	r3, #1
 8007696:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	3301      	adds	r3, #1
 800769c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	3301      	adds	r3, #1
 80076a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	3301      	adds	r3, #1
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d3e2      	bcc.n	8007678 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3724      	adds	r7, #36	@ 0x24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b08b      	sub	sp, #44	@ 0x2c
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	089b      	lsrs	r3, r3, #2
 80076da:	b29b      	uxth	r3, r3
 80076dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076e6:	2300      	movs	r3, #0
 80076e8:	623b      	str	r3, [r7, #32]
 80076ea:	e014      	b.n	8007716 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	3301      	adds	r3, #1
 80076fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	3301      	adds	r3, #1
 8007702:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	3301      	adds	r3, #1
 8007708:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	3301      	adds	r3, #1
 800770e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	3301      	adds	r3, #1
 8007714:	623b      	str	r3, [r7, #32]
 8007716:	6a3a      	ldr	r2, [r7, #32]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	429a      	cmp	r2, r3
 800771c:	d3e6      	bcc.n	80076ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800771e:	8bfb      	ldrh	r3, [r7, #30]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01e      	beq.n	8007762 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800772e:	461a      	mov	r2, r3
 8007730:	f107 0310 	add.w	r3, r7, #16
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	fa22 f303 	lsr.w	r3, r2, r3
 8007744:	b2da      	uxtb	r2, r3
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	701a      	strb	r2, [r3, #0]
      i++;
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	3301      	adds	r3, #1
 800774e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	3301      	adds	r3, #1
 8007754:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007756:	8bfb      	ldrh	r3, [r7, #30]
 8007758:	3b01      	subs	r3, #1
 800775a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800775c:	8bfb      	ldrh	r3, [r7, #30]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1ea      	bne.n	8007738 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007764:	4618      	mov	r0, r3
 8007766:	372c      	adds	r7, #44	@ 0x2c
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	785b      	ldrb	r3, [r3, #1]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d12c      	bne.n	80077e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	db12      	blt.n	80077c4 <USB_EPSetStall+0x54>
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00f      	beq.n	80077c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	0151      	lsls	r1, r2, #5
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	440a      	add	r2, r1
 80077ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80077c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	0151      	lsls	r1, r2, #5
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	440a      	add	r2, r1
 80077da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	e02b      	b.n	800783e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	db12      	blt.n	800781e <USB_EPSetStall+0xae>
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00f      	beq.n	800781e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	0151      	lsls	r1, r2, #5
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	440a      	add	r2, r1
 8007814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007818:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800781c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	0151      	lsls	r1, r2, #5
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	440a      	add	r2, r1
 8007834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007838:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800783c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d128      	bne.n	80078ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	0151      	lsls	r1, r2, #5
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	440a      	add	r2, r1
 800787e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007882:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007886:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	791b      	ldrb	r3, [r3, #4]
 800788c:	2b03      	cmp	r3, #3
 800788e:	d003      	beq.n	8007898 <USB_EPClearStall+0x4c>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	791b      	ldrb	r3, [r3, #4]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d138      	bne.n	800790a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	0151      	lsls	r1, r2, #5
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	440a      	add	r2, r1
 80078ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	e027      	b.n	800790a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	0151      	lsls	r1, r2, #5
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	440a      	add	r2, r1
 80078d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d003      	beq.n	80078ea <USB_EPClearStall+0x9e>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	791b      	ldrb	r3, [r3, #4]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d10f      	bne.n	800790a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	0151      	lsls	r1, r2, #5
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	440a      	add	r2, r1
 8007900:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007908:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007936:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800793a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800794c:	68f9      	ldr	r1, [r7, #12]
 800794e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007952:	4313      	orrs	r3, r2
 8007954:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800797e:	f023 0303 	bic.w	r3, r3, #3
 8007982:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007992:	f023 0302 	bic.w	r3, r3, #2
 8007996:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80079c0:	f023 0303 	bic.w	r3, r3, #3
 80079c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079d4:	f043 0302 	orr.w	r3, r3, #2
 80079d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4013      	ands	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a00:	68fb      	ldr	r3, [r7, #12]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b085      	sub	sp, #20
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	0c1b      	lsrs	r3, r3, #16
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b085      	sub	sp, #20
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	4013      	ands	r3, r2
 8007a64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	b29b      	uxth	r3, r3
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b085      	sub	sp, #20
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b087      	sub	sp, #28
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	460b      	mov	r3, r1
 8007abc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	f003 030f 	and.w	r3, r3, #15
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae2:	01db      	lsls	r3, r3, #7
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4013      	ands	r3, r2
 8007afe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b00:	68bb      	ldr	r3, [r7, #8]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007b48:	f023 0307 	bic.w	r3, r3, #7
 8007b4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	333c      	adds	r3, #60	@ 0x3c
 8007b86:	3304      	adds	r3, #4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4a26      	ldr	r2, [pc, #152]	@ (8007c28 <USB_EP0_OutStart+0xb8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d90a      	bls.n	8007baa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ba4:	d101      	bne.n	8007baa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e037      	b.n	8007c1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bd8:	f043 0318 	orr.w	r3, r3, #24
 8007bdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007bf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007bf2:	7afb      	ldrb	r3, [r7, #11]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d10f      	bne.n	8007c18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfe:	461a      	mov	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c12:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	4f54300a 	.word	0x4f54300a

08007c2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c44:	d901      	bls.n	8007c4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e022      	b.n	8007c90 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	daf2      	bge.n	8007c38 <USB_CoreReset+0xc>

  count = 10U;
 8007c52:	230a      	movs	r3, #10
 8007c54:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007c56:	e002      	b.n	8007c5e <USB_CoreReset+0x32>
  {
    count--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1f9      	bne.n	8007c58 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f043 0201 	orr.w	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	3301      	adds	r3, #1
 8007c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c7c:	d901      	bls.n	8007c82 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e006      	b.n	8007c90 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d0f0      	beq.n	8007c70 <USB_CoreReset+0x44>

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ca8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007cac:	f005 faa8 	bl	800d200 <USBD_static_malloc>
 8007cb0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d109      	bne.n	8007ccc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	32b0      	adds	r2, #176	@ 0xb0
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e0d4      	b.n	8007e76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ccc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f005 fad8 	bl	800d288 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	32b0      	adds	r2, #176	@ 0xb0
 8007ce2:	68f9      	ldr	r1, [r7, #12]
 8007ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	32b0      	adds	r2, #176	@ 0xb0
 8007cf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	7c1b      	ldrb	r3, [r3, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d138      	bne.n	8007d76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d04:	4b5e      	ldr	r3, [pc, #376]	@ (8007e80 <USBD_CDC_Init+0x1e4>)
 8007d06:	7819      	ldrb	r1, [r3, #0]
 8007d08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f005 f953 	bl	800cfba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d14:	4b5a      	ldr	r3, [pc, #360]	@ (8007e80 <USBD_CDC_Init+0x1e4>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 020f 	and.w	r2, r3, #15
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	3323      	adds	r3, #35	@ 0x23
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d2e:	4b55      	ldr	r3, [pc, #340]	@ (8007e84 <USBD_CDC_Init+0x1e8>)
 8007d30:	7819      	ldrb	r1, [r3, #0]
 8007d32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d36:	2202      	movs	r2, #2
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f005 f93e 	bl	800cfba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d3e:	4b51      	ldr	r3, [pc, #324]	@ (8007e84 <USBD_CDC_Init+0x1e8>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	f003 020f 	and.w	r2, r3, #15
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007d56:	2201      	movs	r2, #1
 8007d58:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8007e88 <USBD_CDC_Init+0x1ec>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f003 020f 	and.w	r2, r3, #15
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	331c      	adds	r3, #28
 8007d70:	2210      	movs	r2, #16
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	e035      	b.n	8007de2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d76:	4b42      	ldr	r3, [pc, #264]	@ (8007e80 <USBD_CDC_Init+0x1e4>)
 8007d78:	7819      	ldrb	r1, [r3, #0]
 8007d7a:	2340      	movs	r3, #64	@ 0x40
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f005 f91b 	bl	800cfba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d84:	4b3e      	ldr	r3, [pc, #248]	@ (8007e80 <USBD_CDC_Init+0x1e4>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	f003 020f 	and.w	r2, r3, #15
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	440b      	add	r3, r1
 8007d98:	3323      	adds	r3, #35	@ 0x23
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d9e:	4b39      	ldr	r3, [pc, #228]	@ (8007e84 <USBD_CDC_Init+0x1e8>)
 8007da0:	7819      	ldrb	r1, [r3, #0]
 8007da2:	2340      	movs	r3, #64	@ 0x40
 8007da4:	2202      	movs	r2, #2
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f005 f907 	bl	800cfba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007dac:	4b35      	ldr	r3, [pc, #212]	@ (8007e84 <USBD_CDC_Init+0x1e8>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	f003 020f 	and.w	r2, r3, #15
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8007e88 <USBD_CDC_Init+0x1ec>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	f003 020f 	and.w	r2, r3, #15
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	331c      	adds	r3, #28
 8007dde:	2210      	movs	r2, #16
 8007de0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007de2:	4b29      	ldr	r3, [pc, #164]	@ (8007e88 <USBD_CDC_Init+0x1ec>)
 8007de4:	7819      	ldrb	r1, [r3, #0]
 8007de6:	2308      	movs	r3, #8
 8007de8:	2203      	movs	r2, #3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f005 f8e5 	bl	800cfba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007df0:	4b25      	ldr	r3, [pc, #148]	@ (8007e88 <USBD_CDC_Init+0x1ec>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f003 020f 	and.w	r2, r3, #15
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	3323      	adds	r3, #35	@ 0x23
 8007e06:	2201      	movs	r2, #1
 8007e08:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	33b0      	adds	r3, #176	@ 0xb0
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007e40:	2302      	movs	r3, #2
 8007e42:	e018      	b.n	8007e76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	7c1b      	ldrb	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e84 <USBD_CDC_Init+0x1e8>)
 8007e4e:	7819      	ldrb	r1, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f005 f99c 	bl	800d198 <USBD_LL_PrepareReceive>
 8007e60:	e008      	b.n	8007e74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e62:	4b08      	ldr	r3, [pc, #32]	@ (8007e84 <USBD_CDC_Init+0x1e8>)
 8007e64:	7819      	ldrb	r1, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e6c:	2340      	movs	r3, #64	@ 0x40
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f005 f992 	bl	800d198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000093 	.word	0x20000093
 8007e84:	20000094 	.word	0x20000094
 8007e88:	20000095 	.word	0x20000095

08007e8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007e98:	4b3a      	ldr	r3, [pc, #232]	@ (8007f84 <USBD_CDC_DeInit+0xf8>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f005 f8b1 	bl	800d006 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ea4:	4b37      	ldr	r3, [pc, #220]	@ (8007f84 <USBD_CDC_DeInit+0xf8>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f003 020f 	and.w	r2, r3, #15
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3323      	adds	r3, #35	@ 0x23
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007ebe:	4b32      	ldr	r3, [pc, #200]	@ (8007f88 <USBD_CDC_DeInit+0xfc>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f005 f89e 	bl	800d006 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007eca:	4b2f      	ldr	r3, [pc, #188]	@ (8007f88 <USBD_CDC_DeInit+0xfc>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 020f 	and.w	r2, r3, #15
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	440b      	add	r3, r1
 8007ede:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007ee6:	4b29      	ldr	r3, [pc, #164]	@ (8007f8c <USBD_CDC_DeInit+0x100>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f005 f88a 	bl	800d006 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007ef2:	4b26      	ldr	r3, [pc, #152]	@ (8007f8c <USBD_CDC_DeInit+0x100>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	f003 020f 	and.w	r2, r3, #15
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	3323      	adds	r3, #35	@ 0x23
 8007f08:	2200      	movs	r2, #0
 8007f0a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8007f8c <USBD_CDC_DeInit+0x100>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f003 020f 	and.w	r2, r3, #15
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	331c      	adds	r3, #28
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	32b0      	adds	r2, #176	@ 0xb0
 8007f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01f      	beq.n	8007f78 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	33b0      	adds	r3, #176	@ 0xb0
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	32b0      	adds	r2, #176	@ 0xb0
 8007f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f005 f95e 	bl	800d21c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	32b0      	adds	r2, #176	@ 0xb0
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000093 	.word	0x20000093
 8007f88:	20000094 	.word	0x20000094
 8007f8c:	20000095 	.word	0x20000095

08007f90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	32b0      	adds	r2, #176	@ 0xb0
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e0bf      	b.n	8008140 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d050      	beq.n	800806e <USBD_CDC_Setup+0xde>
 8007fcc:	2b20      	cmp	r3, #32
 8007fce:	f040 80af 	bne.w	8008130 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	88db      	ldrh	r3, [r3, #6]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d03a      	beq.n	8008050 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b25b      	sxtb	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	da1b      	bge.n	800801c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	33b0      	adds	r3, #176	@ 0xb0
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ffa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	88d2      	ldrh	r2, [r2, #6]
 8008000:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	88db      	ldrh	r3, [r3, #6]
 8008006:	2b07      	cmp	r3, #7
 8008008:	bf28      	it	cs
 800800a:	2307      	movcs	r3, #7
 800800c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	89fa      	ldrh	r2, [r7, #14]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 fda9 	bl	8009b6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800801a:	e090      	b.n	800813e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	785a      	ldrb	r2, [r3, #1]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	88db      	ldrh	r3, [r3, #6]
 800802a:	2b3f      	cmp	r3, #63	@ 0x3f
 800802c:	d803      	bhi.n	8008036 <USBD_CDC_Setup+0xa6>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	88db      	ldrh	r3, [r3, #6]
 8008032:	b2da      	uxtb	r2, r3
 8008034:	e000      	b.n	8008038 <USBD_CDC_Setup+0xa8>
 8008036:	2240      	movs	r2, #64	@ 0x40
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800803e:	6939      	ldr	r1, [r7, #16]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008046:	461a      	mov	r2, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 fdbe 	bl	8009bca <USBD_CtlPrepareRx>
      break;
 800804e:	e076      	b.n	800813e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	33b0      	adds	r3, #176	@ 0xb0
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	7850      	ldrb	r0, [r2, #1]
 8008066:	2200      	movs	r2, #0
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	4798      	blx	r3
      break;
 800806c:	e067      	b.n	800813e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	785b      	ldrb	r3, [r3, #1]
 8008072:	2b0b      	cmp	r3, #11
 8008074:	d851      	bhi.n	800811a <USBD_CDC_Setup+0x18a>
 8008076:	a201      	add	r2, pc, #4	@ (adr r2, 800807c <USBD_CDC_Setup+0xec>)
 8008078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807c:	080080ad 	.word	0x080080ad
 8008080:	08008129 	.word	0x08008129
 8008084:	0800811b 	.word	0x0800811b
 8008088:	0800811b 	.word	0x0800811b
 800808c:	0800811b 	.word	0x0800811b
 8008090:	0800811b 	.word	0x0800811b
 8008094:	0800811b 	.word	0x0800811b
 8008098:	0800811b 	.word	0x0800811b
 800809c:	0800811b 	.word	0x0800811b
 80080a0:	0800811b 	.word	0x0800811b
 80080a4:	080080d7 	.word	0x080080d7
 80080a8:	08008101 	.word	0x08008101
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d107      	bne.n	80080c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80080b8:	f107 030a 	add.w	r3, r7, #10
 80080bc:	2202      	movs	r2, #2
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 fd53 	bl	8009b6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080c6:	e032      	b.n	800812e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 fcd1 	bl	8009a72 <USBD_CtlError>
            ret = USBD_FAIL;
 80080d0:	2303      	movs	r3, #3
 80080d2:	75fb      	strb	r3, [r7, #23]
          break;
 80080d4:	e02b      	b.n	800812e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d107      	bne.n	80080f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80080e2:	f107 030d 	add.w	r3, r7, #13
 80080e6:	2201      	movs	r2, #1
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 fd3e 	bl	8009b6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080f0:	e01d      	b.n	800812e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 fcbc 	bl	8009a72 <USBD_CtlError>
            ret = USBD_FAIL;
 80080fa:	2303      	movs	r3, #3
 80080fc:	75fb      	strb	r3, [r7, #23]
          break;
 80080fe:	e016      	b.n	800812e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b03      	cmp	r3, #3
 800810a:	d00f      	beq.n	800812c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 fcaf 	bl	8009a72 <USBD_CtlError>
            ret = USBD_FAIL;
 8008114:	2303      	movs	r3, #3
 8008116:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008118:	e008      	b.n	800812c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 fca8 	bl	8009a72 <USBD_CtlError>
          ret = USBD_FAIL;
 8008122:	2303      	movs	r3, #3
 8008124:	75fb      	strb	r3, [r7, #23]
          break;
 8008126:	e002      	b.n	800812e <USBD_CDC_Setup+0x19e>
          break;
 8008128:	bf00      	nop
 800812a:	e008      	b.n	800813e <USBD_CDC_Setup+0x1ae>
          break;
 800812c:	bf00      	nop
      }
      break;
 800812e:	e006      	b.n	800813e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 fc9d 	bl	8009a72 <USBD_CtlError>
      ret = USBD_FAIL;
 8008138:	2303      	movs	r3, #3
 800813a:	75fb      	strb	r3, [r7, #23]
      break;
 800813c:	bf00      	nop
  }

  return (uint8_t)ret;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800815a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	32b0      	adds	r2, #176	@ 0xb0
 8008166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800816e:	2303      	movs	r3, #3
 8008170:	e065      	b.n	800823e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	32b0      	adds	r2, #176	@ 0xb0
 800817c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008180:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	f003 020f 	and.w	r2, r3, #15
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	3314      	adds	r3, #20
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d02f      	beq.n	80081fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	f003 020f 	and.w	r2, r3, #15
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	3314      	adds	r3, #20
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	78fb      	ldrb	r3, [r7, #3]
 80081b4:	f003 010f 	and.w	r1, r3, #15
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	460b      	mov	r3, r1
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	440b      	add	r3, r1
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4403      	add	r3, r0
 80081c4:	331c      	adds	r3, #28
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80081cc:	fb01 f303 	mul.w	r3, r1, r3
 80081d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d112      	bne.n	80081fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80081d6:	78fb      	ldrb	r3, [r7, #3]
 80081d8:	f003 020f 	and.w	r2, r3, #15
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	3314      	adds	r3, #20
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081ee:	78f9      	ldrb	r1, [r7, #3]
 80081f0:	2300      	movs	r3, #0
 80081f2:	2200      	movs	r2, #0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f004 ffae 	bl	800d156 <USBD_LL_Transmit>
 80081fa:	e01f      	b.n	800823c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	33b0      	adds	r3, #176	@ 0xb0
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d010      	beq.n	800823c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	33b0      	adds	r3, #176	@ 0xb0
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008238:	78fa      	ldrb	r2, [r7, #3]
 800823a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	32b0      	adds	r2, #176	@ 0xb0
 800825c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008260:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	32b0      	adds	r2, #176	@ 0xb0
 800826c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008274:	2303      	movs	r3, #3
 8008276:	e01a      	b.n	80082ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f004 ffac 	bl	800d1da <USBD_LL_GetRxDataSize>
 8008282:	4602      	mov	r2, r0
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	33b0      	adds	r3, #176	@ 0xb0
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80082a8:	4611      	mov	r1, r2
 80082aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	32b0      	adds	r2, #176	@ 0xb0
 80082c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e024      	b.n	8008322 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	33b0      	adds	r3, #176	@ 0xb0
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d019      	beq.n	8008320 <USBD_CDC_EP0_RxReady+0x6a>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80082f2:	2bff      	cmp	r3, #255	@ 0xff
 80082f4:	d014      	beq.n	8008320 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	33b0      	adds	r3, #176	@ 0xb0
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800830e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008316:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	22ff      	movs	r2, #255	@ 0xff
 800831c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
	...

0800832c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008334:	2182      	movs	r1, #130	@ 0x82
 8008336:	4818      	ldr	r0, [pc, #96]	@ (8008398 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008338:	f000 fd62 	bl	8008e00 <USBD_GetEpDesc>
 800833c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800833e:	2101      	movs	r1, #1
 8008340:	4815      	ldr	r0, [pc, #84]	@ (8008398 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008342:	f000 fd5d 	bl	8008e00 <USBD_GetEpDesc>
 8008346:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008348:	2181      	movs	r1, #129	@ 0x81
 800834a:	4813      	ldr	r0, [pc, #76]	@ (8008398 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800834c:	f000 fd58 	bl	8008e00 <USBD_GetEpDesc>
 8008350:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2210      	movs	r2, #16
 800835c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d006      	beq.n	8008372 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2200      	movs	r2, #0
 8008368:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800836c:	711a      	strb	r2, [r3, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d006      	beq.n	8008386 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008380:	711a      	strb	r2, [r3, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2243      	movs	r2, #67	@ 0x43
 800838a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800838c:	4b02      	ldr	r3, [pc, #8]	@ (8008398 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000050 	.word	0x20000050

0800839c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083a4:	2182      	movs	r1, #130	@ 0x82
 80083a6:	4818      	ldr	r0, [pc, #96]	@ (8008408 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80083a8:	f000 fd2a 	bl	8008e00 <USBD_GetEpDesc>
 80083ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083ae:	2101      	movs	r1, #1
 80083b0:	4815      	ldr	r0, [pc, #84]	@ (8008408 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80083b2:	f000 fd25 	bl	8008e00 <USBD_GetEpDesc>
 80083b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083b8:	2181      	movs	r1, #129	@ 0x81
 80083ba:	4813      	ldr	r0, [pc, #76]	@ (8008408 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80083bc:	f000 fd20 	bl	8008e00 <USBD_GetEpDesc>
 80083c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2210      	movs	r2, #16
 80083cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d006      	beq.n	80083e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2200      	movs	r2, #0
 80083d8:	711a      	strb	r2, [r3, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f042 0202 	orr.w	r2, r2, #2
 80083e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	711a      	strb	r2, [r3, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f042 0202 	orr.w	r2, r2, #2
 80083f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2243      	movs	r2, #67	@ 0x43
 80083fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083fc:	4b02      	ldr	r3, [pc, #8]	@ (8008408 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000050 	.word	0x20000050

0800840c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008414:	2182      	movs	r1, #130	@ 0x82
 8008416:	4818      	ldr	r0, [pc, #96]	@ (8008478 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008418:	f000 fcf2 	bl	8008e00 <USBD_GetEpDesc>
 800841c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800841e:	2101      	movs	r1, #1
 8008420:	4815      	ldr	r0, [pc, #84]	@ (8008478 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008422:	f000 fced 	bl	8008e00 <USBD_GetEpDesc>
 8008426:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008428:	2181      	movs	r1, #129	@ 0x81
 800842a:	4813      	ldr	r0, [pc, #76]	@ (8008478 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800842c:	f000 fce8 	bl	8008e00 <USBD_GetEpDesc>
 8008430:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2210      	movs	r2, #16
 800843c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d006      	beq.n	8008452 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2200      	movs	r2, #0
 8008448:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800844c:	711a      	strb	r2, [r3, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d006      	beq.n	8008466 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008460:	711a      	strb	r2, [r3, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2243      	movs	r2, #67	@ 0x43
 800846a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800846c:	4b02      	ldr	r3, [pc, #8]	@ (8008478 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20000050 	.word	0x20000050

0800847c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	220a      	movs	r2, #10
 8008488:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800848a:	4b03      	ldr	r3, [pc, #12]	@ (8008498 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	2000000c 	.word	0x2000000c

0800849c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e009      	b.n	80084c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	33b0      	adds	r3, #176	@ 0xb0
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b087      	sub	sp, #28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	32b0      	adds	r2, #176	@ 0xb0
 80084e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e008      	b.n	8008508 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	32b0      	adds	r2, #176	@ 0xb0
 8008528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008534:	2303      	movs	r3, #3
 8008536:	e004      	b.n	8008542 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	32b0      	adds	r2, #176	@ 0xb0
 8008562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008566:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008568:	2301      	movs	r3, #1
 800856a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008572:	2303      	movs	r3, #3
 8008574:	e025      	b.n	80085c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800857c:	2b00      	cmp	r3, #0
 800857e:	d11f      	bne.n	80085c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2201      	movs	r2, #1
 8008584:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008588:	4b10      	ldr	r3, [pc, #64]	@ (80085cc <USBD_CDC_TransmitPacket+0x7c>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	f003 020f 	and.w	r2, r3, #15
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4613      	mov	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4403      	add	r3, r0
 80085a2:	3314      	adds	r3, #20
 80085a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80085a6:	4b09      	ldr	r3, [pc, #36]	@ (80085cc <USBD_CDC_TransmitPacket+0x7c>)
 80085a8:	7819      	ldrb	r1, [r3, #0]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f004 fdcd 	bl	800d156 <USBD_LL_Transmit>

    ret = USBD_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000093 	.word	0x20000093

080085d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	32b0      	adds	r2, #176	@ 0xb0
 80085e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	32b0      	adds	r2, #176	@ 0xb0
 80085f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e018      	b.n	8008630 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	7c1b      	ldrb	r3, [r3, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008606:	4b0c      	ldr	r3, [pc, #48]	@ (8008638 <USBD_CDC_ReceivePacket+0x68>)
 8008608:	7819      	ldrb	r1, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008610:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f004 fdbf 	bl	800d198 <USBD_LL_PrepareReceive>
 800861a:	e008      	b.n	800862e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800861c:	4b06      	ldr	r3, [pc, #24]	@ (8008638 <USBD_CDC_ReceivePacket+0x68>)
 800861e:	7819      	ldrb	r1, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008626:	2340      	movs	r3, #64	@ 0x40
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f004 fdb5 	bl	800d198 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	20000094 	.word	0x20000094

0800863c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	4613      	mov	r3, r2
 8008648:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008650:	2303      	movs	r3, #3
 8008652:	e01f      	b.n	8008694 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	79fa      	ldrb	r2, [r7, #7]
 8008686:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f004 fc2f 	bl	800ceec <USBD_LL_Init>
 800868e:	4603      	mov	r3, r0
 8008690:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008692:	7dfb      	ldrb	r3, [r7, #23]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e025      	b.n	8008700 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	32ae      	adds	r2, #174	@ 0xae
 80086c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00f      	beq.n	80086f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	32ae      	adds	r2, #174	@ 0xae
 80086da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e0:	f107 020e 	add.w	r2, r7, #14
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	4602      	mov	r2, r0
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f004 fc37 	bl	800cf84 <USBD_LL_Start>
 8008716:	4603      	mov	r3, r0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008728:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800872a:	4618      	mov	r0, r3
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d009      	beq.n	8008764 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	78fa      	ldrb	r2, [r7, #3]
 800875a:	4611      	mov	r1, r2
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	4798      	blx	r3
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	78fa      	ldrb	r2, [r7, #3]
 8008788:	4611      	mov	r1, r2
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008794:	2303      	movs	r3, #3
 8008796:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 f922 	bl	80099fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80087c8:	461a      	mov	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80087d6:	f003 031f 	and.w	r3, r3, #31
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d01a      	beq.n	8008814 <USBD_LL_SetupStage+0x72>
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d822      	bhi.n	8008828 <USBD_LL_SetupStage+0x86>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <USBD_LL_SetupStage+0x4a>
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d00a      	beq.n	8008800 <USBD_LL_SetupStage+0x5e>
 80087ea:	e01d      	b.n	8008828 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fb77 	bl	8008ee8 <USBD_StdDevReq>
 80087fa:	4603      	mov	r3, r0
 80087fc:	73fb      	strb	r3, [r7, #15]
      break;
 80087fe:	e020      	b.n	8008842 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fbdf 	bl	8008fcc <USBD_StdItfReq>
 800880e:	4603      	mov	r3, r0
 8008810:	73fb      	strb	r3, [r7, #15]
      break;
 8008812:	e016      	b.n	8008842 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fc41 	bl	80090a4 <USBD_StdEPReq>
 8008822:	4603      	mov	r3, r0
 8008824:	73fb      	strb	r3, [r7, #15]
      break;
 8008826:	e00c      	b.n	8008842 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800882e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008832:	b2db      	uxtb	r3, r3
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f004 fc04 	bl	800d044 <USBD_LL_StallEP>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]
      break;
 8008840:	bf00      	nop
  }

  return ret;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	460b      	mov	r3, r1
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800885e:	7afb      	ldrb	r3, [r7, #11]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d177      	bne.n	8008954 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800886a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008872:	2b03      	cmp	r3, #3
 8008874:	f040 80a1 	bne.w	80089ba <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	8992      	ldrh	r2, [r2, #12]
 8008880:	4293      	cmp	r3, r2
 8008882:	d91c      	bls.n	80088be <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	8992      	ldrh	r2, [r2, #12]
 800888c:	1a9a      	subs	r2, r3, r2
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	8992      	ldrh	r2, [r2, #12]
 800889a:	441a      	add	r2, r3
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	6919      	ldr	r1, [r3, #16]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	899b      	ldrh	r3, [r3, #12]
 80088a8:	461a      	mov	r2, r3
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	4293      	cmp	r3, r2
 80088b0:	bf38      	it	cc
 80088b2:	4613      	movcc	r3, r2
 80088b4:	461a      	mov	r2, r3
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f001 f9a8 	bl	8009c0c <USBD_CtlContinueRx>
 80088bc:	e07d      	b.n	80089ba <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80088c4:	f003 031f 	and.w	r3, r3, #31
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d014      	beq.n	80088f6 <USBD_LL_DataOutStage+0xaa>
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d81d      	bhi.n	800890c <USBD_LL_DataOutStage+0xc0>
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <USBD_LL_DataOutStage+0x8e>
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d003      	beq.n	80088e0 <USBD_LL_DataOutStage+0x94>
 80088d8:	e018      	b.n	800890c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	75bb      	strb	r3, [r7, #22]
            break;
 80088de:	e018      	b.n	8008912 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4619      	mov	r1, r3
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fa6e 	bl	8008dcc <USBD_CoreFindIF>
 80088f0:	4603      	mov	r3, r0
 80088f2:	75bb      	strb	r3, [r7, #22]
            break;
 80088f4:	e00d      	b.n	8008912 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	4619      	mov	r1, r3
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 fa70 	bl	8008de6 <USBD_CoreFindEP>
 8008906:	4603      	mov	r3, r0
 8008908:	75bb      	strb	r3, [r7, #22]
            break;
 800890a:	e002      	b.n	8008912 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	75bb      	strb	r3, [r7, #22]
            break;
 8008910:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008912:	7dbb      	ldrb	r3, [r7, #22]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d119      	bne.n	800894c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b03      	cmp	r3, #3
 8008922:	d113      	bne.n	800894c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008924:	7dba      	ldrb	r2, [r7, #22]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	32ae      	adds	r2, #174	@ 0xae
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008934:	7dba      	ldrb	r2, [r7, #22]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800893c:	7dba      	ldrb	r2, [r7, #22]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	32ae      	adds	r2, #174	@ 0xae
 8008942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f001 f96e 	bl	8009c2e <USBD_CtlSendStatus>
 8008952:	e032      	b.n	80089ba <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800895a:	b2db      	uxtb	r3, r3
 800895c:	4619      	mov	r1, r3
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fa41 	bl	8008de6 <USBD_CoreFindEP>
 8008964:	4603      	mov	r3, r0
 8008966:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008968:	7dbb      	ldrb	r3, [r7, #22]
 800896a:	2bff      	cmp	r3, #255	@ 0xff
 800896c:	d025      	beq.n	80089ba <USBD_LL_DataOutStage+0x16e>
 800896e:	7dbb      	ldrb	r3, [r7, #22]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d122      	bne.n	80089ba <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b03      	cmp	r3, #3
 800897e:	d117      	bne.n	80089b0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008980:	7dba      	ldrb	r2, [r7, #22]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	32ae      	adds	r2, #174	@ 0xae
 8008986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00f      	beq.n	80089b0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008990:	7dba      	ldrb	r2, [r7, #22]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008998:	7dba      	ldrb	r2, [r7, #22]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	32ae      	adds	r2, #174	@ 0xae
 800899e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	7afa      	ldrb	r2, [r7, #11]
 80089a6:	4611      	mov	r1, r2
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	4798      	blx	r3
 80089ac:	4603      	mov	r3, r0
 80089ae:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	e000      	b.n	80089bc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	460b      	mov	r3, r1
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80089d2:	7afb      	ldrb	r3, [r7, #11]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d178      	bne.n	8008aca <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3314      	adds	r3, #20
 80089dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d163      	bne.n	8008ab0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	8992      	ldrh	r2, [r2, #12]
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d91c      	bls.n	8008a2e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	8992      	ldrh	r2, [r2, #12]
 80089fc:	1a9a      	subs	r2, r3, r2
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	8992      	ldrh	r2, [r2, #12]
 8008a0a:	441a      	add	r2, r3
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	6919      	ldr	r1, [r3, #16]
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f001 f8c4 	bl	8009ba8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a20:	2300      	movs	r3, #0
 8008a22:	2200      	movs	r2, #0
 8008a24:	2100      	movs	r1, #0
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f004 fbb6 	bl	800d198 <USBD_LL_PrepareReceive>
 8008a2c:	e040      	b.n	8008ab0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	899b      	ldrh	r3, [r3, #12]
 8008a32:	461a      	mov	r2, r3
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d11c      	bne.n	8008a76 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d316      	bcc.n	8008a76 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d20f      	bcs.n	8008a76 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a56:	2200      	movs	r2, #0
 8008a58:	2100      	movs	r1, #0
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f001 f8a4 	bl	8009ba8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f004 fb92 	bl	800d198 <USBD_LL_PrepareReceive>
 8008a74:	e01c      	b.n	8008ab0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d10f      	bne.n	8008aa2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d009      	beq.n	8008aa2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aa2:	2180      	movs	r1, #128	@ 0x80
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f004 facd 	bl	800d044 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f001 f8d2 	bl	8009c54 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d03a      	beq.n	8008b30 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff fe30 	bl	8008720 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008ac8:	e032      	b.n	8008b30 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008aca:	7afb      	ldrb	r3, [r7, #11]
 8008acc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 f986 	bl	8008de6 <USBD_CoreFindEP>
 8008ada:	4603      	mov	r3, r0
 8008adc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	2bff      	cmp	r3, #255	@ 0xff
 8008ae2:	d025      	beq.n	8008b30 <USBD_LL_DataInStage+0x16c>
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d122      	bne.n	8008b30 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d11c      	bne.n	8008b30 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008af6:	7dfa      	ldrb	r2, [r7, #23]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	32ae      	adds	r2, #174	@ 0xae
 8008afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d014      	beq.n	8008b30 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008b06:	7dfa      	ldrb	r2, [r7, #23]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008b0e:	7dfa      	ldrb	r2, [r7, #23]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	32ae      	adds	r2, #174	@ 0xae
 8008b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	7afa      	ldrb	r2, [r7, #11]
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	4798      	blx	r3
 8008b22:	4603      	mov	r3, r0
 8008b24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008b26:	7dbb      	ldrb	r3, [r7, #22]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008b2c:	7dbb      	ldrb	r3, [r7, #22]
 8008b2e:	e000      	b.n	8008b32 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d014      	beq.n	8008ba0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00e      	beq.n	8008ba0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	6852      	ldr	r2, [r2, #4]
 8008b8e:	b2d2      	uxtb	r2, r2
 8008b90:	4611      	mov	r1, r2
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	4798      	blx	r3
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ba0:	2340      	movs	r3, #64	@ 0x40
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f004 fa07 	bl	800cfba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2240      	movs	r2, #64	@ 0x40
 8008bb8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bbc:	2340      	movs	r3, #64	@ 0x40
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2180      	movs	r1, #128	@ 0x80
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f004 f9f9 	bl	800cfba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2240      	movs	r2, #64	@ 0x40
 8008bd4:	841a      	strh	r2, [r3, #32]

  return ret;
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	78fa      	ldrb	r2, [r7, #3]
 8008bf0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b04      	cmp	r3, #4
 8008c12:	d006      	beq.n	8008c22 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2204      	movs	r2, #4
 8008c26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	d106      	bne.n	8008c5a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d110      	bne.n	8008c9e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00b      	beq.n	8008c9e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d005      	beq.n	8008c9e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	32ae      	adds	r2, #174	@ 0xae
 8008cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e01c      	b.n	8008d04 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d115      	bne.n	8008d02 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	32ae      	adds	r2, #174	@ 0xae
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00b      	beq.n	8008d02 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	32ae      	adds	r2, #174	@ 0xae
 8008cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	32ae      	adds	r2, #174	@ 0xae
 8008d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e01c      	b.n	8008d68 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d115      	bne.n	8008d66 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	32ae      	adds	r2, #174	@ 0xae
 8008d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00b      	beq.n	8008d66 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	32ae      	adds	r2, #174	@ 0xae
 8008d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	4611      	mov	r1, r2
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00e      	beq.n	8008dc2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6852      	ldr	r2, [r2, #4]
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	4611      	mov	r1, r2
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	4798      	blx	r3
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008dd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	460b      	mov	r3, r1
 8008df0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008df2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	885b      	ldrh	r3, [r3, #2]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	7812      	ldrb	r2, [r2, #0]
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d91f      	bls.n	8008e66 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008e2c:	e013      	b.n	8008e56 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008e2e:	f107 030a 	add.w	r3, r7, #10
 8008e32:	4619      	mov	r1, r3
 8008e34:	6978      	ldr	r0, [r7, #20]
 8008e36:	f000 f81b 	bl	8008e70 <USBD_GetNextDesc>
 8008e3a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	785b      	ldrb	r3, [r3, #1]
 8008e40:	2b05      	cmp	r3, #5
 8008e42:	d108      	bne.n	8008e56 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	789b      	ldrb	r3, [r3, #2]
 8008e4c:	78fa      	ldrb	r2, [r7, #3]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d008      	beq.n	8008e64 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	885b      	ldrh	r3, [r3, #2]
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	897b      	ldrh	r3, [r7, #10]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d8e5      	bhi.n	8008e2e <USBD_GetEpDesc+0x2e>
 8008e62:	e000      	b.n	8008e66 <USBD_GetEpDesc+0x66>
          break;
 8008e64:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008e66:	693b      	ldr	r3, [r7, #16]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	7812      	ldrb	r2, [r2, #0]
 8008e86:	4413      	add	r3, r2
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4413      	add	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ec6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008eca:	021b      	lsls	r3, r3, #8
 8008ecc:	b21a      	sxth	r2, r3
 8008ece:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	b21b      	sxth	r3, r3
 8008ed6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ed8:	89fb      	ldrh	r3, [r7, #14]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
	...

08008ee8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008efe:	2b40      	cmp	r3, #64	@ 0x40
 8008f00:	d005      	beq.n	8008f0e <USBD_StdDevReq+0x26>
 8008f02:	2b40      	cmp	r3, #64	@ 0x40
 8008f04:	d857      	bhi.n	8008fb6 <USBD_StdDevReq+0xce>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00f      	beq.n	8008f2a <USBD_StdDevReq+0x42>
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d153      	bne.n	8008fb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	32ae      	adds	r2, #174	@ 0xae
 8008f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	4798      	blx	r3
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]
      break;
 8008f28:	e04a      	b.n	8008fc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b09      	cmp	r3, #9
 8008f30:	d83b      	bhi.n	8008faa <USBD_StdDevReq+0xc2>
 8008f32:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <USBD_StdDevReq+0x50>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f8d 	.word	0x08008f8d
 8008f3c:	08008fa1 	.word	0x08008fa1
 8008f40:	08008fab 	.word	0x08008fab
 8008f44:	08008f97 	.word	0x08008f97
 8008f48:	08008fab 	.word	0x08008fab
 8008f4c:	08008f6b 	.word	0x08008f6b
 8008f50:	08008f61 	.word	0x08008f61
 8008f54:	08008fab 	.word	0x08008fab
 8008f58:	08008f83 	.word	0x08008f83
 8008f5c:	08008f75 	.word	0x08008f75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fa3e 	bl	80093e4 <USBD_GetDescriptor>
          break;
 8008f68:	e024      	b.n	8008fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fba3 	bl	80096b8 <USBD_SetAddress>
          break;
 8008f72:	e01f      	b.n	8008fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fbe2 	bl	8009740 <USBD_SetConfig>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]
          break;
 8008f80:	e018      	b.n	8008fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fc85 	bl	8009894 <USBD_GetConfig>
          break;
 8008f8a:	e013      	b.n	8008fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fcb6 	bl	8009900 <USBD_GetStatus>
          break;
 8008f94:	e00e      	b.n	8008fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fce5 	bl	8009968 <USBD_SetFeature>
          break;
 8008f9e:	e009      	b.n	8008fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fd09 	bl	80099ba <USBD_ClrFeature>
          break;
 8008fa8:	e004      	b.n	8008fb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fd60 	bl	8009a72 <USBD_CtlError>
          break;
 8008fb2:	bf00      	nop
      }
      break;
 8008fb4:	e004      	b.n	8008fc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fd5a 	bl	8009a72 <USBD_CtlError>
      break;
 8008fbe:	bf00      	nop
  }

  return ret;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop

08008fcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008fe2:	2b40      	cmp	r3, #64	@ 0x40
 8008fe4:	d005      	beq.n	8008ff2 <USBD_StdItfReq+0x26>
 8008fe6:	2b40      	cmp	r3, #64	@ 0x40
 8008fe8:	d852      	bhi.n	8009090 <USBD_StdItfReq+0xc4>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <USBD_StdItfReq+0x26>
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	d14e      	bne.n	8009090 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d840      	bhi.n	8009082 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	889b      	ldrh	r3, [r3, #4]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b01      	cmp	r3, #1
 8009008:	d836      	bhi.n	8009078 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	889b      	ldrh	r3, [r3, #4]
 800900e:	b2db      	uxtb	r3, r3
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff feda 	bl	8008dcc <USBD_CoreFindIF>
 8009018:	4603      	mov	r3, r0
 800901a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	2bff      	cmp	r3, #255	@ 0xff
 8009020:	d01d      	beq.n	800905e <USBD_StdItfReq+0x92>
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d11a      	bne.n	800905e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009028:	7bba      	ldrb	r2, [r7, #14]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	32ae      	adds	r2, #174	@ 0xae
 800902e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00f      	beq.n	8009058 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009038:	7bba      	ldrb	r2, [r7, #14]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009040:	7bba      	ldrb	r2, [r7, #14]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	32ae      	adds	r2, #174	@ 0xae
 8009046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	4798      	blx	r3
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009056:	e004      	b.n	8009062 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009058:	2303      	movs	r3, #3
 800905a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800905c:	e001      	b.n	8009062 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800905e:	2303      	movs	r3, #3
 8009060:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	88db      	ldrh	r3, [r3, #6]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d110      	bne.n	800908c <USBD_StdItfReq+0xc0>
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10d      	bne.n	800908c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fddc 	bl	8009c2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009076:	e009      	b.n	800908c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fcf9 	bl	8009a72 <USBD_CtlError>
          break;
 8009080:	e004      	b.n	800908c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fcf4 	bl	8009a72 <USBD_CtlError>
          break;
 800908a:	e000      	b.n	800908e <USBD_StdItfReq+0xc2>
          break;
 800908c:	bf00      	nop
      }
      break;
 800908e:	e004      	b.n	800909a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fced 	bl	8009a72 <USBD_CtlError>
      break;
 8009098:	bf00      	nop
  }

  return ret;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	889b      	ldrh	r3, [r3, #4]
 80090b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090c0:	2b40      	cmp	r3, #64	@ 0x40
 80090c2:	d007      	beq.n	80090d4 <USBD_StdEPReq+0x30>
 80090c4:	2b40      	cmp	r3, #64	@ 0x40
 80090c6:	f200 8181 	bhi.w	80093cc <USBD_StdEPReq+0x328>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d02a      	beq.n	8009124 <USBD_StdEPReq+0x80>
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	f040 817c 	bne.w	80093cc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fe84 	bl	8008de6 <USBD_CoreFindEP>
 80090de:	4603      	mov	r3, r0
 80090e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090e2:	7b7b      	ldrb	r3, [r7, #13]
 80090e4:	2bff      	cmp	r3, #255	@ 0xff
 80090e6:	f000 8176 	beq.w	80093d6 <USBD_StdEPReq+0x332>
 80090ea:	7b7b      	ldrb	r3, [r7, #13]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 8172 	bne.w	80093d6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80090f2:	7b7a      	ldrb	r2, [r7, #13]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80090fa:	7b7a      	ldrb	r2, [r7, #13]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	32ae      	adds	r2, #174	@ 0xae
 8009100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	f000 8165 	beq.w	80093d6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800910c:	7b7a      	ldrb	r2, [r7, #13]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	32ae      	adds	r2, #174	@ 0xae
 8009112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
 800911e:	4603      	mov	r3, r0
 8009120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009122:	e158      	b.n	80093d6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	785b      	ldrb	r3, [r3, #1]
 8009128:	2b03      	cmp	r3, #3
 800912a:	d008      	beq.n	800913e <USBD_StdEPReq+0x9a>
 800912c:	2b03      	cmp	r3, #3
 800912e:	f300 8147 	bgt.w	80093c0 <USBD_StdEPReq+0x31c>
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 809b 	beq.w	800926e <USBD_StdEPReq+0x1ca>
 8009138:	2b01      	cmp	r3, #1
 800913a:	d03c      	beq.n	80091b6 <USBD_StdEPReq+0x112>
 800913c:	e140      	b.n	80093c0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b02      	cmp	r3, #2
 8009148:	d002      	beq.n	8009150 <USBD_StdEPReq+0xac>
 800914a:	2b03      	cmp	r3, #3
 800914c:	d016      	beq.n	800917c <USBD_StdEPReq+0xd8>
 800914e:	e02c      	b.n	80091aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00d      	beq.n	8009172 <USBD_StdEPReq+0xce>
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b80      	cmp	r3, #128	@ 0x80
 800915a:	d00a      	beq.n	8009172 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f003 ff6f 	bl	800d044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009166:	2180      	movs	r1, #128	@ 0x80
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f003 ff6b 	bl	800d044 <USBD_LL_StallEP>
 800916e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009170:	e020      	b.n	80091b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fc7c 	bl	8009a72 <USBD_CtlError>
              break;
 800917a:	e01b      	b.n	80091b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	885b      	ldrh	r3, [r3, #2]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10e      	bne.n	80091a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00b      	beq.n	80091a2 <USBD_StdEPReq+0xfe>
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	2b80      	cmp	r3, #128	@ 0x80
 800918e:	d008      	beq.n	80091a2 <USBD_StdEPReq+0xfe>
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	88db      	ldrh	r3, [r3, #6]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d104      	bne.n	80091a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f003 ff51 	bl	800d044 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fd43 	bl	8009c2e <USBD_CtlSendStatus>

              break;
 80091a8:	e004      	b.n	80091b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fc60 	bl	8009a72 <USBD_CtlError>
              break;
 80091b2:	bf00      	nop
          }
          break;
 80091b4:	e109      	b.n	80093ca <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d002      	beq.n	80091c8 <USBD_StdEPReq+0x124>
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d016      	beq.n	80091f4 <USBD_StdEPReq+0x150>
 80091c6:	e04b      	b.n	8009260 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00d      	beq.n	80091ea <USBD_StdEPReq+0x146>
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b80      	cmp	r3, #128	@ 0x80
 80091d2:	d00a      	beq.n	80091ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f003 ff33 	bl	800d044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80091de:	2180      	movs	r1, #128	@ 0x80
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f003 ff2f 	bl	800d044 <USBD_LL_StallEP>
 80091e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091e8:	e040      	b.n	800926c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fc40 	bl	8009a72 <USBD_CtlError>
              break;
 80091f2:	e03b      	b.n	800926c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	885b      	ldrh	r3, [r3, #2]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d136      	bne.n	800926a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
 80091fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009206:	7bbb      	ldrb	r3, [r7, #14]
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f003 ff39 	bl	800d082 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fd0c 	bl	8009c2e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009216:	7bbb      	ldrb	r3, [r7, #14]
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff fde3 	bl	8008de6 <USBD_CoreFindEP>
 8009220:	4603      	mov	r3, r0
 8009222:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009224:	7b7b      	ldrb	r3, [r7, #13]
 8009226:	2bff      	cmp	r3, #255	@ 0xff
 8009228:	d01f      	beq.n	800926a <USBD_StdEPReq+0x1c6>
 800922a:	7b7b      	ldrb	r3, [r7, #13]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d11c      	bne.n	800926a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009230:	7b7a      	ldrb	r2, [r7, #13]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009238:	7b7a      	ldrb	r2, [r7, #13]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	32ae      	adds	r2, #174	@ 0xae
 800923e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d010      	beq.n	800926a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009248:	7b7a      	ldrb	r2, [r7, #13]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	32ae      	adds	r2, #174	@ 0xae
 800924e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	4798      	blx	r3
 800925a:	4603      	mov	r3, r0
 800925c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800925e:	e004      	b.n	800926a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fc05 	bl	8009a72 <USBD_CtlError>
              break;
 8009268:	e000      	b.n	800926c <USBD_StdEPReq+0x1c8>
              break;
 800926a:	bf00      	nop
          }
          break;
 800926c:	e0ad      	b.n	80093ca <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b02      	cmp	r3, #2
 8009278:	d002      	beq.n	8009280 <USBD_StdEPReq+0x1dc>
 800927a:	2b03      	cmp	r3, #3
 800927c:	d033      	beq.n	80092e6 <USBD_StdEPReq+0x242>
 800927e:	e099      	b.n	80093b4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009280:	7bbb      	ldrb	r3, [r7, #14]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d007      	beq.n	8009296 <USBD_StdEPReq+0x1f2>
 8009286:	7bbb      	ldrb	r3, [r7, #14]
 8009288:	2b80      	cmp	r3, #128	@ 0x80
 800928a:	d004      	beq.n	8009296 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fbef 	bl	8009a72 <USBD_CtlError>
                break;
 8009294:	e093      	b.n	80093be <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800929a:	2b00      	cmp	r3, #0
 800929c:	da0b      	bge.n	80092b6 <USBD_StdEPReq+0x212>
 800929e:	7bbb      	ldrb	r3, [r7, #14]
 80092a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	3310      	adds	r3, #16
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	4413      	add	r3, r2
 80092b2:	3304      	adds	r3, #4
 80092b4:	e00b      	b.n	80092ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	4413      	add	r3, r2
 80092cc:	3304      	adds	r3, #4
 80092ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2200      	movs	r2, #0
 80092d4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	330e      	adds	r3, #14
 80092da:	2202      	movs	r2, #2
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fc44 	bl	8009b6c <USBD_CtlSendData>
              break;
 80092e4:	e06b      	b.n	80093be <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80092e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	da11      	bge.n	8009312 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	f003 020f 	and.w	r2, r3, #15
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	440b      	add	r3, r1
 8009300:	3323      	adds	r3, #35	@ 0x23
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d117      	bne.n	8009338 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fbb1 	bl	8009a72 <USBD_CtlError>
                  break;
 8009310:	e055      	b.n	80093be <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	f003 020f 	and.w	r2, r3, #15
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	440b      	add	r3, r1
 8009324:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d104      	bne.n	8009338 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fb9e 	bl	8009a72 <USBD_CtlError>
                  break;
 8009336:	e042      	b.n	80093be <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800933c:	2b00      	cmp	r3, #0
 800933e:	da0b      	bge.n	8009358 <USBD_StdEPReq+0x2b4>
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	3310      	adds	r3, #16
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	4413      	add	r3, r2
 8009354:	3304      	adds	r3, #4
 8009356:	e00b      	b.n	8009370 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	4413      	add	r3, r2
 800936e:	3304      	adds	r3, #4
 8009370:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <USBD_StdEPReq+0x2da>
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	2b80      	cmp	r3, #128	@ 0x80
 800937c:	d103      	bne.n	8009386 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2200      	movs	r2, #0
 8009382:	739a      	strb	r2, [r3, #14]
 8009384:	e00e      	b.n	80093a4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f003 fe98 	bl	800d0c0 <USBD_LL_IsStallEP>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2201      	movs	r2, #1
 800939a:	739a      	strb	r2, [r3, #14]
 800939c:	e002      	b.n	80093a4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2200      	movs	r2, #0
 80093a2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	330e      	adds	r3, #14
 80093a8:	2202      	movs	r2, #2
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fbdd 	bl	8009b6c <USBD_CtlSendData>
              break;
 80093b2:	e004      	b.n	80093be <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fb5b 	bl	8009a72 <USBD_CtlError>
              break;
 80093bc:	bf00      	nop
          }
          break;
 80093be:	e004      	b.n	80093ca <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fb55 	bl	8009a72 <USBD_CtlError>
          break;
 80093c8:	bf00      	nop
      }
      break;
 80093ca:	e005      	b.n	80093d8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fb4f 	bl	8009a72 <USBD_CtlError>
      break;
 80093d4:	e000      	b.n	80093d8 <USBD_StdEPReq+0x334>
      break;
 80093d6:	bf00      	nop
  }

  return ret;
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
	...

080093e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	885b      	ldrh	r3, [r3, #2]
 80093fe:	0a1b      	lsrs	r3, r3, #8
 8009400:	b29b      	uxth	r3, r3
 8009402:	3b01      	subs	r3, #1
 8009404:	2b06      	cmp	r3, #6
 8009406:	f200 8128 	bhi.w	800965a <USBD_GetDescriptor+0x276>
 800940a:	a201      	add	r2, pc, #4	@ (adr r2, 8009410 <USBD_GetDescriptor+0x2c>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	0800942d 	.word	0x0800942d
 8009414:	08009445 	.word	0x08009445
 8009418:	08009485 	.word	0x08009485
 800941c:	0800965b 	.word	0x0800965b
 8009420:	0800965b 	.word	0x0800965b
 8009424:	080095fb 	.word	0x080095fb
 8009428:	08009627 	.word	0x08009627
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	7c12      	ldrb	r2, [r2, #16]
 8009438:	f107 0108 	add.w	r1, r7, #8
 800943c:	4610      	mov	r0, r2
 800943e:	4798      	blx	r3
 8009440:	60f8      	str	r0, [r7, #12]
      break;
 8009442:	e112      	b.n	800966a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	7c1b      	ldrb	r3, [r3, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10d      	bne.n	8009468 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009454:	f107 0208 	add.w	r2, r7, #8
 8009458:	4610      	mov	r0, r2
 800945a:	4798      	blx	r3
 800945c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3301      	adds	r3, #1
 8009462:	2202      	movs	r2, #2
 8009464:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009466:	e100      	b.n	800966a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009470:	f107 0208 	add.w	r2, r7, #8
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
 8009478:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3301      	adds	r3, #1
 800947e:	2202      	movs	r2, #2
 8009480:	701a      	strb	r2, [r3, #0]
      break;
 8009482:	e0f2      	b.n	800966a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	885b      	ldrh	r3, [r3, #2]
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b05      	cmp	r3, #5
 800948c:	f200 80ac 	bhi.w	80095e8 <USBD_GetDescriptor+0x204>
 8009490:	a201      	add	r2, pc, #4	@ (adr r2, 8009498 <USBD_GetDescriptor+0xb4>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	080094b1 	.word	0x080094b1
 800949c:	080094e5 	.word	0x080094e5
 80094a0:	08009519 	.word	0x08009519
 80094a4:	0800954d 	.word	0x0800954d
 80094a8:	08009581 	.word	0x08009581
 80094ac:	080095b5 	.word	0x080095b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00b      	beq.n	80094d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	7c12      	ldrb	r2, [r2, #16]
 80094c8:	f107 0108 	add.w	r1, r7, #8
 80094cc:	4610      	mov	r0, r2
 80094ce:	4798      	blx	r3
 80094d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094d2:	e091      	b.n	80095f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 facb 	bl	8009a72 <USBD_CtlError>
            err++;
 80094dc:	7afb      	ldrb	r3, [r7, #11]
 80094de:	3301      	adds	r3, #1
 80094e0:	72fb      	strb	r3, [r7, #11]
          break;
 80094e2:	e089      	b.n	80095f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00b      	beq.n	8009508 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	7c12      	ldrb	r2, [r2, #16]
 80094fc:	f107 0108 	add.w	r1, r7, #8
 8009500:	4610      	mov	r0, r2
 8009502:	4798      	blx	r3
 8009504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009506:	e077      	b.n	80095f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fab1 	bl	8009a72 <USBD_CtlError>
            err++;
 8009510:	7afb      	ldrb	r3, [r7, #11]
 8009512:	3301      	adds	r3, #1
 8009514:	72fb      	strb	r3, [r7, #11]
          break;
 8009516:	e06f      	b.n	80095f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	7c12      	ldrb	r2, [r2, #16]
 8009530:	f107 0108 	add.w	r1, r7, #8
 8009534:	4610      	mov	r0, r2
 8009536:	4798      	blx	r3
 8009538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800953a:	e05d      	b.n	80095f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fa97 	bl	8009a72 <USBD_CtlError>
            err++;
 8009544:	7afb      	ldrb	r3, [r7, #11]
 8009546:	3301      	adds	r3, #1
 8009548:	72fb      	strb	r3, [r7, #11]
          break;
 800954a:	e055      	b.n	80095f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00b      	beq.n	8009570 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	7c12      	ldrb	r2, [r2, #16]
 8009564:	f107 0108 	add.w	r1, r7, #8
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
 800956c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800956e:	e043      	b.n	80095f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa7d 	bl	8009a72 <USBD_CtlError>
            err++;
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	3301      	adds	r3, #1
 800957c:	72fb      	strb	r3, [r7, #11]
          break;
 800957e:	e03b      	b.n	80095f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7c12      	ldrb	r2, [r2, #16]
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095a2:	e029      	b.n	80095f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa63 	bl	8009a72 <USBD_CtlError>
            err++;
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	3301      	adds	r3, #1
 80095b0:	72fb      	strb	r3, [r7, #11]
          break;
 80095b2:	e021      	b.n	80095f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	7c12      	ldrb	r2, [r2, #16]
 80095cc:	f107 0108 	add.w	r1, r7, #8
 80095d0:	4610      	mov	r0, r2
 80095d2:	4798      	blx	r3
 80095d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095d6:	e00f      	b.n	80095f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fa49 	bl	8009a72 <USBD_CtlError>
            err++;
 80095e0:	7afb      	ldrb	r3, [r7, #11]
 80095e2:	3301      	adds	r3, #1
 80095e4:	72fb      	strb	r3, [r7, #11]
          break;
 80095e6:	e007      	b.n	80095f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa41 	bl	8009a72 <USBD_CtlError>
          err++;
 80095f0:	7afb      	ldrb	r3, [r7, #11]
 80095f2:	3301      	adds	r3, #1
 80095f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80095f6:	bf00      	nop
      }
      break;
 80095f8:	e037      	b.n	800966a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	7c1b      	ldrb	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d109      	bne.n	8009616 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960a:	f107 0208 	add.w	r2, r7, #8
 800960e:	4610      	mov	r0, r2
 8009610:	4798      	blx	r3
 8009612:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009614:	e029      	b.n	800966a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fa2a 	bl	8009a72 <USBD_CtlError>
        err++;
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	3301      	adds	r3, #1
 8009622:	72fb      	strb	r3, [r7, #11]
      break;
 8009624:	e021      	b.n	800966a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	7c1b      	ldrb	r3, [r3, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10d      	bne.n	800964a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009636:	f107 0208 	add.w	r2, r7, #8
 800963a:	4610      	mov	r0, r2
 800963c:	4798      	blx	r3
 800963e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3301      	adds	r3, #1
 8009644:	2207      	movs	r2, #7
 8009646:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009648:	e00f      	b.n	800966a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fa10 	bl	8009a72 <USBD_CtlError>
        err++;
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	3301      	adds	r3, #1
 8009656:	72fb      	strb	r3, [r7, #11]
      break;
 8009658:	e007      	b.n	800966a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fa08 	bl	8009a72 <USBD_CtlError>
      err++;
 8009662:	7afb      	ldrb	r3, [r7, #11]
 8009664:	3301      	adds	r3, #1
 8009666:	72fb      	strb	r3, [r7, #11]
      break;
 8009668:	bf00      	nop
  }

  if (err != 0U)
 800966a:	7afb      	ldrb	r3, [r7, #11]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d11e      	bne.n	80096ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	88db      	ldrh	r3, [r3, #6]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d016      	beq.n	80096a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009678:	893b      	ldrh	r3, [r7, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00e      	beq.n	800969c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	88da      	ldrh	r2, [r3, #6]
 8009682:	893b      	ldrh	r3, [r7, #8]
 8009684:	4293      	cmp	r3, r2
 8009686:	bf28      	it	cs
 8009688:	4613      	movcs	r3, r2
 800968a:	b29b      	uxth	r3, r3
 800968c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800968e:	893b      	ldrh	r3, [r7, #8]
 8009690:	461a      	mov	r2, r3
 8009692:	68f9      	ldr	r1, [r7, #12]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fa69 	bl	8009b6c <USBD_CtlSendData>
 800969a:	e009      	b.n	80096b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f9e7 	bl	8009a72 <USBD_CtlError>
 80096a4:	e004      	b.n	80096b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fac1 	bl	8009c2e <USBD_CtlSendStatus>
 80096ac:	e000      	b.n	80096b0 <USBD_GetDescriptor+0x2cc>
    return;
 80096ae:	bf00      	nop
  }
}
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop

080096b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	889b      	ldrh	r3, [r3, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d131      	bne.n	800972e <USBD_SetAddress+0x76>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	88db      	ldrh	r3, [r3, #6]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d12d      	bne.n	800972e <USBD_SetAddress+0x76>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	885b      	ldrh	r3, [r3, #2]
 80096d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80096d8:	d829      	bhi.n	800972e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	885b      	ldrh	r3, [r3, #2]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	d104      	bne.n	80096fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f9bc 	bl	8009a72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fa:	e01d      	b.n	8009738 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7bfa      	ldrb	r2, [r7, #15]
 8009700:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f003 fd05 	bl	800d118 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa8d 	bl	8009c2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2202      	movs	r2, #2
 800971e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009722:	e009      	b.n	8009738 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800972c:	e004      	b.n	8009738 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f99e 	bl	8009a72 <USBD_CtlError>
  }
}
 8009736:	bf00      	nop
 8009738:	bf00      	nop
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	885b      	ldrh	r3, [r3, #2]
 8009752:	b2da      	uxtb	r2, r3
 8009754:	4b4e      	ldr	r3, [pc, #312]	@ (8009890 <USBD_SetConfig+0x150>)
 8009756:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009758:	4b4d      	ldr	r3, [pc, #308]	@ (8009890 <USBD_SetConfig+0x150>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d905      	bls.n	800976c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f985 	bl	8009a72 <USBD_CtlError>
    return USBD_FAIL;
 8009768:	2303      	movs	r3, #3
 800976a:	e08c      	b.n	8009886 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b02      	cmp	r3, #2
 8009776:	d002      	beq.n	800977e <USBD_SetConfig+0x3e>
 8009778:	2b03      	cmp	r3, #3
 800977a:	d029      	beq.n	80097d0 <USBD_SetConfig+0x90>
 800977c:	e075      	b.n	800986a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800977e:	4b44      	ldr	r3, [pc, #272]	@ (8009890 <USBD_SetConfig+0x150>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d020      	beq.n	80097c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009786:	4b42      	ldr	r3, [pc, #264]	@ (8009890 <USBD_SetConfig+0x150>)
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009790:	4b3f      	ldr	r3, [pc, #252]	@ (8009890 <USBD_SetConfig+0x150>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7fe ffcd 	bl	8008736 <USBD_SetClassConfig>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d008      	beq.n	80097b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f962 	bl	8009a72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2202      	movs	r2, #2
 80097b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097b6:	e065      	b.n	8009884 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fa38 	bl	8009c2e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2203      	movs	r2, #3
 80097c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80097c6:	e05d      	b.n	8009884 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fa30 	bl	8009c2e <USBD_CtlSendStatus>
      break;
 80097ce:	e059      	b.n	8009884 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80097d0:	4b2f      	ldr	r3, [pc, #188]	@ (8009890 <USBD_SetConfig+0x150>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d112      	bne.n	80097fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80097e0:	4b2b      	ldr	r3, [pc, #172]	@ (8009890 <USBD_SetConfig+0x150>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097ea:	4b29      	ldr	r3, [pc, #164]	@ (8009890 <USBD_SetConfig+0x150>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7fe ffbc 	bl	800876e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fa19 	bl	8009c2e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097fc:	e042      	b.n	8009884 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80097fe:	4b24      	ldr	r3, [pc, #144]	@ (8009890 <USBD_SetConfig+0x150>)
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	429a      	cmp	r2, r3
 800980a:	d02a      	beq.n	8009862 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7fe ffaa 	bl	800876e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800981a:	4b1d      	ldr	r3, [pc, #116]	@ (8009890 <USBD_SetConfig+0x150>)
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009824:	4b1a      	ldr	r3, [pc, #104]	@ (8009890 <USBD_SetConfig+0x150>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fe ff83 	bl	8008736 <USBD_SetClassConfig>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00f      	beq.n	800985a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f918 	bl	8009a72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7fe ff8f 	bl	800876e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009858:	e014      	b.n	8009884 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f9e7 	bl	8009c2e <USBD_CtlSendStatus>
      break;
 8009860:	e010      	b.n	8009884 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f9e3 	bl	8009c2e <USBD_CtlSendStatus>
      break;
 8009868:	e00c      	b.n	8009884 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f900 	bl	8009a72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009872:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <USBD_SetConfig+0x150>)
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7fe ff78 	bl	800876e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800987e:	2303      	movs	r3, #3
 8009880:	73fb      	strb	r3, [r7, #15]
      break;
 8009882:	bf00      	nop
  }

  return ret;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	200003ac 	.word	0x200003ac

08009894 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	88db      	ldrh	r3, [r3, #6]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d004      	beq.n	80098b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f8e2 	bl	8009a72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80098ae:	e023      	b.n	80098f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	dc02      	bgt.n	80098c2 <USBD_GetConfig+0x2e>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dc03      	bgt.n	80098c8 <USBD_GetConfig+0x34>
 80098c0:	e015      	b.n	80098ee <USBD_GetConfig+0x5a>
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d00b      	beq.n	80098de <USBD_GetConfig+0x4a>
 80098c6:	e012      	b.n	80098ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3308      	adds	r3, #8
 80098d2:	2201      	movs	r2, #1
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f948 	bl	8009b6c <USBD_CtlSendData>
        break;
 80098dc:	e00c      	b.n	80098f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3304      	adds	r3, #4
 80098e2:	2201      	movs	r2, #1
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f940 	bl	8009b6c <USBD_CtlSendData>
        break;
 80098ec:	e004      	b.n	80098f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f8be 	bl	8009a72 <USBD_CtlError>
        break;
 80098f6:	bf00      	nop
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009910:	b2db      	uxtb	r3, r3
 8009912:	3b01      	subs	r3, #1
 8009914:	2b02      	cmp	r3, #2
 8009916:	d81e      	bhi.n	8009956 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	88db      	ldrh	r3, [r3, #6]
 800991c:	2b02      	cmp	r3, #2
 800991e:	d004      	beq.n	800992a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f8a5 	bl	8009a72 <USBD_CtlError>
        break;
 8009928:	e01a      	b.n	8009960 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009936:	2b00      	cmp	r3, #0
 8009938:	d005      	beq.n	8009946 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	f043 0202 	orr.w	r2, r3, #2
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	330c      	adds	r3, #12
 800994a:	2202      	movs	r2, #2
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f90c 	bl	8009b6c <USBD_CtlSendData>
      break;
 8009954:	e004      	b.n	8009960 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f88a 	bl	8009a72 <USBD_CtlError>
      break;
 800995e:	bf00      	nop
  }
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	885b      	ldrh	r3, [r3, #2]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d107      	bne.n	800998a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f953 	bl	8009c2e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009988:	e013      	b.n	80099b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	885b      	ldrh	r3, [r3, #2]
 800998e:	2b02      	cmp	r3, #2
 8009990:	d10b      	bne.n	80099aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	889b      	ldrh	r3, [r3, #4]
 8009996:	0a1b      	lsrs	r3, r3, #8
 8009998:	b29b      	uxth	r3, r3
 800999a:	b2da      	uxtb	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f943 	bl	8009c2e <USBD_CtlSendStatus>
}
 80099a8:	e003      	b.n	80099b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f860 	bl	8009a72 <USBD_CtlError>
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d80b      	bhi.n	80099ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	885b      	ldrh	r3, [r3, #2]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d10c      	bne.n	80099f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f923 	bl	8009c2e <USBD_CtlSendStatus>
      }
      break;
 80099e8:	e004      	b.n	80099f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f840 	bl	8009a72 <USBD_CtlError>
      break;
 80099f2:	e000      	b.n	80099f6 <USBD_ClrFeature+0x3c>
      break;
 80099f4:	bf00      	nop
  }
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	781a      	ldrb	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3301      	adds	r3, #1
 8009a18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	781a      	ldrb	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3301      	adds	r3, #1
 8009a26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7ff fa3d 	bl	8008ea8 <SWAPBYTE>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	461a      	mov	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f7ff fa30 	bl	8008ea8 <SWAPBYTE>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3301      	adds	r3, #1
 8009a54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f7ff fa23 	bl	8008ea8 <SWAPBYTE>
 8009a62:	4603      	mov	r3, r0
 8009a64:	461a      	mov	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	80da      	strh	r2, [r3, #6]
}
 8009a6a:	bf00      	nop
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a7c:	2180      	movs	r1, #128	@ 0x80
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f003 fae0 	bl	800d044 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009a84:	2100      	movs	r1, #0
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f003 fadc 	bl	800d044 <USBD_LL_StallEP>
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d042      	beq.n	8009b30 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009aae:	6938      	ldr	r0, [r7, #16]
 8009ab0:	f000 f842 	bl	8009b38 <USBD_GetLen>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009abe:	d808      	bhi.n	8009ad2 <USBD_GetString+0x3e>
 8009ac0:	6938      	ldr	r0, [r7, #16]
 8009ac2:	f000 f839 	bl	8009b38 <USBD_GetLen>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	3301      	adds	r3, #1
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	e001      	b.n	8009ad6 <USBD_GetString+0x42>
 8009ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	4413      	add	r3, r2
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4413      	add	r3, r2
 8009af2:	2203      	movs	r2, #3
 8009af4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	3301      	adds	r3, #1
 8009afa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009afc:	e013      	b.n	8009b26 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	4413      	add	r3, r2
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	7812      	ldrb	r2, [r2, #0]
 8009b08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	613b      	str	r3, [r7, #16]
    idx++;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	3301      	adds	r3, #1
 8009b14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	3301      	adds	r3, #1
 8009b24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e7      	bne.n	8009afe <USBD_GetString+0x6a>
 8009b2e:	e000      	b.n	8009b32 <USBD_GetString+0x9e>
    return;
 8009b30:	bf00      	nop
  }
}
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b48:	e005      	b.n	8009b56 <USBD_GetLen+0x1e>
  {
    len++;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	3301      	adds	r3, #1
 8009b54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f5      	bne.n	8009b4a <USBD_GetLen+0x12>
  }

  return len;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	2100      	movs	r1, #0
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f003 fadc 	bl	800d156 <USBD_LL_Transmit>

  return USBD_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	2100      	movs	r1, #0
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f003 facb 	bl	800d156 <USBD_LL_Transmit>

  return USBD_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b084      	sub	sp, #16
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	60f8      	str	r0, [r7, #12]
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2203      	movs	r2, #3
 8009bda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f003 facb 	bl	800d198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f003 faba 	bl	800d198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b082      	sub	sp, #8
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2204      	movs	r2, #4
 8009c3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c3e:	2300      	movs	r3, #0
 8009c40:	2200      	movs	r2, #0
 8009c42:	2100      	movs	r1, #0
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f003 fa86 	bl	800d156 <USBD_LL_Transmit>

  return USBD_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2205      	movs	r2, #5
 8009c60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c64:	2300      	movs	r3, #0
 8009c66:	2200      	movs	r2, #0
 8009c68:	2100      	movs	r1, #0
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f003 fa94 	bl	800d198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <__NVIC_SetPriority>:
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	6039      	str	r1, [r7, #0]
 8009c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	db0a      	blt.n	8009ca6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	490c      	ldr	r1, [pc, #48]	@ (8009cc8 <__NVIC_SetPriority+0x4c>)
 8009c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c9a:	0112      	lsls	r2, r2, #4
 8009c9c:	b2d2      	uxtb	r2, r2
 8009c9e:	440b      	add	r3, r1
 8009ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009ca4:	e00a      	b.n	8009cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	4908      	ldr	r1, [pc, #32]	@ (8009ccc <__NVIC_SetPriority+0x50>)
 8009cac:	79fb      	ldrb	r3, [r7, #7]
 8009cae:	f003 030f 	and.w	r3, r3, #15
 8009cb2:	3b04      	subs	r3, #4
 8009cb4:	0112      	lsls	r2, r2, #4
 8009cb6:	b2d2      	uxtb	r2, r2
 8009cb8:	440b      	add	r3, r1
 8009cba:	761a      	strb	r2, [r3, #24]
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	e000e100 	.word	0xe000e100
 8009ccc:	e000ed00 	.word	0xe000ed00

08009cd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009cd4:	4b05      	ldr	r3, [pc, #20]	@ (8009cec <SysTick_Handler+0x1c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009cd8:	f001 fd46 	bl	800b768 <xTaskGetSchedulerState>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d001      	beq.n	8009ce6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009ce2:	f002 fb41 	bl	800c368 <xPortSysTickHandler>
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	e000e010 	.word	0xe000e010

08009cf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	f06f 0004 	mvn.w	r0, #4
 8009cfa:	f7ff ffbf 	bl	8009c7c <__NVIC_SetPriority>
#endif
}
 8009cfe:	bf00      	nop
 8009d00:	bd80      	pop	{r7, pc}
	...

08009d04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d0a:	f3ef 8305 	mrs	r3, IPSR
 8009d0e:	603b      	str	r3, [r7, #0]
  return(result);
 8009d10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d16:	f06f 0305 	mvn.w	r3, #5
 8009d1a:	607b      	str	r3, [r7, #4]
 8009d1c:	e00c      	b.n	8009d38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d48 <osKernelInitialize+0x44>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d105      	bne.n	8009d32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d26:	4b08      	ldr	r3, [pc, #32]	@ (8009d48 <osKernelInitialize+0x44>)
 8009d28:	2201      	movs	r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	607b      	str	r3, [r7, #4]
 8009d30:	e002      	b.n	8009d38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d32:	f04f 33ff 	mov.w	r3, #4294967295
 8009d36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d38:	687b      	ldr	r3, [r7, #4]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	200003b0 	.word	0x200003b0

08009d4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d52:	f3ef 8305 	mrs	r3, IPSR
 8009d56:	603b      	str	r3, [r7, #0]
  return(result);
 8009d58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d5e:	f06f 0305 	mvn.w	r3, #5
 8009d62:	607b      	str	r3, [r7, #4]
 8009d64:	e010      	b.n	8009d88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d66:	4b0b      	ldr	r3, [pc, #44]	@ (8009d94 <osKernelStart+0x48>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d109      	bne.n	8009d82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d6e:	f7ff ffbf 	bl	8009cf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d72:	4b08      	ldr	r3, [pc, #32]	@ (8009d94 <osKernelStart+0x48>)
 8009d74:	2202      	movs	r2, #2
 8009d76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d78:	f001 f892 	bl	800aea0 <vTaskStartScheduler>
      stat = osOK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	607b      	str	r3, [r7, #4]
 8009d80:	e002      	b.n	8009d88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d82:	f04f 33ff 	mov.w	r3, #4294967295
 8009d86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d88:	687b      	ldr	r3, [r7, #4]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	200003b0 	.word	0x200003b0

08009d98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08e      	sub	sp, #56	@ 0x38
 8009d9c:	af04      	add	r7, sp, #16
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009da4:	2300      	movs	r3, #0
 8009da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009da8:	f3ef 8305 	mrs	r3, IPSR
 8009dac:	617b      	str	r3, [r7, #20]
  return(result);
 8009dae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d17e      	bne.n	8009eb2 <osThreadNew+0x11a>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d07b      	beq.n	8009eb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009dba:	2380      	movs	r3, #128	@ 0x80
 8009dbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009dbe:	2318      	movs	r3, #24
 8009dc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d045      	beq.n	8009e5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <osThreadNew+0x48>
        name = attr->name;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d008      	beq.n	8009e06 <osThreadNew+0x6e>
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	2b38      	cmp	r3, #56	@ 0x38
 8009df8:	d805      	bhi.n	8009e06 <osThreadNew+0x6e>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f003 0301 	and.w	r3, r3, #1
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <osThreadNew+0x72>
        return (NULL);
 8009e06:	2300      	movs	r3, #0
 8009e08:	e054      	b.n	8009eb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d003      	beq.n	8009e1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	089b      	lsrs	r3, r3, #2
 8009e18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00e      	beq.n	8009e40 <osThreadNew+0xa8>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	2ba7      	cmp	r3, #167	@ 0xa7
 8009e28:	d90a      	bls.n	8009e40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d006      	beq.n	8009e40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <osThreadNew+0xa8>
        mem = 1;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	61bb      	str	r3, [r7, #24]
 8009e3e:	e010      	b.n	8009e62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10c      	bne.n	8009e62 <osThreadNew+0xca>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d108      	bne.n	8009e62 <osThreadNew+0xca>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d104      	bne.n	8009e62 <osThreadNew+0xca>
          mem = 0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	61bb      	str	r3, [r7, #24]
 8009e5c:	e001      	b.n	8009e62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d110      	bne.n	8009e8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e70:	9202      	str	r2, [sp, #8]
 8009e72:	9301      	str	r3, [sp, #4]
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	6a3a      	ldr	r2, [r7, #32]
 8009e7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f000 fe1a 	bl	800aab8 <xTaskCreateStatic>
 8009e84:	4603      	mov	r3, r0
 8009e86:	613b      	str	r3, [r7, #16]
 8009e88:	e013      	b.n	8009eb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d110      	bne.n	8009eb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	f107 0310 	add.w	r3, r7, #16
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 fe68 	bl	800ab78 <xTaskCreate>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d001      	beq.n	8009eb2 <osThreadNew+0x11a>
            hTask = NULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009eb2:	693b      	ldr	r3, [r7, #16]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3728      	adds	r7, #40	@ 0x28
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ec4:	f3ef 8305 	mrs	r3, IPSR
 8009ec8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009eca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d003      	beq.n	8009ed8 <osDelay+0x1c>
    stat = osErrorISR;
 8009ed0:	f06f 0305 	mvn.w	r3, #5
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	e007      	b.n	8009ee8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 ffa6 	bl	800ae34 <vTaskDelay>
    }
  }

  return (stat);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
	...

08009ef4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4a07      	ldr	r2, [pc, #28]	@ (8009f20 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	4a06      	ldr	r2, [pc, #24]	@ (8009f24 <vApplicationGetIdleTaskMemory+0x30>)
 8009f0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2280      	movs	r2, #128	@ 0x80
 8009f10:	601a      	str	r2, [r3, #0]
}
 8009f12:	bf00      	nop
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	200003b4 	.word	0x200003b4
 8009f24:	2000045c 	.word	0x2000045c

08009f28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4a07      	ldr	r2, [pc, #28]	@ (8009f54 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	4a06      	ldr	r2, [pc, #24]	@ (8009f58 <vApplicationGetTimerTaskMemory+0x30>)
 8009f3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f46:	601a      	str	r2, [r3, #0]
}
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	2000065c 	.word	0x2000065c
 8009f58:	20000704 	.word	0x20000704

08009f5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f103 0208 	add.w	r2, r3, #8
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f04f 32ff 	mov.w	r2, #4294967295
 8009f74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f103 0208 	add.w	r2, r3, #8
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f103 0208 	add.w	r2, r3, #8
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b085      	sub	sp, #20
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	1c5a      	adds	r2, r3, #1
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	601a      	str	r2, [r3, #0]
}
 8009ff2:	bf00      	nop
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr

08009ffe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ffe:	b480      	push	{r7}
 800a000:	b085      	sub	sp, #20
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a014:	d103      	bne.n	800a01e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	60fb      	str	r3, [r7, #12]
 800a01c:	e00c      	b.n	800a038 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3308      	adds	r3, #8
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	e002      	b.n	800a02c <vListInsert+0x2e>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	429a      	cmp	r2, r3
 800a036:	d2f6      	bcs.n	800a026 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	1c5a      	adds	r2, r3, #1
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	601a      	str	r2, [r3, #0]
}
 800a064:	bf00      	nop
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	6892      	ldr	r2, [r2, #8]
 800a086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	6852      	ldr	r2, [r2, #4]
 800a090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d103      	bne.n	800a0a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	689a      	ldr	r2, [r3, #8]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	1e5a      	subs	r2, r3, #1
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10b      	bne.n	800a0f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0ea:	bf00      	nop
 800a0ec:	bf00      	nop
 800a0ee:	e7fd      	b.n	800a0ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a0f0:	f002 f8aa 	bl	800c248 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0fc:	68f9      	ldr	r1, [r7, #12]
 800a0fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a100:	fb01 f303 	mul.w	r3, r1, r3
 800a104:	441a      	add	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a120:	3b01      	subs	r3, #1
 800a122:	68f9      	ldr	r1, [r7, #12]
 800a124:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a126:	fb01 f303 	mul.w	r3, r1, r3
 800a12a:	441a      	add	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	22ff      	movs	r2, #255	@ 0xff
 800a134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	22ff      	movs	r2, #255	@ 0xff
 800a13c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d114      	bne.n	800a170 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d01a      	beq.n	800a184 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3310      	adds	r3, #16
 800a152:	4618      	mov	r0, r3
 800a154:	f001 f942 	bl	800b3dc <xTaskRemoveFromEventList>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d012      	beq.n	800a184 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a15e:	4b0d      	ldr	r3, [pc, #52]	@ (800a194 <xQueueGenericReset+0xd0>)
 800a160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	e009      	b.n	800a184 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	3310      	adds	r3, #16
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff fef1 	bl	8009f5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3324      	adds	r3, #36	@ 0x24
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff feec 	bl	8009f5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a184:	f002 f892 	bl	800c2ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a188:	2301      	movs	r3, #1
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	e000ed04 	.word	0xe000ed04

0800a198 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b08e      	sub	sp, #56	@ 0x38
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10b      	bne.n	800a1c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1be:	bf00      	nop
 800a1c0:	bf00      	nop
 800a1c2:	e7fd      	b.n	800a1c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10b      	bne.n	800a1e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1dc:	bf00      	nop
 800a1de:	bf00      	nop
 800a1e0:	e7fd      	b.n	800a1de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <xQueueGenericCreateStatic+0x56>
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <xQueueGenericCreateStatic+0x5a>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <xQueueGenericCreateStatic+0x5c>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10b      	bne.n	800a210 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	623b      	str	r3, [r7, #32]
}
 800a20a:	bf00      	nop
 800a20c:	bf00      	nop
 800a20e:	e7fd      	b.n	800a20c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d102      	bne.n	800a21c <xQueueGenericCreateStatic+0x84>
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <xQueueGenericCreateStatic+0x88>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e000      	b.n	800a222 <xQueueGenericCreateStatic+0x8a>
 800a220:	2300      	movs	r3, #0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10b      	bne.n	800a23e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	61fb      	str	r3, [r7, #28]
}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	e7fd      	b.n	800a23a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a23e:	2350      	movs	r3, #80	@ 0x50
 800a240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	2b50      	cmp	r3, #80	@ 0x50
 800a246:	d00b      	beq.n	800a260 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	61bb      	str	r3, [r7, #24]
}
 800a25a:	bf00      	nop
 800a25c:	bf00      	nop
 800a25e:	e7fd      	b.n	800a25c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a260:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00d      	beq.n	800a288 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a274:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	4613      	mov	r3, r2
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	68b9      	ldr	r1, [r7, #8]
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 f805 	bl	800a292 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3730      	adds	r7, #48	@ 0x30
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	60f8      	str	r0, [r7, #12]
 800a29a:	60b9      	str	r1, [r7, #8]
 800a29c:	607a      	str	r2, [r7, #4]
 800a29e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d103      	bne.n	800a2ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	e002      	b.n	800a2b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2c0:	2101      	movs	r1, #1
 800a2c2:	69b8      	ldr	r0, [r7, #24]
 800a2c4:	f7ff fefe 	bl	800a0c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	78fa      	ldrb	r2, [r7, #3]
 800a2cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2d0:	bf00      	nop
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08e      	sub	sp, #56	@ 0x38
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10b      	bne.n	800a30c <xQueueGenericSend+0x34>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a306:	bf00      	nop
 800a308:	bf00      	nop
 800a30a:	e7fd      	b.n	800a308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d103      	bne.n	800a31a <xQueueGenericSend+0x42>
 800a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <xQueueGenericSend+0x46>
 800a31a:	2301      	movs	r3, #1
 800a31c:	e000      	b.n	800a320 <xQueueGenericSend+0x48>
 800a31e:	2300      	movs	r3, #0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10b      	bne.n	800a33c <xQueueGenericSend+0x64>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a336:	bf00      	nop
 800a338:	bf00      	nop
 800a33a:	e7fd      	b.n	800a338 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d103      	bne.n	800a34a <xQueueGenericSend+0x72>
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a346:	2b01      	cmp	r3, #1
 800a348:	d101      	bne.n	800a34e <xQueueGenericSend+0x76>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <xQueueGenericSend+0x78>
 800a34e:	2300      	movs	r3, #0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10b      	bne.n	800a36c <xQueueGenericSend+0x94>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	623b      	str	r3, [r7, #32]
}
 800a366:	bf00      	nop
 800a368:	bf00      	nop
 800a36a:	e7fd      	b.n	800a368 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a36c:	f001 f9fc 	bl	800b768 <xTaskGetSchedulerState>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d102      	bne.n	800a37c <xQueueGenericSend+0xa4>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <xQueueGenericSend+0xa8>
 800a37c:	2301      	movs	r3, #1
 800a37e:	e000      	b.n	800a382 <xQueueGenericSend+0xaa>
 800a380:	2300      	movs	r3, #0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10b      	bne.n	800a39e <xQueueGenericSend+0xc6>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	61fb      	str	r3, [r7, #28]
}
 800a398:	bf00      	nop
 800a39a:	bf00      	nop
 800a39c:	e7fd      	b.n	800a39a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a39e:	f001 ff53 	bl	800c248 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d302      	bcc.n	800a3b4 <xQueueGenericSend+0xdc>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d129      	bne.n	800a408 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3ba:	f000 fa0f 	bl	800a7dc <prvCopyDataToQueue>
 800a3be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d010      	beq.n	800a3ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ca:	3324      	adds	r3, #36	@ 0x24
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f001 f805 	bl	800b3dc <xTaskRemoveFromEventList>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d013      	beq.n	800a400 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3d8:	4b3f      	ldr	r3, [pc, #252]	@ (800a4d8 <xQueueGenericSend+0x200>)
 800a3da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	e00a      	b.n	800a400 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d007      	beq.n	800a400 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3f0:	4b39      	ldr	r3, [pc, #228]	@ (800a4d8 <xQueueGenericSend+0x200>)
 800a3f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3f6:	601a      	str	r2, [r3, #0]
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a400:	f001 ff54 	bl	800c2ac <vPortExitCritical>
				return pdPASS;
 800a404:	2301      	movs	r3, #1
 800a406:	e063      	b.n	800a4d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d103      	bne.n	800a416 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a40e:	f001 ff4d 	bl	800c2ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a412:	2300      	movs	r3, #0
 800a414:	e05c      	b.n	800a4d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d106      	bne.n	800a42a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a41c:	f107 0314 	add.w	r3, r7, #20
 800a420:	4618      	mov	r0, r3
 800a422:	f001 f83f 	bl	800b4a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a426:	2301      	movs	r3, #1
 800a428:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a42a:	f001 ff3f 	bl	800c2ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a42e:	f000 fda7 	bl	800af80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a432:	f001 ff09 	bl	800c248 <vPortEnterCritical>
 800a436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a438:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a43c:	b25b      	sxtb	r3, r3
 800a43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a442:	d103      	bne.n	800a44c <xQueueGenericSend+0x174>
 800a444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a452:	b25b      	sxtb	r3, r3
 800a454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a458:	d103      	bne.n	800a462 <xQueueGenericSend+0x18a>
 800a45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a462:	f001 ff23 	bl	800c2ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a466:	1d3a      	adds	r2, r7, #4
 800a468:	f107 0314 	add.w	r3, r7, #20
 800a46c:	4611      	mov	r1, r2
 800a46e:	4618      	mov	r0, r3
 800a470:	f001 f82e 	bl	800b4d0 <xTaskCheckForTimeOut>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d124      	bne.n	800a4c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a47a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a47c:	f000 faa6 	bl	800a9cc <prvIsQueueFull>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d018      	beq.n	800a4b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a488:	3310      	adds	r3, #16
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	4611      	mov	r1, r2
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 ff52 	bl	800b338 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a496:	f000 fa31 	bl	800a8fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a49a:	f000 fd7f 	bl	800af9c <xTaskResumeAll>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f47f af7c 	bne.w	800a39e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d8 <xQueueGenericSend+0x200>)
 800a4a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	e772      	b.n	800a39e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4ba:	f000 fa1f 	bl	800a8fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4be:	f000 fd6d 	bl	800af9c <xTaskResumeAll>
 800a4c2:	e76c      	b.n	800a39e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4c6:	f000 fa19 	bl	800a8fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4ca:	f000 fd67 	bl	800af9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3738      	adds	r7, #56	@ 0x38
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	e000ed04 	.word	0xe000ed04

0800a4dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b090      	sub	sp, #64	@ 0x40
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
 800a4e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10b      	bne.n	800a50c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a506:	bf00      	nop
 800a508:	bf00      	nop
 800a50a:	e7fd      	b.n	800a508 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d103      	bne.n	800a51a <xQueueGenericSendFromISR+0x3e>
 800a512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <xQueueGenericSendFromISR+0x42>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e000      	b.n	800a520 <xQueueGenericSendFromISR+0x44>
 800a51e:	2300      	movs	r3, #0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10b      	bne.n	800a53c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a536:	bf00      	nop
 800a538:	bf00      	nop
 800a53a:	e7fd      	b.n	800a538 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d103      	bne.n	800a54a <xQueueGenericSendFromISR+0x6e>
 800a542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a546:	2b01      	cmp	r3, #1
 800a548:	d101      	bne.n	800a54e <xQueueGenericSendFromISR+0x72>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e000      	b.n	800a550 <xQueueGenericSendFromISR+0x74>
 800a54e:	2300      	movs	r3, #0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10b      	bne.n	800a56c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	623b      	str	r3, [r7, #32]
}
 800a566:	bf00      	nop
 800a568:	bf00      	nop
 800a56a:	e7fd      	b.n	800a568 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a56c:	f001 ff4c 	bl	800c408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a570:	f3ef 8211 	mrs	r2, BASEPRI
 800a574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	61fa      	str	r2, [r7, #28]
 800a586:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a588:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a58a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a594:	429a      	cmp	r2, r3
 800a596:	d302      	bcc.n	800a59e <xQueueGenericSendFromISR+0xc2>
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d12f      	bne.n	800a5fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a5b4:	f000 f912 	bl	800a7dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c0:	d112      	bne.n	800a5e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d016      	beq.n	800a5f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5cc:	3324      	adds	r3, #36	@ 0x24
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 ff04 	bl	800b3dc <xTaskRemoveFromEventList>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00e      	beq.n	800a5f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00b      	beq.n	800a5f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	e007      	b.n	800a5f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	b25a      	sxtb	r2, r3
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a5fc:	e001      	b.n	800a602 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a604:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a60c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a610:	4618      	mov	r0, r3
 800a612:	3740      	adds	r7, #64	@ 0x40
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08c      	sub	sp, #48	@ 0x30
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a624:	2300      	movs	r3, #0
 800a626:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10b      	bne.n	800a64a <xQueueReceive+0x32>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	623b      	str	r3, [r7, #32]
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop
 800a648:	e7fd      	b.n	800a646 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d103      	bne.n	800a658 <xQueueReceive+0x40>
 800a650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <xQueueReceive+0x44>
 800a658:	2301      	movs	r3, #1
 800a65a:	e000      	b.n	800a65e <xQueueReceive+0x46>
 800a65c:	2300      	movs	r3, #0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10b      	bne.n	800a67a <xQueueReceive+0x62>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	61fb      	str	r3, [r7, #28]
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop
 800a678:	e7fd      	b.n	800a676 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a67a:	f001 f875 	bl	800b768 <xTaskGetSchedulerState>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d102      	bne.n	800a68a <xQueueReceive+0x72>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <xQueueReceive+0x76>
 800a68a:	2301      	movs	r3, #1
 800a68c:	e000      	b.n	800a690 <xQueueReceive+0x78>
 800a68e:	2300      	movs	r3, #0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10b      	bne.n	800a6ac <xQueueReceive+0x94>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	61bb      	str	r3, [r7, #24]
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	e7fd      	b.n	800a6a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6ac:	f001 fdcc 	bl	800c248 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01f      	beq.n	800a6fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6bc:	68b9      	ldr	r1, [r7, #8]
 800a6be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6c0:	f000 f8f6 	bl	800a8b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c6:	1e5a      	subs	r2, r3, #1
 800a6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00f      	beq.n	800a6f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	3310      	adds	r3, #16
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 fe7f 	bl	800b3dc <xTaskRemoveFromEventList>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d007      	beq.n	800a6f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6e4:	4b3c      	ldr	r3, [pc, #240]	@ (800a7d8 <xQueueReceive+0x1c0>)
 800a6e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6f4:	f001 fdda 	bl	800c2ac <vPortExitCritical>
				return pdPASS;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e069      	b.n	800a7d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d103      	bne.n	800a70a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a702:	f001 fdd3 	bl	800c2ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a706:	2300      	movs	r3, #0
 800a708:	e062      	b.n	800a7d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d106      	bne.n	800a71e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a710:	f107 0310 	add.w	r3, r7, #16
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fec5 	bl	800b4a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a71a:	2301      	movs	r3, #1
 800a71c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a71e:	f001 fdc5 	bl	800c2ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a722:	f000 fc2d 	bl	800af80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a726:	f001 fd8f 	bl	800c248 <vPortEnterCritical>
 800a72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a730:	b25b      	sxtb	r3, r3
 800a732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a736:	d103      	bne.n	800a740 <xQueueReceive+0x128>
 800a738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a746:	b25b      	sxtb	r3, r3
 800a748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a74c:	d103      	bne.n	800a756 <xQueueReceive+0x13e>
 800a74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a750:	2200      	movs	r2, #0
 800a752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a756:	f001 fda9 	bl	800c2ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a75a:	1d3a      	adds	r2, r7, #4
 800a75c:	f107 0310 	add.w	r3, r7, #16
 800a760:	4611      	mov	r1, r2
 800a762:	4618      	mov	r0, r3
 800a764:	f000 feb4 	bl	800b4d0 <xTaskCheckForTimeOut>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d123      	bne.n	800a7b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a76e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a770:	f000 f916 	bl	800a9a0 <prvIsQueueEmpty>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d017      	beq.n	800a7aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77c:	3324      	adds	r3, #36	@ 0x24
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	4611      	mov	r1, r2
 800a782:	4618      	mov	r0, r3
 800a784:	f000 fdd8 	bl	800b338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a78a:	f000 f8b7 	bl	800a8fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a78e:	f000 fc05 	bl	800af9c <xTaskResumeAll>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d189      	bne.n	800a6ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a798:	4b0f      	ldr	r3, [pc, #60]	@ (800a7d8 <xQueueReceive+0x1c0>)
 800a79a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a79e:	601a      	str	r2, [r3, #0]
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	e780      	b.n	800a6ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7ac:	f000 f8a6 	bl	800a8fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7b0:	f000 fbf4 	bl	800af9c <xTaskResumeAll>
 800a7b4:	e77a      	b.n	800a6ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7b8:	f000 f8a0 	bl	800a8fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7bc:	f000 fbee 	bl	800af9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7c2:	f000 f8ed 	bl	800a9a0 <prvIsQueueEmpty>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f43f af6f 	beq.w	800a6ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3730      	adds	r7, #48	@ 0x30
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	e000ed04 	.word	0xe000ed04

0800a7dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10d      	bne.n	800a816 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d14d      	bne.n	800a89e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	4618      	mov	r0, r3
 800a808:	f000 ffcc 	bl	800b7a4 <xTaskPriorityDisinherit>
 800a80c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	609a      	str	r2, [r3, #8]
 800a814:	e043      	b.n	800a89e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d119      	bne.n	800a850 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6858      	ldr	r0, [r3, #4]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a824:	461a      	mov	r2, r3
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	f002 fdba 	bl	800d3a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a834:	441a      	add	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	429a      	cmp	r2, r3
 800a844:	d32b      	bcc.n	800a89e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	605a      	str	r2, [r3, #4]
 800a84e:	e026      	b.n	800a89e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	68d8      	ldr	r0, [r3, #12]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a858:	461a      	mov	r2, r3
 800a85a:	68b9      	ldr	r1, [r7, #8]
 800a85c:	f002 fda0 	bl	800d3a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	68da      	ldr	r2, [r3, #12]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a868:	425b      	negs	r3, r3
 800a86a:	441a      	add	r2, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	68da      	ldr	r2, [r3, #12]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d207      	bcs.n	800a88c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	689a      	ldr	r2, [r3, #8]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a884:	425b      	negs	r3, r3
 800a886:	441a      	add	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d105      	bne.n	800a89e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	1c5a      	adds	r2, r3, #1
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a8a6:	697b      	ldr	r3, [r7, #20]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d018      	beq.n	800a8f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	68da      	ldr	r2, [r3, #12]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ca:	441a      	add	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68da      	ldr	r2, [r3, #12]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d303      	bcc.n	800a8e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	68d9      	ldr	r1, [r3, #12]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	6838      	ldr	r0, [r7, #0]
 800a8f0:	f002 fd56 	bl	800d3a0 <memcpy>
	}
}
 800a8f4:	bf00      	nop
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a904:	f001 fca0 	bl	800c248 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a90e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a910:	e011      	b.n	800a936 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a916:	2b00      	cmp	r3, #0
 800a918:	d012      	beq.n	800a940 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	3324      	adds	r3, #36	@ 0x24
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 fd5c 	bl	800b3dc <xTaskRemoveFromEventList>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d001      	beq.n	800a92e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a92a:	f000 fe35 	bl	800b598 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
 800a930:	3b01      	subs	r3, #1
 800a932:	b2db      	uxtb	r3, r3
 800a934:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	dce9      	bgt.n	800a912 <prvUnlockQueue+0x16>
 800a93e:	e000      	b.n	800a942 <prvUnlockQueue+0x46>
					break;
 800a940:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	22ff      	movs	r2, #255	@ 0xff
 800a946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a94a:	f001 fcaf 	bl	800c2ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a94e:	f001 fc7b 	bl	800c248 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a958:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a95a:	e011      	b.n	800a980 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d012      	beq.n	800a98a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3310      	adds	r3, #16
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 fd37 	bl	800b3dc <xTaskRemoveFromEventList>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a974:	f000 fe10 	bl	800b598 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	3b01      	subs	r3, #1
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a984:	2b00      	cmp	r3, #0
 800a986:	dce9      	bgt.n	800a95c <prvUnlockQueue+0x60>
 800a988:	e000      	b.n	800a98c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a98a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	22ff      	movs	r2, #255	@ 0xff
 800a990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a994:	f001 fc8a 	bl	800c2ac <vPortExitCritical>
}
 800a998:	bf00      	nop
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9a8:	f001 fc4e 	bl	800c248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	e001      	b.n	800a9be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9be:	f001 fc75 	bl	800c2ac <vPortExitCritical>

	return xReturn;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9d4:	f001 fc38 	bl	800c248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d102      	bne.n	800a9ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	60fb      	str	r3, [r7, #12]
 800a9e8:	e001      	b.n	800a9ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9ee:	f001 fc5d 	bl	800c2ac <vPortExitCritical>

	return xReturn;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]
 800aa0a:	e014      	b.n	800aa36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa0c:	4a0f      	ldr	r2, [pc, #60]	@ (800aa4c <vQueueAddToRegistry+0x50>)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10b      	bne.n	800aa30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa18:	490c      	ldr	r1, [pc, #48]	@ (800aa4c <vQueueAddToRegistry+0x50>)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	683a      	ldr	r2, [r7, #0]
 800aa1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa22:	4a0a      	ldr	r2, [pc, #40]	@ (800aa4c <vQueueAddToRegistry+0x50>)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	4413      	add	r3, r2
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa2e:	e006      	b.n	800aa3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	3301      	adds	r3, #1
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b07      	cmp	r3, #7
 800aa3a:	d9e7      	bls.n	800aa0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa3c:	bf00      	nop
 800aa3e:	bf00      	nop
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	20000b04 	.word	0x20000b04

0800aa50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa60:	f001 fbf2 	bl	800c248 <vPortEnterCritical>
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa6a:	b25b      	sxtb	r3, r3
 800aa6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa70:	d103      	bne.n	800aa7a <vQueueWaitForMessageRestricted+0x2a>
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa80:	b25b      	sxtb	r3, r3
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa86:	d103      	bne.n	800aa90 <vQueueWaitForMessageRestricted+0x40>
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa90:	f001 fc0c 	bl	800c2ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d106      	bne.n	800aaaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	3324      	adds	r3, #36	@ 0x24
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	68b9      	ldr	r1, [r7, #8]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 fc6d 	bl	800b384 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aaaa:	6978      	ldr	r0, [r7, #20]
 800aaac:	f7ff ff26 	bl	800a8fc <prvUnlockQueue>
	}
 800aab0:	bf00      	nop
 800aab2:	3718      	adds	r7, #24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b08e      	sub	sp, #56	@ 0x38
 800aabc:	af04      	add	r7, sp, #16
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
 800aac4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10b      	bne.n	800aae4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	623b      	str	r3, [r7, #32]
}
 800aade:	bf00      	nop
 800aae0:	bf00      	nop
 800aae2:	e7fd      	b.n	800aae0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10b      	bne.n	800ab02 <xTaskCreateStatic+0x4a>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	61fb      	str	r3, [r7, #28]
}
 800aafc:	bf00      	nop
 800aafe:	bf00      	nop
 800ab00:	e7fd      	b.n	800aafe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab02:	23a8      	movs	r3, #168	@ 0xa8
 800ab04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2ba8      	cmp	r3, #168	@ 0xa8
 800ab0a:	d00b      	beq.n	800ab24 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	61bb      	str	r3, [r7, #24]
}
 800ab1e:	bf00      	nop
 800ab20:	bf00      	nop
 800ab22:	e7fd      	b.n	800ab20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d01e      	beq.n	800ab6a <xTaskCreateStatic+0xb2>
 800ab2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d01b      	beq.n	800ab6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab44:	2300      	movs	r3, #0
 800ab46:	9303      	str	r3, [sp, #12]
 800ab48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4a:	9302      	str	r3, [sp, #8]
 800ab4c:	f107 0314 	add.w	r3, r7, #20
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	68b9      	ldr	r1, [r7, #8]
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f000 f851 	bl	800ac04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab64:	f000 f8f6 	bl	800ad54 <prvAddNewTaskToReadyList>
 800ab68:	e001      	b.n	800ab6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab6e:	697b      	ldr	r3, [r7, #20]
	}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3728      	adds	r7, #40	@ 0x28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08c      	sub	sp, #48	@ 0x30
 800ab7c:	af04      	add	r7, sp, #16
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	603b      	str	r3, [r7, #0]
 800ab84:	4613      	mov	r3, r2
 800ab86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab88:	88fb      	ldrh	r3, [r7, #6]
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f001 fc7d 	bl	800c48c <pvPortMalloc>
 800ab92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00e      	beq.n	800abb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab9a:	20a8      	movs	r0, #168	@ 0xa8
 800ab9c:	f001 fc76 	bl	800c48c <pvPortMalloc>
 800aba0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	631a      	str	r2, [r3, #48]	@ 0x30
 800abae:	e005      	b.n	800abbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abb0:	6978      	ldr	r0, [r7, #20]
 800abb2:	f001 fd39 	bl	800c628 <vPortFree>
 800abb6:	e001      	b.n	800abbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abb8:	2300      	movs	r3, #0
 800abba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d017      	beq.n	800abf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abca:	88fa      	ldrh	r2, [r7, #6]
 800abcc:	2300      	movs	r3, #0
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	9302      	str	r3, [sp, #8]
 800abd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 f80f 	bl	800ac04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abe6:	69f8      	ldr	r0, [r7, #28]
 800abe8:	f000 f8b4 	bl	800ad54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abec:	2301      	movs	r3, #1
 800abee:	61bb      	str	r3, [r7, #24]
 800abf0:	e002      	b.n	800abf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abf2:	f04f 33ff 	mov.w	r3, #4294967295
 800abf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abf8:	69bb      	ldr	r3, [r7, #24]
	}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3720      	adds	r7, #32
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
	...

0800ac04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
 800ac10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	21a5      	movs	r1, #165	@ 0xa5
 800ac1e:	f002 fb33 	bl	800d288 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	f023 0307 	bic.w	r3, r3, #7
 800ac3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	f003 0307 	and.w	r3, r3, #7
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00b      	beq.n	800ac5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	617b      	str	r3, [r7, #20]
}
 800ac58:	bf00      	nop
 800ac5a:	bf00      	nop
 800ac5c:	e7fd      	b.n	800ac5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d01f      	beq.n	800aca4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac64:	2300      	movs	r3, #0
 800ac66:	61fb      	str	r3, [r7, #28]
 800ac68:	e012      	b.n	800ac90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	4413      	add	r3, r2
 800ac70:	7819      	ldrb	r1, [r3, #0]
 800ac72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	4413      	add	r3, r2
 800ac78:	3334      	adds	r3, #52	@ 0x34
 800ac7a:	460a      	mov	r2, r1
 800ac7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	4413      	add	r3, r2
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d006      	beq.n	800ac98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	61fb      	str	r3, [r7, #28]
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	2b0f      	cmp	r3, #15
 800ac94:	d9e9      	bls.n	800ac6a <prvInitialiseNewTask+0x66>
 800ac96:	e000      	b.n	800ac9a <prvInitialiseNewTask+0x96>
			{
				break;
 800ac98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aca2:	e003      	b.n	800acac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acae:	2b37      	cmp	r3, #55	@ 0x37
 800acb0:	d901      	bls.n	800acb6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acb2:	2337      	movs	r3, #55	@ 0x37
 800acb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc4:	2200      	movs	r2, #0
 800acc6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acca:	3304      	adds	r3, #4
 800accc:	4618      	mov	r0, r3
 800acce:	f7ff f965 	bl	8009f9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd4:	3318      	adds	r3, #24
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7ff f960 	bl	8009f9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ace0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ace2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ace8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acf0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	2200      	movs	r2, #0
 800acf6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad04:	3354      	adds	r3, #84	@ 0x54
 800ad06:	224c      	movs	r2, #76	@ 0x4c
 800ad08:	2100      	movs	r1, #0
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f002 fabc 	bl	800d288 <memset>
 800ad10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad12:	4a0d      	ldr	r2, [pc, #52]	@ (800ad48 <prvInitialiseNewTask+0x144>)
 800ad14:	659a      	str	r2, [r3, #88]	@ 0x58
 800ad16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad18:	4a0c      	ldr	r2, [pc, #48]	@ (800ad4c <prvInitialiseNewTask+0x148>)
 800ad1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1e:	4a0c      	ldr	r2, [pc, #48]	@ (800ad50 <prvInitialiseNewTask+0x14c>)
 800ad20:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	68f9      	ldr	r1, [r7, #12]
 800ad26:	69b8      	ldr	r0, [r7, #24]
 800ad28:	f001 f95a 	bl	800bfe0 <pxPortInitialiseStack>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad3e:	bf00      	nop
 800ad40:	3720      	adds	r7, #32
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20006978 	.word	0x20006978
 800ad4c:	200069e0 	.word	0x200069e0
 800ad50:	20006a48 	.word	0x20006a48

0800ad54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad5c:	f001 fa74 	bl	800c248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad60:	4b2d      	ldr	r3, [pc, #180]	@ (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	4a2c      	ldr	r2, [pc, #176]	@ (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad6a:	4b2c      	ldr	r3, [pc, #176]	@ (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d109      	bne.n	800ad86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad72:	4a2a      	ldr	r2, [pc, #168]	@ (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad78:	4b27      	ldr	r3, [pc, #156]	@ (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d110      	bne.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad80:	f000 fc2e 	bl	800b5e0 <prvInitialiseTaskLists>
 800ad84:	e00d      	b.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad86:	4b26      	ldr	r3, [pc, #152]	@ (800ae20 <prvAddNewTaskToReadyList+0xcc>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad8e:	4b23      	ldr	r3, [pc, #140]	@ (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d802      	bhi.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad9c:	4a1f      	ldr	r2, [pc, #124]	@ (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ada2:	4b20      	ldr	r3, [pc, #128]	@ (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3301      	adds	r3, #1
 800ada8:	4a1e      	ldr	r2, [pc, #120]	@ (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800adaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800adac:	4b1d      	ldr	r3, [pc, #116]	@ (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb8:	4b1b      	ldr	r3, [pc, #108]	@ (800ae28 <prvAddNewTaskToReadyList+0xd4>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d903      	bls.n	800adc8 <prvAddNewTaskToReadyList+0x74>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc4:	4a18      	ldr	r2, [pc, #96]	@ (800ae28 <prvAddNewTaskToReadyList+0xd4>)
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4a15      	ldr	r2, [pc, #84]	@ (800ae2c <prvAddNewTaskToReadyList+0xd8>)
 800add6:	441a      	add	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3304      	adds	r3, #4
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f7ff f8e9 	bl	8009fb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ade4:	f001 fa62 	bl	800c2ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ade8:	4b0d      	ldr	r3, [pc, #52]	@ (800ae20 <prvAddNewTaskToReadyList+0xcc>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00e      	beq.n	800ae0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d207      	bcs.n	800ae0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ae30 <prvAddNewTaskToReadyList+0xdc>)
 800ae00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20001018 	.word	0x20001018
 800ae1c:	20000b44 	.word	0x20000b44
 800ae20:	20001024 	.word	0x20001024
 800ae24:	20001034 	.word	0x20001034
 800ae28:	20001020 	.word	0x20001020
 800ae2c:	20000b48 	.word	0x20000b48
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d018      	beq.n	800ae78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae46:	4b14      	ldr	r3, [pc, #80]	@ (800ae98 <vTaskDelay+0x64>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00b      	beq.n	800ae66 <vTaskDelay+0x32>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	60bb      	str	r3, [r7, #8]
}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	e7fd      	b.n	800ae62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae66:	f000 f88b 	bl	800af80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fd09 	bl	800b884 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae72:	f000 f893 	bl	800af9c <xTaskResumeAll>
 800ae76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d107      	bne.n	800ae8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ae7e:	4b07      	ldr	r3, [pc, #28]	@ (800ae9c <vTaskDelay+0x68>)
 800ae80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae84:	601a      	str	r2, [r3, #0]
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae8e:	bf00      	nop
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20001040 	.word	0x20001040
 800ae9c:	e000ed04 	.word	0xe000ed04

0800aea0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b08a      	sub	sp, #40	@ 0x28
 800aea4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aeae:	463a      	mov	r2, r7
 800aeb0:	1d39      	adds	r1, r7, #4
 800aeb2:	f107 0308 	add.w	r3, r7, #8
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff f81c 	bl	8009ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	9202      	str	r2, [sp, #8]
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	2300      	movs	r3, #0
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	2300      	movs	r3, #0
 800aecc:	460a      	mov	r2, r1
 800aece:	4924      	ldr	r1, [pc, #144]	@ (800af60 <vTaskStartScheduler+0xc0>)
 800aed0:	4824      	ldr	r0, [pc, #144]	@ (800af64 <vTaskStartScheduler+0xc4>)
 800aed2:	f7ff fdf1 	bl	800aab8 <xTaskCreateStatic>
 800aed6:	4603      	mov	r3, r0
 800aed8:	4a23      	ldr	r2, [pc, #140]	@ (800af68 <vTaskStartScheduler+0xc8>)
 800aeda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aedc:	4b22      	ldr	r3, [pc, #136]	@ (800af68 <vTaskStartScheduler+0xc8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aee4:	2301      	movs	r3, #1
 800aee6:	617b      	str	r3, [r7, #20]
 800aee8:	e001      	b.n	800aeee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d102      	bne.n	800aefa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aef4:	f000 fd1a 	bl	800b92c <xTimerCreateTimerTask>
 800aef8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d11b      	bne.n	800af38 <vTaskStartScheduler+0x98>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	613b      	str	r3, [r7, #16]
}
 800af12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af14:	4b15      	ldr	r3, [pc, #84]	@ (800af6c <vTaskStartScheduler+0xcc>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3354      	adds	r3, #84	@ 0x54
 800af1a:	4a15      	ldr	r2, [pc, #84]	@ (800af70 <vTaskStartScheduler+0xd0>)
 800af1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af1e:	4b15      	ldr	r3, [pc, #84]	@ (800af74 <vTaskStartScheduler+0xd4>)
 800af20:	f04f 32ff 	mov.w	r2, #4294967295
 800af24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af26:	4b14      	ldr	r3, [pc, #80]	@ (800af78 <vTaskStartScheduler+0xd8>)
 800af28:	2201      	movs	r2, #1
 800af2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af2c:	4b13      	ldr	r3, [pc, #76]	@ (800af7c <vTaskStartScheduler+0xdc>)
 800af2e:	2200      	movs	r2, #0
 800af30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af32:	f001 f8e5 	bl	800c100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af36:	e00f      	b.n	800af58 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3e:	d10b      	bne.n	800af58 <vTaskStartScheduler+0xb8>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	60fb      	str	r3, [r7, #12]
}
 800af52:	bf00      	nop
 800af54:	bf00      	nop
 800af56:	e7fd      	b.n	800af54 <vTaskStartScheduler+0xb4>
}
 800af58:	bf00      	nop
 800af5a:	3718      	adds	r7, #24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	0800d598 	.word	0x0800d598
 800af64:	0800b5b1 	.word	0x0800b5b1
 800af68:	2000103c 	.word	0x2000103c
 800af6c:	20000b44 	.word	0x20000b44
 800af70:	20000100 	.word	0x20000100
 800af74:	20001038 	.word	0x20001038
 800af78:	20001024 	.word	0x20001024
 800af7c:	2000101c 	.word	0x2000101c

0800af80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af80:	b480      	push	{r7}
 800af82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af84:	4b04      	ldr	r3, [pc, #16]	@ (800af98 <vTaskSuspendAll+0x18>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3301      	adds	r3, #1
 800af8a:	4a03      	ldr	r2, [pc, #12]	@ (800af98 <vTaskSuspendAll+0x18>)
 800af8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af8e:	bf00      	nop
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	20001040 	.word	0x20001040

0800af9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afaa:	4b42      	ldr	r3, [pc, #264]	@ (800b0b4 <xTaskResumeAll+0x118>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10b      	bne.n	800afca <xTaskResumeAll+0x2e>
	__asm volatile
 800afb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	603b      	str	r3, [r7, #0]
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop
 800afc8:	e7fd      	b.n	800afc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afca:	f001 f93d 	bl	800c248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afce:	4b39      	ldr	r3, [pc, #228]	@ (800b0b4 <xTaskResumeAll+0x118>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	4a37      	ldr	r2, [pc, #220]	@ (800b0b4 <xTaskResumeAll+0x118>)
 800afd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afd8:	4b36      	ldr	r3, [pc, #216]	@ (800b0b4 <xTaskResumeAll+0x118>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d162      	bne.n	800b0a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afe0:	4b35      	ldr	r3, [pc, #212]	@ (800b0b8 <xTaskResumeAll+0x11c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d05e      	beq.n	800b0a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afe8:	e02f      	b.n	800b04a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afea:	4b34      	ldr	r3, [pc, #208]	@ (800b0bc <xTaskResumeAll+0x120>)
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3318      	adds	r3, #24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff f83a 	bl	800a070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3304      	adds	r3, #4
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff f835 	bl	800a070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b00a:	4b2d      	ldr	r3, [pc, #180]	@ (800b0c0 <xTaskResumeAll+0x124>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d903      	bls.n	800b01a <xTaskResumeAll+0x7e>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b016:	4a2a      	ldr	r2, [pc, #168]	@ (800b0c0 <xTaskResumeAll+0x124>)
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b01e:	4613      	mov	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	4413      	add	r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4a27      	ldr	r2, [pc, #156]	@ (800b0c4 <xTaskResumeAll+0x128>)
 800b028:	441a      	add	r2, r3
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3304      	adds	r3, #4
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7fe ffc0 	bl	8009fb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b03a:	4b23      	ldr	r3, [pc, #140]	@ (800b0c8 <xTaskResumeAll+0x12c>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b040:	429a      	cmp	r2, r3
 800b042:	d302      	bcc.n	800b04a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b044:	4b21      	ldr	r3, [pc, #132]	@ (800b0cc <xTaskResumeAll+0x130>)
 800b046:	2201      	movs	r2, #1
 800b048:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b04a:	4b1c      	ldr	r3, [pc, #112]	@ (800b0bc <xTaskResumeAll+0x120>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1cb      	bne.n	800afea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b058:	f000 fb66 	bl	800b728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b05c:	4b1c      	ldr	r3, [pc, #112]	@ (800b0d0 <xTaskResumeAll+0x134>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d010      	beq.n	800b08a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b068:	f000 f846 	bl	800b0f8 <xTaskIncrementTick>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b072:	4b16      	ldr	r3, [pc, #88]	@ (800b0cc <xTaskResumeAll+0x130>)
 800b074:	2201      	movs	r2, #1
 800b076:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3b01      	subs	r3, #1
 800b07c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1f1      	bne.n	800b068 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b084:	4b12      	ldr	r3, [pc, #72]	@ (800b0d0 <xTaskResumeAll+0x134>)
 800b086:	2200      	movs	r2, #0
 800b088:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b08a:	4b10      	ldr	r3, [pc, #64]	@ (800b0cc <xTaskResumeAll+0x130>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d009      	beq.n	800b0a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b092:	2301      	movs	r3, #1
 800b094:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b096:	4b0f      	ldr	r3, [pc, #60]	@ (800b0d4 <xTaskResumeAll+0x138>)
 800b098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0a6:	f001 f901 	bl	800c2ac <vPortExitCritical>

	return xAlreadyYielded;
 800b0aa:	68bb      	ldr	r3, [r7, #8]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	20001040 	.word	0x20001040
 800b0b8:	20001018 	.word	0x20001018
 800b0bc:	20000fd8 	.word	0x20000fd8
 800b0c0:	20001020 	.word	0x20001020
 800b0c4:	20000b48 	.word	0x20000b48
 800b0c8:	20000b44 	.word	0x20000b44
 800b0cc:	2000102c 	.word	0x2000102c
 800b0d0:	20001028 	.word	0x20001028
 800b0d4:	e000ed04 	.word	0xe000ed04

0800b0d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0de:	4b05      	ldr	r3, [pc, #20]	@ (800b0f4 <xTaskGetTickCount+0x1c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0e4:	687b      	ldr	r3, [r7, #4]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	2000101c 	.word	0x2000101c

0800b0f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0fe:	2300      	movs	r3, #0
 800b100:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b102:	4b4f      	ldr	r3, [pc, #316]	@ (800b240 <xTaskIncrementTick+0x148>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f040 8090 	bne.w	800b22c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b10c:	4b4d      	ldr	r3, [pc, #308]	@ (800b244 <xTaskIncrementTick+0x14c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3301      	adds	r3, #1
 800b112:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b114:	4a4b      	ldr	r2, [pc, #300]	@ (800b244 <xTaskIncrementTick+0x14c>)
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d121      	bne.n	800b164 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b120:	4b49      	ldr	r3, [pc, #292]	@ (800b248 <xTaskIncrementTick+0x150>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00b      	beq.n	800b142 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	603b      	str	r3, [r7, #0]
}
 800b13c:	bf00      	nop
 800b13e:	bf00      	nop
 800b140:	e7fd      	b.n	800b13e <xTaskIncrementTick+0x46>
 800b142:	4b41      	ldr	r3, [pc, #260]	@ (800b248 <xTaskIncrementTick+0x150>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	4b40      	ldr	r3, [pc, #256]	@ (800b24c <xTaskIncrementTick+0x154>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a3e      	ldr	r2, [pc, #248]	@ (800b248 <xTaskIncrementTick+0x150>)
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	4a3e      	ldr	r2, [pc, #248]	@ (800b24c <xTaskIncrementTick+0x154>)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	4b3e      	ldr	r3, [pc, #248]	@ (800b250 <xTaskIncrementTick+0x158>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3301      	adds	r3, #1
 800b15c:	4a3c      	ldr	r2, [pc, #240]	@ (800b250 <xTaskIncrementTick+0x158>)
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	f000 fae2 	bl	800b728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b164:	4b3b      	ldr	r3, [pc, #236]	@ (800b254 <xTaskIncrementTick+0x15c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d349      	bcc.n	800b202 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b16e:	4b36      	ldr	r3, [pc, #216]	@ (800b248 <xTaskIncrementTick+0x150>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d104      	bne.n	800b182 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b178:	4b36      	ldr	r3, [pc, #216]	@ (800b254 <xTaskIncrementTick+0x15c>)
 800b17a:	f04f 32ff 	mov.w	r2, #4294967295
 800b17e:	601a      	str	r2, [r3, #0]
					break;
 800b180:	e03f      	b.n	800b202 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b182:	4b31      	ldr	r3, [pc, #196]	@ (800b248 <xTaskIncrementTick+0x150>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	429a      	cmp	r2, r3
 800b198:	d203      	bcs.n	800b1a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b19a:	4a2e      	ldr	r2, [pc, #184]	@ (800b254 <xTaskIncrementTick+0x15c>)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1a0:	e02f      	b.n	800b202 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe ff62 	bl	800a070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d004      	beq.n	800b1be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	3318      	adds	r3, #24
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe ff59 	bl	800a070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1c2:	4b25      	ldr	r3, [pc, #148]	@ (800b258 <xTaskIncrementTick+0x160>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d903      	bls.n	800b1d2 <xTaskIncrementTick+0xda>
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ce:	4a22      	ldr	r2, [pc, #136]	@ (800b258 <xTaskIncrementTick+0x160>)
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4a1f      	ldr	r2, [pc, #124]	@ (800b25c <xTaskIncrementTick+0x164>)
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	f7fe fee4 	bl	8009fb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b260 <xTaskIncrementTick+0x168>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d3b8      	bcc.n	800b16e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b200:	e7b5      	b.n	800b16e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b202:	4b17      	ldr	r3, [pc, #92]	@ (800b260 <xTaskIncrementTick+0x168>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b208:	4914      	ldr	r1, [pc, #80]	@ (800b25c <xTaskIncrementTick+0x164>)
 800b20a:	4613      	mov	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	440b      	add	r3, r1
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d901      	bls.n	800b21e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b21a:	2301      	movs	r3, #1
 800b21c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b21e:	4b11      	ldr	r3, [pc, #68]	@ (800b264 <xTaskIncrementTick+0x16c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d007      	beq.n	800b236 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b226:	2301      	movs	r3, #1
 800b228:	617b      	str	r3, [r7, #20]
 800b22a:	e004      	b.n	800b236 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b22c:	4b0e      	ldr	r3, [pc, #56]	@ (800b268 <xTaskIncrementTick+0x170>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	3301      	adds	r3, #1
 800b232:	4a0d      	ldr	r2, [pc, #52]	@ (800b268 <xTaskIncrementTick+0x170>)
 800b234:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b236:	697b      	ldr	r3, [r7, #20]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	20001040 	.word	0x20001040
 800b244:	2000101c 	.word	0x2000101c
 800b248:	20000fd0 	.word	0x20000fd0
 800b24c:	20000fd4 	.word	0x20000fd4
 800b250:	20001030 	.word	0x20001030
 800b254:	20001038 	.word	0x20001038
 800b258:	20001020 	.word	0x20001020
 800b25c:	20000b48 	.word	0x20000b48
 800b260:	20000b44 	.word	0x20000b44
 800b264:	2000102c 	.word	0x2000102c
 800b268:	20001028 	.word	0x20001028

0800b26c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b272:	4b2b      	ldr	r3, [pc, #172]	@ (800b320 <vTaskSwitchContext+0xb4>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d003      	beq.n	800b282 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b27a:	4b2a      	ldr	r3, [pc, #168]	@ (800b324 <vTaskSwitchContext+0xb8>)
 800b27c:	2201      	movs	r2, #1
 800b27e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b280:	e047      	b.n	800b312 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b282:	4b28      	ldr	r3, [pc, #160]	@ (800b324 <vTaskSwitchContext+0xb8>)
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b288:	4b27      	ldr	r3, [pc, #156]	@ (800b328 <vTaskSwitchContext+0xbc>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	e011      	b.n	800b2b4 <vTaskSwitchContext+0x48>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10b      	bne.n	800b2ae <vTaskSwitchContext+0x42>
	__asm volatile
 800b296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	607b      	str	r3, [r7, #4]
}
 800b2a8:	bf00      	nop
 800b2aa:	bf00      	nop
 800b2ac:	e7fd      	b.n	800b2aa <vTaskSwitchContext+0x3e>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	491d      	ldr	r1, [pc, #116]	@ (800b32c <vTaskSwitchContext+0xc0>)
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	440b      	add	r3, r1
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0e3      	beq.n	800b290 <vTaskSwitchContext+0x24>
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4a16      	ldr	r2, [pc, #88]	@ (800b32c <vTaskSwitchContext+0xc0>)
 800b2d4:	4413      	add	r3, r2
 800b2d6:	60bb      	str	r3, [r7, #8]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	605a      	str	r2, [r3, #4]
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	3308      	adds	r3, #8
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d104      	bne.n	800b2f8 <vTaskSwitchContext+0x8c>
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	605a      	str	r2, [r3, #4]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b330 <vTaskSwitchContext+0xc4>)
 800b300:	6013      	str	r3, [r2, #0]
 800b302:	4a09      	ldr	r2, [pc, #36]	@ (800b328 <vTaskSwitchContext+0xbc>)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b308:	4b09      	ldr	r3, [pc, #36]	@ (800b330 <vTaskSwitchContext+0xc4>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3354      	adds	r3, #84	@ 0x54
 800b30e:	4a09      	ldr	r2, [pc, #36]	@ (800b334 <vTaskSwitchContext+0xc8>)
 800b310:	6013      	str	r3, [r2, #0]
}
 800b312:	bf00      	nop
 800b314:	3714      	adds	r7, #20
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	20001040 	.word	0x20001040
 800b324:	2000102c 	.word	0x2000102c
 800b328:	20001020 	.word	0x20001020
 800b32c:	20000b48 	.word	0x20000b48
 800b330:	20000b44 	.word	0x20000b44
 800b334:	20000100 	.word	0x20000100

0800b338 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10b      	bne.n	800b360 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	60fb      	str	r3, [r7, #12]
}
 800b35a:	bf00      	nop
 800b35c:	bf00      	nop
 800b35e:	e7fd      	b.n	800b35c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b360:	4b07      	ldr	r3, [pc, #28]	@ (800b380 <vTaskPlaceOnEventList+0x48>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3318      	adds	r3, #24
 800b366:	4619      	mov	r1, r3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7fe fe48 	bl	8009ffe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b36e:	2101      	movs	r1, #1
 800b370:	6838      	ldr	r0, [r7, #0]
 800b372:	f000 fa87 	bl	800b884 <prvAddCurrentTaskToDelayedList>
}
 800b376:	bf00      	nop
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	20000b44 	.word	0x20000b44

0800b384 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10b      	bne.n	800b3ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	617b      	str	r3, [r7, #20]
}
 800b3a8:	bf00      	nop
 800b3aa:	bf00      	nop
 800b3ac:	e7fd      	b.n	800b3aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b3d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3318      	adds	r3, #24
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7fe fdfd 	bl	8009fb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	68b8      	ldr	r0, [r7, #8]
 800b3cc:	f000 fa5a 	bl	800b884 <prvAddCurrentTaskToDelayedList>
	}
 800b3d0:	bf00      	nop
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	20000b44 	.word	0x20000b44

0800b3dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10b      	bne.n	800b40a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	60fb      	str	r3, [r7, #12]
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	3318      	adds	r3, #24
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fe fe2e 	bl	800a070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b414:	4b1d      	ldr	r3, [pc, #116]	@ (800b48c <xTaskRemoveFromEventList+0xb0>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d11d      	bne.n	800b458 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	3304      	adds	r3, #4
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe fe25 	bl	800a070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b42a:	4b19      	ldr	r3, [pc, #100]	@ (800b490 <xTaskRemoveFromEventList+0xb4>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d903      	bls.n	800b43a <xTaskRemoveFromEventList+0x5e>
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b436:	4a16      	ldr	r2, [pc, #88]	@ (800b490 <xTaskRemoveFromEventList+0xb4>)
 800b438:	6013      	str	r3, [r2, #0]
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43e:	4613      	mov	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4a13      	ldr	r2, [pc, #76]	@ (800b494 <xTaskRemoveFromEventList+0xb8>)
 800b448:	441a      	add	r2, r3
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	3304      	adds	r3, #4
 800b44e:	4619      	mov	r1, r3
 800b450:	4610      	mov	r0, r2
 800b452:	f7fe fdb0 	bl	8009fb6 <vListInsertEnd>
 800b456:	e005      	b.n	800b464 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	3318      	adds	r3, #24
 800b45c:	4619      	mov	r1, r3
 800b45e:	480e      	ldr	r0, [pc, #56]	@ (800b498 <xTaskRemoveFromEventList+0xbc>)
 800b460:	f7fe fda9 	bl	8009fb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b468:	4b0c      	ldr	r3, [pc, #48]	@ (800b49c <xTaskRemoveFromEventList+0xc0>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46e:	429a      	cmp	r2, r3
 800b470:	d905      	bls.n	800b47e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b472:	2301      	movs	r3, #1
 800b474:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b476:	4b0a      	ldr	r3, [pc, #40]	@ (800b4a0 <xTaskRemoveFromEventList+0xc4>)
 800b478:	2201      	movs	r2, #1
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	e001      	b.n	800b482 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b482:	697b      	ldr	r3, [r7, #20]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	20001040 	.word	0x20001040
 800b490:	20001020 	.word	0x20001020
 800b494:	20000b48 	.word	0x20000b48
 800b498:	20000fd8 	.word	0x20000fd8
 800b49c:	20000b44 	.word	0x20000b44
 800b4a0:	2000102c 	.word	0x2000102c

0800b4a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4ac:	4b06      	ldr	r3, [pc, #24]	@ (800b4c8 <vTaskInternalSetTimeOutState+0x24>)
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4b4:	4b05      	ldr	r3, [pc, #20]	@ (800b4cc <vTaskInternalSetTimeOutState+0x28>)
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	605a      	str	r2, [r3, #4]
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	20001030 	.word	0x20001030
 800b4cc:	2000101c 	.word	0x2000101c

0800b4d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b088      	sub	sp, #32
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10b      	bne.n	800b4f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	613b      	str	r3, [r7, #16]
}
 800b4f2:	bf00      	nop
 800b4f4:	bf00      	nop
 800b4f6:	e7fd      	b.n	800b4f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10b      	bne.n	800b516 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	60fb      	str	r3, [r7, #12]
}
 800b510:	bf00      	nop
 800b512:	bf00      	nop
 800b514:	e7fd      	b.n	800b512 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b516:	f000 fe97 	bl	800c248 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b51a:	4b1d      	ldr	r3, [pc, #116]	@ (800b590 <xTaskCheckForTimeOut+0xc0>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	69ba      	ldr	r2, [r7, #24]
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b532:	d102      	bne.n	800b53a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b534:	2300      	movs	r3, #0
 800b536:	61fb      	str	r3, [r7, #28]
 800b538:	e023      	b.n	800b582 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	4b15      	ldr	r3, [pc, #84]	@ (800b594 <xTaskCheckForTimeOut+0xc4>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	429a      	cmp	r2, r3
 800b544:	d007      	beq.n	800b556 <xTaskCheckForTimeOut+0x86>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	69ba      	ldr	r2, [r7, #24]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d302      	bcc.n	800b556 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b550:	2301      	movs	r3, #1
 800b552:	61fb      	str	r3, [r7, #28]
 800b554:	e015      	b.n	800b582 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d20b      	bcs.n	800b578 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	1ad2      	subs	r2, r2, r3
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff ff99 	bl	800b4a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b572:	2300      	movs	r3, #0
 800b574:	61fb      	str	r3, [r7, #28]
 800b576:	e004      	b.n	800b582 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2200      	movs	r2, #0
 800b57c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b57e:	2301      	movs	r3, #1
 800b580:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b582:	f000 fe93 	bl	800c2ac <vPortExitCritical>

	return xReturn;
 800b586:	69fb      	ldr	r3, [r7, #28]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3720      	adds	r7, #32
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	2000101c 	.word	0x2000101c
 800b594:	20001030 	.word	0x20001030

0800b598 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b598:	b480      	push	{r7}
 800b59a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b59c:	4b03      	ldr	r3, [pc, #12]	@ (800b5ac <vTaskMissedYield+0x14>)
 800b59e:	2201      	movs	r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]
}
 800b5a2:	bf00      	nop
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	2000102c 	.word	0x2000102c

0800b5b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5b8:	f000 f852 	bl	800b660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5bc:	4b06      	ldr	r3, [pc, #24]	@ (800b5d8 <prvIdleTask+0x28>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d9f9      	bls.n	800b5b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5c4:	4b05      	ldr	r3, [pc, #20]	@ (800b5dc <prvIdleTask+0x2c>)
 800b5c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5ca:	601a      	str	r2, [r3, #0]
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5d4:	e7f0      	b.n	800b5b8 <prvIdleTask+0x8>
 800b5d6:	bf00      	nop
 800b5d8:	20000b48 	.word	0x20000b48
 800b5dc:	e000ed04 	.word	0xe000ed04

0800b5e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	607b      	str	r3, [r7, #4]
 800b5ea:	e00c      	b.n	800b606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4a12      	ldr	r2, [pc, #72]	@ (800b640 <prvInitialiseTaskLists+0x60>)
 800b5f8:	4413      	add	r3, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe fcae 	bl	8009f5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3301      	adds	r3, #1
 800b604:	607b      	str	r3, [r7, #4]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b37      	cmp	r3, #55	@ 0x37
 800b60a:	d9ef      	bls.n	800b5ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b60c:	480d      	ldr	r0, [pc, #52]	@ (800b644 <prvInitialiseTaskLists+0x64>)
 800b60e:	f7fe fca5 	bl	8009f5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b612:	480d      	ldr	r0, [pc, #52]	@ (800b648 <prvInitialiseTaskLists+0x68>)
 800b614:	f7fe fca2 	bl	8009f5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b618:	480c      	ldr	r0, [pc, #48]	@ (800b64c <prvInitialiseTaskLists+0x6c>)
 800b61a:	f7fe fc9f 	bl	8009f5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b61e:	480c      	ldr	r0, [pc, #48]	@ (800b650 <prvInitialiseTaskLists+0x70>)
 800b620:	f7fe fc9c 	bl	8009f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b624:	480b      	ldr	r0, [pc, #44]	@ (800b654 <prvInitialiseTaskLists+0x74>)
 800b626:	f7fe fc99 	bl	8009f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b62a:	4b0b      	ldr	r3, [pc, #44]	@ (800b658 <prvInitialiseTaskLists+0x78>)
 800b62c:	4a05      	ldr	r2, [pc, #20]	@ (800b644 <prvInitialiseTaskLists+0x64>)
 800b62e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b630:	4b0a      	ldr	r3, [pc, #40]	@ (800b65c <prvInitialiseTaskLists+0x7c>)
 800b632:	4a05      	ldr	r2, [pc, #20]	@ (800b648 <prvInitialiseTaskLists+0x68>)
 800b634:	601a      	str	r2, [r3, #0]
}
 800b636:	bf00      	nop
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	20000b48 	.word	0x20000b48
 800b644:	20000fa8 	.word	0x20000fa8
 800b648:	20000fbc 	.word	0x20000fbc
 800b64c:	20000fd8 	.word	0x20000fd8
 800b650:	20000fec 	.word	0x20000fec
 800b654:	20001004 	.word	0x20001004
 800b658:	20000fd0 	.word	0x20000fd0
 800b65c:	20000fd4 	.word	0x20000fd4

0800b660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b666:	e019      	b.n	800b69c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b668:	f000 fdee 	bl	800c248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b66c:	4b10      	ldr	r3, [pc, #64]	@ (800b6b0 <prvCheckTasksWaitingTermination+0x50>)
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	3304      	adds	r3, #4
 800b678:	4618      	mov	r0, r3
 800b67a:	f7fe fcf9 	bl	800a070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b67e:	4b0d      	ldr	r3, [pc, #52]	@ (800b6b4 <prvCheckTasksWaitingTermination+0x54>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3b01      	subs	r3, #1
 800b684:	4a0b      	ldr	r2, [pc, #44]	@ (800b6b4 <prvCheckTasksWaitingTermination+0x54>)
 800b686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b688:	4b0b      	ldr	r3, [pc, #44]	@ (800b6b8 <prvCheckTasksWaitingTermination+0x58>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	4a0a      	ldr	r2, [pc, #40]	@ (800b6b8 <prvCheckTasksWaitingTermination+0x58>)
 800b690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b692:	f000 fe0b 	bl	800c2ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f810 	bl	800b6bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b69c:	4b06      	ldr	r3, [pc, #24]	@ (800b6b8 <prvCheckTasksWaitingTermination+0x58>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e1      	bne.n	800b668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000fec 	.word	0x20000fec
 800b6b4:	20001018 	.word	0x20001018
 800b6b8:	20001000 	.word	0x20001000

0800b6bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	3354      	adds	r3, #84	@ 0x54
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f001 fde5 	bl	800d298 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d108      	bne.n	800b6ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f000 ffa3 	bl	800c628 <vPortFree>
				vPortFree( pxTCB );
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 ffa0 	bl	800c628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6e8:	e019      	b.n	800b71e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d103      	bne.n	800b6fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 ff97 	bl	800c628 <vPortFree>
	}
 800b6fa:	e010      	b.n	800b71e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b702:	2b02      	cmp	r3, #2
 800b704:	d00b      	beq.n	800b71e <prvDeleteTCB+0x62>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	60fb      	str	r3, [r7, #12]
}
 800b718:	bf00      	nop
 800b71a:	bf00      	nop
 800b71c:	e7fd      	b.n	800b71a <prvDeleteTCB+0x5e>
	}
 800b71e:	bf00      	nop
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
	...

0800b728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b72e:	4b0c      	ldr	r3, [pc, #48]	@ (800b760 <prvResetNextTaskUnblockTime+0x38>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d104      	bne.n	800b742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b738:	4b0a      	ldr	r3, [pc, #40]	@ (800b764 <prvResetNextTaskUnblockTime+0x3c>)
 800b73a:	f04f 32ff 	mov.w	r2, #4294967295
 800b73e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b740:	e008      	b.n	800b754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b742:	4b07      	ldr	r3, [pc, #28]	@ (800b760 <prvResetNextTaskUnblockTime+0x38>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	4a04      	ldr	r2, [pc, #16]	@ (800b764 <prvResetNextTaskUnblockTime+0x3c>)
 800b752:	6013      	str	r3, [r2, #0]
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	20000fd0 	.word	0x20000fd0
 800b764:	20001038 	.word	0x20001038

0800b768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b76e:	4b0b      	ldr	r3, [pc, #44]	@ (800b79c <xTaskGetSchedulerState+0x34>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d102      	bne.n	800b77c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b776:	2301      	movs	r3, #1
 800b778:	607b      	str	r3, [r7, #4]
 800b77a:	e008      	b.n	800b78e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b77c:	4b08      	ldr	r3, [pc, #32]	@ (800b7a0 <xTaskGetSchedulerState+0x38>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d102      	bne.n	800b78a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b784:	2302      	movs	r3, #2
 800b786:	607b      	str	r3, [r7, #4]
 800b788:	e001      	b.n	800b78e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b78a:	2300      	movs	r3, #0
 800b78c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b78e:	687b      	ldr	r3, [r7, #4]
	}
 800b790:	4618      	mov	r0, r3
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	20001024 	.word	0x20001024
 800b7a0:	20001040 	.word	0x20001040

0800b7a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d058      	beq.n	800b86c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b878 <xTaskPriorityDisinherit+0xd4>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d00b      	beq.n	800b7dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	60fb      	str	r3, [r7, #12]
}
 800b7d6:	bf00      	nop
 800b7d8:	bf00      	nop
 800b7da:	e7fd      	b.n	800b7d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10b      	bne.n	800b7fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	60bb      	str	r3, [r7, #8]
}
 800b7f6:	bf00      	nop
 800b7f8:	bf00      	nop
 800b7fa:	e7fd      	b.n	800b7f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b800:	1e5a      	subs	r2, r3, #1
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b80e:	429a      	cmp	r2, r3
 800b810:	d02c      	beq.n	800b86c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b816:	2b00      	cmp	r3, #0
 800b818:	d128      	bne.n	800b86c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	3304      	adds	r3, #4
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fe fc26 	bl	800a070 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b830:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b83c:	4b0f      	ldr	r3, [pc, #60]	@ (800b87c <xTaskPriorityDisinherit+0xd8>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d903      	bls.n	800b84c <xTaskPriorityDisinherit+0xa8>
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b848:	4a0c      	ldr	r2, [pc, #48]	@ (800b87c <xTaskPriorityDisinherit+0xd8>)
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b850:	4613      	mov	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4a09      	ldr	r2, [pc, #36]	@ (800b880 <xTaskPriorityDisinherit+0xdc>)
 800b85a:	441a      	add	r2, r3
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	3304      	adds	r3, #4
 800b860:	4619      	mov	r1, r3
 800b862:	4610      	mov	r0, r2
 800b864:	f7fe fba7 	bl	8009fb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b868:	2301      	movs	r3, #1
 800b86a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b86c:	697b      	ldr	r3, [r7, #20]
	}
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20000b44 	.word	0x20000b44
 800b87c:	20001020 	.word	0x20001020
 800b880:	20000b48 	.word	0x20000b48

0800b884 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b88e:	4b21      	ldr	r3, [pc, #132]	@ (800b914 <prvAddCurrentTaskToDelayedList+0x90>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b894:	4b20      	ldr	r3, [pc, #128]	@ (800b918 <prvAddCurrentTaskToDelayedList+0x94>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3304      	adds	r3, #4
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fbe8 	bl	800a070 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a6:	d10a      	bne.n	800b8be <prvAddCurrentTaskToDelayedList+0x3a>
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d007      	beq.n	800b8be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b918 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4819      	ldr	r0, [pc, #100]	@ (800b91c <prvAddCurrentTaskToDelayedList+0x98>)
 800b8b8:	f7fe fb7d 	bl	8009fb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b8bc:	e026      	b.n	800b90c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8c6:	4b14      	ldr	r3, [pc, #80]	@ (800b918 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68ba      	ldr	r2, [r7, #8]
 800b8cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d209      	bcs.n	800b8ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8d6:	4b12      	ldr	r3, [pc, #72]	@ (800b920 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4b0f      	ldr	r3, [pc, #60]	@ (800b918 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f7fe fb8b 	bl	8009ffe <vListInsert>
}
 800b8e8:	e010      	b.n	800b90c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b924 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b918 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	f7fe fb81 	bl	8009ffe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b928 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	429a      	cmp	r2, r3
 800b904:	d202      	bcs.n	800b90c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b906:	4a08      	ldr	r2, [pc, #32]	@ (800b928 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	6013      	str	r3, [r2, #0]
}
 800b90c:	bf00      	nop
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	2000101c 	.word	0x2000101c
 800b918:	20000b44 	.word	0x20000b44
 800b91c:	20001004 	.word	0x20001004
 800b920:	20000fd4 	.word	0x20000fd4
 800b924:	20000fd0 	.word	0x20000fd0
 800b928:	20001038 	.word	0x20001038

0800b92c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08a      	sub	sp, #40	@ 0x28
 800b930:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b932:	2300      	movs	r3, #0
 800b934:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b936:	f000 fb13 	bl	800bf60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b93a:	4b1d      	ldr	r3, [pc, #116]	@ (800b9b0 <xTimerCreateTimerTask+0x84>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d021      	beq.n	800b986 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b942:	2300      	movs	r3, #0
 800b944:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b946:	2300      	movs	r3, #0
 800b948:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b94a:	1d3a      	adds	r2, r7, #4
 800b94c:	f107 0108 	add.w	r1, r7, #8
 800b950:	f107 030c 	add.w	r3, r7, #12
 800b954:	4618      	mov	r0, r3
 800b956:	f7fe fae7 	bl	8009f28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b95a:	6879      	ldr	r1, [r7, #4]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	9202      	str	r2, [sp, #8]
 800b962:	9301      	str	r3, [sp, #4]
 800b964:	2302      	movs	r3, #2
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	2300      	movs	r3, #0
 800b96a:	460a      	mov	r2, r1
 800b96c:	4911      	ldr	r1, [pc, #68]	@ (800b9b4 <xTimerCreateTimerTask+0x88>)
 800b96e:	4812      	ldr	r0, [pc, #72]	@ (800b9b8 <xTimerCreateTimerTask+0x8c>)
 800b970:	f7ff f8a2 	bl	800aab8 <xTaskCreateStatic>
 800b974:	4603      	mov	r3, r0
 800b976:	4a11      	ldr	r2, [pc, #68]	@ (800b9bc <xTimerCreateTimerTask+0x90>)
 800b978:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b97a:	4b10      	ldr	r3, [pc, #64]	@ (800b9bc <xTimerCreateTimerTask+0x90>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b982:	2301      	movs	r3, #1
 800b984:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10b      	bne.n	800b9a4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	613b      	str	r3, [r7, #16]
}
 800b99e:	bf00      	nop
 800b9a0:	bf00      	nop
 800b9a2:	e7fd      	b.n	800b9a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b9a4:	697b      	ldr	r3, [r7, #20]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20001074 	.word	0x20001074
 800b9b4:	0800d5a0 	.word	0x0800d5a0
 800b9b8:	0800baf9 	.word	0x0800baf9
 800b9bc:	20001078 	.word	0x20001078

0800b9c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b08a      	sub	sp, #40	@ 0x28
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10b      	bne.n	800b9f0 <xTimerGenericCommand+0x30>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	623b      	str	r3, [r7, #32]
}
 800b9ea:	bf00      	nop
 800b9ec:	bf00      	nop
 800b9ee:	e7fd      	b.n	800b9ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9f0:	4b19      	ldr	r3, [pc, #100]	@ (800ba58 <xTimerGenericCommand+0x98>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d02a      	beq.n	800ba4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2b05      	cmp	r3, #5
 800ba08:	dc18      	bgt.n	800ba3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba0a:	f7ff fead 	bl	800b768 <xTaskGetSchedulerState>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d109      	bne.n	800ba28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba14:	4b10      	ldr	r3, [pc, #64]	@ (800ba58 <xTimerGenericCommand+0x98>)
 800ba16:	6818      	ldr	r0, [r3, #0]
 800ba18:	f107 0110 	add.w	r1, r7, #16
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba20:	f7fe fc5a 	bl	800a2d8 <xQueueGenericSend>
 800ba24:	6278      	str	r0, [r7, #36]	@ 0x24
 800ba26:	e012      	b.n	800ba4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba28:	4b0b      	ldr	r3, [pc, #44]	@ (800ba58 <xTimerGenericCommand+0x98>)
 800ba2a:	6818      	ldr	r0, [r3, #0]
 800ba2c:	f107 0110 	add.w	r1, r7, #16
 800ba30:	2300      	movs	r3, #0
 800ba32:	2200      	movs	r2, #0
 800ba34:	f7fe fc50 	bl	800a2d8 <xQueueGenericSend>
 800ba38:	6278      	str	r0, [r7, #36]	@ 0x24
 800ba3a:	e008      	b.n	800ba4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba3c:	4b06      	ldr	r3, [pc, #24]	@ (800ba58 <xTimerGenericCommand+0x98>)
 800ba3e:	6818      	ldr	r0, [r3, #0]
 800ba40:	f107 0110 	add.w	r1, r7, #16
 800ba44:	2300      	movs	r3, #0
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	f7fe fd48 	bl	800a4dc <xQueueGenericSendFromISR>
 800ba4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3728      	adds	r7, #40	@ 0x28
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	20001074 	.word	0x20001074

0800ba5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b088      	sub	sp, #32
 800ba60:	af02      	add	r7, sp, #8
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba66:	4b23      	ldr	r3, [pc, #140]	@ (800baf4 <prvProcessExpiredTimer+0x98>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	3304      	adds	r3, #4
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fe fafb 	bl	800a070 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba80:	f003 0304 	and.w	r3, r3, #4
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d023      	beq.n	800bad0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	699a      	ldr	r2, [r3, #24]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	18d1      	adds	r1, r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	6978      	ldr	r0, [r7, #20]
 800ba96:	f000 f8d5 	bl	800bc44 <prvInsertTimerInActiveList>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d020      	beq.n	800bae2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800baa0:	2300      	movs	r3, #0
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	2300      	movs	r3, #0
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	2100      	movs	r1, #0
 800baaa:	6978      	ldr	r0, [r7, #20]
 800baac:	f7ff ff88 	bl	800b9c0 <xTimerGenericCommand>
 800bab0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d114      	bne.n	800bae2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	60fb      	str	r3, [r7, #12]
}
 800baca:	bf00      	nop
 800bacc:	bf00      	nop
 800bace:	e7fd      	b.n	800bacc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bad6:	f023 0301 	bic.w	r3, r3, #1
 800bada:	b2da      	uxtb	r2, r3
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	6978      	ldr	r0, [r7, #20]
 800bae8:	4798      	blx	r3
}
 800baea:	bf00      	nop
 800baec:	3718      	adds	r7, #24
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	2000106c 	.word	0x2000106c

0800baf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb00:	f107 0308 	add.w	r3, r7, #8
 800bb04:	4618      	mov	r0, r3
 800bb06:	f000 f859 	bl	800bbbc <prvGetNextExpireTime>
 800bb0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	4619      	mov	r1, r3
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f000 f805 	bl	800bb20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb16:	f000 f8d7 	bl	800bcc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb1a:	bf00      	nop
 800bb1c:	e7f0      	b.n	800bb00 <prvTimerTask+0x8>
	...

0800bb20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb2a:	f7ff fa29 	bl	800af80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb2e:	f107 0308 	add.w	r3, r7, #8
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f866 	bl	800bc04 <prvSampleTimeNow>
 800bb38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d130      	bne.n	800bba2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10a      	bne.n	800bb5c <prvProcessTimerOrBlockTask+0x3c>
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d806      	bhi.n	800bb5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb4e:	f7ff fa25 	bl	800af9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb52:	68f9      	ldr	r1, [r7, #12]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7ff ff81 	bl	800ba5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb5a:	e024      	b.n	800bba6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d008      	beq.n	800bb74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb62:	4b13      	ldr	r3, [pc, #76]	@ (800bbb0 <prvProcessTimerOrBlockTask+0x90>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d101      	bne.n	800bb70 <prvProcessTimerOrBlockTask+0x50>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e000      	b.n	800bb72 <prvProcessTimerOrBlockTask+0x52>
 800bb70:	2300      	movs	r3, #0
 800bb72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb74:	4b0f      	ldr	r3, [pc, #60]	@ (800bbb4 <prvProcessTimerOrBlockTask+0x94>)
 800bb76:	6818      	ldr	r0, [r3, #0]
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	4619      	mov	r1, r3
 800bb82:	f7fe ff65 	bl	800aa50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb86:	f7ff fa09 	bl	800af9c <xTaskResumeAll>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10a      	bne.n	800bba6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb90:	4b09      	ldr	r3, [pc, #36]	@ (800bbb8 <prvProcessTimerOrBlockTask+0x98>)
 800bb92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb96:	601a      	str	r2, [r3, #0]
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	f3bf 8f6f 	isb	sy
}
 800bba0:	e001      	b.n	800bba6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bba2:	f7ff f9fb 	bl	800af9c <xTaskResumeAll>
}
 800bba6:	bf00      	nop
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20001070 	.word	0x20001070
 800bbb4:	20001074 	.word	0x20001074
 800bbb8:	e000ed04 	.word	0xe000ed04

0800bbbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bbc4:	4b0e      	ldr	r3, [pc, #56]	@ (800bc00 <prvGetNextExpireTime+0x44>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d101      	bne.n	800bbd2 <prvGetNextExpireTime+0x16>
 800bbce:	2201      	movs	r2, #1
 800bbd0:	e000      	b.n	800bbd4 <prvGetNextExpireTime+0x18>
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d105      	bne.n	800bbec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbe0:	4b07      	ldr	r3, [pc, #28]	@ (800bc00 <prvGetNextExpireTime+0x44>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	60fb      	str	r3, [r7, #12]
 800bbea:	e001      	b.n	800bbf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bbec:	2300      	movs	r3, #0
 800bbee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	2000106c 	.word	0x2000106c

0800bc04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc0c:	f7ff fa64 	bl	800b0d8 <xTaskGetTickCount>
 800bc10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc12:	4b0b      	ldr	r3, [pc, #44]	@ (800bc40 <prvSampleTimeNow+0x3c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d205      	bcs.n	800bc28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc1c:	f000 f93a 	bl	800be94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	e002      	b.n	800bc2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc2e:	4a04      	ldr	r2, [pc, #16]	@ (800bc40 <prvSampleTimeNow+0x3c>)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc34:	68fb      	ldr	r3, [r7, #12]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	2000107c 	.word	0x2000107c

0800bc44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
 800bc50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc52:	2300      	movs	r3, #0
 800bc54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	68fa      	ldr	r2, [r7, #12]
 800bc60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d812      	bhi.n	800bc90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	1ad2      	subs	r2, r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d302      	bcc.n	800bc7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	617b      	str	r3, [r7, #20]
 800bc7c:	e01b      	b.n	800bcb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc7e:	4b10      	ldr	r3, [pc, #64]	@ (800bcc0 <prvInsertTimerInActiveList+0x7c>)
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	3304      	adds	r3, #4
 800bc86:	4619      	mov	r1, r3
 800bc88:	4610      	mov	r0, r2
 800bc8a:	f7fe f9b8 	bl	8009ffe <vListInsert>
 800bc8e:	e012      	b.n	800bcb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d206      	bcs.n	800bca6 <prvInsertTimerInActiveList+0x62>
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d302      	bcc.n	800bca6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bca0:	2301      	movs	r3, #1
 800bca2:	617b      	str	r3, [r7, #20]
 800bca4:	e007      	b.n	800bcb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bca6:	4b07      	ldr	r3, [pc, #28]	@ (800bcc4 <prvInsertTimerInActiveList+0x80>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	3304      	adds	r3, #4
 800bcae:	4619      	mov	r1, r3
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	f7fe f9a4 	bl	8009ffe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bcb6:	697b      	ldr	r3, [r7, #20]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	20001070 	.word	0x20001070
 800bcc4:	2000106c 	.word	0x2000106c

0800bcc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08e      	sub	sp, #56	@ 0x38
 800bccc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcce:	e0ce      	b.n	800be6e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	da19      	bge.n	800bd0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bcd6:	1d3b      	adds	r3, r7, #4
 800bcd8:	3304      	adds	r3, #4
 800bcda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bcdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10b      	bne.n	800bcfa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	61fb      	str	r3, [r7, #28]
}
 800bcf4:	bf00      	nop
 800bcf6:	bf00      	nop
 800bcf8:	e7fd      	b.n	800bcf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bcfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd00:	6850      	ldr	r0, [r2, #4]
 800bd02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd04:	6892      	ldr	r2, [r2, #8]
 800bd06:	4611      	mov	r1, r2
 800bd08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f2c0 80ae 	blt.w	800be6e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d004      	beq.n	800bd28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	3304      	adds	r3, #4
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fe f9a4 	bl	800a070 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd28:	463b      	mov	r3, r7
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff ff6a 	bl	800bc04 <prvSampleTimeNow>
 800bd30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b09      	cmp	r3, #9
 800bd36:	f200 8097 	bhi.w	800be68 <prvProcessReceivedCommands+0x1a0>
 800bd3a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd40 <prvProcessReceivedCommands+0x78>)
 800bd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd40:	0800bd69 	.word	0x0800bd69
 800bd44:	0800bd69 	.word	0x0800bd69
 800bd48:	0800bd69 	.word	0x0800bd69
 800bd4c:	0800bddf 	.word	0x0800bddf
 800bd50:	0800bdf3 	.word	0x0800bdf3
 800bd54:	0800be3f 	.word	0x0800be3f
 800bd58:	0800bd69 	.word	0x0800bd69
 800bd5c:	0800bd69 	.word	0x0800bd69
 800bd60:	0800bddf 	.word	0x0800bddf
 800bd64:	0800bdf3 	.word	0x0800bdf3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd6e:	f043 0301 	orr.w	r3, r3, #1
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	18d1      	adds	r1, r2, r3
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd88:	f7ff ff5c 	bl	800bc44 <prvInsertTimerInActiveList>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d06c      	beq.n	800be6c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bda0:	f003 0304 	and.w	r3, r3, #4
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d061      	beq.n	800be6c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdac:	699b      	ldr	r3, [r3, #24]
 800bdae:	441a      	add	r2, r3
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdba:	f7ff fe01 	bl	800b9c0 <xTimerGenericCommand>
 800bdbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d152      	bne.n	800be6c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	61bb      	str	r3, [r7, #24]
}
 800bdd8:	bf00      	nop
 800bdda:	bf00      	nop
 800bddc:	e7fd      	b.n	800bdda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bde4:	f023 0301 	bic.w	r3, r3, #1
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bdf0:	e03d      	b.n	800be6e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdf8:	f043 0301 	orr.w	r3, r3, #1
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be0c:	699b      	ldr	r3, [r3, #24]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10b      	bne.n	800be2a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	617b      	str	r3, [r7, #20]
}
 800be24:	bf00      	nop
 800be26:	bf00      	nop
 800be28:	e7fd      	b.n	800be26 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2c:	699a      	ldr	r2, [r3, #24]
 800be2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be30:	18d1      	adds	r1, r2, r3
 800be32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be38:	f7ff ff04 	bl	800bc44 <prvInsertTimerInActiveList>
					break;
 800be3c:	e017      	b.n	800be6e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be44:	f003 0302 	and.w	r3, r3, #2
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d103      	bne.n	800be54 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800be4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be4e:	f000 fbeb 	bl	800c628 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be52:	e00c      	b.n	800be6e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be5a:	f023 0301 	bic.w	r3, r3, #1
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800be66:	e002      	b.n	800be6e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800be68:	bf00      	nop
 800be6a:	e000      	b.n	800be6e <prvProcessReceivedCommands+0x1a6>
					break;
 800be6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be6e:	4b08      	ldr	r3, [pc, #32]	@ (800be90 <prvProcessReceivedCommands+0x1c8>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	1d39      	adds	r1, r7, #4
 800be74:	2200      	movs	r2, #0
 800be76:	4618      	mov	r0, r3
 800be78:	f7fe fbce 	bl	800a618 <xQueueReceive>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f47f af26 	bne.w	800bcd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop
 800be88:	3730      	adds	r7, #48	@ 0x30
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20001074 	.word	0x20001074

0800be94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be9a:	e049      	b.n	800bf30 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be9c:	4b2e      	ldr	r3, [pc, #184]	@ (800bf58 <prvSwitchTimerLists+0xc4>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bea6:	4b2c      	ldr	r3, [pc, #176]	@ (800bf58 <prvSwitchTimerLists+0xc4>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	3304      	adds	r3, #4
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7fe f8db 	bl	800a070 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6a1b      	ldr	r3, [r3, #32]
 800bebe:	68f8      	ldr	r0, [r7, #12]
 800bec0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bec8:	f003 0304 	and.w	r3, r3, #4
 800becc:	2b00      	cmp	r3, #0
 800bece:	d02f      	beq.n	800bf30 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	4413      	add	r3, r2
 800bed8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d90e      	bls.n	800bf00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800beee:	4b1a      	ldr	r3, [pc, #104]	@ (800bf58 <prvSwitchTimerLists+0xc4>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	3304      	adds	r3, #4
 800bef6:	4619      	mov	r1, r3
 800bef8:	4610      	mov	r0, r2
 800befa:	f7fe f880 	bl	8009ffe <vListInsert>
 800befe:	e017      	b.n	800bf30 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf00:	2300      	movs	r3, #0
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	2300      	movs	r3, #0
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	2100      	movs	r1, #0
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f7ff fd58 	bl	800b9c0 <xTimerGenericCommand>
 800bf10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10b      	bne.n	800bf30 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1c:	f383 8811 	msr	BASEPRI, r3
 800bf20:	f3bf 8f6f 	isb	sy
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	603b      	str	r3, [r7, #0]
}
 800bf2a:	bf00      	nop
 800bf2c:	bf00      	nop
 800bf2e:	e7fd      	b.n	800bf2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf30:	4b09      	ldr	r3, [pc, #36]	@ (800bf58 <prvSwitchTimerLists+0xc4>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1b0      	bne.n	800be9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf3a:	4b07      	ldr	r3, [pc, #28]	@ (800bf58 <prvSwitchTimerLists+0xc4>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf40:	4b06      	ldr	r3, [pc, #24]	@ (800bf5c <prvSwitchTimerLists+0xc8>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a04      	ldr	r2, [pc, #16]	@ (800bf58 <prvSwitchTimerLists+0xc4>)
 800bf46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf48:	4a04      	ldr	r2, [pc, #16]	@ (800bf5c <prvSwitchTimerLists+0xc8>)
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	6013      	str	r3, [r2, #0]
}
 800bf4e:	bf00      	nop
 800bf50:	3718      	adds	r7, #24
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	2000106c 	.word	0x2000106c
 800bf5c:	20001070 	.word	0x20001070

0800bf60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf66:	f000 f96f 	bl	800c248 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf6a:	4b15      	ldr	r3, [pc, #84]	@ (800bfc0 <prvCheckForValidListAndQueue+0x60>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d120      	bne.n	800bfb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf72:	4814      	ldr	r0, [pc, #80]	@ (800bfc4 <prvCheckForValidListAndQueue+0x64>)
 800bf74:	f7fd fff2 	bl	8009f5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf78:	4813      	ldr	r0, [pc, #76]	@ (800bfc8 <prvCheckForValidListAndQueue+0x68>)
 800bf7a:	f7fd ffef 	bl	8009f5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf7e:	4b13      	ldr	r3, [pc, #76]	@ (800bfcc <prvCheckForValidListAndQueue+0x6c>)
 800bf80:	4a10      	ldr	r2, [pc, #64]	@ (800bfc4 <prvCheckForValidListAndQueue+0x64>)
 800bf82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf84:	4b12      	ldr	r3, [pc, #72]	@ (800bfd0 <prvCheckForValidListAndQueue+0x70>)
 800bf86:	4a10      	ldr	r2, [pc, #64]	@ (800bfc8 <prvCheckForValidListAndQueue+0x68>)
 800bf88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	4b11      	ldr	r3, [pc, #68]	@ (800bfd4 <prvCheckForValidListAndQueue+0x74>)
 800bf90:	4a11      	ldr	r2, [pc, #68]	@ (800bfd8 <prvCheckForValidListAndQueue+0x78>)
 800bf92:	2110      	movs	r1, #16
 800bf94:	200a      	movs	r0, #10
 800bf96:	f7fe f8ff 	bl	800a198 <xQueueGenericCreateStatic>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	4a08      	ldr	r2, [pc, #32]	@ (800bfc0 <prvCheckForValidListAndQueue+0x60>)
 800bf9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bfa0:	4b07      	ldr	r3, [pc, #28]	@ (800bfc0 <prvCheckForValidListAndQueue+0x60>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d005      	beq.n	800bfb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bfa8:	4b05      	ldr	r3, [pc, #20]	@ (800bfc0 <prvCheckForValidListAndQueue+0x60>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	490b      	ldr	r1, [pc, #44]	@ (800bfdc <prvCheckForValidListAndQueue+0x7c>)
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe fd24 	bl	800a9fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfb4:	f000 f97a 	bl	800c2ac <vPortExitCritical>
}
 800bfb8:	bf00      	nop
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	20001074 	.word	0x20001074
 800bfc4:	20001044 	.word	0x20001044
 800bfc8:	20001058 	.word	0x20001058
 800bfcc:	2000106c 	.word	0x2000106c
 800bfd0:	20001070 	.word	0x20001070
 800bfd4:	20001120 	.word	0x20001120
 800bfd8:	20001080 	.word	0x20001080
 800bfdc:	0800d5a8 	.word	0x0800d5a8

0800bfe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	3b04      	subs	r3, #4
 800bff0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3b04      	subs	r3, #4
 800bffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	f023 0201 	bic.w	r2, r3, #1
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	3b04      	subs	r3, #4
 800c00e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c010:	4a0c      	ldr	r2, [pc, #48]	@ (800c044 <pxPortInitialiseStack+0x64>)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3b14      	subs	r3, #20
 800c01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3b04      	subs	r3, #4
 800c026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f06f 0202 	mvn.w	r2, #2
 800c02e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	3b20      	subs	r3, #32
 800c034:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c036:	68fb      	ldr	r3, [r7, #12]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	0800c049 	.word	0x0800c049

0800c048 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c052:	4b13      	ldr	r3, [pc, #76]	@ (800c0a0 <prvTaskExitError+0x58>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05a:	d00b      	beq.n	800c074 <prvTaskExitError+0x2c>
	__asm volatile
 800c05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c060:	f383 8811 	msr	BASEPRI, r3
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	60fb      	str	r3, [r7, #12]
}
 800c06e:	bf00      	nop
 800c070:	bf00      	nop
 800c072:	e7fd      	b.n	800c070 <prvTaskExitError+0x28>
	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	60bb      	str	r3, [r7, #8]
}
 800c086:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c088:	bf00      	nop
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d0fc      	beq.n	800c08a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c090:	bf00      	nop
 800c092:	bf00      	nop
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	20000098 	.word	0x20000098
	...

0800c0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c0b0:	4b07      	ldr	r3, [pc, #28]	@ (800c0d0 <pxCurrentTCBConst2>)
 800c0b2:	6819      	ldr	r1, [r3, #0]
 800c0b4:	6808      	ldr	r0, [r1, #0]
 800c0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ba:	f380 8809 	msr	PSP, r0
 800c0be:	f3bf 8f6f 	isb	sy
 800c0c2:	f04f 0000 	mov.w	r0, #0
 800c0c6:	f380 8811 	msr	BASEPRI, r0
 800c0ca:	4770      	bx	lr
 800c0cc:	f3af 8000 	nop.w

0800c0d0 <pxCurrentTCBConst2>:
 800c0d0:	20000b44 	.word	0x20000b44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c0d4:	bf00      	nop
 800c0d6:	bf00      	nop

0800c0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c0d8:	4808      	ldr	r0, [pc, #32]	@ (800c0fc <prvPortStartFirstTask+0x24>)
 800c0da:	6800      	ldr	r0, [r0, #0]
 800c0dc:	6800      	ldr	r0, [r0, #0]
 800c0de:	f380 8808 	msr	MSP, r0
 800c0e2:	f04f 0000 	mov.w	r0, #0
 800c0e6:	f380 8814 	msr	CONTROL, r0
 800c0ea:	b662      	cpsie	i
 800c0ec:	b661      	cpsie	f
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	df00      	svc	0
 800c0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0fa:	bf00      	nop
 800c0fc:	e000ed08 	.word	0xe000ed08

0800c100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c106:	4b47      	ldr	r3, [pc, #284]	@ (800c224 <xPortStartScheduler+0x124>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a47      	ldr	r2, [pc, #284]	@ (800c228 <xPortStartScheduler+0x128>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d10b      	bne.n	800c128 <xPortStartScheduler+0x28>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	60fb      	str	r3, [r7, #12]
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	e7fd      	b.n	800c124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c128:	4b3e      	ldr	r3, [pc, #248]	@ (800c224 <xPortStartScheduler+0x124>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a3f      	ldr	r2, [pc, #252]	@ (800c22c <xPortStartScheduler+0x12c>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d10b      	bne.n	800c14a <xPortStartScheduler+0x4a>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	613b      	str	r3, [r7, #16]
}
 800c144:	bf00      	nop
 800c146:	bf00      	nop
 800c148:	e7fd      	b.n	800c146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c14a:	4b39      	ldr	r3, [pc, #228]	@ (800c230 <xPortStartScheduler+0x130>)
 800c14c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	b2db      	uxtb	r3, r3
 800c154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	22ff      	movs	r2, #255	@ 0xff
 800c15a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	b2db      	uxtb	r3, r3
 800c162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c164:	78fb      	ldrb	r3, [r7, #3]
 800c166:	b2db      	uxtb	r3, r3
 800c168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	4b31      	ldr	r3, [pc, #196]	@ (800c234 <xPortStartScheduler+0x134>)
 800c170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c172:	4b31      	ldr	r3, [pc, #196]	@ (800c238 <xPortStartScheduler+0x138>)
 800c174:	2207      	movs	r2, #7
 800c176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c178:	e009      	b.n	800c18e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c17a:	4b2f      	ldr	r3, [pc, #188]	@ (800c238 <xPortStartScheduler+0x138>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	3b01      	subs	r3, #1
 800c180:	4a2d      	ldr	r2, [pc, #180]	@ (800c238 <xPortStartScheduler+0x138>)
 800c182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	b2db      	uxtb	r3, r3
 800c188:	005b      	lsls	r3, r3, #1
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c18e:	78fb      	ldrb	r3, [r7, #3]
 800c190:	b2db      	uxtb	r3, r3
 800c192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c196:	2b80      	cmp	r3, #128	@ 0x80
 800c198:	d0ef      	beq.n	800c17a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c19a:	4b27      	ldr	r3, [pc, #156]	@ (800c238 <xPortStartScheduler+0x138>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f1c3 0307 	rsb	r3, r3, #7
 800c1a2:	2b04      	cmp	r3, #4
 800c1a4:	d00b      	beq.n	800c1be <xPortStartScheduler+0xbe>
	__asm volatile
 800c1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	60bb      	str	r3, [r7, #8]
}
 800c1b8:	bf00      	nop
 800c1ba:	bf00      	nop
 800c1bc:	e7fd      	b.n	800c1ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1be:	4b1e      	ldr	r3, [pc, #120]	@ (800c238 <xPortStartScheduler+0x138>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	021b      	lsls	r3, r3, #8
 800c1c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c238 <xPortStartScheduler+0x138>)
 800c1c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c238 <xPortStartScheduler+0x138>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c1d0:	4a19      	ldr	r2, [pc, #100]	@ (800c238 <xPortStartScheduler+0x138>)
 800c1d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1dc:	4b17      	ldr	r3, [pc, #92]	@ (800c23c <xPortStartScheduler+0x13c>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a16      	ldr	r2, [pc, #88]	@ (800c23c <xPortStartScheduler+0x13c>)
 800c1e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c1e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1e8:	4b14      	ldr	r3, [pc, #80]	@ (800c23c <xPortStartScheduler+0x13c>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a13      	ldr	r2, [pc, #76]	@ (800c23c <xPortStartScheduler+0x13c>)
 800c1ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c1f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1f4:	f000 f8da 	bl	800c3ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c1f8:	4b11      	ldr	r3, [pc, #68]	@ (800c240 <xPortStartScheduler+0x140>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c1fe:	f000 f8f9 	bl	800c3f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c202:	4b10      	ldr	r3, [pc, #64]	@ (800c244 <xPortStartScheduler+0x144>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a0f      	ldr	r2, [pc, #60]	@ (800c244 <xPortStartScheduler+0x144>)
 800c208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c20c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c20e:	f7ff ff63 	bl	800c0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c212:	f7ff f82b 	bl	800b26c <vTaskSwitchContext>
	prvTaskExitError();
 800c216:	f7ff ff17 	bl	800c048 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3718      	adds	r7, #24
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	e000ed00 	.word	0xe000ed00
 800c228:	410fc271 	.word	0x410fc271
 800c22c:	410fc270 	.word	0x410fc270
 800c230:	e000e400 	.word	0xe000e400
 800c234:	20001170 	.word	0x20001170
 800c238:	20001174 	.word	0x20001174
 800c23c:	e000ed20 	.word	0xe000ed20
 800c240:	20000098 	.word	0x20000098
 800c244:	e000ef34 	.word	0xe000ef34

0800c248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	607b      	str	r3, [r7, #4]
}
 800c260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c262:	4b10      	ldr	r3, [pc, #64]	@ (800c2a4 <vPortEnterCritical+0x5c>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3301      	adds	r3, #1
 800c268:	4a0e      	ldr	r2, [pc, #56]	@ (800c2a4 <vPortEnterCritical+0x5c>)
 800c26a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c26c:	4b0d      	ldr	r3, [pc, #52]	@ (800c2a4 <vPortEnterCritical+0x5c>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d110      	bne.n	800c296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c274:	4b0c      	ldr	r3, [pc, #48]	@ (800c2a8 <vPortEnterCritical+0x60>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00b      	beq.n	800c296 <vPortEnterCritical+0x4e>
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	603b      	str	r3, [r7, #0]
}
 800c290:	bf00      	nop
 800c292:	bf00      	nop
 800c294:	e7fd      	b.n	800c292 <vPortEnterCritical+0x4a>
	}
}
 800c296:	bf00      	nop
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	20000098 	.word	0x20000098
 800c2a8:	e000ed04 	.word	0xe000ed04

0800c2ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2b2:	4b12      	ldr	r3, [pc, #72]	@ (800c2fc <vPortExitCritical+0x50>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10b      	bne.n	800c2d2 <vPortExitCritical+0x26>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	607b      	str	r3, [r7, #4]
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	e7fd      	b.n	800c2ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c2fc <vPortExitCritical+0x50>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	4a08      	ldr	r2, [pc, #32]	@ (800c2fc <vPortExitCritical+0x50>)
 800c2da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2dc:	4b07      	ldr	r3, [pc, #28]	@ (800c2fc <vPortExitCritical+0x50>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d105      	bne.n	800c2f0 <vPortExitCritical+0x44>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	f383 8811 	msr	BASEPRI, r3
}
 800c2ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	20000098 	.word	0x20000098

0800c300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c300:	f3ef 8009 	mrs	r0, PSP
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	4b15      	ldr	r3, [pc, #84]	@ (800c360 <pxCurrentTCBConst>)
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	f01e 0f10 	tst.w	lr, #16
 800c310:	bf08      	it	eq
 800c312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31a:	6010      	str	r0, [r2, #0]
 800c31c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c324:	f380 8811 	msr	BASEPRI, r0
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f7fe ff9c 	bl	800b26c <vTaskSwitchContext>
 800c334:	f04f 0000 	mov.w	r0, #0
 800c338:	f380 8811 	msr	BASEPRI, r0
 800c33c:	bc09      	pop	{r0, r3}
 800c33e:	6819      	ldr	r1, [r3, #0]
 800c340:	6808      	ldr	r0, [r1, #0]
 800c342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c346:	f01e 0f10 	tst.w	lr, #16
 800c34a:	bf08      	it	eq
 800c34c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c350:	f380 8809 	msr	PSP, r0
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	f3af 8000 	nop.w

0800c360 <pxCurrentTCBConst>:
 800c360:	20000b44 	.word	0x20000b44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c364:	bf00      	nop
 800c366:	bf00      	nop

0800c368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	607b      	str	r3, [r7, #4]
}
 800c380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c382:	f7fe feb9 	bl	800b0f8 <xTaskIncrementTick>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d003      	beq.n	800c394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c38c:	4b06      	ldr	r3, [pc, #24]	@ (800c3a8 <xPortSysTickHandler+0x40>)
 800c38e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c392:	601a      	str	r2, [r3, #0]
 800c394:	2300      	movs	r3, #0
 800c396:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	f383 8811 	msr	BASEPRI, r3
}
 800c39e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3a0:	bf00      	nop
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	e000ed04 	.word	0xe000ed04

0800c3ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c3e0 <vPortSetupTimerInterrupt+0x34>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c3e4 <vPortSetupTimerInterrupt+0x38>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c3e8 <vPortSetupTimerInterrupt+0x3c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c3ec <vPortSetupTimerInterrupt+0x40>)
 800c3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c6:	099b      	lsrs	r3, r3, #6
 800c3c8:	4a09      	ldr	r2, [pc, #36]	@ (800c3f0 <vPortSetupTimerInterrupt+0x44>)
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3ce:	4b04      	ldr	r3, [pc, #16]	@ (800c3e0 <vPortSetupTimerInterrupt+0x34>)
 800c3d0:	2207      	movs	r2, #7
 800c3d2:	601a      	str	r2, [r3, #0]
}
 800c3d4:	bf00      	nop
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	e000e010 	.word	0xe000e010
 800c3e4:	e000e018 	.word	0xe000e018
 800c3e8:	20000000 	.word	0x20000000
 800c3ec:	10624dd3 	.word	0x10624dd3
 800c3f0:	e000e014 	.word	0xe000e014

0800c3f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c3f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c404 <vPortEnableVFP+0x10>
 800c3f8:	6801      	ldr	r1, [r0, #0]
 800c3fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c3fe:	6001      	str	r1, [r0, #0]
 800c400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c402:	bf00      	nop
 800c404:	e000ed88 	.word	0xe000ed88

0800c408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c40e:	f3ef 8305 	mrs	r3, IPSR
 800c412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2b0f      	cmp	r3, #15
 800c418:	d915      	bls.n	800c446 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c41a:	4a18      	ldr	r2, [pc, #96]	@ (800c47c <vPortValidateInterruptPriority+0x74>)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	4413      	add	r3, r2
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c424:	4b16      	ldr	r3, [pc, #88]	@ (800c480 <vPortValidateInterruptPriority+0x78>)
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	7afa      	ldrb	r2, [r7, #11]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d20b      	bcs.n	800c446 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	607b      	str	r3, [r7, #4]
}
 800c440:	bf00      	nop
 800c442:	bf00      	nop
 800c444:	e7fd      	b.n	800c442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c446:	4b0f      	ldr	r3, [pc, #60]	@ (800c484 <vPortValidateInterruptPriority+0x7c>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c44e:	4b0e      	ldr	r3, [pc, #56]	@ (800c488 <vPortValidateInterruptPriority+0x80>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	429a      	cmp	r2, r3
 800c454:	d90b      	bls.n	800c46e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	603b      	str	r3, [r7, #0]
}
 800c468:	bf00      	nop
 800c46a:	bf00      	nop
 800c46c:	e7fd      	b.n	800c46a <vPortValidateInterruptPriority+0x62>
	}
 800c46e:	bf00      	nop
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	e000e3f0 	.word	0xe000e3f0
 800c480:	20001170 	.word	0x20001170
 800c484:	e000ed0c 	.word	0xe000ed0c
 800c488:	20001174 	.word	0x20001174

0800c48c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08a      	sub	sp, #40	@ 0x28
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c494:	2300      	movs	r3, #0
 800c496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c498:	f7fe fd72 	bl	800af80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c49c:	4b5c      	ldr	r3, [pc, #368]	@ (800c610 <pvPortMalloc+0x184>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d101      	bne.n	800c4a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4a4:	f000 f924 	bl	800c6f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4a8:	4b5a      	ldr	r3, [pc, #360]	@ (800c614 <pvPortMalloc+0x188>)
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4013      	ands	r3, r2
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f040 8095 	bne.w	800c5e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d01e      	beq.n	800c4fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c4bc:	2208      	movs	r2, #8
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f003 0307 	and.w	r3, r3, #7
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d015      	beq.n	800c4fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f023 0307 	bic.w	r3, r3, #7
 800c4d4:	3308      	adds	r3, #8
 800c4d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f003 0307 	and.w	r3, r3, #7
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00b      	beq.n	800c4fa <pvPortMalloc+0x6e>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	617b      	str	r3, [r7, #20]
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop
 800c4f8:	e7fd      	b.n	800c4f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d06f      	beq.n	800c5e0 <pvPortMalloc+0x154>
 800c500:	4b45      	ldr	r3, [pc, #276]	@ (800c618 <pvPortMalloc+0x18c>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	429a      	cmp	r2, r3
 800c508:	d86a      	bhi.n	800c5e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c50a:	4b44      	ldr	r3, [pc, #272]	@ (800c61c <pvPortMalloc+0x190>)
 800c50c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c50e:	4b43      	ldr	r3, [pc, #268]	@ (800c61c <pvPortMalloc+0x190>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c514:	e004      	b.n	800c520 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c518:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	429a      	cmp	r2, r3
 800c528:	d903      	bls.n	800c532 <pvPortMalloc+0xa6>
 800c52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1f1      	bne.n	800c516 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c532:	4b37      	ldr	r3, [pc, #220]	@ (800c610 <pvPortMalloc+0x184>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c538:	429a      	cmp	r2, r3
 800c53a:	d051      	beq.n	800c5e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2208      	movs	r2, #8
 800c542:	4413      	add	r3, r2
 800c544:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c550:	685a      	ldr	r2, [r3, #4]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	1ad2      	subs	r2, r2, r3
 800c556:	2308      	movs	r3, #8
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d920      	bls.n	800c5a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c55e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4413      	add	r3, r2
 800c564:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	f003 0307 	and.w	r3, r3, #7
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00b      	beq.n	800c588 <pvPortMalloc+0xfc>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	613b      	str	r3, [r7, #16]
}
 800c582:	bf00      	nop
 800c584:	bf00      	nop
 800c586:	e7fd      	b.n	800c584 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	1ad2      	subs	r2, r2, r3
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c59a:	69b8      	ldr	r0, [r7, #24]
 800c59c:	f000 f90a 	bl	800c7b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c618 <pvPortMalloc+0x18c>)
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c618 <pvPortMalloc+0x18c>)
 800c5ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c618 <pvPortMalloc+0x18c>)
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	4b1b      	ldr	r3, [pc, #108]	@ (800c620 <pvPortMalloc+0x194>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d203      	bcs.n	800c5c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5ba:	4b17      	ldr	r3, [pc, #92]	@ (800c618 <pvPortMalloc+0x18c>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a18      	ldr	r2, [pc, #96]	@ (800c620 <pvPortMalloc+0x194>)
 800c5c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	4b13      	ldr	r3, [pc, #76]	@ (800c614 <pvPortMalloc+0x188>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	431a      	orrs	r2, r3
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c5d6:	4b13      	ldr	r3, [pc, #76]	@ (800c624 <pvPortMalloc+0x198>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	4a11      	ldr	r2, [pc, #68]	@ (800c624 <pvPortMalloc+0x198>)
 800c5de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5e0:	f7fe fcdc 	bl	800af9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	f003 0307 	and.w	r3, r3, #7
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00b      	beq.n	800c606 <pvPortMalloc+0x17a>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	60fb      	str	r3, [r7, #12]
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	e7fd      	b.n	800c602 <pvPortMalloc+0x176>
	return pvReturn;
 800c606:	69fb      	ldr	r3, [r7, #28]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3728      	adds	r7, #40	@ 0x28
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20004d80 	.word	0x20004d80
 800c614:	20004d94 	.word	0x20004d94
 800c618:	20004d84 	.word	0x20004d84
 800c61c:	20004d78 	.word	0x20004d78
 800c620:	20004d88 	.word	0x20004d88
 800c624:	20004d8c 	.word	0x20004d8c

0800c628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b086      	sub	sp, #24
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d04f      	beq.n	800c6da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c63a:	2308      	movs	r3, #8
 800c63c:	425b      	negs	r3, r3
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	4413      	add	r3, r2
 800c642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	4b25      	ldr	r3, [pc, #148]	@ (800c6e4 <vPortFree+0xbc>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4013      	ands	r3, r2
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10b      	bne.n	800c66e <vPortFree+0x46>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	60fb      	str	r3, [r7, #12]
}
 800c668:	bf00      	nop
 800c66a:	bf00      	nop
 800c66c:	e7fd      	b.n	800c66a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00b      	beq.n	800c68e <vPortFree+0x66>
	__asm volatile
 800c676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	60bb      	str	r3, [r7, #8]
}
 800c688:	bf00      	nop
 800c68a:	bf00      	nop
 800c68c:	e7fd      	b.n	800c68a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	4b14      	ldr	r3, [pc, #80]	@ (800c6e4 <vPortFree+0xbc>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4013      	ands	r3, r2
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d01e      	beq.n	800c6da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d11a      	bne.n	800c6da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	685a      	ldr	r2, [r3, #4]
 800c6a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c6e4 <vPortFree+0xbc>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	43db      	mvns	r3, r3
 800c6ae:	401a      	ands	r2, r3
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6b4:	f7fe fc64 	bl	800af80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e8 <vPortFree+0xc0>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	4a09      	ldr	r2, [pc, #36]	@ (800c6e8 <vPortFree+0xc0>)
 800c6c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6c6:	6938      	ldr	r0, [r7, #16]
 800c6c8:	f000 f874 	bl	800c7b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c6cc:	4b07      	ldr	r3, [pc, #28]	@ (800c6ec <vPortFree+0xc4>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	4a06      	ldr	r2, [pc, #24]	@ (800c6ec <vPortFree+0xc4>)
 800c6d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c6d6:	f7fe fc61 	bl	800af9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6da:	bf00      	nop
 800c6dc:	3718      	adds	r7, #24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	20004d94 	.word	0x20004d94
 800c6e8:	20004d84 	.word	0x20004d84
 800c6ec:	20004d90 	.word	0x20004d90

0800c6f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c6fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6fc:	4b27      	ldr	r3, [pc, #156]	@ (800c79c <prvHeapInit+0xac>)
 800c6fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f003 0307 	and.w	r3, r3, #7
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00c      	beq.n	800c724 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3307      	adds	r3, #7
 800c70e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f023 0307 	bic.w	r3, r3, #7
 800c716:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	4a1f      	ldr	r2, [pc, #124]	@ (800c79c <prvHeapInit+0xac>)
 800c720:	4413      	add	r3, r2
 800c722:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c728:	4a1d      	ldr	r2, [pc, #116]	@ (800c7a0 <prvHeapInit+0xb0>)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c72e:	4b1c      	ldr	r3, [pc, #112]	@ (800c7a0 <prvHeapInit+0xb0>)
 800c730:	2200      	movs	r2, #0
 800c732:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	4413      	add	r3, r2
 800c73a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c73c:	2208      	movs	r2, #8
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	1a9b      	subs	r3, r3, r2
 800c742:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f023 0307 	bic.w	r3, r3, #7
 800c74a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4a15      	ldr	r2, [pc, #84]	@ (800c7a4 <prvHeapInit+0xb4>)
 800c750:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c752:	4b14      	ldr	r3, [pc, #80]	@ (800c7a4 <prvHeapInit+0xb4>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2200      	movs	r2, #0
 800c758:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c75a:	4b12      	ldr	r3, [pc, #72]	@ (800c7a4 <prvHeapInit+0xb4>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2200      	movs	r2, #0
 800c760:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	1ad2      	subs	r2, r2, r3
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c770:	4b0c      	ldr	r3, [pc, #48]	@ (800c7a4 <prvHeapInit+0xb4>)
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	4a0a      	ldr	r2, [pc, #40]	@ (800c7a8 <prvHeapInit+0xb8>)
 800c77e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	4a09      	ldr	r2, [pc, #36]	@ (800c7ac <prvHeapInit+0xbc>)
 800c786:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c788:	4b09      	ldr	r3, [pc, #36]	@ (800c7b0 <prvHeapInit+0xc0>)
 800c78a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c78e:	601a      	str	r2, [r3, #0]
}
 800c790:	bf00      	nop
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	20001178 	.word	0x20001178
 800c7a0:	20004d78 	.word	0x20004d78
 800c7a4:	20004d80 	.word	0x20004d80
 800c7a8:	20004d88 	.word	0x20004d88
 800c7ac:	20004d84 	.word	0x20004d84
 800c7b0:	20004d94 	.word	0x20004d94

0800c7b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7bc:	4b28      	ldr	r3, [pc, #160]	@ (800c860 <prvInsertBlockIntoFreeList+0xac>)
 800c7be:	60fb      	str	r3, [r7, #12]
 800c7c0:	e002      	b.n	800c7c8 <prvInsertBlockIntoFreeList+0x14>
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d8f7      	bhi.n	800c7c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	4413      	add	r3, r2
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d108      	bne.n	800c7f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	441a      	add	r2, r3
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	441a      	add	r2, r3
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	429a      	cmp	r2, r3
 800c808:	d118      	bne.n	800c83c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	4b15      	ldr	r3, [pc, #84]	@ (800c864 <prvInsertBlockIntoFreeList+0xb0>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	429a      	cmp	r2, r3
 800c814:	d00d      	beq.n	800c832 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	685a      	ldr	r2, [r3, #4]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	441a      	add	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	601a      	str	r2, [r3, #0]
 800c830:	e008      	b.n	800c844 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c832:	4b0c      	ldr	r3, [pc, #48]	@ (800c864 <prvInsertBlockIntoFreeList+0xb0>)
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	601a      	str	r2, [r3, #0]
 800c83a:	e003      	b.n	800c844 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d002      	beq.n	800c852 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c852:	bf00      	nop
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	20004d78 	.word	0x20004d78
 800c864:	20004d80 	.word	0x20004d80

0800c868 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c86c:	2200      	movs	r2, #0
 800c86e:	4912      	ldr	r1, [pc, #72]	@ (800c8b8 <MX_USB_DEVICE_Init+0x50>)
 800c870:	4812      	ldr	r0, [pc, #72]	@ (800c8bc <MX_USB_DEVICE_Init+0x54>)
 800c872:	f7fb fee3 	bl	800863c <USBD_Init>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d001      	beq.n	800c880 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c87c:	f7f4 f943 	bl	8000b06 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c880:	490f      	ldr	r1, [pc, #60]	@ (800c8c0 <MX_USB_DEVICE_Init+0x58>)
 800c882:	480e      	ldr	r0, [pc, #56]	@ (800c8bc <MX_USB_DEVICE_Init+0x54>)
 800c884:	f7fb ff0a 	bl	800869c <USBD_RegisterClass>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d001      	beq.n	800c892 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c88e:	f7f4 f93a 	bl	8000b06 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c892:	490c      	ldr	r1, [pc, #48]	@ (800c8c4 <MX_USB_DEVICE_Init+0x5c>)
 800c894:	4809      	ldr	r0, [pc, #36]	@ (800c8bc <MX_USB_DEVICE_Init+0x54>)
 800c896:	f7fb fe01 	bl	800849c <USBD_CDC_RegisterInterface>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d001      	beq.n	800c8a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c8a0:	f7f4 f931 	bl	8000b06 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c8a4:	4805      	ldr	r0, [pc, #20]	@ (800c8bc <MX_USB_DEVICE_Init+0x54>)
 800c8a6:	f7fb ff2f 	bl	8008708 <USBD_Start>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d001      	beq.n	800c8b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c8b0:	f7f4 f929 	bl	8000b06 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c8b4:	bf00      	nop
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	200000b0 	.word	0x200000b0
 800c8bc:	20004d98 	.word	0x20004d98
 800c8c0:	20000018 	.word	0x20000018
 800c8c4:	2000009c 	.word	0x2000009c

0800c8c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	4905      	ldr	r1, [pc, #20]	@ (800c8e4 <CDC_Init_FS+0x1c>)
 800c8d0:	4805      	ldr	r0, [pc, #20]	@ (800c8e8 <CDC_Init_FS+0x20>)
 800c8d2:	f7fb fdfd 	bl	80084d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c8d6:	4905      	ldr	r1, [pc, #20]	@ (800c8ec <CDC_Init_FS+0x24>)
 800c8d8:	4803      	ldr	r0, [pc, #12]	@ (800c8e8 <CDC_Init_FS+0x20>)
 800c8da:	f7fb fe1b 	bl	8008514 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c8de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	20005874 	.word	0x20005874
 800c8e8:	20004d98 	.word	0x20004d98
 800c8ec:	20005074 	.word	0x20005074

0800c8f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c8f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	4603      	mov	r3, r0
 800c908:	6039      	str	r1, [r7, #0]
 800c90a:	71fb      	strb	r3, [r7, #7]
 800c90c:	4613      	mov	r3, r2
 800c90e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c910:	79fb      	ldrb	r3, [r7, #7]
 800c912:	2b23      	cmp	r3, #35	@ 0x23
 800c914:	d84a      	bhi.n	800c9ac <CDC_Control_FS+0xac>
 800c916:	a201      	add	r2, pc, #4	@ (adr r2, 800c91c <CDC_Control_FS+0x1c>)
 800c918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91c:	0800c9ad 	.word	0x0800c9ad
 800c920:	0800c9ad 	.word	0x0800c9ad
 800c924:	0800c9ad 	.word	0x0800c9ad
 800c928:	0800c9ad 	.word	0x0800c9ad
 800c92c:	0800c9ad 	.word	0x0800c9ad
 800c930:	0800c9ad 	.word	0x0800c9ad
 800c934:	0800c9ad 	.word	0x0800c9ad
 800c938:	0800c9ad 	.word	0x0800c9ad
 800c93c:	0800c9ad 	.word	0x0800c9ad
 800c940:	0800c9ad 	.word	0x0800c9ad
 800c944:	0800c9ad 	.word	0x0800c9ad
 800c948:	0800c9ad 	.word	0x0800c9ad
 800c94c:	0800c9ad 	.word	0x0800c9ad
 800c950:	0800c9ad 	.word	0x0800c9ad
 800c954:	0800c9ad 	.word	0x0800c9ad
 800c958:	0800c9ad 	.word	0x0800c9ad
 800c95c:	0800c9ad 	.word	0x0800c9ad
 800c960:	0800c9ad 	.word	0x0800c9ad
 800c964:	0800c9ad 	.word	0x0800c9ad
 800c968:	0800c9ad 	.word	0x0800c9ad
 800c96c:	0800c9ad 	.word	0x0800c9ad
 800c970:	0800c9ad 	.word	0x0800c9ad
 800c974:	0800c9ad 	.word	0x0800c9ad
 800c978:	0800c9ad 	.word	0x0800c9ad
 800c97c:	0800c9ad 	.word	0x0800c9ad
 800c980:	0800c9ad 	.word	0x0800c9ad
 800c984:	0800c9ad 	.word	0x0800c9ad
 800c988:	0800c9ad 	.word	0x0800c9ad
 800c98c:	0800c9ad 	.word	0x0800c9ad
 800c990:	0800c9ad 	.word	0x0800c9ad
 800c994:	0800c9ad 	.word	0x0800c9ad
 800c998:	0800c9ad 	.word	0x0800c9ad
 800c99c:	0800c9ad 	.word	0x0800c9ad
 800c9a0:	0800c9ad 	.word	0x0800c9ad
 800c9a4:	0800c9ad 	.word	0x0800c9ad
 800c9a8:	0800c9ad 	.word	0x0800c9ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c9ac:	bf00      	nop
  }

  return (USBD_OK);
 800c9ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c9c6:	6879      	ldr	r1, [r7, #4]
 800c9c8:	4805      	ldr	r0, [pc, #20]	@ (800c9e0 <CDC_Receive_FS+0x24>)
 800c9ca:	f7fb fda3 	bl	8008514 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c9ce:	4804      	ldr	r0, [pc, #16]	@ (800c9e0 <CDC_Receive_FS+0x24>)
 800c9d0:	f7fb fdfe 	bl	80085d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c9d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3708      	adds	r7, #8
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	20004d98 	.word	0x20004d98

0800c9e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c9f4:	4b0d      	ldr	r3, [pc, #52]	@ (800ca2c <CDC_Transmit_FS+0x48>)
 800c9f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c9fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e00b      	b.n	800ca22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ca0a:	887b      	ldrh	r3, [r7, #2]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	6879      	ldr	r1, [r7, #4]
 800ca10:	4806      	ldr	r0, [pc, #24]	@ (800ca2c <CDC_Transmit_FS+0x48>)
 800ca12:	f7fb fd5d 	bl	80084d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ca16:	4805      	ldr	r0, [pc, #20]	@ (800ca2c <CDC_Transmit_FS+0x48>)
 800ca18:	f7fb fd9a 	bl	8008550 <USBD_CDC_TransmitPacket>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	20004d98 	.word	0x20004d98

0800ca30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b087      	sub	sp, #28
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ca42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	371c      	adds	r7, #28
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
	...

0800ca54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	6039      	str	r1, [r7, #0]
 800ca5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	2212      	movs	r2, #18
 800ca64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ca66:	4b03      	ldr	r3, [pc, #12]	@ (800ca74 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	200000cc 	.word	0x200000cc

0800ca78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	4603      	mov	r3, r0
 800ca80:	6039      	str	r1, [r7, #0]
 800ca82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	2204      	movs	r2, #4
 800ca88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca8a:	4b03      	ldr	r3, [pc, #12]	@ (800ca98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	200000e0 	.word	0x200000e0

0800ca9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	4603      	mov	r3, r0
 800caa4:	6039      	str	r1, [r7, #0]
 800caa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800caa8:	79fb      	ldrb	r3, [r7, #7]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d105      	bne.n	800caba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800caae:	683a      	ldr	r2, [r7, #0]
 800cab0:	4907      	ldr	r1, [pc, #28]	@ (800cad0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cab2:	4808      	ldr	r0, [pc, #32]	@ (800cad4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cab4:	f7fc ffee 	bl	8009a94 <USBD_GetString>
 800cab8:	e004      	b.n	800cac4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	4904      	ldr	r1, [pc, #16]	@ (800cad0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cabe:	4805      	ldr	r0, [pc, #20]	@ (800cad4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cac0:	f7fc ffe8 	bl	8009a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cac4:	4b02      	ldr	r3, [pc, #8]	@ (800cad0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	20006074 	.word	0x20006074
 800cad4:	0800d5b0 	.word	0x0800d5b0

0800cad8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	4603      	mov	r3, r0
 800cae0:	6039      	str	r1, [r7, #0]
 800cae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cae4:	683a      	ldr	r2, [r7, #0]
 800cae6:	4904      	ldr	r1, [pc, #16]	@ (800caf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cae8:	4804      	ldr	r0, [pc, #16]	@ (800cafc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800caea:	f7fc ffd3 	bl	8009a94 <USBD_GetString>
  return USBD_StrDesc;
 800caee:	4b02      	ldr	r3, [pc, #8]	@ (800caf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	20006074 	.word	0x20006074
 800cafc:	0800d5c8 	.word	0x0800d5c8

0800cb00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	4603      	mov	r3, r0
 800cb08:	6039      	str	r1, [r7, #0]
 800cb0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	221a      	movs	r2, #26
 800cb10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb12:	f000 f843 	bl	800cb9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb16:	4b02      	ldr	r3, [pc, #8]	@ (800cb20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	200000e4 	.word	0x200000e4

0800cb24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	6039      	str	r1, [r7, #0]
 800cb2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb30:	79fb      	ldrb	r3, [r7, #7]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d105      	bne.n	800cb42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb36:	683a      	ldr	r2, [r7, #0]
 800cb38:	4907      	ldr	r1, [pc, #28]	@ (800cb58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb3a:	4808      	ldr	r0, [pc, #32]	@ (800cb5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb3c:	f7fc ffaa 	bl	8009a94 <USBD_GetString>
 800cb40:	e004      	b.n	800cb4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	4904      	ldr	r1, [pc, #16]	@ (800cb58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb46:	4805      	ldr	r0, [pc, #20]	@ (800cb5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb48:	f7fc ffa4 	bl	8009a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb4c:	4b02      	ldr	r3, [pc, #8]	@ (800cb58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3708      	adds	r7, #8
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	20006074 	.word	0x20006074
 800cb5c:	0800d5dc 	.word	0x0800d5dc

0800cb60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	4603      	mov	r3, r0
 800cb68:	6039      	str	r1, [r7, #0]
 800cb6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb6c:	79fb      	ldrb	r3, [r7, #7]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d105      	bne.n	800cb7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb72:	683a      	ldr	r2, [r7, #0]
 800cb74:	4907      	ldr	r1, [pc, #28]	@ (800cb94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb76:	4808      	ldr	r0, [pc, #32]	@ (800cb98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb78:	f7fc ff8c 	bl	8009a94 <USBD_GetString>
 800cb7c:	e004      	b.n	800cb88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	4904      	ldr	r1, [pc, #16]	@ (800cb94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb82:	4805      	ldr	r0, [pc, #20]	@ (800cb98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb84:	f7fc ff86 	bl	8009a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb88:	4b02      	ldr	r3, [pc, #8]	@ (800cb94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	20006074 	.word	0x20006074
 800cb98:	0800d5e8 	.word	0x0800d5e8

0800cb9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cba2:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe0 <Get_SerialNum+0x44>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cba8:	4b0e      	ldr	r3, [pc, #56]	@ (800cbe4 <Get_SerialNum+0x48>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cbae:	4b0e      	ldr	r3, [pc, #56]	@ (800cbe8 <Get_SerialNum+0x4c>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4413      	add	r3, r2
 800cbba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d009      	beq.n	800cbd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cbc2:	2208      	movs	r2, #8
 800cbc4:	4909      	ldr	r1, [pc, #36]	@ (800cbec <Get_SerialNum+0x50>)
 800cbc6:	68f8      	ldr	r0, [r7, #12]
 800cbc8:	f000 f814 	bl	800cbf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cbcc:	2204      	movs	r2, #4
 800cbce:	4908      	ldr	r1, [pc, #32]	@ (800cbf0 <Get_SerialNum+0x54>)
 800cbd0:	68b8      	ldr	r0, [r7, #8]
 800cbd2:	f000 f80f 	bl	800cbf4 <IntToUnicode>
  }
}
 800cbd6:	bf00      	nop
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	1fff7a10 	.word	0x1fff7a10
 800cbe4:	1fff7a14 	.word	0x1fff7a14
 800cbe8:	1fff7a18 	.word	0x1fff7a18
 800cbec:	200000e6 	.word	0x200000e6
 800cbf0:	200000f6 	.word	0x200000f6

0800cbf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc06:	2300      	movs	r3, #0
 800cc08:	75fb      	strb	r3, [r7, #23]
 800cc0a:	e027      	b.n	800cc5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	0f1b      	lsrs	r3, r3, #28
 800cc10:	2b09      	cmp	r3, #9
 800cc12:	d80b      	bhi.n	800cc2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	0f1b      	lsrs	r3, r3, #28
 800cc18:	b2da      	uxtb	r2, r3
 800cc1a:	7dfb      	ldrb	r3, [r7, #23]
 800cc1c:	005b      	lsls	r3, r3, #1
 800cc1e:	4619      	mov	r1, r3
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	440b      	add	r3, r1
 800cc24:	3230      	adds	r2, #48	@ 0x30
 800cc26:	b2d2      	uxtb	r2, r2
 800cc28:	701a      	strb	r2, [r3, #0]
 800cc2a:	e00a      	b.n	800cc42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	0f1b      	lsrs	r3, r3, #28
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	7dfb      	ldrb	r3, [r7, #23]
 800cc34:	005b      	lsls	r3, r3, #1
 800cc36:	4619      	mov	r1, r3
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	440b      	add	r3, r1
 800cc3c:	3237      	adds	r2, #55	@ 0x37
 800cc3e:	b2d2      	uxtb	r2, r2
 800cc40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	011b      	lsls	r3, r3, #4
 800cc46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc48:	7dfb      	ldrb	r3, [r7, #23]
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	4413      	add	r3, r2
 800cc52:	2200      	movs	r2, #0
 800cc54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	75fb      	strb	r3, [r7, #23]
 800cc5c:	7dfa      	ldrb	r2, [r7, #23]
 800cc5e:	79fb      	ldrb	r3, [r7, #7]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d3d3      	bcc.n	800cc0c <IntToUnicode+0x18>
  }
}
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop
 800cc68:	371c      	adds	r7, #28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
	...

0800cc74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b08a      	sub	sp, #40	@ 0x28
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc7c:	f107 0314 	add.w	r3, r7, #20
 800cc80:	2200      	movs	r2, #0
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	605a      	str	r2, [r3, #4]
 800cc86:	609a      	str	r2, [r3, #8]
 800cc88:	60da      	str	r2, [r3, #12]
 800cc8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc94:	d13a      	bne.n	800cd0c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc96:	2300      	movs	r3, #0
 800cc98:	613b      	str	r3, [r7, #16]
 800cc9a:	4b1e      	ldr	r3, [pc, #120]	@ (800cd14 <HAL_PCD_MspInit+0xa0>)
 800cc9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc9e:	4a1d      	ldr	r2, [pc, #116]	@ (800cd14 <HAL_PCD_MspInit+0xa0>)
 800cca0:	f043 0301 	orr.w	r3, r3, #1
 800cca4:	6313      	str	r3, [r2, #48]	@ 0x30
 800cca6:	4b1b      	ldr	r3, [pc, #108]	@ (800cd14 <HAL_PCD_MspInit+0xa0>)
 800cca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	613b      	str	r3, [r7, #16]
 800ccb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ccb2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ccb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccb8:	2302      	movs	r3, #2
 800ccba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ccc4:	230a      	movs	r3, #10
 800ccc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ccc8:	f107 0314 	add.w	r3, r7, #20
 800cccc:	4619      	mov	r1, r3
 800ccce:	4812      	ldr	r0, [pc, #72]	@ (800cd18 <HAL_PCD_MspInit+0xa4>)
 800ccd0:	f7f6 fa66 	bl	80031a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ccd4:	4b0f      	ldr	r3, [pc, #60]	@ (800cd14 <HAL_PCD_MspInit+0xa0>)
 800ccd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccd8:	4a0e      	ldr	r2, [pc, #56]	@ (800cd14 <HAL_PCD_MspInit+0xa0>)
 800ccda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccde:	6353      	str	r3, [r2, #52]	@ 0x34
 800cce0:	2300      	movs	r3, #0
 800cce2:	60fb      	str	r3, [r7, #12]
 800cce4:	4b0b      	ldr	r3, [pc, #44]	@ (800cd14 <HAL_PCD_MspInit+0xa0>)
 800cce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cce8:	4a0a      	ldr	r2, [pc, #40]	@ (800cd14 <HAL_PCD_MspInit+0xa0>)
 800ccea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ccee:	6453      	str	r3, [r2, #68]	@ 0x44
 800ccf0:	4b08      	ldr	r3, [pc, #32]	@ (800cd14 <HAL_PCD_MspInit+0xa0>)
 800ccf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ccf8:	60fb      	str	r3, [r7, #12]
 800ccfa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	2105      	movs	r1, #5
 800cd00:	2043      	movs	r0, #67	@ 0x43
 800cd02:	f7f5 feb3 	bl	8002a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd06:	2043      	movs	r0, #67	@ 0x43
 800cd08:	f7f5 fecc 	bl	8002aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd0c:	bf00      	nop
 800cd0e:	3728      	adds	r7, #40	@ 0x28
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	40023800 	.word	0x40023800
 800cd18:	40020000 	.word	0x40020000

0800cd1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cd30:	4619      	mov	r1, r3
 800cd32:	4610      	mov	r0, r2
 800cd34:	f7fb fd35 	bl	80087a2 <USBD_LL_SetupStage>
}
 800cd38:	bf00      	nop
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cd52:	78fa      	ldrb	r2, [r7, #3]
 800cd54:	6879      	ldr	r1, [r7, #4]
 800cd56:	4613      	mov	r3, r2
 800cd58:	00db      	lsls	r3, r3, #3
 800cd5a:	4413      	add	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	440b      	add	r3, r1
 800cd60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	78fb      	ldrb	r3, [r7, #3]
 800cd68:	4619      	mov	r1, r3
 800cd6a:	f7fb fd6f 	bl	800884c <USBD_LL_DataOutStage>
}
 800cd6e:	bf00      	nop
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b082      	sub	sp, #8
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	460b      	mov	r3, r1
 800cd80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cd88:	78fa      	ldrb	r2, [r7, #3]
 800cd8a:	6879      	ldr	r1, [r7, #4]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	4413      	add	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	440b      	add	r3, r1
 800cd96:	3320      	adds	r3, #32
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	78fb      	ldrb	r3, [r7, #3]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	f7fb fe11 	bl	80089c4 <USBD_LL_DataInStage>
}
 800cda2:	bf00      	nop
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b082      	sub	sp, #8
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fb ff55 	bl	8008c68 <USBD_LL_SOF>
}
 800cdbe:	bf00      	nop
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b084      	sub	sp, #16
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	79db      	ldrb	r3, [r3, #7]
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	d001      	beq.n	800cdde <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cdda:	f7f3 fe94 	bl	8000b06 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cde4:	7bfa      	ldrb	r2, [r7, #15]
 800cde6:	4611      	mov	r1, r2
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fb fef9 	bl	8008be0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fb fea0 	bl	8008b3a <USBD_LL_Reset>
}
 800cdfa:	bf00      	nop
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fb fef4 	bl	8008c00 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	6812      	ldr	r2, [r2, #0]
 800ce26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce2a:	f043 0301 	orr.w	r3, r3, #1
 800ce2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	7adb      	ldrb	r3, [r3, #11]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce38:	4b04      	ldr	r3, [pc, #16]	@ (800ce4c <HAL_PCD_SuspendCallback+0x48>)
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	4a03      	ldr	r2, [pc, #12]	@ (800ce4c <HAL_PCD_SuspendCallback+0x48>)
 800ce3e:	f043 0306 	orr.w	r3, r3, #6
 800ce42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ce44:	bf00      	nop
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	e000ed00 	.word	0xe000ed00

0800ce50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fb feea 	bl	8008c38 <USBD_LL_Resume>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	460b      	mov	r3, r1
 800ce76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce7e:	78fa      	ldrb	r2, [r7, #3]
 800ce80:	4611      	mov	r1, r2
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fb ff42 	bl	8008d0c <USBD_LL_IsoOUTIncomplete>
}
 800ce88:	bf00      	nop
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cea2:	78fa      	ldrb	r2, [r7, #3]
 800cea4:	4611      	mov	r1, r2
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fb fefe 	bl	8008ca8 <USBD_LL_IsoINIncomplete>
}
 800ceac:	bf00      	nop
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fb ff54 	bl	8008d70 <USBD_LL_DevConnected>
}
 800cec8:	bf00      	nop
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fb ff51 	bl	8008d86 <USBD_LL_DevDisconnected>
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d13c      	bne.n	800cf76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cefc:	4a20      	ldr	r2, [pc, #128]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a1e      	ldr	r2, [pc, #120]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf08:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf0c:	4b1c      	ldr	r3, [pc, #112]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf0e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cf12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cf14:	4b1a      	ldr	r3, [pc, #104]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf16:	2204      	movs	r2, #4
 800cf18:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cf1a:	4b19      	ldr	r3, [pc, #100]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf20:	4b17      	ldr	r3, [pc, #92]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf26:	4b16      	ldr	r3, [pc, #88]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf28:	2202      	movs	r2, #2
 800cf2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cf2c:	4b14      	ldr	r3, [pc, #80]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cf32:	4b13      	ldr	r3, [pc, #76]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cf38:	4b11      	ldr	r3, [pc, #68]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cf3e:	4b10      	ldr	r3, [pc, #64]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf40:	2200      	movs	r2, #0
 800cf42:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cf44:	4b0e      	ldr	r3, [pc, #56]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cf4a:	480d      	ldr	r0, [pc, #52]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf4c:	f7f6 fc3c 	bl	80037c8 <HAL_PCD_Init>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d001      	beq.n	800cf5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cf56:	f7f3 fdd6 	bl	8000b06 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cf5a:	2180      	movs	r1, #128	@ 0x80
 800cf5c:	4808      	ldr	r0, [pc, #32]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf5e:	f7f7 fe68 	bl	8004c32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cf62:	2240      	movs	r2, #64	@ 0x40
 800cf64:	2100      	movs	r1, #0
 800cf66:	4806      	ldr	r0, [pc, #24]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf68:	f7f7 fe1c 	bl	8004ba4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cf6c:	2280      	movs	r2, #128	@ 0x80
 800cf6e:	2101      	movs	r1, #1
 800cf70:	4803      	ldr	r0, [pc, #12]	@ (800cf80 <USBD_LL_Init+0x94>)
 800cf72:	f7f7 fe17 	bl	8004ba4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	20006274 	.word	0x20006274

0800cf84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf90:	2300      	movs	r3, #0
 800cf92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7f6 fd23 	bl	80039e6 <HAL_PCD_Start>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfa4:	7bfb      	ldrb	r3, [r7, #15]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 f942 	bl	800d230 <USBD_Get_USB_Status>
 800cfac:	4603      	mov	r3, r0
 800cfae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	4608      	mov	r0, r1
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	4603      	mov	r3, r0
 800cfca:	70fb      	strb	r3, [r7, #3]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	70bb      	strb	r3, [r7, #2]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cfe2:	78bb      	ldrb	r3, [r7, #2]
 800cfe4:	883a      	ldrh	r2, [r7, #0]
 800cfe6:	78f9      	ldrb	r1, [r7, #3]
 800cfe8:	f7f7 f9f7 	bl	80043da <HAL_PCD_EP_Open>
 800cfec:	4603      	mov	r3, r0
 800cfee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cff0:	7bfb      	ldrb	r3, [r7, #15]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f000 f91c 	bl	800d230 <USBD_Get_USB_Status>
 800cff8:	4603      	mov	r3, r0
 800cffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cffc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
 800d00e:	460b      	mov	r3, r1
 800d010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d016:	2300      	movs	r3, #0
 800d018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d020:	78fa      	ldrb	r2, [r7, #3]
 800d022:	4611      	mov	r1, r2
 800d024:	4618      	mov	r0, r3
 800d026:	f7f7 fa42 	bl	80044ae <HAL_PCD_EP_Close>
 800d02a:	4603      	mov	r3, r0
 800d02c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
 800d030:	4618      	mov	r0, r3
 800d032:	f000 f8fd 	bl	800d230 <USBD_Get_USB_Status>
 800d036:	4603      	mov	r3, r0
 800d038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d03a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d05e:	78fa      	ldrb	r2, [r7, #3]
 800d060:	4611      	mov	r1, r2
 800d062:	4618      	mov	r0, r3
 800d064:	f7f7 fafa 	bl	800465c <HAL_PCD_EP_SetStall>
 800d068:	4603      	mov	r3, r0
 800d06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	4618      	mov	r0, r3
 800d070:	f000 f8de 	bl	800d230 <USBD_Get_USB_Status>
 800d074:	4603      	mov	r3, r0
 800d076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d078:	7bbb      	ldrb	r3, [r7, #14]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b084      	sub	sp, #16
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	460b      	mov	r3, r1
 800d08c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d08e:	2300      	movs	r3, #0
 800d090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d09c:	78fa      	ldrb	r2, [r7, #3]
 800d09e:	4611      	mov	r1, r2
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7f7 fb3e 	bl	8004722 <HAL_PCD_EP_ClrStall>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f000 f8bf 	bl	800d230 <USBD_Get_USB_Status>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d0d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d0d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	da0b      	bge.n	800d0f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d0dc:	78fb      	ldrb	r3, [r7, #3]
 800d0de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0e2:	68f9      	ldr	r1, [r7, #12]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	4413      	add	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	440b      	add	r3, r1
 800d0ee:	3316      	adds	r3, #22
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	e00b      	b.n	800d10c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d0f4:	78fb      	ldrb	r3, [r7, #3]
 800d0f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0fa:	68f9      	ldr	r1, [r7, #12]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	4413      	add	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	440b      	add	r3, r1
 800d106:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d10a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	460b      	mov	r3, r1
 800d122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d132:	78fa      	ldrb	r2, [r7, #3]
 800d134:	4611      	mov	r1, r2
 800d136:	4618      	mov	r0, r3
 800d138:	f7f7 f92b 	bl	8004392 <HAL_PCD_SetAddress>
 800d13c:	4603      	mov	r3, r0
 800d13e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d140:	7bfb      	ldrb	r3, [r7, #15]
 800d142:	4618      	mov	r0, r3
 800d144:	f000 f874 	bl	800d230 <USBD_Get_USB_Status>
 800d148:	4603      	mov	r3, r0
 800d14a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b086      	sub	sp, #24
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	60f8      	str	r0, [r7, #12]
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	603b      	str	r3, [r7, #0]
 800d162:	460b      	mov	r3, r1
 800d164:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d166:	2300      	movs	r3, #0
 800d168:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d174:	7af9      	ldrb	r1, [r7, #11]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	f7f7 fa35 	bl	80045e8 <HAL_PCD_EP_Transmit>
 800d17e:	4603      	mov	r3, r0
 800d180:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d182:	7dfb      	ldrb	r3, [r7, #23]
 800d184:	4618      	mov	r0, r3
 800d186:	f000 f853 	bl	800d230 <USBD_Get_USB_Status>
 800d18a:	4603      	mov	r3, r0
 800d18c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d18e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	607a      	str	r2, [r7, #4]
 800d1a2:	603b      	str	r3, [r7, #0]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d1b6:	7af9      	ldrb	r1, [r7, #11]
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	f7f7 f9c1 	bl	8004542 <HAL_PCD_EP_Receive>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 f832 	bl	800d230 <USBD_Get_USB_Status>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3718      	adds	r7, #24
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b082      	sub	sp, #8
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1ec:	78fa      	ldrb	r2, [r7, #3]
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7f7 f9e1 	bl	80045b8 <HAL_PCD_EP_GetRxCount>
 800d1f6:	4603      	mov	r3, r0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d208:	4b03      	ldr	r3, [pc, #12]	@ (800d218 <USBD_static_malloc+0x18>)
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	370c      	adds	r7, #12
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr
 800d216:	bf00      	nop
 800d218:	20006758 	.word	0x20006758

0800d21c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]

}
 800d224:	bf00      	nop
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	4603      	mov	r3, r0
 800d238:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d23e:	79fb      	ldrb	r3, [r7, #7]
 800d240:	2b03      	cmp	r3, #3
 800d242:	d817      	bhi.n	800d274 <USBD_Get_USB_Status+0x44>
 800d244:	a201      	add	r2, pc, #4	@ (adr r2, 800d24c <USBD_Get_USB_Status+0x1c>)
 800d246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d24a:	bf00      	nop
 800d24c:	0800d25d 	.word	0x0800d25d
 800d250:	0800d263 	.word	0x0800d263
 800d254:	0800d269 	.word	0x0800d269
 800d258:	0800d26f 	.word	0x0800d26f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d25c:	2300      	movs	r3, #0
 800d25e:	73fb      	strb	r3, [r7, #15]
    break;
 800d260:	e00b      	b.n	800d27a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d262:	2303      	movs	r3, #3
 800d264:	73fb      	strb	r3, [r7, #15]
    break;
 800d266:	e008      	b.n	800d27a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d268:	2301      	movs	r3, #1
 800d26a:	73fb      	strb	r3, [r7, #15]
    break;
 800d26c:	e005      	b.n	800d27a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d26e:	2303      	movs	r3, #3
 800d270:	73fb      	strb	r3, [r7, #15]
    break;
 800d272:	e002      	b.n	800d27a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d274:	2303      	movs	r3, #3
 800d276:	73fb      	strb	r3, [r7, #15]
    break;
 800d278:	bf00      	nop
  }
  return usb_status;
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3714      	adds	r7, #20
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <memset>:
 800d288:	4402      	add	r2, r0
 800d28a:	4603      	mov	r3, r0
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d100      	bne.n	800d292 <memset+0xa>
 800d290:	4770      	bx	lr
 800d292:	f803 1b01 	strb.w	r1, [r3], #1
 800d296:	e7f9      	b.n	800d28c <memset+0x4>

0800d298 <_reclaim_reent>:
 800d298:	4b2d      	ldr	r3, [pc, #180]	@ (800d350 <_reclaim_reent+0xb8>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4283      	cmp	r3, r0
 800d29e:	b570      	push	{r4, r5, r6, lr}
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	d053      	beq.n	800d34c <_reclaim_reent+0xb4>
 800d2a4:	69c3      	ldr	r3, [r0, #28]
 800d2a6:	b31b      	cbz	r3, 800d2f0 <_reclaim_reent+0x58>
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	b163      	cbz	r3, 800d2c6 <_reclaim_reent+0x2e>
 800d2ac:	2500      	movs	r5, #0
 800d2ae:	69e3      	ldr	r3, [r4, #28]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	5959      	ldr	r1, [r3, r5]
 800d2b4:	b9b1      	cbnz	r1, 800d2e4 <_reclaim_reent+0x4c>
 800d2b6:	3504      	adds	r5, #4
 800d2b8:	2d80      	cmp	r5, #128	@ 0x80
 800d2ba:	d1f8      	bne.n	800d2ae <_reclaim_reent+0x16>
 800d2bc:	69e3      	ldr	r3, [r4, #28]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	68d9      	ldr	r1, [r3, #12]
 800d2c2:	f000 f87b 	bl	800d3bc <_free_r>
 800d2c6:	69e3      	ldr	r3, [r4, #28]
 800d2c8:	6819      	ldr	r1, [r3, #0]
 800d2ca:	b111      	cbz	r1, 800d2d2 <_reclaim_reent+0x3a>
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f000 f875 	bl	800d3bc <_free_r>
 800d2d2:	69e3      	ldr	r3, [r4, #28]
 800d2d4:	689d      	ldr	r5, [r3, #8]
 800d2d6:	b15d      	cbz	r5, 800d2f0 <_reclaim_reent+0x58>
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4620      	mov	r0, r4
 800d2dc:	682d      	ldr	r5, [r5, #0]
 800d2de:	f000 f86d 	bl	800d3bc <_free_r>
 800d2e2:	e7f8      	b.n	800d2d6 <_reclaim_reent+0x3e>
 800d2e4:	680e      	ldr	r6, [r1, #0]
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f000 f868 	bl	800d3bc <_free_r>
 800d2ec:	4631      	mov	r1, r6
 800d2ee:	e7e1      	b.n	800d2b4 <_reclaim_reent+0x1c>
 800d2f0:	6961      	ldr	r1, [r4, #20]
 800d2f2:	b111      	cbz	r1, 800d2fa <_reclaim_reent+0x62>
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f000 f861 	bl	800d3bc <_free_r>
 800d2fa:	69e1      	ldr	r1, [r4, #28]
 800d2fc:	b111      	cbz	r1, 800d304 <_reclaim_reent+0x6c>
 800d2fe:	4620      	mov	r0, r4
 800d300:	f000 f85c 	bl	800d3bc <_free_r>
 800d304:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d306:	b111      	cbz	r1, 800d30e <_reclaim_reent+0x76>
 800d308:	4620      	mov	r0, r4
 800d30a:	f000 f857 	bl	800d3bc <_free_r>
 800d30e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d310:	b111      	cbz	r1, 800d318 <_reclaim_reent+0x80>
 800d312:	4620      	mov	r0, r4
 800d314:	f000 f852 	bl	800d3bc <_free_r>
 800d318:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d31a:	b111      	cbz	r1, 800d322 <_reclaim_reent+0x8a>
 800d31c:	4620      	mov	r0, r4
 800d31e:	f000 f84d 	bl	800d3bc <_free_r>
 800d322:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d324:	b111      	cbz	r1, 800d32c <_reclaim_reent+0x94>
 800d326:	4620      	mov	r0, r4
 800d328:	f000 f848 	bl	800d3bc <_free_r>
 800d32c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d32e:	b111      	cbz	r1, 800d336 <_reclaim_reent+0x9e>
 800d330:	4620      	mov	r0, r4
 800d332:	f000 f843 	bl	800d3bc <_free_r>
 800d336:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d338:	b111      	cbz	r1, 800d340 <_reclaim_reent+0xa8>
 800d33a:	4620      	mov	r0, r4
 800d33c:	f000 f83e 	bl	800d3bc <_free_r>
 800d340:	6a23      	ldr	r3, [r4, #32]
 800d342:	b11b      	cbz	r3, 800d34c <_reclaim_reent+0xb4>
 800d344:	4620      	mov	r0, r4
 800d346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d34a:	4718      	bx	r3
 800d34c:	bd70      	pop	{r4, r5, r6, pc}
 800d34e:	bf00      	nop
 800d350:	20000100 	.word	0x20000100

0800d354 <__libc_init_array>:
 800d354:	b570      	push	{r4, r5, r6, lr}
 800d356:	4d0d      	ldr	r5, [pc, #52]	@ (800d38c <__libc_init_array+0x38>)
 800d358:	4c0d      	ldr	r4, [pc, #52]	@ (800d390 <__libc_init_array+0x3c>)
 800d35a:	1b64      	subs	r4, r4, r5
 800d35c:	10a4      	asrs	r4, r4, #2
 800d35e:	2600      	movs	r6, #0
 800d360:	42a6      	cmp	r6, r4
 800d362:	d109      	bne.n	800d378 <__libc_init_array+0x24>
 800d364:	4d0b      	ldr	r5, [pc, #44]	@ (800d394 <__libc_init_array+0x40>)
 800d366:	4c0c      	ldr	r4, [pc, #48]	@ (800d398 <__libc_init_array+0x44>)
 800d368:	f000 f87e 	bl	800d468 <_init>
 800d36c:	1b64      	subs	r4, r4, r5
 800d36e:	10a4      	asrs	r4, r4, #2
 800d370:	2600      	movs	r6, #0
 800d372:	42a6      	cmp	r6, r4
 800d374:	d105      	bne.n	800d382 <__libc_init_array+0x2e>
 800d376:	bd70      	pop	{r4, r5, r6, pc}
 800d378:	f855 3b04 	ldr.w	r3, [r5], #4
 800d37c:	4798      	blx	r3
 800d37e:	3601      	adds	r6, #1
 800d380:	e7ee      	b.n	800d360 <__libc_init_array+0xc>
 800d382:	f855 3b04 	ldr.w	r3, [r5], #4
 800d386:	4798      	blx	r3
 800d388:	3601      	adds	r6, #1
 800d38a:	e7f2      	b.n	800d372 <__libc_init_array+0x1e>
 800d38c:	0800d6c8 	.word	0x0800d6c8
 800d390:	0800d6c8 	.word	0x0800d6c8
 800d394:	0800d6c8 	.word	0x0800d6c8
 800d398:	0800d6cc 	.word	0x0800d6cc

0800d39c <__retarget_lock_acquire_recursive>:
 800d39c:	4770      	bx	lr

0800d39e <__retarget_lock_release_recursive>:
 800d39e:	4770      	bx	lr

0800d3a0 <memcpy>:
 800d3a0:	440a      	add	r2, r1
 800d3a2:	4291      	cmp	r1, r2
 800d3a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3a8:	d100      	bne.n	800d3ac <memcpy+0xc>
 800d3aa:	4770      	bx	lr
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3b6:	4291      	cmp	r1, r2
 800d3b8:	d1f9      	bne.n	800d3ae <memcpy+0xe>
 800d3ba:	bd10      	pop	{r4, pc}

0800d3bc <_free_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4605      	mov	r5, r0
 800d3c0:	2900      	cmp	r1, #0
 800d3c2:	d041      	beq.n	800d448 <_free_r+0x8c>
 800d3c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3c8:	1f0c      	subs	r4, r1, #4
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	bfb8      	it	lt
 800d3ce:	18e4      	addlt	r4, r4, r3
 800d3d0:	f000 f83e 	bl	800d450 <__malloc_lock>
 800d3d4:	4a1d      	ldr	r2, [pc, #116]	@ (800d44c <_free_r+0x90>)
 800d3d6:	6813      	ldr	r3, [r2, #0]
 800d3d8:	b933      	cbnz	r3, 800d3e8 <_free_r+0x2c>
 800d3da:	6063      	str	r3, [r4, #4]
 800d3dc:	6014      	str	r4, [r2, #0]
 800d3de:	4628      	mov	r0, r5
 800d3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3e4:	f000 b83a 	b.w	800d45c <__malloc_unlock>
 800d3e8:	42a3      	cmp	r3, r4
 800d3ea:	d908      	bls.n	800d3fe <_free_r+0x42>
 800d3ec:	6820      	ldr	r0, [r4, #0]
 800d3ee:	1821      	adds	r1, r4, r0
 800d3f0:	428b      	cmp	r3, r1
 800d3f2:	bf01      	itttt	eq
 800d3f4:	6819      	ldreq	r1, [r3, #0]
 800d3f6:	685b      	ldreq	r3, [r3, #4]
 800d3f8:	1809      	addeq	r1, r1, r0
 800d3fa:	6021      	streq	r1, [r4, #0]
 800d3fc:	e7ed      	b.n	800d3da <_free_r+0x1e>
 800d3fe:	461a      	mov	r2, r3
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	b10b      	cbz	r3, 800d408 <_free_r+0x4c>
 800d404:	42a3      	cmp	r3, r4
 800d406:	d9fa      	bls.n	800d3fe <_free_r+0x42>
 800d408:	6811      	ldr	r1, [r2, #0]
 800d40a:	1850      	adds	r0, r2, r1
 800d40c:	42a0      	cmp	r0, r4
 800d40e:	d10b      	bne.n	800d428 <_free_r+0x6c>
 800d410:	6820      	ldr	r0, [r4, #0]
 800d412:	4401      	add	r1, r0
 800d414:	1850      	adds	r0, r2, r1
 800d416:	4283      	cmp	r3, r0
 800d418:	6011      	str	r1, [r2, #0]
 800d41a:	d1e0      	bne.n	800d3de <_free_r+0x22>
 800d41c:	6818      	ldr	r0, [r3, #0]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	6053      	str	r3, [r2, #4]
 800d422:	4408      	add	r0, r1
 800d424:	6010      	str	r0, [r2, #0]
 800d426:	e7da      	b.n	800d3de <_free_r+0x22>
 800d428:	d902      	bls.n	800d430 <_free_r+0x74>
 800d42a:	230c      	movs	r3, #12
 800d42c:	602b      	str	r3, [r5, #0]
 800d42e:	e7d6      	b.n	800d3de <_free_r+0x22>
 800d430:	6820      	ldr	r0, [r4, #0]
 800d432:	1821      	adds	r1, r4, r0
 800d434:	428b      	cmp	r3, r1
 800d436:	bf04      	itt	eq
 800d438:	6819      	ldreq	r1, [r3, #0]
 800d43a:	685b      	ldreq	r3, [r3, #4]
 800d43c:	6063      	str	r3, [r4, #4]
 800d43e:	bf04      	itt	eq
 800d440:	1809      	addeq	r1, r1, r0
 800d442:	6021      	streq	r1, [r4, #0]
 800d444:	6054      	str	r4, [r2, #4]
 800d446:	e7ca      	b.n	800d3de <_free_r+0x22>
 800d448:	bd38      	pop	{r3, r4, r5, pc}
 800d44a:	bf00      	nop
 800d44c:	20006ab4 	.word	0x20006ab4

0800d450 <__malloc_lock>:
 800d450:	4801      	ldr	r0, [pc, #4]	@ (800d458 <__malloc_lock+0x8>)
 800d452:	f7ff bfa3 	b.w	800d39c <__retarget_lock_acquire_recursive>
 800d456:	bf00      	nop
 800d458:	20006ab0 	.word	0x20006ab0

0800d45c <__malloc_unlock>:
 800d45c:	4801      	ldr	r0, [pc, #4]	@ (800d464 <__malloc_unlock+0x8>)
 800d45e:	f7ff bf9e 	b.w	800d39e <__retarget_lock_release_recursive>
 800d462:	bf00      	nop
 800d464:	20006ab0 	.word	0x20006ab0

0800d468 <_init>:
 800d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46a:	bf00      	nop
 800d46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d46e:	bc08      	pop	{r3}
 800d470:	469e      	mov	lr, r3
 800d472:	4770      	bx	lr

0800d474 <_fini>:
 800d474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d476:	bf00      	nop
 800d478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47a:	bc08      	pop	{r3}
 800d47c:	469e      	mov	lr, r3
 800d47e:	4770      	bx	lr
