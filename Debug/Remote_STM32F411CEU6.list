
Remote_STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc50  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800cdf0  0800cdf0  0000ddf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d010  0800d010  0000f150  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d010  0800d010  0000e010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d018  0800d018  0000f150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d018  0800d018  0000e018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d01c  0800d01c  0000e01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800d020  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006900  20000150  0800d170  0000f150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006a50  0800d170  0000fa50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f4b  00000000  00000000  0000f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ae9  00000000  00000000  000360cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c0  00000000  00000000  0003bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a0b  00000000  00000000  0003dd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000077c9  00000000  00000000  0003f783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028a25  00000000  00000000  00046f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac082  00000000  00000000  0006f971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b9f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000918c  00000000  00000000  0011ba38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00124bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cdd8 	.word	0x0800cdd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800cdd8 	.word	0x0800cdd8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 fbfa 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f848 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f9ca 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 f9a8 	bl	8000870 <MX_DMA_Init>
  MX_SPI1_Init();
 8000520:	f000 f970 	bl	8000804 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000524:	f000 f940 	bl	80007a8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000528:	f000 f8a6 	bl	8000678 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052c:	f009 f8a8 	bl	8009680 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000530:	4a11      	ldr	r2, [pc, #68]	@ (8000578 <main+0x6c>)
 8000532:	2100      	movs	r1, #0
 8000534:	4811      	ldr	r0, [pc, #68]	@ (800057c <main+0x70>)
 8000536:	f009 f8ed 	bl	8009714 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a10      	ldr	r2, [pc, #64]	@ (8000580 <main+0x74>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of send_usb_data */
  send_usb_dataHandle = osThreadNew(send_usb_data_func, NULL, &send_usb_data_attributes);
 8000540:	4a10      	ldr	r2, [pc, #64]	@ (8000584 <main+0x78>)
 8000542:	2100      	movs	r1, #0
 8000544:	4810      	ldr	r0, [pc, #64]	@ (8000588 <main+0x7c>)
 8000546:	f009 f8e5 	bl	8009714 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0f      	ldr	r2, [pc, #60]	@ (800058c <main+0x80>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of read_nrf */
  read_nrfHandle = osThreadNew(read_nrf_func, NULL, &read_nrf_attributes);
 8000550:	4a0f      	ldr	r2, [pc, #60]	@ (8000590 <main+0x84>)
 8000552:	2100      	movs	r1, #0
 8000554:	480f      	ldr	r0, [pc, #60]	@ (8000594 <main+0x88>)
 8000556:	f009 f8dd 	bl	8009714 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <main+0x8c>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of send_nrf */
  send_nrfHandle = osThreadNew(send_nrf_func, NULL, &send_nrf_attributes);
 8000560:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <main+0x90>)
 8000562:	2100      	movs	r1, #0
 8000564:	480e      	ldr	r0, [pc, #56]	@ (80005a0 <main+0x94>)
 8000566:	f009 f8d5 	bl	8009714 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0d      	ldr	r2, [pc, #52]	@ (80005a4 <main+0x98>)
 800056e:	6013      	str	r3, [r2, #0]

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000570:	f009 f8aa 	bl	80096c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <main+0x68>
 8000578:	0800cf48 	.word	0x0800cf48
 800057c:	08000a1d 	.word	0x08000a1d
 8000580:	200002c0 	.word	0x200002c0
 8000584:	0800cf6c 	.word	0x0800cf6c
 8000588:	08000a49 	.word	0x08000a49
 800058c:	200002c4 	.word	0x200002c4
 8000590:	0800cf90 	.word	0x0800cf90
 8000594:	08000a59 	.word	0x08000a59
 8000598:	200002c8 	.word	0x200002c8
 800059c:	0800cfb4 	.word	0x0800cfb4
 80005a0:	08000a69 	.word	0x08000a69
 80005a4:	200002cc 	.word	0x200002cc

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	@ 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f00c fb1e 	bl	800cbf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <SystemClock_Config+0xc8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a26      	ldr	r2, [pc, #152]	@ (8000670 <SystemClock_Config+0xc8>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <SystemClock_Config+0xc8>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <SystemClock_Config+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <SystemClock_Config+0xcc>)
 80005f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <SystemClock_Config+0xcc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800060c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000618:	2319      	movs	r3, #25
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800061c:	23c0      	movs	r3, #192	@ 0xc0
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f004 fab3 	bl	8004b98 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 fa2d 	bl	8000a96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2103      	movs	r1, #3
 8000658:	4618      	mov	r0, r3
 800065a:	f004 fd15 	bl	8005088 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000664:	f000 fa17 	bl	8000a96 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	@ 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068a:	4b44      	ldr	r3, [pc, #272]	@ (800079c <MX_ADC1_Init+0x124>)
 800068c:	4a44      	ldr	r2, [pc, #272]	@ (80007a0 <MX_ADC1_Init+0x128>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000690:	4b42      	ldr	r3, [pc, #264]	@ (800079c <MX_ADC1_Init+0x124>)
 8000692:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000696:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000698:	4b40      	ldr	r3, [pc, #256]	@ (800079c <MX_ADC1_Init+0x124>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800069e:	4b3f      	ldr	r3, [pc, #252]	@ (800079c <MX_ADC1_Init+0x124>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a4:	4b3d      	ldr	r3, [pc, #244]	@ (800079c <MX_ADC1_Init+0x124>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006aa:	4b3c      	ldr	r3, [pc, #240]	@ (800079c <MX_ADC1_Init+0x124>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <MX_ADC1_Init+0x124>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b8:	4b38      	ldr	r3, [pc, #224]	@ (800079c <MX_ADC1_Init+0x124>)
 80006ba:	4a3a      	ldr	r2, [pc, #232]	@ (80007a4 <MX_ADC1_Init+0x12c>)
 80006bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006be:	4b37      	ldr	r3, [pc, #220]	@ (800079c <MX_ADC1_Init+0x124>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80006c4:	4b35      	ldr	r3, [pc, #212]	@ (800079c <MX_ADC1_Init+0x124>)
 80006c6:	2206      	movs	r2, #6
 80006c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ca:	4b34      	ldr	r3, [pc, #208]	@ (800079c <MX_ADC1_Init+0x124>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b32      	ldr	r3, [pc, #200]	@ (800079c <MX_ADC1_Init+0x124>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d8:	4830      	ldr	r0, [pc, #192]	@ (800079c <MX_ADC1_Init+0x124>)
 80006da:	f001 fb7b 	bl	8001dd4 <HAL_ADC_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006e4:	f000 f9d7 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006f0:	2307      	movs	r3, #7
 80006f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4828      	ldr	r0, [pc, #160]	@ (800079c <MX_ADC1_Init+0x124>)
 80006fa:	f001 fddb 	bl	80022b4 <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000704:	f000 f9c7 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000708:	2302      	movs	r3, #2
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4821      	ldr	r0, [pc, #132]	@ (800079c <MX_ADC1_Init+0x124>)
 8000716:	f001 fdcd 	bl	80022b4 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000720:	f000 f9b9 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000724:	2303      	movs	r3, #3
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000728:	2303      	movs	r3, #3
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	481a      	ldr	r0, [pc, #104]	@ (800079c <MX_ADC1_Init+0x124>)
 8000732:	f001 fdbf 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800073c:	f000 f9ab 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000740:	2304      	movs	r3, #4
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4813      	ldr	r0, [pc, #76]	@ (800079c <MX_ADC1_Init+0x124>)
 800074e:	f001 fdb1 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000758:	f000 f99d 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800075c:	2305      	movs	r3, #5
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000760:	2305      	movs	r3, #5
 8000762:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <MX_ADC1_Init+0x124>)
 800076a:	f001 fda3 	bl	80022b4 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000774:	f000 f98f 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000778:	2306      	movs	r3, #6
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800077c:	2306      	movs	r3, #6
 800077e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_ADC1_Init+0x124>)
 8000786:	f001 fd95 	bl	80022b4 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000790:	f000 f981 	bl	8000a96 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000016c 	.word	0x2000016c
 80007a0:	40012000 	.word	0x40012000
 80007a4:	0f000001 	.word	0x0f000001

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f002 fe41 	bl	800346c <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f951 	bl	8000a96 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000214 	.word	0x20000214
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2220      	movs	r2, #32
 800083a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f004 fe15 	bl	8005484 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f919 	bl	8000a96 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000268 	.word	0x20000268
 800086c:	40013000 	.word	0x40013000

08000870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_DMA_Init+0x3c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <MX_DMA_Init+0x3c>)
 8000880:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_DMA_Init+0x3c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2105      	movs	r1, #5
 8000896:	2038      	movs	r0, #56	@ 0x38
 8000898:	f002 f87e 	bl	8002998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800089c:	2038      	movs	r0, #56	@ 0x38
 800089e:	f002 f897 	bl	80029d0 <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b50      	ldr	r3, [pc, #320]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a4f      	ldr	r2, [pc, #316]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b4d      	ldr	r3, [pc, #308]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b49      	ldr	r3, [pc, #292]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a48      	ldr	r2, [pc, #288]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b46      	ldr	r3, [pc, #280]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b42      	ldr	r3, [pc, #264]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a41      	ldr	r2, [pc, #260]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a3a      	ldr	r2, [pc, #232]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093c:	4834      	ldr	r0, [pc, #208]	@ (8000a10 <MX_GPIO_Init+0x160>)
 800093e:	f002 fd61 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000948:	4832      	ldr	r0, [pc, #200]	@ (8000a14 <MX_GPIO_Init+0x164>)
 800094a:	f002 fd5b 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000954:	4830      	ldr	r0, [pc, #192]	@ (8000a18 <MX_GPIO_Init+0x168>)
 8000956:	f002 fd55 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800095a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000960:	2311      	movs	r3, #17
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4827      	ldr	r0, [pc, #156]	@ (8000a10 <MX_GPIO_Init+0x160>)
 8000974:	f002 fbaa 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_Pin BP_G_Pin DSW_0_Pin */
  GPIO_InitStruct.Pin = BP_Pin|BP_G_Pin|DSW_0_Pin;
 8000978:	f240 1381 	movw	r3, #385	@ 0x181
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4822      	ldr	r0, [pc, #136]	@ (8000a18 <MX_GPIO_Init+0x168>)
 800098e:	f002 fb9d 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_M_Pin BP_D_Pin BP_SEL_Pin BP_JOY_Pin
                           DSW_3_Pin DSW_2_Pin DSW_1_Pin */
  GPIO_InitStruct.Pin = BP_M_Pin|BP_D_Pin|BP_SEL_Pin|BP_JOY_Pin
 8000992:	f24f 0307 	movw	r3, #61447	@ 0xf007
 8000996:	617b      	str	r3, [r7, #20]
                          |DSW_3_Pin|DSW_2_Pin|DSW_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099c:	2301      	movs	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	481b      	ldr	r0, [pc, #108]	@ (8000a14 <MX_GPIO_Init+0x164>)
 80009a8:	f002 fb90 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|NRF_CE_Pin;
 80009ac:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <MX_GPIO_Init+0x164>)
 80009c6:	f002 fb81 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 80009ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <MX_GPIO_Init+0x168>)
 80009e4:	f002 fb72 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80009e8:	2380      	movs	r3, #128	@ 0x80
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_GPIO_Init+0x164>)
 80009fe:	f002 fb65 	bl	80030cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	@ 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020800 	.word	0x40020800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40020000 	.word	0x40020000

08000a1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a24:	f00b fbd8 	bl	800c1d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)readvalue, 6);
 8000a28:	2206      	movs	r2, #6
 8000a2a:	4905      	ldr	r1, [pc, #20]	@ (8000a40 <StartDefaultTask+0x24>)
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <StartDefaultTask+0x28>)
 8000a2e:	f001 fb25 	bl	800207c <HAL_ADC_Start_DMA>
  runRadio();
 8000a32:	f000 fe7b 	bl	800172c <runRadio>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f008 fefe 	bl	8009838 <osDelay>
 8000a3c:	e7fb      	b.n	8000a36 <StartDefaultTask+0x1a>
 8000a3e:	bf00      	nop
 8000a40:	200002dc 	.word	0x200002dc
 8000a44:	2000016c 	.word	0x2000016c

08000a48 <send_usb_data_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_usb_data_func */
void send_usb_data_func(void *argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_usb_data_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f008 fef1 	bl	8009838 <osDelay>
 8000a56:	e7fb      	b.n	8000a50 <send_usb_data_func+0x8>

08000a58 <read_nrf_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_nrf_func */
void read_nrf_func(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_nrf_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f008 fee9 	bl	8009838 <osDelay>
 8000a66:	e7fb      	b.n	8000a60 <read_nrf_func+0x8>

08000a68 <send_nrf_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_nrf_func */
void send_nrf_func(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_nrf_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f008 fee1 	bl	8009838 <osDelay>
 8000a76:	e7fb      	b.n	8000a70 <send_nrf_func+0x8>

08000a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a88:	d101      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a8a:	f001 f95f 	bl	8001d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9a:	b672      	cpsid	i
}
 8000a9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9e:	bf00      	nop
 8000aa0:	e7fd      	b.n	8000a9e <Error_Handler+0x8>
	...

08000aa4 <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aae:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <nRF24_CSN_L+0x14>)
 8000ab0:	f002 fca8 	bl	8003404 <HAL_GPIO_WritePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40020000 	.word	0x40020000

08000abc <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ac6:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <nRF24_CSN_H+0x14>)
 8000ac8:	f002 fc9c 	bl	8003404 <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 8000ade:	f107 020f 	add.w	r2, r7, #15
 8000ae2:	1df9      	adds	r1, r7, #7
 8000ae4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2301      	movs	r3, #1
 8000aec:	4806      	ldr	r0, [pc, #24]	@ (8000b08 <nRF24_LL_RW+0x34>)
 8000aee:	f004 fd52 	bl	8005596 <HAL_SPI_TransmitReceive>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <nRF24_LL_RW+0x28>
        Error_Handler();
 8000af8:	f7ff ffcd 	bl	8000a96 <Error_Handler>
    };
    return result;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000268 	.word	0x20000268

08000b0c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000b16:	f7ff ffc5 	bl	8000aa4 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 031f 	and.w	r3, r3, #31
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffd6 	bl	8000ad4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000b28:	20ff      	movs	r0, #255	@ 0xff
 8000b2a:	f7ff ffd3 	bl	8000ad4 <nRF24_LL_RW>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000b32:	f7ff ffc3 	bl	8000abc <nRF24_CSN_H>

	return value;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	460a      	mov	r2, r1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000b50:	f7ff ffa8 	bl	8000aa4 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b1f      	cmp	r3, #31
 8000b58:	d810      	bhi.n	8000b7c <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	f003 031f 	and.w	r3, r3, #31
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ffb1 	bl	8000ad4 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000b72:	79bb      	ldrb	r3, [r7, #6]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffad 	bl	8000ad4 <nRF24_LL_RW>
 8000b7a:	e013      	b.n	8000ba4 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffa8 	bl	8000ad4 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2be1      	cmp	r3, #225	@ 0xe1
 8000b88:	d00c      	beq.n	8000ba4 <nRF24_WriteReg+0x64>
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2be2      	cmp	r3, #226	@ 0xe2
 8000b8e:	d009      	beq.n	8000ba4 <nRF24_WriteReg+0x64>
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2be3      	cmp	r3, #227	@ 0xe3
 8000b94:	d006      	beq.n	8000ba4 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2bff      	cmp	r3, #255	@ 0xff
 8000b9a:	d003      	beq.n	8000ba4 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff98 	bl	8000ad4 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000ba4:	f7ff ff8a 	bl	8000abc <nRF24_CSN_H>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000bc0:	f7ff ff70 	bl	8000aa4 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff84 	bl	8000ad4 <nRF24_LL_RW>
	while (count--) {
 8000bcc:	e007      	b.n	8000bde <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000bce:	683c      	ldr	r4, [r7, #0]
 8000bd0:	1c63      	adds	r3, r4, #1
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	20ff      	movs	r0, #255	@ 0xff
 8000bd6:	f7ff ff7d 	bl	8000ad4 <nRF24_LL_RW>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000bde:	79bb      	ldrb	r3, [r7, #6]
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	71ba      	strb	r2, [r7, #6]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f2      	bne.n	8000bce <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000be8:	f7ff ff68 	bl	8000abc <nRF24_CSN_H>
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	4613      	mov	r3, r2
 8000c02:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000c04:	f7ff ff4e 	bl	8000aa4 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff62 	bl	8000ad4 <nRF24_LL_RW>
	while (count--) {
 8000c10:	e006      	b.n	8000c20 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	603a      	str	r2, [r7, #0]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff5a 	bl	8000ad4 <nRF24_LL_RW>
	while (count--) {
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	71ba      	strb	r2, [r7, #6]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f3      	bne.n	8000c12 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000c2a:	f7ff ff47 	bl	8000abc <nRF24_CSN_H>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ff7f 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000c42:	213f      	movs	r1, #63	@ 0x3f
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ff7b 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f7ff ff77 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000c52:	2103      	movs	r1, #3
 8000c54:	2003      	movs	r0, #3
 8000c56:	f7ff ff73 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000c5a:	2103      	movs	r1, #3
 8000c5c:	2004      	movs	r0, #4
 8000c5e:	f7ff ff6f 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8000c62:	2102      	movs	r1, #2
 8000c64:	2005      	movs	r0, #5
 8000c66:	f7ff ff6b 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000c6a:	210e      	movs	r1, #14
 8000c6c:	2006      	movs	r0, #6
 8000c6e:	f7ff ff67 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8000c72:	2100      	movs	r1, #0
 8000c74:	2007      	movs	r0, #7
 8000c76:	f7ff ff63 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2011      	movs	r0, #17
 8000c7e:	f7ff ff5f 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000c82:	2100      	movs	r1, #0
 8000c84:	2012      	movs	r0, #18
 8000c86:	f7ff ff5b 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2013      	movs	r0, #19
 8000c8e:	f7ff ff57 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000c92:	2100      	movs	r1, #0
 8000c94:	2014      	movs	r0, #20
 8000c96:	f7ff ff53 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2015      	movs	r0, #21
 8000c9e:	f7ff ff4f 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2016      	movs	r0, #22
 8000ca6:	f7ff ff4b 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8000caa:	2100      	movs	r1, #0
 8000cac:	201c      	movs	r0, #28
 8000cae:	f7ff ff47 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	201d      	movs	r0, #29
 8000cb6:	f7ff ff43 	bl	8000b40 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8000cba:	f000 f9cd 	bl	8001058 <nRF24_FlushRX>
	nRF24_FlushTX();
 8000cbe:	f000 f9c3 	bl	8001048 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8000cc2:	f000 f9d1 	bl	8001068 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000cc6:	f7ff fef9 	bl	8000abc <nRF24_CSN_H>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <nRF24_Check+0x58>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000cda:	2205      	movs	r2, #5
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	2030      	movs	r0, #48	@ 0x30
 8000ce0:	f7ff ff88 	bl	8000bf4 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2010      	movs	r0, #16
 8000cec:	f7ff ff60 	bl	8000bb0 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73fb      	strb	r3, [r7, #15]
 8000cf4:	e00f      	b.n	8000d16 <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3310      	adds	r3, #16
 8000cfa:	443b      	add	r3, r7
 8000cfc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c59      	adds	r1, r3, #1
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d001      	beq.n	8000d10 <nRF24_Check+0x40>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e006      	b.n	8000d1e <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	3301      	adds	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d9ec      	bls.n	8000cf6 <nRF24_Check+0x26>
	}

	return 1;
 8000d1c:	2301      	movs	r3, #1
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	0800ce24 	.word	0x0800ce24

08000d2c <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fee8 	bl	8000b0c <nRF24_ReadReg>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d104      	bne.n	8000d50 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e003      	b.n	8000d58 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	f023 0302 	bic.w	r3, r3, #2
 8000d56:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff feef 	bl	8000b40 <nRF24_WriteReg>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fec9 	bl	8000b0c <nRF24_ReadReg>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fece 	bl	8000b40 <nRF24_WriteReg>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fea8 	bl	8000b0c <nRF24_ReadReg>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	f023 030c 	bic.w	r3, r3, #12
 8000dc6:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	b25a      	sxtb	r2, r3
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	4619      	mov	r1, r3
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff fead 	bl	8000b40 <nRF24_WriteReg>
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f7ff fe9f 	bl	8000b40 <nRF24_WriteReg>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	3b02      	subs	r3, #2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f7ff fe8f 	bl	8000b40 <nRF24_WriteReg>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d00a      	beq.n	8000e54 <nRF24_SetAddr+0x28>
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	dc36      	bgt.n	8000eb0 <nRF24_SetAddr+0x84>
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	dc02      	bgt.n	8000e4c <nRF24_SetAddr+0x20>
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	da04      	bge.n	8000e54 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8000e4a:	e031      	b.n	8000eb0 <nRF24_SetAddr+0x84>
 8000e4c:	3b02      	subs	r3, #2
	switch (pipe) {
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d82e      	bhi.n	8000eb0 <nRF24_SetAddr+0x84>
 8000e52:	e023      	b.n	8000e9c <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000e54:	2003      	movs	r0, #3
 8000e56:	f7ff fe59 	bl	8000b0c <nRF24_ReadReg>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8000e68:	f7ff fe1c 	bl	8000aa4 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a13      	ldr	r2, [pc, #76]	@ (8000ebc <nRF24_SetAddr+0x90>)
 8000e70:	5cd3      	ldrb	r3, [r2, r3]
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe2b 	bl	8000ad4 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	1e5a      	subs	r2, r3, #1
 8000e82:	603a      	str	r2, [r7, #0]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fe24 	bl	8000ad4 <nRF24_LL_RW>
			} while (addr_width--);
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	73fa      	strb	r2, [r7, #15]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f3      	bne.n	8000e7e <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8000e96:	f7ff fe11 	bl	8000abc <nRF24_CSN_H>
			break;
 8000e9a:	e00a      	b.n	8000eb2 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <nRF24_SetAddr+0x90>)
 8000ea0:	5cd2      	ldrb	r2, [r2, r3]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	f7ff fe49 	bl	8000b40 <nRF24_WriteReg>
			break;
 8000eae:	e000      	b.n	8000eb2 <nRF24_SetAddr+0x86>
			break;
 8000eb0:	bf00      	nop
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	0800cfe0 	.word	0x0800cfe0

08000ec0 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000eca:	2006      	movs	r0, #6
 8000ecc:	f7ff fe1e 	bl	8000b0c <nRF24_ReadReg>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f023 0306 	bic.w	r3, r3, #6
 8000eda:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	2006      	movs	r0, #6
 8000eea:	f7ff fe29 	bl	8000b40 <nRF24_WriteReg>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000f00:	2006      	movs	r0, #6
 8000f02:	f7ff fe03 	bl	8000b0c <nRF24_ReadReg>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000f10:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f7ff fe0e 	bl	8000b40 <nRF24_WriteReg>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	460b      	mov	r3, r1
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f7ff fde4 	bl	8000b0c <nRF24_ReadReg>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f5c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	4619      	mov	r1, r3
 8000f62:	2002      	movs	r0, #2
 8000f64:	f7ff fdec 	bl	8000b40 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a19      	ldr	r2, [pc, #100]	@ (8000fd0 <nRF24_SetRXPipe+0xa4>)
 8000f6c:	5cd2      	ldrb	r2, [r2, r3]
 8000f6e:	797b      	ldrb	r3, [r7, #5]
 8000f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	4610      	mov	r0, r2
 8000f7a:	f7ff fde1 	bl	8000b40 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff fdc4 	bl	8000b0c <nRF24_ReadReg>
 8000f84:	4603      	mov	r3, r0
 8000f86:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d10a      	bne.n	8000fa4 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2201      	movs	r2, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	b25a      	sxtb	r2, r3
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e00b      	b.n	8000fbc <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff fdbd 	bl	8000b40 <nRF24_WriteReg>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	0800cfd8 	.word	0x0800cfd8

08000fd4 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d904      	bls.n	8000fee <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff fdaa 	bl	8000b40 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8000fec:	e015      	b.n	800101a <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff fd8c 	bl	8000b0c <nRF24_ReadReg>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	b25b      	sxtb	r3, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	b25a      	sxtb	r2, r3
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4013      	ands	r3, r2
 800100c:	b25b      	sxtb	r3, r3
 800100e:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	4619      	mov	r1, r3
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff fd93 	bl	8000b40 <nRF24_WriteReg>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8001026:	2007      	movs	r0, #7
 8001028:	f7ff fd70 	bl	8000b0c <nRF24_ReadReg>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}

08001032 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8001036:	2017      	movs	r0, #23
 8001038:	f7ff fd68 	bl	8000b0c <nRF24_ReadReg>
 800103c:	4603      	mov	r3, r0
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}

08001048 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800104c:	21ff      	movs	r1, #255	@ 0xff
 800104e:	20e1      	movs	r0, #225	@ 0xe1
 8001050:	f7ff fd76 	bl	8000b40 <nRF24_WriteReg>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800105c:	21ff      	movs	r1, #255	@ 0xff
 800105e:	20e2      	movs	r0, #226	@ 0xe2
 8001060:	f7ff fd6e 	bl	8000b40 <nRF24_WriteReg>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800106e:	2007      	movs	r0, #7
 8001070:	f7ff fd4c 	bl	8000b0c <nRF24_ReadReg>
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800107e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4619      	mov	r1, r3
 8001084:	2007      	movs	r0, #7
 8001086:	f7ff fd5b 	bl	8000b40 <nRF24_WriteReg>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	461a      	mov	r2, r3
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	20a0      	movs	r0, #160	@ 0xa0
 80010a6:	f7ff fda5 	bl	8000bf4 <nRF24_WriteMBReg>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 80010b8:	f7ff fcf4 	bl	8000aa4 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 80010bc:	2060      	movs	r0, #96	@ 0x60
 80010be:	f7ff fd09 	bl	8000ad4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80010c2:	20ff      	movs	r0, #255	@ 0xff
 80010c4:	f7ff fd06 	bl	8000ad4 <nRF24_LL_RW>
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 80010cc:	f7ff fcf6 	bl	8000abc <nRF24_CSN_H>

	return value;
 80010d0:	79fb      	ldrb	r3, [r7, #7]

}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80010ea:	2007      	movs	r0, #7
 80010ec:	f7ff fd0e 	bl	8000b0c <nRF24_ReadReg>
 80010f0:	4603      	mov	r3, r0
 80010f2:	105b      	asrs	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b05      	cmp	r3, #5
 8001100:	d829      	bhi.n	8001156 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00f      	beq.n	8001128 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8001108:	f7ff ffd3 	bl	80010b2 <nRF24_GetRxDplPayloadWidth>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b20      	cmp	r3, #32
 800111a:	d90f      	bls.n	800113c <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8001122:	f7ff ff99 	bl	8001058 <nRF24_FlushRX>
 8001126:	e009      	b.n	800113c <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <nRF24_ReadPayloadGeneric+0x8c>)
 800112c:	5cd3      	ldrb	r3, [r2, r3]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fcec 	bl	8000b0c <nRF24_ReadReg>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	68f9      	ldr	r1, [r7, #12]
 800114c:	2061      	movs	r0, #97	@ 0x61
 800114e:	f7ff fd2f 	bl	8000bb0 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	e003      	b.n	800115e <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800115c:	23ff      	movs	r3, #255	@ 0xff
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	0800cfd8 	.word	0x0800cfd8

0800116c <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 8001176:	2200      	movs	r2, #0
 8001178:	6839      	ldr	r1, [r7, #0]
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffae 	bl	80010dc <nRF24_ReadPayloadGeneric>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2140      	movs	r1, #64	@ 0x40
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <nRF24_CE_L+0x14>)
 8001196:	f002 f935 	bl	8003404 <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40020400 	.word	0x40020400

080011a4 <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2140      	movs	r1, #64	@ 0x40
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <nRF24_CE_H+0x14>)
 80011ae:	f002 f929 	bl	8003404 <HAL_GPIO_WritePin>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020400 	.word	0x40020400

080011bc <UART_SendChar>:
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);



void UART_SendChar(char b)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    //HAL_UART_Transmit(&huart2, (uint8_t *) &b, 1, 200);
    CDC_Transmit_FS((uint8_t *) &b, 1);
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00b f8c2 	bl	800c354 <CDC_Transmit_FS>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <UART_SendStr>:

void UART_SendStr(char *string)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t *) string, (uint16_t) strlen(string), 200);

	CDC_Transmit_FS((uint8_t *) string,sizeof(string));
 80011e0:	2104      	movs	r1, #4
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f00b f8b6 	bl	800c354 <CDC_Transmit_FS>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <Toggle_LED>:

void Toggle_LED()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80011f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <Toggle_LED+0x1c>)
 80011fa:	f002 f91c 	bl	8003436 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 80011fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <Toggle_LED+0x20>)
 8001204:	f002 f917 	bl	8003436 <HAL_GPIO_TogglePin>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40020800 	.word	0x40020800
 8001210:	40020400 	.word	0x40020400

08001214 <UART_SendBufHex>:

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8001220:	2300      	movs	r3, #0
 8001222:	81fb      	strh	r3, [r7, #14]
 8001224:	e018      	b.n	8001258 <UART_SendBufHex+0x44>
        ch = *buf++;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	737b      	strb	r3, [r7, #13]
        UART_SendChar(HEX_CHARS[(ch >> 4) % 0x10]);
 8001230:	7b7b      	ldrb	r3, [r7, #13]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <UART_SendBufHex+0x58>)
 800123a:	5c9b      	ldrb	r3, [r3, r2]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ffbd 	bl	80011bc <UART_SendChar>
        UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	4a08      	ldr	r2, [pc, #32]	@ (800126c <UART_SendBufHex+0x58>)
 800124a:	5cd3      	ldrb	r3, [r2, r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ffb5 	bl	80011bc <UART_SendChar>
    for (i = 0; i < bufsize; i++) {
 8001252:	89fb      	ldrh	r3, [r7, #14]
 8001254:	3301      	adds	r3, #1
 8001256:	81fb      	strh	r3, [r7, #14]
 8001258:	89fa      	ldrh	r2, [r7, #14]
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3e2      	bcc.n	8001226 <UART_SendBufHex+0x12>
    }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	0800ce2c 	.word	0x0800ce2c

08001270 <UART_SendHex8>:

void UART_SendHex8(uint16_t num) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
    UART_SendChar(HEX_CHARS[(num >> 4) % 0x10]);
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	b29b      	uxth	r3, r3
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <UART_SendHex8+0x38>)
 8001286:	5cd3      	ldrb	r3, [r2, r3]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff97 	bl	80011bc <UART_SendChar>
    UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <UART_SendHex8+0x38>)
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff8f 	bl	80011bc <UART_SendChar>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	0800ce2c 	.word	0x0800ce2c

080012ac <UART_SendInt>:

void UART_SendInt(int32_t num) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	da05      	bge.n	80012ca <UART_SendInt+0x1e>
        UART_SendChar('-');
 80012be:	202d      	movs	r0, #45	@ 0x2d
 80012c0:	f7ff ff7c 	bl	80011bc <UART_SendChar>
        num *= -1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	425b      	negs	r3, r3
 80012c8:	607b      	str	r3, [r7, #4]
    }
    do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <UART_SendInt+0x90>)
 80012ce:	fb83 1302 	smull	r1, r3, r3, r2
 80012d2:	1099      	asrs	r1, r3, #2
 80012d4:	17d3      	asrs	r3, r2, #31
 80012d6:	1ac9      	subs	r1, r1, r3
 80012d8:	460b      	mov	r3, r1
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	1ad1      	subs	r1, r2, r3
 80012e2:	b2ca      	uxtb	r2, r1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	1c59      	adds	r1, r3, #1
 80012e8:	6179      	str	r1, [r7, #20]
 80012ea:	3230      	adds	r2, #48	@ 0x30
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	3318      	adds	r3, #24
 80012f0:	443b      	add	r3, r7
 80012f2:	f803 2c10 	strb.w	r2, [r3, #-16]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a10      	ldr	r2, [pc, #64]	@ (800133c <UART_SendInt+0x90>)
 80012fa:	fb82 1203 	smull	r1, r2, r2, r3
 80012fe:	1092      	asrs	r2, r2, #2
 8001300:	17db      	asrs	r3, r3, #31
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	dcde      	bgt.n	80012ca <UART_SendInt+0x1e>
    for (i--; i >= 0; i--) UART_SendChar(str[i]);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3b01      	subs	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e00a      	b.n	800132a <UART_SendInt+0x7e>
 8001314:	f107 0208 	add.w	r2, r7, #8
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff4c 	bl	80011bc <UART_SendChar>
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3b01      	subs	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	daf1      	bge.n	8001314 <UART_SendInt+0x68>
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	66666667 	.word	0x66666667

08001340 <nRF24_TransmitPacket>:
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 800134c:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <nRF24_TransmitPacket+0x94>)
 800134e:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8001350:	f7ff ff1c 	bl	800118c <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fe9a 	bl	8001092 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 800135e:	f7ff ff21 	bl	80011a4 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8001362:	f7ff fe5e 	bl	8001022 <nRF24_GetStatus>
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001370:	2b00      	cmp	r3, #0
 8001372:	d105      	bne.n	8001380 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1e5a      	subs	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f1      	bne.n	8001362 <nRF24_TransmitPacket+0x22>
 800137e:	e000      	b.n	8001382 <nRF24_TransmitPacket+0x42>
			break;
 8001380:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8001382:	f7ff ff03 	bl	800118c <nRF24_CE_L>

	if (!wait) {
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 800138c:	2302      	movs	r3, #2
 800138e:	e01d      	b.n	80013cc <nRF24_TransmitPacket+0x8c>
	}

	// Check the flags in STATUS register
	UART_SendStr("[");
 8001390:	4811      	ldr	r0, [pc, #68]	@ (80013d8 <nRF24_TransmitPacket+0x98>)
 8001392:	f7ff ff21 	bl	80011d8 <UART_SendStr>
	UART_SendHex8(status);
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff68 	bl	8001270 <UART_SendHex8>
	UART_SendStr("] ");
 80013a0:	480e      	ldr	r0, [pc, #56]	@ (80013dc <nRF24_TransmitPacket+0x9c>)
 80013a2:	f7ff ff19 	bl	80011d8 <UART_SendStr>

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 80013a6:	f7ff fe5f 	bl	8001068 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <nRF24_TransmitPacket+0x78>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e009      	b.n	80013cc <nRF24_TransmitPacket+0x8c>
	}

	if (status & nRF24_FLAG_TX_DS) {
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	f003 0320 	and.w	r3, r3, #32
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <nRF24_TransmitPacket+0x86>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e002      	b.n	80013cc <nRF24_TransmitPacket+0x8c>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 80013c6:	f7ff fe3f 	bl	8001048 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	000fffff 	.word	0x000fffff
 80013d8:	0800ce40 	.word	0x0800ce40
 80013dc:	0800ce44 	.word	0x0800ce44

080013e0 <send_payload>:

void send_payload(uint8_t* payload, uint8_t length)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff fcbc 	bl	8000d6a <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 80013f2:	f7ff fe39 	bl	8001068 <nRF24_ClearIRQFlags>

	UART_SendStr("PAYLOAD:>");
 80013f6:	481f      	ldr	r0, [pc, #124]	@ (8001474 <send_payload+0x94>)
 80013f8:	f7ff feee 	bl	80011d8 <UART_SendStr>
	UART_SendBufHex((char *)payload, length);
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ff06 	bl	8001214 <UART_SendBufHex>
	UART_SendStr("< ... TX: ");
 8001408:	481b      	ldr	r0, [pc, #108]	@ (8001478 <send_payload+0x98>)
 800140a:	f7ff fee5 	bl	80011d8 <UART_SendStr>

	// Transmit a packet
	tx_res = nRF24_TransmitPacket(payload, length);
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	4619      	mov	r1, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ff94 	bl	8001340 <nRF24_TransmitPacket>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <send_payload+0x9c>)
 800141e:	701a      	strb	r2, [r3, #0]
	switch (tx_res) {
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <send_payload+0x9c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d00e      	beq.n	8001446 <send_payload+0x66>
 8001428:	2b03      	cmp	r3, #3
 800142a:	dc10      	bgt.n	800144e <send_payload+0x6e>
 800142c:	2b01      	cmp	r3, #1
 800142e:	d002      	beq.n	8001436 <send_payload+0x56>
 8001430:	2b02      	cmp	r3, #2
 8001432:	d004      	beq.n	800143e <send_payload+0x5e>
 8001434:	e00b      	b.n	800144e <send_payload+0x6e>
		case nRF24_TX_SUCCESS:
			UART_SendStr("OK");
 8001436:	4812      	ldr	r0, [pc, #72]	@ (8001480 <send_payload+0xa0>)
 8001438:	f7ff fece 	bl	80011d8 <UART_SendStr>
			break;
 800143c:	e00b      	b.n	8001456 <send_payload+0x76>
		case nRF24_TX_TIMEOUT:
			UART_SendStr("TIMEOUT");
 800143e:	4811      	ldr	r0, [pc, #68]	@ (8001484 <send_payload+0xa4>)
 8001440:	f7ff feca 	bl	80011d8 <UART_SendStr>
			break;
 8001444:	e007      	b.n	8001456 <send_payload+0x76>
		case nRF24_TX_MAXRT:
			UART_SendStr("MAX RETRANSMIT");
 8001446:	4810      	ldr	r0, [pc, #64]	@ (8001488 <send_payload+0xa8>)
 8001448:	f7ff fec6 	bl	80011d8 <UART_SendStr>
			break;
 800144c:	e003      	b.n	8001456 <send_payload+0x76>
		default:
			UART_SendStr("ERROR");
 800144e:	480f      	ldr	r0, [pc, #60]	@ (800148c <send_payload+0xac>)
 8001450:	f7ff fec2 	bl	80011d8 <UART_SendStr>
			break;
 8001454:	bf00      	nop
	}
	UART_SendStr("\r\n");
 8001456:	480e      	ldr	r0, [pc, #56]	@ (8001490 <send_payload+0xb0>)
 8001458:	f7ff febe 	bl	80011d8 <UART_SendStr>
	osDelay(5);
 800145c:	2005      	movs	r0, #5
 800145e:	f008 f9eb 	bl	8009838 <osDelay>
    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8001462:	2001      	movs	r0, #1
 8001464:	f7ff fc81 	bl	8000d6a <nRF24_SetOperationalMode>


    // Put the transceiver to the RX mode
    nRF24_CE_H();
 8001468:	f7ff fe9c 	bl	80011a4 <nRF24_CE_H>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	0800ce48 	.word	0x0800ce48
 8001478:	0800ce54 	.word	0x0800ce54
 800147c:	200002f6 	.word	0x200002f6
 8001480:	0800ce60 	.word	0x0800ce60
 8001484:	0800ce64 	.word	0x0800ce64
 8001488:	0800ce6c 	.word	0x0800ce6c
 800148c:	0800ce7c 	.word	0x0800ce7c
 8001490:	0800ce84 	.word	0x0800ce84

08001494 <ecretage_slide>:
	if 		(*val < 2048) *val = 2048 - range - (2048 - range - *val)*(2048 - range)/(2048 - 2*range);
	else if (2048 < *val) *val = 2048 + range + (*val - 2048 - range)*(2048 - range)/(2048 - 2*range);
}

void ecretage_slide(uint16_t* val)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	uint16_t range_b = 400;
 800149c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80014a0:	81fb      	strh	r3, [r7, #14]
	uint16_t range_h = 1600;
 80014a2:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 80014a6:	81bb      	strh	r3, [r7, #12]

	if		((4096 - range_h) < *val)	*val =  4096 - range_h;
 80014a8:	89bb      	ldrh	r3, [r7, #12]
 80014aa:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	8812      	ldrh	r2, [r2, #0]
 80014b2:	4293      	cmp	r3, r2
 80014b4:	da06      	bge.n	80014c4 <ecretage_slide+0x30>
 80014b6:	89bb      	ldrh	r3, [r7, #12]
 80014b8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80014bc:	b29a      	uxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	801a      	strh	r2, [r3, #0]
 80014c2:	e007      	b.n	80014d4 <ecretage_slide+0x40>
	else if (*val < range_b)		*val = 0 ;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	89fa      	ldrh	r2, [r7, #14]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d902      	bls.n	80014d4 <ecretage_slide+0x40>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	801a      	strh	r2, [r3, #0]
	*val = (*val*4096)/(4096 - range_h);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	031a      	lsls	r2, r3, #12
 80014da:	89bb      	ldrh	r3, [r7, #12]
 80014dc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80014e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	801a      	strh	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <sendCommande>:

void sendCommande(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001504:	e022      	b.n	800154c <sendCommande+0x54>
	{
		pot1 = (uint16_t) readvalue[0];
 8001506:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <sendCommande+0xec>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b36      	ldr	r3, [pc, #216]	@ (80015e8 <sendCommande+0xf0>)
 800150e:	801a      	strh	r2, [r3, #0]
		pot2 = (uint16_t) readvalue[1];
 8001510:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <sendCommande+0xec>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b35      	ldr	r3, [pc, #212]	@ (80015ec <sendCommande+0xf4>)
 8001518:	801a      	strh	r2, [r3, #0]
		pot3 = (uint16_t) readvalue[2];
 800151a:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <sendCommande+0xec>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <sendCommande+0xf8>)
 8001522:	801a      	strh	r2, [r3, #0]
		pot4 = (uint16_t) readvalue[3];
 8001524:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <sendCommande+0xec>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b32      	ldr	r3, [pc, #200]	@ (80015f4 <sendCommande+0xfc>)
 800152c:	801a      	strh	r2, [r3, #0]
		pot5 = (uint16_t) readvalue[4];
 800152e:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <sendCommande+0xec>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b30      	ldr	r3, [pc, #192]	@ (80015f8 <sendCommande+0x100>)
 8001536:	801a      	strh	r2, [r3, #0]
		pot6 = (uint16_t) readvalue[5];
 8001538:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <sendCommande+0xec>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b2f      	ldr	r3, [pc, #188]	@ (80015fc <sendCommande+0x104>)
 8001540:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
 8001542:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001546:	3301      	adds	r3, #1
 8001548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800154c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <sendCommande+0x108>)
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3d6      	bcc.n	8001506 <sendCommande+0xe>
	}
	uint8_t commande;
	if(HAL_GPIO_ReadPin (!BP_SEL_GPIO_Port, BP_SEL_Pin)) commande = 0xaa;
 8001558:	2104      	movs	r1, #4
 800155a:	2000      	movs	r0, #0
 800155c:	f001 ff3a 	bl	80033d4 <HAL_GPIO_ReadPin>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <sendCommande+0x76>
 8001566:	23aa      	movs	r3, #170	@ 0xaa
 8001568:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800156c:	e002      	b.n	8001574 <sendCommande+0x7c>
	else commande = 0xbb;
 800156e:	23bb      	movs	r3, #187	@ 0xbb
 8001570:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if(HAL_GPIO_ReadPin (!BP_GPIO_Port, BP_Pin)) commande = 0xcc;
 8001574:	2101      	movs	r1, #1
 8001576:	2000      	movs	r0, #0
 8001578:	f001 ff2c 	bl	80033d4 <HAL_GPIO_ReadPin>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <sendCommande+0x90>
 8001582:	23cc      	movs	r3, #204	@ 0xcc
 8001584:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	ecretage_slide(&pot2);
 8001588:	4818      	ldr	r0, [pc, #96]	@ (80015ec <sendCommande+0xf4>)
 800158a:	f7ff ff83 	bl	8001494 <ecretage_slide>
//	ecretage_joy(&pot3);
//	ecretage_joy(&pot4);

	uint8_t payload[32] = {commande,(uint8_t)(pot2/16),(uint8_t)(pot3/16),(uint8_t)(pot4/16),(uint8_t)(pot5/16)};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2220      	movs	r2, #32
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f00b fb2f 	bl	800cbf8 <memset>
 800159a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800159e:	713b      	strb	r3, [r7, #4]
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <sendCommande+0xf4>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	717b      	strb	r3, [r7, #5]
 80015ac:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <sendCommande+0xf8>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	71bb      	strb	r3, [r7, #6]
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <sendCommande+0xfc>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <sendCommande+0x100>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	723b      	strb	r3, [r7, #8]

	send_payload(payload, 5);
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2105      	movs	r1, #5
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff03 	bl	80013e0 <send_payload>
}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200002dc 	.word	0x200002dc
 80015e8:	200002d0 	.word	0x200002d0
 80015ec:	200002d2 	.word	0x200002d2
 80015f0:	200002d4 	.word	0x200002d4
 80015f4:	200002d6 	.word	0x200002d6
 80015f8:	200002d8 	.word	0x200002d8
 80015fc:	200002da 	.word	0x200002da
 8001600:	2000016c 	.word	0x2000016c

08001604 <channel>:

uint8_t channel(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
	uint8_t channel = 115;
 800160a:	2373      	movs	r3, #115	@ 0x73
 800160c:	71fb      	strb	r3, [r7, #7]
	uint8_t set_channel = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	71bb      	strb	r3, [r7, #6]
	if(!HAL_GPIO_ReadPin (DSW_0_GPIO_Port, DSW_0_Pin)) set_channel += 1;
 8001612:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001616:	4843      	ldr	r0, [pc, #268]	@ (8001724 <channel+0x120>)
 8001618:	f001 fedc 	bl	80033d4 <HAL_GPIO_ReadPin>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <channel+0x24>
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	3301      	adds	r3, #1
 8001626:	71bb      	strb	r3, [r7, #6]
	if(!HAL_GPIO_ReadPin (DSW_1_GPIO_Port, DSW_1_Pin)) set_channel += 2;
 8001628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800162c:	483e      	ldr	r0, [pc, #248]	@ (8001728 <channel+0x124>)
 800162e:	f001 fed1 	bl	80033d4 <HAL_GPIO_ReadPin>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <channel+0x3a>
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	3302      	adds	r3, #2
 800163c:	71bb      	strb	r3, [r7, #6]
	if(!HAL_GPIO_ReadPin (DSW_2_GPIO_Port, DSW_2_Pin)) set_channel += 4;
 800163e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001642:	4839      	ldr	r0, [pc, #228]	@ (8001728 <channel+0x124>)
 8001644:	f001 fec6 	bl	80033d4 <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <channel+0x50>
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	3304      	adds	r3, #4
 8001652:	71bb      	strb	r3, [r7, #6]
	if(!HAL_GPIO_ReadPin (DSW_3_GPIO_Port, DSW_3_Pin)) set_channel += 8;
 8001654:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001658:	4833      	ldr	r0, [pc, #204]	@ (8001728 <channel+0x124>)
 800165a:	f001 febb 	bl	80033d4 <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <channel+0x66>
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	3308      	adds	r3, #8
 8001668:	71bb      	strb	r3, [r7, #6]

	switch(set_channel)
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d853      	bhi.n	8001718 <channel+0x114>
 8001670:	a201      	add	r2, pc, #4	@ (adr r2, 8001678 <channel+0x74>)
 8001672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001676:	bf00      	nop
 8001678:	080016b9 	.word	0x080016b9
 800167c:	080016bf 	.word	0x080016bf
 8001680:	080016c5 	.word	0x080016c5
 8001684:	080016cb 	.word	0x080016cb
 8001688:	080016d1 	.word	0x080016d1
 800168c:	080016d7 	.word	0x080016d7
 8001690:	080016dd 	.word	0x080016dd
 8001694:	080016e3 	.word	0x080016e3
 8001698:	080016e9 	.word	0x080016e9
 800169c:	080016ef 	.word	0x080016ef
 80016a0:	080016f5 	.word	0x080016f5
 80016a4:	080016fb 	.word	0x080016fb
 80016a8:	08001701 	.word	0x08001701
 80016ac:	08001707 	.word	0x08001707
 80016b0:	0800170d 	.word	0x0800170d
 80016b4:	08001713 	.word	0x08001713
	{
	case 0 :
		channel = 115;
 80016b8:	2373      	movs	r3, #115	@ 0x73
 80016ba:	71fb      	strb	r3, [r7, #7]
		break;
 80016bc:	e02c      	b.n	8001718 <channel+0x114>
	case 1 :
		channel = 10;
 80016be:	230a      	movs	r3, #10
 80016c0:	71fb      	strb	r3, [r7, #7]
		break;
 80016c2:	e029      	b.n	8001718 <channel+0x114>
	case 2 :
		channel = 20;
 80016c4:	2314      	movs	r3, #20
 80016c6:	71fb      	strb	r3, [r7, #7]
		break;
 80016c8:	e026      	b.n	8001718 <channel+0x114>
	case 3 :
		channel = 30;
 80016ca:	231e      	movs	r3, #30
 80016cc:	71fb      	strb	r3, [r7, #7]
		break;
 80016ce:	e023      	b.n	8001718 <channel+0x114>
	case 4 :
		channel = 40;
 80016d0:	2328      	movs	r3, #40	@ 0x28
 80016d2:	71fb      	strb	r3, [r7, #7]
		break;
 80016d4:	e020      	b.n	8001718 <channel+0x114>
	case 5 :
		channel = 50;
 80016d6:	2332      	movs	r3, #50	@ 0x32
 80016d8:	71fb      	strb	r3, [r7, #7]
		break;
 80016da:	e01d      	b.n	8001718 <channel+0x114>
	case 6 :
		channel = 60;
 80016dc:	233c      	movs	r3, #60	@ 0x3c
 80016de:	71fb      	strb	r3, [r7, #7]
		break;
 80016e0:	e01a      	b.n	8001718 <channel+0x114>
	case 7 :
		channel = 70;
 80016e2:	2346      	movs	r3, #70	@ 0x46
 80016e4:	71fb      	strb	r3, [r7, #7]
		break;
 80016e6:	e017      	b.n	8001718 <channel+0x114>
	case 8 :
		channel = 80;
 80016e8:	2350      	movs	r3, #80	@ 0x50
 80016ea:	71fb      	strb	r3, [r7, #7]
		break;
 80016ec:	e014      	b.n	8001718 <channel+0x114>
	case 9 :
		channel = 90;
 80016ee:	235a      	movs	r3, #90	@ 0x5a
 80016f0:	71fb      	strb	r3, [r7, #7]
		break;
 80016f2:	e011      	b.n	8001718 <channel+0x114>
	case 10 :
		channel = 100;
 80016f4:	2364      	movs	r3, #100	@ 0x64
 80016f6:	71fb      	strb	r3, [r7, #7]
		break;
 80016f8:	e00e      	b.n	8001718 <channel+0x114>
	case 11 :
		channel = 110;
 80016fa:	236e      	movs	r3, #110	@ 0x6e
 80016fc:	71fb      	strb	r3, [r7, #7]
		break;
 80016fe:	e00b      	b.n	8001718 <channel+0x114>
	case 12 :
		channel = 120;
 8001700:	2378      	movs	r3, #120	@ 0x78
 8001702:	71fb      	strb	r3, [r7, #7]
		break;
 8001704:	e008      	b.n	8001718 <channel+0x114>
	case 13 :
		channel = 125;
 8001706:	237d      	movs	r3, #125	@ 0x7d
 8001708:	71fb      	strb	r3, [r7, #7]
		break;
 800170a:	e005      	b.n	8001718 <channel+0x114>
	case 14 :
		channel = 127;
 800170c:	237f      	movs	r3, #127	@ 0x7f
 800170e:	71fb      	strb	r3, [r7, #7]
		break;
 8001710:	e002      	b.n	8001718 <channel+0x114>
	case 15 :
		channel = 115;
 8001712:	2373      	movs	r3, #115	@ 0x73
 8001714:	71fb      	strb	r3, [r7, #7]
		break;
 8001716:	bf00      	nop
	}

	return channel;
 8001718:	79fb      	ldrb	r3, [r7, #7]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400

0800172c <runRadio>:

void runRadio(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
	UART_SendStr("\r\nSTM32F411CEU6 is online.\r\n");
 8001732:	484e      	ldr	r0, [pc, #312]	@ (800186c <runRadio+0x140>)
 8001734:	f7ff fd50 	bl	80011d8 <UART_SendStr>
	osDelay(1000);
 8001738:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800173c:	f008 f87c 	bl	8009838 <osDelay>
	// RX/TX disabled
	nRF24_CE_L();
 8001740:	f7ff fd24 	bl	800118c <nRF24_CE_L>

	// Configure the nRF24L01+
	UART_SendStr("nRF24L01+ check: ");
 8001744:	484a      	ldr	r0, [pc, #296]	@ (8001870 <runRadio+0x144>)
 8001746:	f7ff fd47 	bl	80011d8 <UART_SendStr>
	osDelay(1000);
 800174a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800174e:	f008 f873 	bl	8009838 <osDelay>
	if (!nRF24_Check())
 8001752:	f7ff fabd 	bl	8000cd0 <nRF24_Check>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10e      	bne.n	800177a <runRadio+0x4e>
	{
		UART_SendStr("FAIL\r\n");
 800175c:	4845      	ldr	r0, [pc, #276]	@ (8001874 <runRadio+0x148>)
 800175e:	f7ff fd3b 	bl	80011d8 <UART_SendStr>
		while (1)
		{
			Toggle_LED();
 8001762:	f7ff fd45 	bl	80011f0 <Toggle_LED>
			osDelay(100);
 8001766:	2064      	movs	r0, #100	@ 0x64
 8001768:	f008 f866 	bl	8009838 <osDelay>
			if (nRF24_Check()) break;
 800176c:	f7ff fab0 	bl	8000cd0 <nRF24_Check>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d100      	bne.n	8001778 <runRadio+0x4c>
			Toggle_LED();
 8001776:	e7f4      	b.n	8001762 <runRadio+0x36>
			if (nRF24_Check()) break;
 8001778:	bf00      	nop
		}
	}

	UART_SendStr("OK\r\n");
 800177a:	483f      	ldr	r0, [pc, #252]	@ (8001878 <runRadio+0x14c>)
 800177c:	f7ff fd2c 	bl	80011d8 <UART_SendStr>


	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 8001780:	f7ff fa59 	bl	8000c36 <nRF24_Init>
	//   - CRC scheme		: 2 byte

    // The transmitter sends a 5-byte packets to the address '0xE7 0x1C 0xE3' without Auto-ACK (ShockBurst disabled)

    // Disable ShockBurst for all RX pipes
    nRF24_DisableAA(0xFF);
 8001784:	20ff      	movs	r0, #255	@ 0xff
 8001786:	f7ff fc25 	bl	8000fd4 <nRF24_DisableAA>

    // Set RF channel
    nRF24_SetRFChannel(channel());
 800178a:	f7ff ff3b 	bl	8001604 <channel>
 800178e:	4603      	mov	r3, r0
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fb2c 	bl	8000dee <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_DR_250kbps);
 8001796:	2020      	movs	r0, #32
 8001798:	f7ff fbad 	bl	8000ef6 <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 800179c:	200c      	movs	r0, #12
 800179e:	f7ff fb05 	bl	8000dac <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 80017a2:	2003      	movs	r0, #3
 80017a4:	f7ff fb31 	bl	8000e0a <nRF24_SetAddrWidth>

    // Configure RX PIPE#1
    static const uint8_t nRF24_ADDR_Rx[] = { 0xE7, 0x1C, 0xE4 };
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR_Rx); // program address for RX pipe #1
 80017a8:	4934      	ldr	r1, [pc, #208]	@ (800187c <runRadio+0x150>)
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff fb3e 	bl	8000e2c <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 5); // Auto-ACK: disabled, payload length: 5 bytes
 80017b0:	2205      	movs	r2, #5
 80017b2:	2100      	movs	r1, #0
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff fbb9 	bl	8000f2c <nRF24_SetRXPipe>

    // Configure TX PIPE
    static const uint8_t nRF24_ADDR_Tx[] = { 0xE7, 0x1C, 0xE3 };
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR_Tx); // program TX address
 80017ba:	4931      	ldr	r1, [pc, #196]	@ (8001880 <runRadio+0x154>)
 80017bc:	2006      	movs	r0, #6
 80017be:	f7ff fb35 	bl	8000e2c <nRF24_SetAddr>

    // Set TX power (maximum)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 80017c2:	2006      	movs	r0, #6
 80017c4:	f7ff fb7c 	bl	8000ec0 <nRF24_SetTXPower>

    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff face 	bl	8000d6a <nRF24_SetOperationalMode>

    // Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 80017ce:	2002      	movs	r0, #2
 80017d0:	f7ff faac 	bl	8000d2c <nRF24_SetPowerMode>

    // Put the transceiver to the RX mode
    nRF24_CE_H();
 80017d4:	f7ff fce6 	bl	80011a4 <nRF24_CE_H>


    // The main loop
    uint32_t watch_dog = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t blink = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
    while (1) {

    	if (watch_dog++ > 100)
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d904      	bls.n	80017f4 <runRadio+0xc8>
    	{
    		watch_dog = 100;
 80017ea:	2364      	movs	r3, #100	@ 0x64
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
    		blink += 10;
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	330a      	adds	r3, #10
 80017f2:	623b      	str	r3, [r7, #32]
    	}

    	if(blink++ > 500)
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	623a      	str	r2, [r7, #32]
 80017fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017fe:	d903      	bls.n	8001808 <runRadio+0xdc>
    	{
    		blink = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
    		Toggle_LED();
 8001804:	f7ff fcf4 	bl	80011f0 <Toggle_LED>
    	}

    	osDelay(2);
 8001808:	2002      	movs	r0, #2
 800180a:	f008 f815 	bl	8009838 <osDelay>
    	sendCommande();
 800180e:	f7ff fe73 	bl	80014f8 <sendCommande>

    	// Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
    	//
    	// This is far from best solution, but it's ok for testing purposes
    	// More smart way is to use the IRQ pin :)
    	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8001812:	f7ff fc0e 	bl	8001032 <nRF24_GetStatus_RXFIFO>
 8001816:	4603      	mov	r3, r0
 8001818:	2b01      	cmp	r3, #1
 800181a:	d0e1      	beq.n	80017e0 <runRadio+0xb4>
    	{

    		uint8_t nRF24_payload[32];
    		// Get a payload from the transceiver
    		pipe = nRF24_ReadPayload(nRF24_payload, &payload_length);
 800181c:	463b      	mov	r3, r7
 800181e:	4919      	ldr	r1, [pc, #100]	@ (8001884 <runRadio+0x158>)
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fca3 	bl	800116c <nRF24_ReadPayload>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <runRadio+0x15c>)
 800182c:	701a      	strb	r2, [r3, #0]

    		// Clear all pending IRQ flags
			nRF24_ClearIRQFlags();
 800182e:	f7ff fc1b 	bl	8001068 <nRF24_ClearIRQFlags>

			// Print a payload contents to UART
			UART_SendStr("RCV PIPE#");
 8001832:	4816      	ldr	r0, [pc, #88]	@ (800188c <runRadio+0x160>)
 8001834:	f7ff fcd0 	bl	80011d8 <UART_SendStr>
			UART_SendInt(pipe);
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <runRadio+0x15c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fd35 	bl	80012ac <UART_SendInt>
			UART_SendStr(" PAYLOAD:>");
 8001842:	4813      	ldr	r0, [pc, #76]	@ (8001890 <runRadio+0x164>)
 8001844:	f7ff fcc8 	bl	80011d8 <UART_SendStr>
			UART_SendBufHex((char *)nRF24_payload, payload_length);
 8001848:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <runRadio+0x158>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	463b      	mov	r3, r7
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fcde 	bl	8001214 <UART_SendBufHex>
			UART_SendStr("<\r\n");
 8001858:	480e      	ldr	r0, [pc, #56]	@ (8001894 <runRadio+0x168>)
 800185a:	f7ff fcbd 	bl	80011d8 <UART_SendStr>

			osDelay(2);
 800185e:	2002      	movs	r0, #2
 8001860:	f007 ffea 	bl	8009838 <osDelay>
			watch_dog = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
    	if (watch_dog++ > 100)
 8001868:	e7ba      	b.n	80017e0 <runRadio+0xb4>
 800186a:	bf00      	nop
 800186c:	0800ce88 	.word	0x0800ce88
 8001870:	0800cea8 	.word	0x0800cea8
 8001874:	0800cebc 	.word	0x0800cebc
 8001878:	0800cec4 	.word	0x0800cec4
 800187c:	0800cfe8 	.word	0x0800cfe8
 8001880:	0800cfec 	.word	0x0800cfec
 8001884:	200002f5 	.word	0x200002f5
 8001888:	200002f4 	.word	0x200002f4
 800188c:	0800cecc 	.word	0x0800cecc
 8001890:	0800ced8 	.word	0x0800ced8
 8001894:	0800cee4 	.word	0x0800cee4

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_MspInit+0x54>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	4a11      	ldr	r2, [pc, #68]	@ (80018ec <HAL_MspInit+0x54>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ae:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <HAL_MspInit+0x54>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_MspInit+0x54>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <HAL_MspInit+0x54>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_MspInit+0x54>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	210f      	movs	r1, #15
 80018da:	f06f 0001 	mvn.w	r0, #1
 80018de:	f001 f85b 	bl	8002998 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a33      	ldr	r2, [pc, #204]	@ (80019dc <HAL_ADC_MspInit+0xec>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d160      	bne.n	80019d4 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <HAL_ADC_MspInit+0xf0>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	4a31      	ldr	r2, [pc, #196]	@ (80019e0 <HAL_ADC_MspInit+0xf0>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001920:	6453      	str	r3, [r2, #68]	@ 0x44
 8001922:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <HAL_ADC_MspInit+0xf0>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <HAL_ADC_MspInit+0xf0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a2a      	ldr	r2, [pc, #168]	@ (80019e0 <HAL_ADC_MspInit+0xf0>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <HAL_ADC_MspInit+0xf0>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_SPAR_Pin|ADC1_SLIDE_Pin|ADC1_JOY_X_Pin|ADC1_JOY_Y_Pin
 800194a:	237e      	movs	r3, #126	@ 0x7e
 800194c:	617b      	str	r3, [r7, #20]
                          |ADC1_POT_A_Pin|ADC1_POT_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194e:	2303      	movs	r3, #3
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4821      	ldr	r0, [pc, #132]	@ (80019e4 <HAL_ADC_MspInit+0xf4>)
 800195e:	f001 fbb5 	bl	80030cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001962:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 8001964:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <HAL_ADC_MspInit+0xfc>)
 8001966:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001968:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 800196a:	2200      	movs	r2, #0
 800196c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196e:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001974:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800197a:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 800197c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001980:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001982:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 8001984:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001988:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800198a:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 800198c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001990:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 8001994:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001998:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800199a:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 800199c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019a0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a2:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019a8:	480f      	ldr	r0, [pc, #60]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 80019aa:	f001 f81f 	bl	80029ec <HAL_DMA_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80019b4:	f7ff f86f 	bl	8000a96 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a0b      	ldr	r2, [pc, #44]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 80019bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <HAL_ADC_MspInit+0xf8>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2105      	movs	r1, #5
 80019c8:	2012      	movs	r0, #18
 80019ca:	f000 ffe5 	bl	8002998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019ce:	2012      	movs	r0, #18
 80019d0:	f000 fffe 	bl	80029d0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	@ 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40012000 	.word	0x40012000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	200001b4 	.word	0x200001b4
 80019ec:	40026410 	.word	0x40026410

080019f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	@ (8001a74 <HAL_I2C_MspInit+0x84>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d12c      	bne.n	8001a6c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a17      	ldr	r2, [pc, #92]	@ (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a34:	2312      	movs	r3, #18
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a40:	2304      	movs	r3, #4
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <HAL_I2C_MspInit+0x8c>)
 8001a4c:	f001 fb3e 	bl	80030cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	@ 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005400 	.word	0x40005400
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020400 	.word	0x40020400

08001a80 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	@ 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_SPI_MspInit+0x84>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12b      	bne.n	8001afa <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <HAL_SPI_MspInit+0x88>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <HAL_SPI_MspInit+0x88>)
 8001aac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <HAL_SPI_MspInit+0x88>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_SPI_MspInit+0x88>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a10      	ldr	r2, [pc, #64]	@ (8001b08 <HAL_SPI_MspInit+0x88>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_SPI_MspInit+0x88>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ada:	2338      	movs	r3, #56	@ 0x38
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aea:	2305      	movs	r3, #5
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <HAL_SPI_MspInit+0x8c>)
 8001af6:	f001 fae9 	bl	80030cc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	@ 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40013000 	.word	0x40013000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400

08001b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08e      	sub	sp, #56	@ 0x38
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	4b34      	ldr	r3, [pc, #208]	@ (8001bf8 <HAL_InitTick+0xe8>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	4a33      	ldr	r2, [pc, #204]	@ (8001bf8 <HAL_InitTick+0xe8>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b30:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <HAL_InitTick+0xe8>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b3c:	f107 0210 	add.w	r2, r7, #16
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fc6a 	bl	8005420 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b56:	f003 fc4f 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8001b5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b5c:	e004      	b.n	8001b68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b5e:	f003 fc4b 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8001b62:	4603      	mov	r3, r0
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b6a:	4a24      	ldr	r2, [pc, #144]	@ (8001bfc <HAL_InitTick+0xec>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	0c9b      	lsrs	r3, r3, #18
 8001b72:	3b01      	subs	r3, #1
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001b76:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <HAL_InitTick+0xf0>)
 8001b78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b7c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <HAL_InitTick+0xf0>)
 8001b80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b84:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001b86:	4a1e      	ldr	r2, [pc, #120]	@ (8001c00 <HAL_InitTick+0xf0>)
 8001b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b8a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <HAL_InitTick+0xf0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_InitTick+0xf0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <HAL_InitTick+0xf0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001b9e:	4818      	ldr	r0, [pc, #96]	@ (8001c00 <HAL_InitTick+0xf0>)
 8001ba0:	f003 ff7e 	bl	8005aa0 <HAL_TIM_Base_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001baa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d11b      	bne.n	8001bea <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001bb2:	4813      	ldr	r0, [pc, #76]	@ (8001c00 <HAL_InitTick+0xf0>)
 8001bb4:	f003 ffce 	bl	8005b54 <HAL_TIM_Base_Start_IT>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001bbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d111      	bne.n	8001bea <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc6:	201c      	movs	r0, #28
 8001bc8:	f000 ff02 	bl	80029d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b0f      	cmp	r3, #15
 8001bd0:	d808      	bhi.n	8001be4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	201c      	movs	r0, #28
 8001bd8:	f000 fede 	bl	8002998 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bdc:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <HAL_InitTick+0xf4>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e002      	b.n	8001bea <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3738      	adds	r7, #56	@ 0x38
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	431bde83 	.word	0x431bde83
 8001c00:	200002f8 	.word	0x200002f8
 8001c04:	20000004 	.word	0x20000004

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <NMI_Handler+0x4>

08001c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <MemManage_Handler+0x4>

08001c20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <ADC_IRQHandler+0x10>)
 8001c46:	f000 f908 	bl	8001e5a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000016c 	.word	0x2000016c

08001c54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <TIM2_IRQHandler+0x10>)
 8001c5a:	f003 ffdd 	bl	8005c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200002f8 	.word	0x200002f8

08001c68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <DMA2_Stream0_IRQHandler+0x10>)
 8001c6e:	f000 ffc3 	bl	8002bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200001b4 	.word	0x200001b4

08001c7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <OTG_FS_IRQHandler+0x10>)
 8001c82:	f001 fe7b 	bl	800397c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000620c 	.word	0x2000620c

08001c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <SystemInit+0x20>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9a:	4a05      	ldr	r2, [pc, #20]	@ (8001cb0 <SystemInit+0x20>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb8:	f7ff ffea 	bl	8001c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cbe:	490d      	ldr	r1, [pc, #52]	@ (8001cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f00a ffef 	bl	800ccc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce6:	f7fe fc11 	bl	800050c <main>
  bx  lr    
 8001cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001cf8:	0800d020 	.word	0x0800d020
  ldr r2, =_sbss
 8001cfc:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001d00:	20006a50 	.word	0x20006a50

08001d04 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <DMA1_Stream0_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	@ (8001d48 <HAL_Init+0x40>)
 8001d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <HAL_Init+0x40>)
 8001d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a07      	ldr	r2, [pc, #28]	@ (8001d48 <HAL_Init+0x40>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 fe26 	bl	8002982 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d36:	200f      	movs	r0, #15
 8001d38:	f7ff feea 	bl	8001b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3c:	f7ff fdac 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000340 	.word	0x20000340

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000340 	.word	0x20000340

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e033      	b.n	8001e52 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fd7c 	bl	80018f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d118      	bne.n	8001e44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e1a:	f023 0302 	bic.w	r3, r3, #2
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fb76 	bl	8002518 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e42:	e001      	b.n	8001e48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d049      	beq.n	8001f24 <HAL_ADC_IRQHandler+0xca>
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d046      	beq.n	8001f24 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d105      	bne.n	8001eae <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d12b      	bne.n	8001f14 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d127      	bne.n	8001f14 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d119      	bne.n	8001f14 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0220 	bic.w	r2, r2, #32
 8001eee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f9a5 	bl	8002264 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f06f 0212 	mvn.w	r2, #18
 8001f22:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f32:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d057      	beq.n	8001fea <HAL_ADC_IRQHandler+0x190>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d054      	beq.n	8001fea <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d139      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d12b      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d124      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d11d      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d119      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fb4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fc1a 	bl	8002814 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 020c 	mvn.w	r2, #12
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d017      	beq.n	8002030 <HAL_ADC_IRQHandler+0x1d6>
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d014      	beq.n	8002030 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10d      	bne.n	8002030 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f933 	bl	800228c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f06f 0201 	mvn.w	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800203e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d015      	beq.n	8002072 <HAL_ADC_IRQHandler+0x218>
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002050:	f043 0202 	orr.w	r2, r3, #2
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0220 	mvn.w	r2, #32
 8002060:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f91c 	bl	80022a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0220 	mvn.w	r2, #32
 8002070:	601a      	str	r2, [r3, #0]
  }
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_ADC_Start_DMA+0x22>
 800209a:	2302      	movs	r3, #2
 800209c:	e0d0      	b.n	8002240 <HAL_ADC_Start_DMA+0x1c4>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d018      	beq.n	80020e6 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020c4:	4b60      	ldr	r3, [pc, #384]	@ (8002248 <HAL_ADC_Start_DMA+0x1cc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a60      	ldr	r2, [pc, #384]	@ (800224c <HAL_ADC_Start_DMA+0x1d0>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0c9a      	lsrs	r2, r3, #18
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3b01      	subs	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f9      	bne.n	80020da <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020f4:	d107      	bne.n	8002106 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002104:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	f040 8088 	bne.w	8002226 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002140:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002154:	d106      	bne.n	8002164 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f023 0206 	bic.w	r2, r3, #6
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44
 8002162:	e002      	b.n	800216a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002172:	4b37      	ldr	r3, [pc, #220]	@ (8002250 <HAL_ADC_Start_DMA+0x1d4>)
 8002174:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217a:	4a36      	ldr	r2, [pc, #216]	@ (8002254 <HAL_ADC_Start_DMA+0x1d8>)
 800217c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002182:	4a35      	ldr	r2, [pc, #212]	@ (8002258 <HAL_ADC_Start_DMA+0x1dc>)
 8002184:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218a:	4a34      	ldr	r2, [pc, #208]	@ (800225c <HAL_ADC_Start_DMA+0x1e0>)
 800218c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002196:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80021a6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021b6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	334c      	adds	r3, #76	@ 0x4c
 80021c2:	4619      	mov	r1, r3
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f000 fcbe 	bl	8002b48 <HAL_DMA_Start_IT>
 80021cc:	4603      	mov	r3, r0
 80021ce:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10f      	bne.n	80021fc <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d129      	bne.n	800223e <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	e020      	b.n	800223e <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a17      	ldr	r2, [pc, #92]	@ (8002260 <HAL_ADC_Start_DMA+0x1e4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d11b      	bne.n	800223e <HAL_ADC_Start_DMA+0x1c2>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d114      	bne.n	800223e <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	e00b      	b.n	800223e <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f043 0210 	orr.w	r2, r3, #16
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800223e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000000 	.word	0x20000000
 800224c:	431bde83 	.word	0x431bde83
 8002250:	40012300 	.word	0x40012300
 8002254:	08002711 	.word	0x08002711
 8002258:	080027cb 	.word	0x080027cb
 800225c:	080027e7 	.word	0x080027e7
 8002260:	40012000 	.word	0x40012000

08002264 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e113      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x244>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d925      	bls.n	800232c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1e      	subs	r3, #30
 80022f6:	2207      	movs	r2, #7
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43da      	mvns	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	400a      	ands	r2, r1
 8002304:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68d9      	ldr	r1, [r3, #12]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	4603      	mov	r3, r0
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4403      	add	r3, r0
 800231e:	3b1e      	subs	r3, #30
 8002320:	409a      	lsls	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	e022      	b.n	8002372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	2207      	movs	r2, #7
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	400a      	ands	r2, r1
 800234e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	4603      	mov	r3, r0
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4403      	add	r3, r0
 8002368:	409a      	lsls	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b06      	cmp	r3, #6
 8002378:	d824      	bhi.n	80023c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b05      	subs	r3, #5
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b05      	subs	r3, #5
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c2:	e04c      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d824      	bhi.n	8002416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b23      	subs	r3, #35	@ 0x23
 80023de:	221f      	movs	r2, #31
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43da      	mvns	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	3b23      	subs	r3, #35	@ 0x23
 8002408:	fa00 f203 	lsl.w	r2, r0, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	631a      	str	r2, [r3, #48]	@ 0x30
 8002414:	e023      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b41      	subs	r3, #65	@ 0x41
 8002428:	221f      	movs	r2, #31
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	400a      	ands	r2, r1
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	3b41      	subs	r3, #65	@ 0x41
 8002452:	fa00 f203 	lsl.w	r2, r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800245e:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_ADC_ConfigChannel+0x250>)
 8002460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a28      	ldr	r2, [pc, #160]	@ (8002508 <HAL_ADC_ConfigChannel+0x254>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d10f      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d8>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d10b      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_ADC_ConfigChannel+0x254>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12b      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1c      	ldr	r2, [pc, #112]	@ (800250c <HAL_ADC_ConfigChannel+0x258>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x1f4>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b11      	cmp	r3, #17
 80024a6:	d122      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a11      	ldr	r2, [pc, #68]	@ (800250c <HAL_ADC_ConfigChannel+0x258>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d111      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_ADC_ConfigChannel+0x25c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <HAL_ADC_ConfigChannel+0x260>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	0c9a      	lsrs	r2, r3, #18
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024e0:	e002      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40012300 	.word	0x40012300
 8002508:	40012000 	.word	0x40012000
 800250c:	10000012 	.word	0x10000012
 8002510:	20000000 	.word	0x20000000
 8002514:	431bde83 	.word	0x431bde83

08002518 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002520:	4b79      	ldr	r3, [pc, #484]	@ (8002708 <ADC_Init+0x1f0>)
 8002522:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	431a      	orrs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	021a      	lsls	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025aa:	4a58      	ldr	r2, [pc, #352]	@ (800270c <ADC_Init+0x1f4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d022      	beq.n	80025f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e00f      	b.n	8002616 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002614:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0202 	bic.w	r2, r2, #2
 8002624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e1b      	ldrb	r3, [r3, #24]
 8002630:	005a      	lsls	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01b      	beq.n	800267c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002652:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002662:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	3b01      	subs	r3, #1
 8002670:	035a      	lsls	r2, r3, #13
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	e007      	b.n	800268c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800269a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	051a      	lsls	r2, r3, #20
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6899      	ldr	r1, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ce:	025a      	lsls	r2, r3, #9
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	029a      	lsls	r2, r3, #10
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40012300 	.word	0x40012300
 800270c:	0f000001 	.word	0x0f000001

08002710 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002726:	2b00      	cmp	r3, #0
 8002728:	d13c      	bne.n	80027a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d12b      	bne.n	800279c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002748:	2b00      	cmp	r3, #0
 800274a:	d127      	bne.n	800279c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d119      	bne.n	800279c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0220 	bic.w	r2, r2, #32
 8002776:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	f043 0201 	orr.w	r2, r3, #1
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff fd61 	bl	8002264 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027a2:	e00e      	b.n	80027c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fd75 	bl	80022a0 <HAL_ADC_ErrorCallback>
}
 80027b6:	e004      	b.n	80027c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff fd4d 	bl	8002278 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2240      	movs	r2, #64	@ 0x40
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	f043 0204 	orr.w	r2, r3, #4
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff fd4a 	bl	80022a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002850:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285a:	4a04      	ldr	r2, [pc, #16]	@ (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	60d3      	str	r3, [r2, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002874:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <__NVIC_GetPriorityGrouping+0x18>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0307 	and.w	r3, r3, #7
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	2b00      	cmp	r3, #0
 800289c:	db0b      	blt.n	80028b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4907      	ldr	r1, [pc, #28]	@ (80028c4 <__NVIC_EnableIRQ+0x38>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2001      	movs	r0, #1
 80028ae:	fa00 f202 	lsl.w	r2, r0, r2
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000e100 	.word	0xe000e100

080028c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	6039      	str	r1, [r7, #0]
 80028d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	db0a      	blt.n	80028f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	490c      	ldr	r1, [pc, #48]	@ (8002914 <__NVIC_SetPriority+0x4c>)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	0112      	lsls	r2, r2, #4
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	440b      	add	r3, r1
 80028ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f0:	e00a      	b.n	8002908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4908      	ldr	r1, [pc, #32]	@ (8002918 <__NVIC_SetPriority+0x50>)
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	3b04      	subs	r3, #4
 8002900:	0112      	lsls	r2, r2, #4
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	440b      	add	r3, r1
 8002906:	761a      	strb	r2, [r3, #24]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000e100 	.word	0xe000e100
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	@ 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f1c3 0307 	rsb	r3, r3, #7
 8002936:	2b04      	cmp	r3, #4
 8002938:	bf28      	it	cs
 800293a:	2304      	movcs	r3, #4
 800293c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3304      	adds	r3, #4
 8002942:	2b06      	cmp	r3, #6
 8002944:	d902      	bls.n	800294c <NVIC_EncodePriority+0x30>
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3b03      	subs	r3, #3
 800294a:	e000      	b.n	800294e <NVIC_EncodePriority+0x32>
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	f04f 32ff 	mov.w	r2, #4294967295
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	401a      	ands	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	43d9      	mvns	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	4313      	orrs	r3, r2
         );
}
 8002976:	4618      	mov	r0, r3
 8002978:	3724      	adds	r7, #36	@ 0x24
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff4c 	bl	8002828 <__NVIC_SetPriorityGrouping>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029aa:	f7ff ff61 	bl	8002870 <__NVIC_GetPriorityGrouping>
 80029ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	6978      	ldr	r0, [r7, #20]
 80029b6:	f7ff ffb1 	bl	800291c <NVIC_EncodePriority>
 80029ba:	4602      	mov	r2, r0
 80029bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff80 	bl	80028c8 <__NVIC_SetPriority>
}
 80029c8:	bf00      	nop
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ff54 	bl	800288c <__NVIC_EnableIRQ>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff f9bc 	bl	8001d74 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e099      	b.n	8002b3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a28:	e00f      	b.n	8002a4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2a:	f7ff f9a3 	bl	8001d74 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d908      	bls.n	8002a4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2203      	movs	r2, #3
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e078      	b.n	8002b3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e8      	bne.n	8002a2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4b38      	ldr	r3, [pc, #224]	@ (8002b44 <HAL_DMA_Init+0x158>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d107      	bne.n	8002ab4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	4313      	orrs	r3, r2
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f023 0307 	bic.w	r3, r3, #7
 8002aca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d117      	bne.n	8002b0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00e      	beq.n	8002b0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fa6f 	bl	8002fd4 <DMA_CheckFifoParam>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2240      	movs	r2, #64	@ 0x40
 8002b00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e016      	b.n	8002b3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa26 	bl	8002f68 <DMA_CalcBaseAndBitshift>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b24:	223f      	movs	r2, #63	@ 0x3f
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	f010803f 	.word	0xf010803f

08002b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_DMA_Start_IT+0x26>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e040      	b.n	8002bf0 <HAL_DMA_Start_IT+0xa8>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d12f      	bne.n	8002be2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f9b8 	bl	8002f0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba0:	223f      	movs	r2, #63	@ 0x3f
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0216 	orr.w	r2, r2, #22
 8002bb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0208 	orr.w	r2, r2, #8
 8002bce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e005      	b.n	8002bee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bea:	2302      	movs	r3, #2
 8002bec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c04:	4b8e      	ldr	r3, [pc, #568]	@ (8002e40 <HAL_DMA_IRQHandler+0x248>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a8e      	ldr	r2, [pc, #568]	@ (8002e44 <HAL_DMA_IRQHandler+0x24c>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0a9b      	lsrs	r3, r3, #10
 8002c10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c22:	2208      	movs	r2, #8
 8002c24:	409a      	lsls	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01a      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0204 	bic.w	r2, r2, #4
 8002c4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	2208      	movs	r2, #8
 8002c52:	409a      	lsls	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	2201      	movs	r2, #1
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d012      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	2201      	movs	r2, #1
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c92:	f043 0202 	orr.w	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d012      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc8:	f043 0204 	orr.w	r2, r3, #4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d043      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d03c      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d018      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d108      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d024      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
 8002d26:	e01f      	b.n	8002d68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01b      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4798      	blx	r3
 8002d38:	e016      	b.n	8002d68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0208 	bic.w	r2, r2, #8
 8002d56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 808f 	beq.w	8002e98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8087 	beq.w	8002e98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8e:	2220      	movs	r2, #32
 8002d90:	409a      	lsls	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d136      	bne.n	8002e10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0216 	bic.w	r2, r2, #22
 8002db0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d103      	bne.n	8002dd2 <HAL_DMA_IRQHandler+0x1da>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0208 	bic.w	r2, r2, #8
 8002de0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de6:	223f      	movs	r2, #63	@ 0x3f
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d07e      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
        }
        return;
 8002e0e:	e079      	b.n	8002f04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01d      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10d      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d031      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
 8002e3c:	e02c      	b.n	8002e98 <HAL_DMA_IRQHandler+0x2a0>
 8002e3e:	bf00      	nop
 8002e40:	20000000 	.word	0x20000000
 8002e44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d023      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
 8002e58:	e01e      	b.n	8002e98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10f      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0210 	bic.w	r2, r2, #16
 8002e76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d032      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d022      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2205      	movs	r2, #5
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d307      	bcc.n	8002ee0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f2      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x2cc>
 8002ede:	e000      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ee0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
 8002f02:	e000      	b.n	8002f06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f04:	bf00      	nop
    }
  }
}
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b40      	cmp	r3, #64	@ 0x40
 8002f38:	d108      	bne.n	8002f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f4a:	e007      	b.n	8002f5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	3b10      	subs	r3, #16
 8002f78:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <DMA_CalcBaseAndBitshift+0x64>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f82:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d909      	bls.n	8002faa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	1d1a      	adds	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fa8:	e007      	b.n	8002fba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	aaaaaaab 	.word	0xaaaaaaab
 8002fd0:	0800d008 	.word	0x0800d008

08002fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11f      	bne.n	800302e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d856      	bhi.n	80030a2 <DMA_CheckFifoParam+0xce>
 8002ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ffc <DMA_CheckFifoParam+0x28>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800300d 	.word	0x0800300d
 8003000:	0800301f 	.word	0x0800301f
 8003004:	0800300d 	.word	0x0800300d
 8003008:	080030a3 	.word	0x080030a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d046      	beq.n	80030a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301c:	e043      	b.n	80030a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003026:	d140      	bne.n	80030aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302c:	e03d      	b.n	80030aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003036:	d121      	bne.n	800307c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d837      	bhi.n	80030ae <DMA_CheckFifoParam+0xda>
 800303e:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <DMA_CheckFifoParam+0x70>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003055 	.word	0x08003055
 8003048:	0800305b 	.word	0x0800305b
 800304c:	08003055 	.word	0x08003055
 8003050:	0800306d 	.word	0x0800306d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
      break;
 8003058:	e030      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d025      	beq.n	80030b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306a:	e022      	b.n	80030b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003074:	d11f      	bne.n	80030b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800307a:	e01c      	b.n	80030b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d903      	bls.n	800308a <DMA_CheckFifoParam+0xb6>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d003      	beq.n	8003090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003088:	e018      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
      break;
 800308e:	e015      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00e      	beq.n	80030ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      break;
 80030a0:	e00b      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      break;
 80030a2:	bf00      	nop
 80030a4:	e00a      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030a6:	bf00      	nop
 80030a8:	e008      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030aa:	bf00      	nop
 80030ac:	e006      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030ae:	bf00      	nop
 80030b0:	e004      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;   
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030ba:	bf00      	nop
    }
  } 
  
  return status; 
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e159      	b.n	800339c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 8148 	bne.w	8003396 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d005      	beq.n	800311e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	2b02      	cmp	r3, #2
 800311c:	d130      	bne.n	8003180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 0201 	and.w	r2, r3, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b03      	cmp	r3, #3
 800318a:	d017      	beq.n	80031bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d123      	bne.n	8003210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	08da      	lsrs	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	08da      	lsrs	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3208      	adds	r2, #8
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a2 	beq.w	8003396 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b57      	ldr	r3, [pc, #348]	@ (80033b4 <HAL_GPIO_Init+0x2e8>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	4a56      	ldr	r2, [pc, #344]	@ (80033b4 <HAL_GPIO_Init+0x2e8>)
 800325c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003260:	6453      	str	r3, [r2, #68]	@ 0x44
 8003262:	4b54      	ldr	r3, [pc, #336]	@ (80033b4 <HAL_GPIO_Init+0x2e8>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326e:	4a52      	ldr	r2, [pc, #328]	@ (80033b8 <HAL_GPIO_Init+0x2ec>)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a49      	ldr	r2, [pc, #292]	@ (80033bc <HAL_GPIO_Init+0x2f0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d019      	beq.n	80032ce <HAL_GPIO_Init+0x202>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a48      	ldr	r2, [pc, #288]	@ (80033c0 <HAL_GPIO_Init+0x2f4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_GPIO_Init+0x1fe>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a47      	ldr	r2, [pc, #284]	@ (80033c4 <HAL_GPIO_Init+0x2f8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00d      	beq.n	80032c6 <HAL_GPIO_Init+0x1fa>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a46      	ldr	r2, [pc, #280]	@ (80033c8 <HAL_GPIO_Init+0x2fc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <HAL_GPIO_Init+0x1f6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a45      	ldr	r2, [pc, #276]	@ (80033cc <HAL_GPIO_Init+0x300>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_GPIO_Init+0x1f2>
 80032ba:	2304      	movs	r3, #4
 80032bc:	e008      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032be:	2307      	movs	r3, #7
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032c2:	2303      	movs	r3, #3
 80032c4:	e004      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e002      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032ce:	2300      	movs	r3, #0
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f002 0203 	and.w	r2, r2, #3
 80032d6:	0092      	lsls	r2, r2, #2
 80032d8:	4093      	lsls	r3, r2
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e0:	4935      	ldr	r1, [pc, #212]	@ (80033b8 <HAL_GPIO_Init+0x2ec>)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	3302      	adds	r3, #2
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ee:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003312:	4a2f      	ldr	r2, [pc, #188]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003318:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800333c:	4a24      	ldr	r2, [pc, #144]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003342:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003366:	4a1a      	ldr	r2, [pc, #104]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800336c:	4b18      	ldr	r3, [pc, #96]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003390:	4a0f      	ldr	r2, [pc, #60]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3301      	adds	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b0f      	cmp	r3, #15
 80033a0:	f67f aea2 	bls.w	80030e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40020000 	.word	0x40020000
 80033c0:	40020400 	.word	0x40020400
 80033c4:	40020800 	.word	0x40020800
 80033c8:	40020c00 	.word	0x40020c00
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40013c00 	.word	0x40013c00

080033d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e001      	b.n	80033f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
 8003410:	4613      	mov	r3, r2
 8003412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003420:	e003      	b.n	800342a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	619a      	str	r2, [r3, #24]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003448:	887a      	ldrh	r2, [r7, #2]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4013      	ands	r3, r2
 800344e:	041a      	lsls	r2, r3, #16
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43d9      	mvns	r1, r3
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	400b      	ands	r3, r1
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e12b      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe faac 	bl	80019f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	@ 0x24
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d0:	f001 ff92 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a81      	ldr	r2, [pc, #516]	@ (80036e0 <HAL_I2C_Init+0x274>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d807      	bhi.n	80034f0 <HAL_I2C_Init+0x84>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a80      	ldr	r2, [pc, #512]	@ (80036e4 <HAL_I2C_Init+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e006      	b.n	80034fe <HAL_I2C_Init+0x92>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a7d      	ldr	r2, [pc, #500]	@ (80036e8 <HAL_I2C_Init+0x27c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0e7      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a78      	ldr	r2, [pc, #480]	@ (80036ec <HAL_I2C_Init+0x280>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0c9b      	lsrs	r3, r3, #18
 8003510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a6a      	ldr	r2, [pc, #424]	@ (80036e0 <HAL_I2C_Init+0x274>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <HAL_I2C_Init+0xd4>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3301      	adds	r3, #1
 800353e:	e009      	b.n	8003554 <HAL_I2C_Init+0xe8>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	4a69      	ldr	r2, [pc, #420]	@ (80036f0 <HAL_I2C_Init+0x284>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	3301      	adds	r3, #1
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003566:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	495c      	ldr	r1, [pc, #368]	@ (80036e0 <HAL_I2C_Init+0x274>)
 8003570:	428b      	cmp	r3, r1
 8003572:	d819      	bhi.n	80035a8 <HAL_I2C_Init+0x13c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e59      	subs	r1, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003582:	1c59      	adds	r1, r3, #1
 8003584:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003588:	400b      	ands	r3, r1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_I2C_Init+0x138>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e59      	subs	r1, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fbb1 f3f3 	udiv	r3, r1, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	e051      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a4:	2304      	movs	r3, #4
 80035a6:	e04f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <HAL_I2C_Init+0x168>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e012      	b.n	80035fa <HAL_I2C_Init+0x18e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	0099      	lsls	r1, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x196>
 80035fe:	2301      	movs	r3, #1
 8003600:	e022      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <HAL_I2C_Init+0x1bc>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e58      	subs	r0, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	440b      	add	r3, r1
 8003618:	fbb0 f3f3 	udiv	r3, r0, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003626:	e00f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	0099      	lsls	r1, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6809      	ldr	r1, [r1, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003676:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6911      	ldr	r1, [r2, #16]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	000186a0 	.word	0x000186a0
 80036e4:	001e847f 	.word	0x001e847f
 80036e8:	003d08ff 	.word	0x003d08ff
 80036ec:	431bde83 	.word	0x431bde83
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e101      	b.n	800390a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d106      	bne.n	8003726 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f008 ff5f 	bl	800c5e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2203      	movs	r2, #3
 800372a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003734:	d102      	bne.n	800373c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f002 fd32 	bl	80061aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7c1a      	ldrb	r2, [r3, #16]
 800374e:	f88d 2000 	strb.w	r2, [sp]
 8003752:	3304      	adds	r3, #4
 8003754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003756:	f002 fc11 	bl	8005f7c <USB_CoreInit>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0ce      	b.n	800390a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f002 fd2a 	bl	80061cc <USB_SetCurrentMode>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0bf      	b.n	800390a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	e04a      	b.n	8003826 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3315      	adds	r3, #21
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	3314      	adds	r3, #20
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	b298      	uxth	r0, r3
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	332e      	adds	r3, #46	@ 0x2e
 80037cc:	4602      	mov	r2, r0
 80037ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	3318      	adds	r3, #24
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	331c      	adds	r3, #28
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	3320      	adds	r3, #32
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	3324      	adds	r3, #36	@ 0x24
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	3301      	adds	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	791b      	ldrb	r3, [r3, #4]
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	429a      	cmp	r2, r3
 800382e:	d3af      	bcc.n	8003790 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003830:	2300      	movs	r3, #0
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e044      	b.n	80038c0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	3301      	adds	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	791b      	ldrb	r3, [r3, #4]
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d3b5      	bcc.n	8003836 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7c1a      	ldrb	r2, [r3, #16]
 80038d2:	f88d 2000 	strb.w	r2, [sp]
 80038d6:	3304      	adds	r3, #4
 80038d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038da:	f002 fcc3 	bl	8006264 <USB_DevInit>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e00c      	b.n	800390a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f003 fd0d 	bl	8007322 <USB_DevDisconnect>

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_PCD_Start+0x1c>
 800392a:	2302      	movs	r3, #2
 800392c:	e022      	b.n	8003974 <HAL_PCD_Start+0x62>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003946:	2b01      	cmp	r3, #1
 8003948:	d105      	bne.n	8003956 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f002 fc14 	bl	8006188 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f003 fcbb 	bl	80072e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b08d      	sub	sp, #52	@ 0x34
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fd79 	bl	800748a <USB_GetMode>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 848c 	bne.w	80042b8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f003 fcdd 	bl	8007364 <USB_ReadInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8482 	beq.w	80042b6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 fcca 	bl	8007364 <USB_ReadInterrupts>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d107      	bne.n	80039ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f002 0202 	and.w	r2, r2, #2
 80039e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f003 fcb8 	bl	8007364 <USB_ReadInterrupts>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b10      	cmp	r3, #16
 80039fc:	d161      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0210 	bic.w	r2, r2, #16
 8003a0c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f003 020f 	and.w	r2, r3, #15
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003a34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a38:	d124      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d035      	beq.n	8003ab2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	461a      	mov	r2, r3
 8003a58:	6a38      	ldr	r0, [r7, #32]
 8003a5a:	f003 faef 	bl	800703c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a6a:	441a      	add	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a7c:	441a      	add	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	615a      	str	r2, [r3, #20]
 8003a82:	e016      	b.n	8003ab2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003a8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a8e:	d110      	bne.n	8003ab2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a96:	2208      	movs	r2, #8
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6a38      	ldr	r0, [r7, #32]
 8003a9c:	f003 face 	bl	800703c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aac:	441a      	add	r2, r3
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0210 	orr.w	r2, r2, #16
 8003ac0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 fc4c 	bl	8007364 <USB_ReadInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ad2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ad6:	f040 80a7 	bne.w	8003c28 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 fc51 	bl	800738a <USB_ReadDevAllOutEpInterrupt>
 8003ae8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003aea:	e099      	b.n	8003c20 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 808e 	beq.w	8003c14 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 fc75 	bl	80073f2 <USB_ReadDevOutEPInterrupt>
 8003b08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00c      	beq.n	8003b2e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b20:	461a      	mov	r2, r3
 8003b22:	2301      	movs	r3, #1
 8003b24:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fea3 	bl	8004874 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00c      	beq.n	8003b52 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b44:	461a      	mov	r2, r3
 8003b46:	2308      	movs	r3, #8
 8003b48:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 ff79 	bl	8004a44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d030      	beq.n	8003bda <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b80:	2b80      	cmp	r3, #128	@ 0x80
 8003b82:	d109      	bne.n	8003b98 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b96:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	3304      	adds	r3, #4
 8003bac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	78db      	ldrb	r3, [r3, #3]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d108      	bne.n	8003bc8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f008 fe0a 	bl	800c7dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c12:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c16:	3301      	adds	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f47f af62 	bne.w	8003aec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f003 fb99 	bl	8007364 <USB_ReadInterrupts>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c3c:	f040 80db 	bne.w	8003df6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f003 fbba 	bl	80073be <USB_ReadDevAllInEpInterrupt>
 8003c4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003c50:	e0cd      	b.n	8003dee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80c2 	beq.w	8003de2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f003 fbe0 	bl	800742e <USB_ReadDevInEPInterrupt>
 8003c6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d057      	beq.n	8003d2a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	2201      	movs	r2, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69f9      	ldr	r1, [r7, #28]
 8003c96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003caa:	461a      	mov	r2, r3
 8003cac:	2301      	movs	r3, #1
 8003cae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	799b      	ldrb	r3, [r3, #6]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d132      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3320      	adds	r3, #32
 8003cc8:	6819      	ldr	r1, [r3, #0]
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4403      	add	r3, r0
 8003cd8:	331c      	adds	r3, #28
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4419      	add	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4403      	add	r3, r0
 8003cec:	3320      	adds	r3, #32
 8003cee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d113      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x3a2>
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3324      	adds	r3, #36	@ 0x24
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d108      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d16:	461a      	mov	r2, r3
 8003d18:	2101      	movs	r1, #1
 8003d1a:	f003 fbe7 	bl	80074ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f008 fcde 	bl	800c6e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d40:	461a      	mov	r2, r3
 8003d42:	2308      	movs	r3, #8
 8003d44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2310      	movs	r3, #16
 8003d60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2340      	movs	r3, #64	@ 0x40
 8003d7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d023      	beq.n	8003dd0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d8a:	6a38      	ldr	r0, [r7, #32]
 8003d8c:	f002 fbce 	bl	800652c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	3310      	adds	r3, #16
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	3304      	adds	r3, #4
 8003da2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	78db      	ldrb	r3, [r3, #3]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d108      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2200      	movs	r2, #0
 8003db0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f008 fd21 	bl	800c800 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2302      	movs	r3, #2
 8003dce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003dda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fcbd 	bl	800475c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	3301      	adds	r3, #1
 8003de6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dea:	085b      	lsrs	r3, r3, #1
 8003dec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f47f af2e 	bne.w	8003c52 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f003 fab2 	bl	8007364 <USB_ReadInterrupts>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e0a:	d122      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d108      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e32:	2100      	movs	r1, #0
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fea3 	bl	8004b80 <HAL_PCDEx_LPM_Callback>
 8003e3a:	e002      	b.n	8003e42 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f008 fcbf 	bl	800c7c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f003 fa84 	bl	8007364 <USB_ReadInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e66:	d112      	bne.n	8003e8e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d102      	bne.n	8003e7e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f008 fc7b 	bl	800c774 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003e8c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 fa66 	bl	8007364 <USB_ReadInterrupts>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea2:	f040 80b7 	bne.w	8004014 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2110      	movs	r1, #16
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f002 fb33 	bl	800652c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eca:	e046      	b.n	8003f5a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ede:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef0:	0151      	lsls	r1, r2, #5
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	440a      	add	r2, r1
 8003ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003efa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003efe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f12:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f24:	0151      	lsls	r1, r2, #5
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	440a      	add	r2, r1
 8003f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f52:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f56:	3301      	adds	r3, #1
 8003f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	791b      	ldrb	r3, [r3, #4]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d3b2      	bcc.n	8003ecc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f74:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003f78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	7bdb      	ldrb	r3, [r3, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f92:	f043 030b 	orr.w	r3, r3, #11
 8003f96:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fa8:	f043 030b 	orr.w	r3, r3, #11
 8003fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fae:	e015      	b.n	8003fdc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fbe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003fc2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003fc6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fd6:	f043 030b 	orr.w	r3, r3, #11
 8003fda:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003fee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ffe:	461a      	mov	r2, r3
 8004000:	f003 fa74 	bl	80074ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f003 f9a3 	bl	8007364 <USB_ReadInterrupts>
 800401e:	4603      	mov	r3, r0
 8004020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004028:	d123      	bne.n	8004072 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f003 fa39 	bl	80074a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f002 faf0 	bl	800661e <USB_GetDevSpeed>
 800403e:	4603      	mov	r3, r0
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681c      	ldr	r4, [r3, #0]
 800404a:	f001 f9c9 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 800404e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004054:	461a      	mov	r2, r3
 8004056:	4620      	mov	r0, r4
 8004058:	f001 fff4 	bl	8006044 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f008 fb6a 	bl	800c736 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004070:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f003 f974 	bl	8007364 <USB_ReadInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b08      	cmp	r3, #8
 8004084:	d10a      	bne.n	800409c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f008 fb47 	bl	800c71a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f002 0208 	and.w	r2, r2, #8
 800409a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f003 f95f 	bl	8007364 <USB_ReadInterrupts>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ac:	2b80      	cmp	r3, #128	@ 0x80
 80040ae:	d123      	bne.n	80040f8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040bc:	2301      	movs	r3, #1
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c0:	e014      	b.n	80040ec <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d105      	bne.n	80040e6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	4619      	mov	r1, r3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fb0a 	bl	80046fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	3301      	adds	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	791b      	ldrb	r3, [r3, #4]
 80040f0:	461a      	mov	r2, r3
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d3e4      	bcc.n	80040c2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f003 f931 	bl	8007364 <USB_ReadInterrupts>
 8004102:	4603      	mov	r3, r0
 8004104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004108:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800410c:	d13c      	bne.n	8004188 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800410e:	2301      	movs	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
 8004112:	e02b      	b.n	800416c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	3318      	adds	r3, #24
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d115      	bne.n	8004166 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800413a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800413c:	2b00      	cmp	r3, #0
 800413e:	da12      	bge.n	8004166 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3317      	adds	r3, #23
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800415c:	b2db      	uxtb	r3, r3
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 faca 	bl	80046fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	3301      	adds	r3, #1
 800416a:	627b      	str	r3, [r7, #36]	@ 0x24
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	791b      	ldrb	r3, [r3, #4]
 8004170:	461a      	mov	r2, r3
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	4293      	cmp	r3, r2
 8004176:	d3cd      	bcc.n	8004114 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f003 f8e9 	bl	8007364 <USB_ReadInterrupts>
 8004192:	4603      	mov	r3, r0
 8004194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004198:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800419c:	d156      	bne.n	800424c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800419e:	2301      	movs	r3, #1
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a2:	e045      	b.n	8004230 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d12e      	bne.n	800422a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da2b      	bge.n	800422a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	0c1a      	lsrs	r2, r3, #16
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80041dc:	4053      	eors	r3, r2
 80041de:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d121      	bne.n	800422a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004222:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004226:	6053      	str	r3, [r2, #4]
            break;
 8004228:	e008      	b.n	800423c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	3301      	adds	r3, #1
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	791b      	ldrb	r3, [r3, #4]
 8004234:	461a      	mov	r2, r3
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	4293      	cmp	r3, r2
 800423a:	d3b3      	bcc.n	80041a4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800424a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f003 f887 	bl	8007364 <USB_ReadInterrupts>
 8004256:	4603      	mov	r3, r0
 8004258:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800425c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004260:	d10a      	bne.n	8004278 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f008 fade 	bl	800c824 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f003 f871 	bl	8007364 <USB_ReadInterrupts>
 8004282:	4603      	mov	r3, r0
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b04      	cmp	r3, #4
 800428a:	d115      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f008 face 	bl	800c840 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	e000      	b.n	80042b8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80042b6:	bf00      	nop
    }
  }
}
 80042b8:	3734      	adds	r7, #52	@ 0x34
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd90      	pop	{r4, r7, pc}

080042be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	460b      	mov	r3, r1
 80042c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_PCD_SetAddress+0x1a>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e012      	b.n	80042fe <HAL_PCD_SetAddress+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f002 ffd0 	bl	8007294 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	4608      	mov	r0, r1
 8004310:	4611      	mov	r1, r2
 8004312:	461a      	mov	r2, r3
 8004314:	4603      	mov	r3, r0
 8004316:	70fb      	strb	r3, [r7, #3]
 8004318:	460b      	mov	r3, r1
 800431a:	803b      	strh	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004328:	2b00      	cmp	r3, #0
 800432a:	da0f      	bge.n	800434c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	3310      	adds	r3, #16
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	3304      	adds	r3, #4
 8004342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	705a      	strb	r2, [r3, #1]
 800434a:	e00f      	b.n	800436c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	f003 020f 	and.w	r2, r3, #15
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	3304      	adds	r3, #4
 8004364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004378:	883b      	ldrh	r3, [r7, #0]
 800437a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	78ba      	ldrb	r2, [r7, #2]
 8004386:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800439a:	78bb      	ldrb	r3, [r7, #2]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d102      	bne.n	80043a6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_PCD_EP_Open+0xae>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e00e      	b.n	80043d2 <HAL_PCD_EP_Open+0xcc>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f002 f950 	bl	8006668 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80043d0:	7afb      	ldrb	r3, [r7, #11]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	da0f      	bge.n	800440e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	3310      	adds	r3, #16
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	3304      	adds	r3, #4
 8004404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	705a      	strb	r2, [r3, #1]
 800440c:	e00f      	b.n	800442e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	b2da      	uxtb	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_PCD_EP_Close+0x6e>
 8004444:	2302      	movs	r3, #2
 8004446:	e00e      	b.n	8004466 <HAL_PCD_EP_Close+0x8c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68f9      	ldr	r1, [r7, #12]
 8004456:	4618      	mov	r0, r3
 8004458:	f002 f98e 	bl	8006778 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b086      	sub	sp, #24
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	460b      	mov	r3, r1
 800447c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800447e:	7afb      	ldrb	r3, [r7, #11]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2200      	movs	r2, #0
 80044a8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	799b      	ldrb	r3, [r3, #6]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d102      	bne.n	80044ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	799b      	ldrb	r3, [r3, #6]
 80044d2:	461a      	mov	r2, r3
 80044d4:	6979      	ldr	r1, [r7, #20]
 80044d6:	f002 fa2b 	bl	8006930 <USB_EPStartXfer>

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 020f 	and.w	r2, r3, #15
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	460b      	mov	r3, r1
 8004522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004524:	7afb      	ldrb	r3, [r7, #11]
 8004526:	f003 020f 	and.w	r2, r3, #15
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	3310      	adds	r3, #16
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	3304      	adds	r3, #4
 800453a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2200      	movs	r2, #0
 800454c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2201      	movs	r2, #1
 8004552:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004554:	7afb      	ldrb	r3, [r7, #11]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	b2da      	uxtb	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	799b      	ldrb	r3, [r3, #6]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d102      	bne.n	800456e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	799b      	ldrb	r3, [r3, #6]
 8004576:	461a      	mov	r2, r3
 8004578:	6979      	ldr	r1, [r7, #20]
 800457a:	f002 f9d9 	bl	8006930 <USB_EPStartXfer>

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	7912      	ldrb	r2, [r2, #4]
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e04f      	b.n	8004646 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	da0f      	bge.n	80045ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	f003 020f 	and.w	r2, r3, #15
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	3310      	adds	r3, #16
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	3304      	adds	r3, #4
 80045c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	705a      	strb	r2, [r3, #1]
 80045cc:	e00d      	b.n	80045ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	4613      	mov	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	4413      	add	r3, r2
 80045e0:	3304      	adds	r3, #4
 80045e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_PCD_EP_SetStall+0x82>
 8004606:	2302      	movs	r3, #2
 8004608:	e01d      	b.n	8004646 <HAL_PCD_EP_SetStall+0xbe>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	4618      	mov	r0, r3
 800461a:	f002 fd67 	bl	80070ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	7999      	ldrb	r1, [r3, #6]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004636:	461a      	mov	r2, r3
 8004638:	f002 ff58 	bl	80074ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	7912      	ldrb	r2, [r2, #4]
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e042      	b.n	80046f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800466c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004670:	2b00      	cmp	r3, #0
 8004672:	da0f      	bge.n	8004694 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	f003 020f 	and.w	r2, r3, #15
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	3310      	adds	r3, #16
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4413      	add	r3, r2
 8004688:	3304      	adds	r3, #4
 800468a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	705a      	strb	r2, [r3, #1]
 8004692:	e00f      	b.n	80046b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	3304      	adds	r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_PCD_EP_ClrStall+0x86>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e00e      	b.n	80046f2 <HAL_PCD_EP_ClrStall+0xa4>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68f9      	ldr	r1, [r7, #12]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f002 fd70 	bl	80071c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800470a:	2b00      	cmp	r3, #0
 800470c:	da0c      	bge.n	8004728 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	f003 020f 	and.w	r2, r3, #15
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	3310      	adds	r3, #16
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	3304      	adds	r3, #4
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e00c      	b.n	8004742 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	3304      	adds	r3, #4
 8004740:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	4618      	mov	r0, r3
 800474a:	f002 fb8f 	bl	8006e6c <USB_EPStopXfer>
 800474e:	4603      	mov	r3, r0
 8004750:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004752:	7afb      	ldrb	r3, [r7, #11]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	@ 0x28
 8004760:	af02      	add	r7, sp, #8
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	3310      	adds	r3, #16
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	429a      	cmp	r2, r3
 800478e:	d901      	bls.n	8004794 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e06b      	b.n	800486c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d902      	bls.n	80047b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	3303      	adds	r3, #3
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047b8:	e02a      	b.n	8004810 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d902      	bls.n	80047d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3303      	adds	r3, #3
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68d9      	ldr	r1, [r3, #12]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	4603      	mov	r3, r0
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f002 fbe4 	bl	8006fc0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	441a      	add	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	441a      	add	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	429a      	cmp	r2, r3
 8004824:	d809      	bhi.n	800483a <PCD_WriteEmptyTxFifo+0xde>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800482e:	429a      	cmp	r2, r3
 8004830:	d203      	bcs.n	800483a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1bf      	bne.n	80047ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	429a      	cmp	r2, r3
 8004844:	d811      	bhi.n	800486a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	2201      	movs	r2, #1
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800485a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	43db      	mvns	r3, r3
 8004860:	6939      	ldr	r1, [r7, #16]
 8004862:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004866:	4013      	ands	r3, r2
 8004868:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	333c      	adds	r3, #60	@ 0x3c
 800488c:	3304      	adds	r3, #4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	799b      	ldrb	r3, [r3, #6]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d17b      	bne.n	80049a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d015      	beq.n	80048e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4a61      	ldr	r2, [pc, #388]	@ (8004a3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	f240 80b9 	bls.w	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80b3 	beq.w	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d6:	461a      	mov	r2, r3
 80048d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048dc:	6093      	str	r3, [r2, #8]
 80048de:	e0a7      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f6:	461a      	mov	r2, r3
 80048f8:	2320      	movs	r3, #32
 80048fa:	6093      	str	r3, [r2, #8]
 80048fc:	e098      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	f040 8093 	bne.w	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4a4b      	ldr	r2, [pc, #300]	@ (8004a3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d90f      	bls.n	8004932 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004928:	461a      	mov	r2, r3
 800492a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800492e:	6093      	str	r3, [r2, #8]
 8004930:	e07e      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	3304      	adds	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	0159      	lsls	r1, r3, #5
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	440b      	add	r3, r1
 8004954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d114      	bne.n	8004994 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800497c:	461a      	mov	r2, r3
 800497e:	2101      	movs	r1, #1
 8004980:	f002 fdb4 	bl	80074ec <USB_EP0_OutStart>
 8004984:	e006      	b.n	8004994 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	441a      	add	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f007 fe88 	bl	800c6b0 <HAL_PCD_DataOutStageCallback>
 80049a0:	e046      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	4a26      	ldr	r2, [pc, #152]	@ (8004a40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d124      	bne.n	80049f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c0:	461a      	mov	r2, r3
 80049c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c6:	6093      	str	r3, [r2, #8]
 80049c8:	e032      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e0:	461a      	mov	r2, r3
 80049e2:	2320      	movs	r3, #32
 80049e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f007 fe5f 	bl	800c6b0 <HAL_PCD_DataOutStageCallback>
 80049f2:	e01d      	b.n	8004a30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d114      	bne.n	8004a24 <PCD_EP_OutXfrComplete_int+0x1b0>
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d108      	bne.n	8004a24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2100      	movs	r1, #0
 8004a20:	f002 fd64 	bl	80074ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f007 fe40 	bl	800c6b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	4f54300a 	.word	0x4f54300a
 8004a40:	4f54310a 	.word	0x4f54310a

08004a44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	333c      	adds	r3, #60	@ 0x3c
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a15      	ldr	r2, [pc, #84]	@ (8004acc <PCD_EP_OutSetupPacket_int+0x88>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d90e      	bls.n	8004a98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d009      	beq.n	8004a98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a90:	461a      	mov	r2, r3
 8004a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f007 fdf7 	bl	800c68c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8004acc <PCD_EP_OutSetupPacket_int+0x88>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d90c      	bls.n	8004ac0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	799b      	ldrb	r3, [r3, #6]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d108      	bne.n	8004ac0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2101      	movs	r1, #1
 8004abc:	f002 fd16 	bl	80074ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	4f54300a 	.word	0x4f54300a

08004ad0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
 8004adc:	4613      	mov	r3, r2
 8004ade:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004aee:	883b      	ldrh	r3, [r7, #0]
 8004af0:	0419      	lsls	r1, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	629a      	str	r2, [r3, #40]	@ 0x28
 8004afc:	e028      	b.n	8004b50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4413      	add	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	73fb      	strb	r3, [r7, #15]
 8004b10:	e00d      	b.n	8004b2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	3340      	adds	r3, #64	@ 0x40
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	4413      	add	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3ec      	bcc.n	8004b12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b38:	883b      	ldrh	r3, [r7, #0]
 8004b3a:	0418      	lsls	r0, r3, #16
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6819      	ldr	r1, [r3, #0]
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	4302      	orrs	r2, r0
 8004b48:	3340      	adds	r3, #64	@ 0x40
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	887a      	ldrh	r2, [r7, #2]
 8004b70:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e267      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d075      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bb6:	4b88      	ldr	r3, [pc, #544]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d00c      	beq.n	8004bdc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc2:	4b85      	ldr	r3, [pc, #532]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d112      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bce:	4b82      	ldr	r3, [pc, #520]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bda:	d10b      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d05b      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x108>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d157      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e242      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bfc:	d106      	bne.n	8004c0c <HAL_RCC_OscConfig+0x74>
 8004bfe:	4b76      	ldr	r3, [pc, #472]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a75      	ldr	r2, [pc, #468]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e01d      	b.n	8004c48 <HAL_RCC_OscConfig+0xb0>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x98>
 8004c16:	4b70      	ldr	r3, [pc, #448]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a6f      	ldr	r2, [pc, #444]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a6c      	ldr	r2, [pc, #432]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e00b      	b.n	8004c48 <HAL_RCC_OscConfig+0xb0>
 8004c30:	4b69      	ldr	r3, [pc, #420]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a68      	ldr	r2, [pc, #416]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	4b66      	ldr	r3, [pc, #408]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a65      	ldr	r2, [pc, #404]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d013      	beq.n	8004c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c50:	f7fd f890 	bl	8001d74 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c58:	f7fd f88c 	bl	8001d74 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	@ 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e207      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0xc0>
 8004c76:	e014      	b.n	8004ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fd f87c 	bl	8001d74 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c80:	f7fd f878 	bl	8001d74 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	@ 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e1f3      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c92:	4b51      	ldr	r3, [pc, #324]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0xe8>
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d063      	beq.n	8004d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cae:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cba:	4b47      	ldr	r3, [pc, #284]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d11c      	bne.n	8004d00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc6:	4b44      	ldr	r3, [pc, #272]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d116      	bne.n	8004d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd2:	4b41      	ldr	r3, [pc, #260]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_RCC_OscConfig+0x152>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d001      	beq.n	8004cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e1c7      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cea:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4937      	ldr	r1, [pc, #220]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfe:	e03a      	b.n	8004d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d020      	beq.n	8004d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d08:	4b34      	ldr	r3, [pc, #208]	@ (8004ddc <HAL_RCC_OscConfig+0x244>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0e:	f7fd f831 	bl	8001d74 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d16:	f7fd f82d 	bl	8001d74 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e1a8      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d28:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d34:	4b28      	ldr	r3, [pc, #160]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	4925      	ldr	r1, [pc, #148]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]
 8004d48:	e015      	b.n	8004d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4a:	4b24      	ldr	r3, [pc, #144]	@ (8004ddc <HAL_RCC_OscConfig+0x244>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d50:	f7fd f810 	bl	8001d74 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d58:	f7fd f80c 	bl	8001d74 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e187      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d036      	beq.n	8004df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8a:	4b15      	ldr	r3, [pc, #84]	@ (8004de0 <HAL_RCC_OscConfig+0x248>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d90:	f7fc fff0 	bl	8001d74 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d98:	f7fc ffec 	bl	8001d74 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e167      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004daa:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <HAL_RCC_OscConfig+0x240>)
 8004dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0x200>
 8004db6:	e01b      	b.n	8004df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db8:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <HAL_RCC_OscConfig+0x248>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dbe:	f7fc ffd9 	bl	8001d74 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc4:	e00e      	b.n	8004de4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc6:	f7fc ffd5 	bl	8001d74 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d907      	bls.n	8004de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e150      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	42470000 	.word	0x42470000
 8004de0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de4:	4b88      	ldr	r3, [pc, #544]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ea      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8097 	beq.w	8004f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e02:	4b81      	ldr	r3, [pc, #516]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10f      	bne.n	8004e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	4b7d      	ldr	r3, [pc, #500]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e16:	4a7c      	ldr	r2, [pc, #496]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2e:	4b77      	ldr	r3, [pc, #476]	@ (800500c <HAL_RCC_OscConfig+0x474>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d118      	bne.n	8004e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3a:	4b74      	ldr	r3, [pc, #464]	@ (800500c <HAL_RCC_OscConfig+0x474>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a73      	ldr	r2, [pc, #460]	@ (800500c <HAL_RCC_OscConfig+0x474>)
 8004e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e46:	f7fc ff95 	bl	8001d74 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4e:	f7fc ff91 	bl	8001d74 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e10c      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e60:	4b6a      	ldr	r3, [pc, #424]	@ (800500c <HAL_RCC_OscConfig+0x474>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d106      	bne.n	8004e82 <HAL_RCC_OscConfig+0x2ea>
 8004e74:	4b64      	ldr	r3, [pc, #400]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e78:	4a63      	ldr	r2, [pc, #396]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e80:	e01c      	b.n	8004ebc <HAL_RCC_OscConfig+0x324>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x30c>
 8004e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8e:	4a5e      	ldr	r2, [pc, #376]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004e90:	f043 0304 	orr.w	r3, r3, #4
 8004e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e96:	4b5c      	ldr	r3, [pc, #368]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9a:	4a5b      	ldr	r2, [pc, #364]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea2:	e00b      	b.n	8004ebc <HAL_RCC_OscConfig+0x324>
 8004ea4:	4b58      	ldr	r3, [pc, #352]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea8:	4a57      	ldr	r2, [pc, #348]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb0:	4b55      	ldr	r3, [pc, #340]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb4:	4a54      	ldr	r2, [pc, #336]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004eb6:	f023 0304 	bic.w	r3, r3, #4
 8004eba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d015      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec4:	f7fc ff56 	bl	8001d74 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ecc:	f7fc ff52 	bl	8001d74 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e0cb      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee2:	4b49      	ldr	r3, [pc, #292]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0ee      	beq.n	8004ecc <HAL_RCC_OscConfig+0x334>
 8004eee:	e014      	b.n	8004f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef0:	f7fc ff40 	bl	8001d74 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fc ff3c 	bl	8001d74 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0b5      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ee      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f20:	4b39      	ldr	r3, [pc, #228]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	4a38      	ldr	r2, [pc, #224]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80a1 	beq.w	8005078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f36:	4b34      	ldr	r3, [pc, #208]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d05c      	beq.n	8004ffc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d141      	bne.n	8004fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4a:	4b31      	ldr	r3, [pc, #196]	@ (8005010 <HAL_RCC_OscConfig+0x478>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fc ff10 	bl	8001d74 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fc ff0c 	bl	8001d74 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e087      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6a:	4b27      	ldr	r3, [pc, #156]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69da      	ldr	r2, [r3, #28]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	019b      	lsls	r3, r3, #6
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	491b      	ldr	r1, [pc, #108]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8005010 <HAL_RCC_OscConfig+0x478>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa6:	f7fc fee5 	bl	8001d74 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fae:	f7fc fee1 	bl	8001d74 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e05c      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc0:	4b11      	ldr	r3, [pc, #68]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x416>
 8004fcc:	e054      	b.n	8005078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fce:	4b10      	ldr	r3, [pc, #64]	@ (8005010 <HAL_RCC_OscConfig+0x478>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fc fece 	bl	8001d74 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fc feca 	bl	8001d74 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e045      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fee:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x444>
 8004ffa:	e03d      	b.n	8005078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d107      	bne.n	8005014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e038      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
 8005008:	40023800 	.word	0x40023800
 800500c:	40007000 	.word	0x40007000
 8005010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005014:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <HAL_RCC_OscConfig+0x4ec>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d028      	beq.n	8005074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800502c:	429a      	cmp	r2, r3
 800502e:	d121      	bne.n	8005074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d11a      	bne.n	8005074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005044:	4013      	ands	r3, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800504a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800504c:	4293      	cmp	r3, r2
 800504e:	d111      	bne.n	8005074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	3b01      	subs	r3, #1
 800505e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d107      	bne.n	8005074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40023800 	.word	0x40023800

08005088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0cc      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800509c:	4b68      	ldr	r3, [pc, #416]	@ (8005240 <HAL_RCC_ClockConfig+0x1b8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d90c      	bls.n	80050c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b65      	ldr	r3, [pc, #404]	@ (8005240 <HAL_RCC_ClockConfig+0x1b8>)
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b2:	4b63      	ldr	r3, [pc, #396]	@ (8005240 <HAL_RCC_ClockConfig+0x1b8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d001      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0b8      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d020      	beq.n	8005112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050dc:	4b59      	ldr	r3, [pc, #356]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	4a58      	ldr	r2, [pc, #352]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f4:	4b53      	ldr	r3, [pc, #332]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4a52      	ldr	r2, [pc, #328]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005100:	4b50      	ldr	r3, [pc, #320]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	494d      	ldr	r1, [pc, #308]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d044      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d107      	bne.n	8005136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	4b47      	ldr	r3, [pc, #284]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d119      	bne.n	8005166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e07f      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d003      	beq.n	8005146 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005142:	2b03      	cmp	r3, #3
 8005144:	d107      	bne.n	8005156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005146:	4b3f      	ldr	r3, [pc, #252]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e06f      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005156:	4b3b      	ldr	r3, [pc, #236]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e067      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005166:	4b37      	ldr	r3, [pc, #220]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f023 0203 	bic.w	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4934      	ldr	r1, [pc, #208]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	4313      	orrs	r3, r2
 8005176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005178:	f7fc fdfc 	bl	8001d74 <HAL_GetTick>
 800517c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517e:	e00a      	b.n	8005196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005180:	f7fc fdf8 	bl	8001d74 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e04f      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005196:	4b2b      	ldr	r3, [pc, #172]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 020c 	and.w	r2, r3, #12
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d1eb      	bne.n	8005180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a8:	4b25      	ldr	r3, [pc, #148]	@ (8005240 <HAL_RCC_ClockConfig+0x1b8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d20c      	bcs.n	80051d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b6:	4b22      	ldr	r3, [pc, #136]	@ (8005240 <HAL_RCC_ClockConfig+0x1b8>)
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b20      	ldr	r3, [pc, #128]	@ (8005240 <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e032      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051dc:	4b19      	ldr	r3, [pc, #100]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4916      	ldr	r1, [pc, #88]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051fa:	4b12      	ldr	r3, [pc, #72]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	490e      	ldr	r1, [pc, #56]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800520e:	f000 f821 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8005212:	4602      	mov	r2, r0
 8005214:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	490a      	ldr	r1, [pc, #40]	@ (8005248 <HAL_RCC_ClockConfig+0x1c0>)
 8005220:	5ccb      	ldrb	r3, [r1, r3]
 8005222:	fa22 f303 	lsr.w	r3, r2, r3
 8005226:	4a09      	ldr	r2, [pc, #36]	@ (800524c <HAL_RCC_ClockConfig+0x1c4>)
 8005228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800522a:	4b09      	ldr	r3, [pc, #36]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f7fc fc6e 	bl	8001b10 <HAL_InitTick>

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40023c00 	.word	0x40023c00
 8005244:	40023800 	.word	0x40023800
 8005248:	0800cff0 	.word	0x0800cff0
 800524c:	20000000 	.word	0x20000000
 8005250:	20000004 	.word	0x20000004

08005254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005258:	b090      	sub	sp, #64	@ 0x40
 800525a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800526c:	4b59      	ldr	r3, [pc, #356]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	2b08      	cmp	r3, #8
 8005276:	d00d      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x40>
 8005278:	2b08      	cmp	r3, #8
 800527a:	f200 80a1 	bhi.w	80053c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x34>
 8005282:	2b04      	cmp	r3, #4
 8005284:	d003      	beq.n	800528e <HAL_RCC_GetSysClockFreq+0x3a>
 8005286:	e09b      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005288:	4b53      	ldr	r3, [pc, #332]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800528a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800528c:	e09b      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800528e:	4b53      	ldr	r3, [pc, #332]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x188>)
 8005290:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005292:	e098      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005294:	4b4f      	ldr	r3, [pc, #316]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800529c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800529e:	4b4d      	ldr	r3, [pc, #308]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d028      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052aa:	4b4a      	ldr	r3, [pc, #296]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	099b      	lsrs	r3, r3, #6
 80052b0:	2200      	movs	r2, #0
 80052b2:	623b      	str	r3, [r7, #32]
 80052b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052bc:	2100      	movs	r1, #0
 80052be:	4b47      	ldr	r3, [pc, #284]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x188>)
 80052c0:	fb03 f201 	mul.w	r2, r3, r1
 80052c4:	2300      	movs	r3, #0
 80052c6:	fb00 f303 	mul.w	r3, r0, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	4a43      	ldr	r2, [pc, #268]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x188>)
 80052ce:	fba0 1202 	umull	r1, r2, r0, r2
 80052d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052d4:	460a      	mov	r2, r1
 80052d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80052d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052da:	4413      	add	r3, r2
 80052dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e0:	2200      	movs	r2, #0
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	61fa      	str	r2, [r7, #28]
 80052e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80052ee:	f7fa ff77 	bl	80001e0 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4613      	mov	r3, r2
 80052f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052fa:	e053      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052fc:	4b35      	ldr	r3, [pc, #212]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	099b      	lsrs	r3, r3, #6
 8005302:	2200      	movs	r2, #0
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	617a      	str	r2, [r7, #20]
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800530e:	f04f 0b00 	mov.w	fp, #0
 8005312:	4652      	mov	r2, sl
 8005314:	465b      	mov	r3, fp
 8005316:	f04f 0000 	mov.w	r0, #0
 800531a:	f04f 0100 	mov.w	r1, #0
 800531e:	0159      	lsls	r1, r3, #5
 8005320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005324:	0150      	lsls	r0, r2, #5
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	ebb2 080a 	subs.w	r8, r2, sl
 800532e:	eb63 090b 	sbc.w	r9, r3, fp
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800533e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005342:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005346:	ebb2 0408 	subs.w	r4, r2, r8
 800534a:	eb63 0509 	sbc.w	r5, r3, r9
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	00eb      	lsls	r3, r5, #3
 8005358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800535c:	00e2      	lsls	r2, r4, #3
 800535e:	4614      	mov	r4, r2
 8005360:	461d      	mov	r5, r3
 8005362:	eb14 030a 	adds.w	r3, r4, sl
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	eb45 030b 	adc.w	r3, r5, fp
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800537a:	4629      	mov	r1, r5
 800537c:	028b      	lsls	r3, r1, #10
 800537e:	4621      	mov	r1, r4
 8005380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005384:	4621      	mov	r1, r4
 8005386:	028a      	lsls	r2, r1, #10
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538e:	2200      	movs	r2, #0
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	60fa      	str	r2, [r7, #12]
 8005394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005398:	f7fa ff22 	bl	80001e0 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4613      	mov	r3, r2
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	3301      	adds	r3, #1
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80053b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053be:	e002      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c0:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80053c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3740      	adds	r7, #64	@ 0x40
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	00f42400 	.word	0x00f42400
 80053dc:	017d7840 	.word	0x017d7840

080053e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e4:	4b03      	ldr	r3, [pc, #12]	@ (80053f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000000 	.word	0x20000000

080053f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053fc:	f7ff fff0 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	0a9b      	lsrs	r3, r3, #10
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4903      	ldr	r1, [pc, #12]	@ (800541c <HAL_RCC_GetPCLK1Freq+0x24>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005414:	4618      	mov	r0, r3
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40023800 	.word	0x40023800
 800541c:	0800d000 	.word	0x0800d000

08005420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	220f      	movs	r2, #15
 800542e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005430:	4b12      	ldr	r3, [pc, #72]	@ (800547c <HAL_RCC_GetClockConfig+0x5c>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 0203 	and.w	r2, r3, #3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800543c:	4b0f      	ldr	r3, [pc, #60]	@ (800547c <HAL_RCC_GetClockConfig+0x5c>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005448:	4b0c      	ldr	r3, [pc, #48]	@ (800547c <HAL_RCC_GetClockConfig+0x5c>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005454:	4b09      	ldr	r3, [pc, #36]	@ (800547c <HAL_RCC_GetClockConfig+0x5c>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	08db      	lsrs	r3, r3, #3
 800545a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005462:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <HAL_RCC_GetClockConfig+0x60>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0207 	and.w	r2, r3, #7
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	601a      	str	r2, [r3, #0]
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40023800 	.word	0x40023800
 8005480:	40023c00 	.word	0x40023c00

08005484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e07b      	b.n	800558e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	2b00      	cmp	r3, #0
 800549c:	d108      	bne.n	80054b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054a6:	d009      	beq.n	80054bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	61da      	str	r2, [r3, #28]
 80054ae:	e005      	b.n	80054bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fc fad2 	bl	8001a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005540:	ea42 0103 	orr.w	r1, r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	f003 0104 	and.w	r1, r3, #4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005562:	f003 0210 	and.w	r2, r3, #16
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69da      	ldr	r2, [r3, #28]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800557c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b08a      	sub	sp, #40	@ 0x28
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055a4:	2301      	movs	r3, #1
 80055a6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a8:	f7fc fbe4 	bl	8001d74 <HAL_GetTick>
 80055ac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055b4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80055bc:	887b      	ldrh	r3, [r7, #2]
 80055be:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055c0:	7ffb      	ldrb	r3, [r7, #31]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d00c      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x4a>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055cc:	d106      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x46>
 80055d6:	7ffb      	ldrb	r3, [r7, #31]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d001      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
 80055de:	e17f      	b.n	80058e0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x5c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x5c>
 80055ec:	887b      	ldrh	r3, [r7, #2]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e174      	b.n	80058e0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_SPI_TransmitReceive+0x6e>
 8005600:	2302      	movs	r3, #2
 8005602:	e16d      	b.n	80058e0 <HAL_SPI_TransmitReceive+0x34a>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b04      	cmp	r3, #4
 8005616:	d003      	beq.n	8005620 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2205      	movs	r2, #5
 800561c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	887a      	ldrh	r2, [r7, #2]
 8005630:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	887a      	ldrh	r2, [r7, #2]
 8005636:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	887a      	ldrh	r2, [r7, #2]
 8005642:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	887a      	ldrh	r2, [r7, #2]
 8005648:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005660:	2b40      	cmp	r3, #64	@ 0x40
 8005662:	d007      	beq.n	8005674 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800567c:	d17e      	bne.n	800577c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <HAL_SPI_TransmitReceive+0xf6>
 8005686:	8afb      	ldrh	r3, [r7, #22]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d16c      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569c:	1c9a      	adds	r2, r3, #2
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056b0:	e059      	b.n	8005766 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d11b      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x162>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d016      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x162>
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d113      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d4:	881a      	ldrh	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e0:	1c9a      	adds	r2, r3, #2
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b01      	cmp	r3, #1
 8005704:	d119      	bne.n	800573a <HAL_SPI_TransmitReceive+0x1a4>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d014      	beq.n	800573a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	b292      	uxth	r2, r2
 800571c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005722:	1c9a      	adds	r2, r3, #2
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005736:	2301      	movs	r3, #1
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800573a:	f7fc fb1b 	bl	8001d74 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005746:	429a      	cmp	r2, r3
 8005748:	d80d      	bhi.n	8005766 <HAL_SPI_TransmitReceive+0x1d0>
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d009      	beq.n	8005766 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e0bc      	b.n	80058e0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1a0      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x11c>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d19b      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x11c>
 800577a:	e082      	b.n	8005882 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_SPI_TransmitReceive+0x1f4>
 8005784:	8afb      	ldrh	r3, [r7, #22]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d171      	bne.n	800586e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057b0:	e05d      	b.n	800586e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d11c      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x264>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d017      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x264>
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d114      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	330c      	adds	r3, #12
 80057da:	7812      	ldrb	r2, [r2, #0]
 80057dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d119      	bne.n	800583c <HAL_SPI_TransmitReceive+0x2a6>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d014      	beq.n	800583c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005838:	2301      	movs	r3, #1
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800583c:	f7fc fa9a 	bl	8001d74 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005848:	429a      	cmp	r2, r3
 800584a:	d803      	bhi.n	8005854 <HAL_SPI_TransmitReceive+0x2be>
 800584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d102      	bne.n	800585a <HAL_SPI_TransmitReceive+0x2c4>
 8005854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e038      	b.n	80058e0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d19c      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x21c>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d197      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005882:	6a3a      	ldr	r2, [r7, #32]
 8005884:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f8b6 	bl	80059f8 <SPI_EndRxTxTransaction>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d008      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e01d      	b.n	80058e0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058ac:	2300      	movs	r3, #0
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80058de:	2300      	movs	r3, #0
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3728      	adds	r7, #40	@ 0x28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	4613      	mov	r3, r2
 80058f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058f8:	f7fc fa3c 	bl	8001d74 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	4413      	add	r3, r2
 8005906:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005908:	f7fc fa34 	bl	8001d74 <HAL_GetTick>
 800590c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800590e:	4b39      	ldr	r3, [pc, #228]	@ (80059f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	015b      	lsls	r3, r3, #5
 8005914:	0d1b      	lsrs	r3, r3, #20
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	fb02 f303 	mul.w	r3, r2, r3
 800591c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800591e:	e055      	b.n	80059cc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d051      	beq.n	80059cc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005928:	f7fc fa24 	bl	8001d74 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	429a      	cmp	r2, r3
 8005936:	d902      	bls.n	800593e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d13d      	bne.n	80059ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800594c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005956:	d111      	bne.n	800597c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005960:	d004      	beq.n	800596c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800596a:	d107      	bne.n	800597c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800597a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005984:	d10f      	bne.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e018      	b.n	80059ec <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	e002      	b.n	80059cc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4013      	ands	r3, r2
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	429a      	cmp	r2, r3
 80059da:	bf0c      	ite	eq
 80059dc:	2301      	moveq	r3, #1
 80059de:	2300      	movne	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d19a      	bne.n	8005920 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	20000000 	.word	0x20000000

080059f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f7ff ff6a 	bl	80058e8 <SPI_WaitFlagStateUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d007      	beq.n	8005a2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e032      	b.n	8005a90 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a98 <SPI_EndRxTxTransaction+0xa0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <SPI_EndRxTxTransaction+0xa4>)
 8005a30:	fba2 2303 	umull	r2, r3, r2, r3
 8005a34:	0d5b      	lsrs	r3, r3, #21
 8005a36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a48:	d112      	bne.n	8005a70 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2200      	movs	r2, #0
 8005a52:	2180      	movs	r1, #128	@ 0x80
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff ff47 	bl	80058e8 <SPI_WaitFlagStateUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d016      	beq.n	8005a8e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e00f      	b.n	8005a90 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b80      	cmp	r3, #128	@ 0x80
 8005a88:	d0f2      	beq.n	8005a70 <SPI_EndRxTxTransaction+0x78>
 8005a8a:	e000      	b.n	8005a8e <SPI_EndRxTxTransaction+0x96>
        break;
 8005a8c:	bf00      	nop
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000000 	.word	0x20000000
 8005a9c:	165e9f81 	.word	0x165e9f81

08005aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e041      	b.n	8005b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f839 	bl	8005b3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f000 f9b2 	bl	8005e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d001      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e044      	b.n	8005bf6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1e      	ldr	r2, [pc, #120]	@ (8005c04 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d018      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b96:	d013      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005c08 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00e      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a19      	ldr	r2, [pc, #100]	@ (8005c0c <HAL_TIM_Base_Start_IT+0xb8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d009      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a17      	ldr	r2, [pc, #92]	@ (8005c10 <HAL_TIM_Base_Start_IT+0xbc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a16      	ldr	r2, [pc, #88]	@ (8005c14 <HAL_TIM_Base_Start_IT+0xc0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d111      	bne.n	8005be4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b06      	cmp	r3, #6
 8005bd0:	d010      	beq.n	8005bf4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0201 	orr.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be2:	e007      	b.n	8005bf4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	40014000 	.word	0x40014000

08005c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d020      	beq.n	8005c7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01b      	beq.n	8005c7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0202 	mvn.w	r2, #2
 8005c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f8d2 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005c68:	e005      	b.n	8005c76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f8c4 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f8d5 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d020      	beq.n	8005cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01b      	beq.n	8005cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0204 	mvn.w	r2, #4
 8005c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f8ac 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005cb4:	e005      	b.n	8005cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f89e 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f8af 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d020      	beq.n	8005d14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01b      	beq.n	8005d14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0208 	mvn.w	r2, #8
 8005ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2204      	movs	r2, #4
 8005cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f886 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005d00:	e005      	b.n	8005d0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f878 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f889 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d020      	beq.n	8005d60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f003 0310 	and.w	r3, r3, #16
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01b      	beq.n	8005d60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0210 	mvn.w	r2, #16
 8005d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2208      	movs	r2, #8
 8005d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f860 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005d4c:	e005      	b.n	8005d5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f852 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f863 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00c      	beq.n	8005d84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0201 	mvn.w	r2, #1
 8005d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fa fe7a 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00c      	beq.n	8005da8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f8e0 	bl	8005f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00c      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f834 	bl	8005e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00c      	beq.n	8005df0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0220 	mvn.w	r2, #32
 8005de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f8b2 	bl	8005f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a37      	ldr	r2, [pc, #220]	@ (8005f38 <TIM_Base_SetConfig+0xf0>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00f      	beq.n	8005e80 <TIM_Base_SetConfig+0x38>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e66:	d00b      	beq.n	8005e80 <TIM_Base_SetConfig+0x38>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a34      	ldr	r2, [pc, #208]	@ (8005f3c <TIM_Base_SetConfig+0xf4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d007      	beq.n	8005e80 <TIM_Base_SetConfig+0x38>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a33      	ldr	r2, [pc, #204]	@ (8005f40 <TIM_Base_SetConfig+0xf8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_Base_SetConfig+0x38>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a32      	ldr	r2, [pc, #200]	@ (8005f44 <TIM_Base_SetConfig+0xfc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d108      	bne.n	8005e92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a28      	ldr	r2, [pc, #160]	@ (8005f38 <TIM_Base_SetConfig+0xf0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01b      	beq.n	8005ed2 <TIM_Base_SetConfig+0x8a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea0:	d017      	beq.n	8005ed2 <TIM_Base_SetConfig+0x8a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a25      	ldr	r2, [pc, #148]	@ (8005f3c <TIM_Base_SetConfig+0xf4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <TIM_Base_SetConfig+0x8a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a24      	ldr	r2, [pc, #144]	@ (8005f40 <TIM_Base_SetConfig+0xf8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00f      	beq.n	8005ed2 <TIM_Base_SetConfig+0x8a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a23      	ldr	r2, [pc, #140]	@ (8005f44 <TIM_Base_SetConfig+0xfc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00b      	beq.n	8005ed2 <TIM_Base_SetConfig+0x8a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a22      	ldr	r2, [pc, #136]	@ (8005f48 <TIM_Base_SetConfig+0x100>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <TIM_Base_SetConfig+0x8a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a21      	ldr	r2, [pc, #132]	@ (8005f4c <TIM_Base_SetConfig+0x104>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_Base_SetConfig+0x8a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a20      	ldr	r2, [pc, #128]	@ (8005f50 <TIM_Base_SetConfig+0x108>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d108      	bne.n	8005ee4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a0c      	ldr	r2, [pc, #48]	@ (8005f38 <TIM_Base_SetConfig+0xf0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d103      	bne.n	8005f12 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f043 0204 	orr.w	r2, r3, #4
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	601a      	str	r2, [r3, #0]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800

08005f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	f107 001c 	add.w	r0, r7, #28
 8005f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d123      	bne.n	8005fde <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d105      	bne.n	8005fd2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 fae8 	bl	80075a8 <USB_CoreReset>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73fb      	strb	r3, [r7, #15]
 8005fdc:	e01b      	b.n	8006016 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 fadc 	bl	80075a8 <USB_CoreReset>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ff4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d106      	bne.n	800600a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006000:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	639a      	str	r2, [r3, #56]	@ 0x38
 8006008:	e005      	b.n	8006016 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006016:	7fbb      	ldrb	r3, [r7, #30]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10b      	bne.n	8006034 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f043 0206 	orr.w	r2, r3, #6
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006040:	b004      	add	sp, #16
 8006042:	4770      	bx	lr

08006044 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	4613      	mov	r3, r2
 8006050:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d165      	bne.n	8006124 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4a41      	ldr	r2, [pc, #260]	@ (8006160 <USB_SetTurnaroundTime+0x11c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d906      	bls.n	800606e <USB_SetTurnaroundTime+0x2a>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4a40      	ldr	r2, [pc, #256]	@ (8006164 <USB_SetTurnaroundTime+0x120>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d202      	bcs.n	800606e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006068:	230f      	movs	r3, #15
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	e062      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	4a3c      	ldr	r2, [pc, #240]	@ (8006164 <USB_SetTurnaroundTime+0x120>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d306      	bcc.n	8006084 <USB_SetTurnaroundTime+0x40>
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4a3b      	ldr	r2, [pc, #236]	@ (8006168 <USB_SetTurnaroundTime+0x124>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d202      	bcs.n	8006084 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800607e:	230e      	movs	r3, #14
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	e057      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4a38      	ldr	r2, [pc, #224]	@ (8006168 <USB_SetTurnaroundTime+0x124>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d306      	bcc.n	800609a <USB_SetTurnaroundTime+0x56>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4a37      	ldr	r2, [pc, #220]	@ (800616c <USB_SetTurnaroundTime+0x128>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d202      	bcs.n	800609a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006094:	230d      	movs	r3, #13
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	e04c      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4a33      	ldr	r2, [pc, #204]	@ (800616c <USB_SetTurnaroundTime+0x128>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d306      	bcc.n	80060b0 <USB_SetTurnaroundTime+0x6c>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	4a32      	ldr	r2, [pc, #200]	@ (8006170 <USB_SetTurnaroundTime+0x12c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d802      	bhi.n	80060b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80060aa:	230c      	movs	r3, #12
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e041      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006170 <USB_SetTurnaroundTime+0x12c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d906      	bls.n	80060c6 <USB_SetTurnaroundTime+0x82>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4a2e      	ldr	r2, [pc, #184]	@ (8006174 <USB_SetTurnaroundTime+0x130>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d802      	bhi.n	80060c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80060c0:	230b      	movs	r3, #11
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e036      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006174 <USB_SetTurnaroundTime+0x130>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d906      	bls.n	80060dc <USB_SetTurnaroundTime+0x98>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4a29      	ldr	r2, [pc, #164]	@ (8006178 <USB_SetTurnaroundTime+0x134>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d802      	bhi.n	80060dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80060d6:	230a      	movs	r3, #10
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	e02b      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4a26      	ldr	r2, [pc, #152]	@ (8006178 <USB_SetTurnaroundTime+0x134>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d906      	bls.n	80060f2 <USB_SetTurnaroundTime+0xae>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4a25      	ldr	r2, [pc, #148]	@ (800617c <USB_SetTurnaroundTime+0x138>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d202      	bcs.n	80060f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80060ec:	2309      	movs	r3, #9
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e020      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	4a21      	ldr	r2, [pc, #132]	@ (800617c <USB_SetTurnaroundTime+0x138>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d306      	bcc.n	8006108 <USB_SetTurnaroundTime+0xc4>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	4a20      	ldr	r2, [pc, #128]	@ (8006180 <USB_SetTurnaroundTime+0x13c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d802      	bhi.n	8006108 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006102:	2308      	movs	r3, #8
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	e015      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4a1d      	ldr	r2, [pc, #116]	@ (8006180 <USB_SetTurnaroundTime+0x13c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d906      	bls.n	800611e <USB_SetTurnaroundTime+0xda>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4a1c      	ldr	r2, [pc, #112]	@ (8006184 <USB_SetTurnaroundTime+0x140>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d202      	bcs.n	800611e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006118:	2307      	movs	r3, #7
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	e00a      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800611e:	2306      	movs	r3, #6
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	e007      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d102      	bne.n	8006130 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800612a:	2309      	movs	r3, #9
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e001      	b.n	8006134 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006130:	2309      	movs	r3, #9
 8006132:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	029b      	lsls	r3, r3, #10
 8006148:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800614c:	431a      	orrs	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	00d8acbf 	.word	0x00d8acbf
 8006164:	00e4e1c0 	.word	0x00e4e1c0
 8006168:	00f42400 	.word	0x00f42400
 800616c:	01067380 	.word	0x01067380
 8006170:	011a499f 	.word	0x011a499f
 8006174:	01312cff 	.word	0x01312cff
 8006178:	014ca43f 	.word	0x014ca43f
 800617c:	016e3600 	.word	0x016e3600
 8006180:	01a6ab1f 	.word	0x01a6ab1f
 8006184:	01e84800 	.word	0x01e84800

08006188 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f043 0201 	orr.w	r2, r3, #1
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d115      	bne.n	800621a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061fa:	200a      	movs	r0, #10
 80061fc:	f7fb fdc6 	bl	8001d8c <HAL_Delay>
      ms += 10U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	330a      	adds	r3, #10
 8006204:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 f93f 	bl	800748a <USB_GetMode>
 800620c:	4603      	mov	r3, r0
 800620e:	2b01      	cmp	r3, #1
 8006210:	d01e      	beq.n	8006250 <USB_SetCurrentMode+0x84>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2bc7      	cmp	r3, #199	@ 0xc7
 8006216:	d9f0      	bls.n	80061fa <USB_SetCurrentMode+0x2e>
 8006218:	e01a      	b.n	8006250 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d115      	bne.n	800624c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800622c:	200a      	movs	r0, #10
 800622e:	f7fb fdad 	bl	8001d8c <HAL_Delay>
      ms += 10U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	330a      	adds	r3, #10
 8006236:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 f926 	bl	800748a <USB_GetMode>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <USB_SetCurrentMode+0x84>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2bc7      	cmp	r3, #199	@ 0xc7
 8006248:	d9f0      	bls.n	800622c <USB_SetCurrentMode+0x60>
 800624a:	e001      	b.n	8006250 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e005      	b.n	800625c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2bc8      	cmp	r3, #200	@ 0xc8
 8006254:	d101      	bne.n	800625a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006264:	b084      	sub	sp, #16
 8006266:	b580      	push	{r7, lr}
 8006268:	b086      	sub	sp, #24
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	e009      	b.n	8006298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	3340      	adds	r3, #64	@ 0x40
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	2200      	movs	r2, #0
 8006290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	3301      	adds	r3, #1
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b0e      	cmp	r3, #14
 800629c:	d9f2      	bls.n	8006284 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800629e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d11c      	bne.n	80062e0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062b4:	f043 0302 	orr.w	r3, r3, #2
 80062b8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80062de:	e00b      	b.n	80062f8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062fe:	461a      	mov	r2, r3
 8006300:	2300      	movs	r3, #0
 8006302:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006304:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006308:	2b01      	cmp	r3, #1
 800630a:	d10d      	bne.n	8006328 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800630c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006314:	2100      	movs	r1, #0
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f968 	bl	80065ec <USB_SetDevSpeed>
 800631c:	e008      	b.n	8006330 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800631e:	2101      	movs	r1, #1
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f963 	bl	80065ec <USB_SetDevSpeed>
 8006326:	e003      	b.n	8006330 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006328:	2103      	movs	r1, #3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f95e 	bl	80065ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006330:	2110      	movs	r1, #16
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f8fa 	bl	800652c <USB_FlushTxFifo>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f924 	bl	8006590 <USB_FlushRxFifo>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006358:	461a      	mov	r2, r3
 800635a:	2300      	movs	r3, #0
 800635c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006364:	461a      	mov	r2, r3
 8006366:	2300      	movs	r3, #0
 8006368:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006370:	461a      	mov	r2, r3
 8006372:	2300      	movs	r3, #0
 8006374:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006376:	2300      	movs	r3, #0
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	e043      	b.n	8006404 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800638e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006392:	d118      	bne.n	80063c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10a      	bne.n	80063b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a6:	461a      	mov	r2, r3
 80063a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	e013      	b.n	80063d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063bc:	461a      	mov	r2, r3
 80063be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	e008      	b.n	80063d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d2:	461a      	mov	r2, r3
 80063d4:	2300      	movs	r3, #0
 80063d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	461a      	mov	r2, r3
 80063e6:	2300      	movs	r3, #0
 80063e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f6:	461a      	mov	r2, r3
 80063f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	3301      	adds	r3, #1
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006408:	461a      	mov	r2, r3
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	4293      	cmp	r3, r2
 800640e:	d3b5      	bcc.n	800637c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	e043      	b.n	800649e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800642c:	d118      	bne.n	8006460 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006440:	461a      	mov	r2, r3
 8006442:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	e013      	b.n	8006472 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006456:	461a      	mov	r2, r3
 8006458:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e008      	b.n	8006472 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800646c:	461a      	mov	r2, r3
 800646e:	2300      	movs	r3, #0
 8006470:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647e:	461a      	mov	r2, r3
 8006480:	2300      	movs	r3, #0
 8006482:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006490:	461a      	mov	r2, r3
 8006492:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006496:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	3301      	adds	r3, #1
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064a2:	461a      	mov	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d3b5      	bcc.n	8006416 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80064ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f043 0210 	orr.w	r2, r3, #16
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699a      	ldr	r2, [r3, #24]
 80064e4:	4b10      	ldr	r3, [pc, #64]	@ (8006528 <USB_DevInit+0x2c4>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f043 0208 	orr.w	r2, r3, #8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006500:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006504:	2b01      	cmp	r3, #1
 8006506:	d107      	bne.n	8006518 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006510:	f043 0304 	orr.w	r3, r3, #4
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006518:	7dfb      	ldrb	r3, [r7, #23]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006524:	b004      	add	sp, #16
 8006526:	4770      	bx	lr
 8006528:	803c3800 	.word	0x803c3800

0800652c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3301      	adds	r3, #1
 800653e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006546:	d901      	bls.n	800654c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e01b      	b.n	8006584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	daf2      	bge.n	800653a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	019b      	lsls	r3, r3, #6
 800655c:	f043 0220 	orr.w	r2, r3, #32
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006570:	d901      	bls.n	8006576 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e006      	b.n	8006584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d0f0      	beq.n	8006564 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3301      	adds	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065a8:	d901      	bls.n	80065ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e018      	b.n	80065e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	daf2      	bge.n	800659c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2210      	movs	r2, #16
 80065be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065cc:	d901      	bls.n	80065d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e006      	b.n	80065e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0310 	and.w	r3, r3, #16
 80065da:	2b10      	cmp	r3, #16
 80065dc:	d0f0      	beq.n	80065c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	68f9      	ldr	r1, [r7, #12]
 8006608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800661e:	b480      	push	{r7}
 8006620:	b087      	sub	sp, #28
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 0306 	and.w	r3, r3, #6
 8006636:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800663e:	2300      	movs	r3, #0
 8006640:	75fb      	strb	r3, [r7, #23]
 8006642:	e00a      	b.n	800665a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d002      	beq.n	8006650 <USB_GetDevSpeed+0x32>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b06      	cmp	r3, #6
 800664e:	d102      	bne.n	8006656 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006650:	2302      	movs	r3, #2
 8006652:	75fb      	strb	r3, [r7, #23]
 8006654:	e001      	b.n	800665a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006656:	230f      	movs	r3, #15
 8006658:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
}
 800665c:	4618      	mov	r0, r3
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d13a      	bne.n	80066fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	2101      	movs	r1, #1
 8006696:	fa01 f303 	lsl.w	r3, r1, r3
 800669a:	b29b      	uxth	r3, r3
 800669c:	68f9      	ldr	r1, [r7, #12]
 800669e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d155      	bne.n	8006768 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	791b      	ldrb	r3, [r3, #4]
 80066d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	059b      	lsls	r3, r3, #22
 80066de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066e0:	4313      	orrs	r3, r2
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	e036      	b.n	8006768 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	2101      	movs	r1, #1
 800670c:	fa01 f303 	lsl.w	r3, r1, r3
 8006710:	041b      	lsls	r3, r3, #16
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006718:	4313      	orrs	r3, r2
 800671a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d11a      	bne.n	8006768 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	791b      	ldrb	r3, [r3, #4]
 800674c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800674e:	430b      	orrs	r3, r1
 8006750:	4313      	orrs	r3, r2
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	440a      	add	r2, r1
 800675a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800675e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006766:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d161      	bne.n	8006858 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067aa:	d11f      	bne.n	80067ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	2101      	movs	r1, #1
 80067fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006802:	b29b      	uxth	r3, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800680c:	4013      	ands	r3, r2
 800680e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	2101      	movs	r1, #1
 8006822:	fa01 f303 	lsl.w	r3, r1, r3
 8006826:	b29b      	uxth	r3, r3
 8006828:	43db      	mvns	r3, r3
 800682a:	68f9      	ldr	r1, [r7, #12]
 800682c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006830:	4013      	ands	r3, r2
 8006832:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	0159      	lsls	r1, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	440b      	add	r3, r1
 800684a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684e:	4619      	mov	r1, r3
 8006850:	4b35      	ldr	r3, [pc, #212]	@ (8006928 <USB_DeactivateEndpoint+0x1b0>)
 8006852:	4013      	ands	r3, r2
 8006854:	600b      	str	r3, [r1, #0]
 8006856:	e060      	b.n	800691a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800686a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800686e:	d11f      	bne.n	80068b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	440a      	add	r2, r1
 8006886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800688a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800688e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	2101      	movs	r1, #1
 80068c2:	fa01 f303 	lsl.w	r3, r1, r3
 80068c6:	041b      	lsls	r3, r3, #16
 80068c8:	43db      	mvns	r3, r3
 80068ca:	68f9      	ldr	r1, [r7, #12]
 80068cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068d0:	4013      	ands	r3, r2
 80068d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068da:	69da      	ldr	r2, [r3, #28]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	2101      	movs	r1, #1
 80068e6:	fa01 f303 	lsl.w	r3, r1, r3
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	43db      	mvns	r3, r3
 80068ee:	68f9      	ldr	r1, [r7, #12]
 80068f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068f4:	4013      	ands	r3, r2
 80068f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	0159      	lsls	r1, r3, #5
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	440b      	add	r3, r1
 800690e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006912:	4619      	mov	r1, r3
 8006914:	4b05      	ldr	r3, [pc, #20]	@ (800692c <USB_DeactivateEndpoint+0x1b4>)
 8006916:	4013      	ands	r3, r2
 8006918:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	ec337800 	.word	0xec337800
 800692c:	eff37800 	.word	0xeff37800

08006930 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08a      	sub	sp, #40	@ 0x28
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	4613      	mov	r3, r2
 800693c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	2b01      	cmp	r3, #1
 800694e:	f040 817f 	bne.w	8006c50 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d132      	bne.n	80069c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006974:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006978:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800697c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006998:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800699c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	0151      	lsls	r1, r2, #5
 80069b0:	69fa      	ldr	r2, [r7, #28]
 80069b2:	440a      	add	r2, r1
 80069b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069b8:	0cdb      	lsrs	r3, r3, #19
 80069ba:	04db      	lsls	r3, r3, #19
 80069bc:	6113      	str	r3, [r2, #16]
 80069be:	e097      	b.n	8006af0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	0151      	lsls	r1, r2, #5
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	440a      	add	r2, r1
 80069d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069da:	0cdb      	lsrs	r3, r3, #19
 80069dc:	04db      	lsls	r3, r3, #19
 80069de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	0151      	lsls	r1, r2, #5
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	440a      	add	r2, r1
 80069f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80069fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a02:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d11a      	bne.n	8006a40 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d903      	bls.n	8006a1e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a3c:	6113      	str	r3, [r2, #16]
 8006a3e:	e044      	b.n	8006aca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	4413      	add	r3, r2
 8006a4a:	1e5a      	subs	r2, r3, #1
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a54:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a62:	691a      	ldr	r2, [r3, #16]
 8006a64:	8afb      	ldrh	r3, [r7, #22]
 8006a66:	04d9      	lsls	r1, r3, #19
 8006a68:	4ba4      	ldr	r3, [pc, #656]	@ (8006cfc <USB_EPStartXfer+0x3cc>)
 8006a6a:	400b      	ands	r3, r1
 8006a6c:	69b9      	ldr	r1, [r7, #24]
 8006a6e:	0148      	lsls	r0, r1, #5
 8006a70:	69f9      	ldr	r1, [r7, #28]
 8006a72:	4401      	add	r1, r0
 8006a74:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	791b      	ldrb	r3, [r3, #4]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d122      	bne.n	8006aca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	0151      	lsls	r1, r2, #5
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	440a      	add	r2, r1
 8006a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a9e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006aa2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	8afb      	ldrh	r3, [r7, #22]
 8006ab4:	075b      	lsls	r3, r3, #29
 8006ab6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006aba:	69b9      	ldr	r1, [r7, #24]
 8006abc:	0148      	lsls	r0, r1, #5
 8006abe:	69f9      	ldr	r1, [r7, #28]
 8006ac0:	4401      	add	r1, r0
 8006ac2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae0:	69b9      	ldr	r1, [r7, #24]
 8006ae2:	0148      	lsls	r0, r1, #5
 8006ae4:	69f9      	ldr	r1, [r7, #28]
 8006ae6:	4401      	add	r1, r0
 8006ae8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006aec:	4313      	orrs	r3, r2
 8006aee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d14b      	bne.n	8006b8e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d009      	beq.n	8006b12 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	791b      	ldrb	r3, [r3, #4]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d128      	bne.n	8006b6c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d110      	bne.n	8006b4c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	e00f      	b.n	8006b6c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	69fa      	ldr	r2, [r7, #28]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b86:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	e166      	b.n	8006e5c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	0151      	lsls	r1, r2, #5
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	440a      	add	r2, r1
 8006ba4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ba8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006bac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	791b      	ldrb	r3, [r3, #4]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d015      	beq.n	8006be2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 814e 	beq.w	8006e5c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	69f9      	ldr	r1, [r7, #28]
 8006bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	634b      	str	r3, [r1, #52]	@ 0x34
 8006be0:	e13c      	b.n	8006e5c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d110      	bne.n	8006c14 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	0151      	lsls	r1, r2, #5
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	440a      	add	r2, r1
 8006c08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e00f      	b.n	8006c34 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	0151      	lsls	r1, r2, #5
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	440a      	add	r2, r1
 8006c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c32:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	68d9      	ldr	r1, [r3, #12]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	b298      	uxth	r0, r3
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	4603      	mov	r3, r0
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f9b9 	bl	8006fc0 <USB_WritePacket>
 8006c4e:	e105      	b.n	8006e5c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c6a:	0cdb      	lsrs	r3, r3, #19
 8006c6c:	04db      	lsls	r3, r3, #19
 8006c6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c8a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c8e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c92:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d132      	bne.n	8006d00 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc8:	69b9      	ldr	r1, [r7, #24]
 8006cca:	0148      	lsls	r0, r1, #5
 8006ccc:	69f9      	ldr	r1, [r7, #28]
 8006cce:	4401      	add	r1, r0
 8006cd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cf2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cf6:	6113      	str	r3, [r2, #16]
 8006cf8:	e062      	b.n	8006dc0 <USB_EPStartXfer+0x490>
 8006cfa:	bf00      	nop
 8006cfc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d123      	bne.n	8006d50 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d1e:	69b9      	ldr	r1, [r7, #24]
 8006d20:	0148      	lsls	r0, r1, #5
 8006d22:	69f9      	ldr	r1, [r7, #28]
 8006d24:	4401      	add	r1, r0
 8006d26:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d4c:	6113      	str	r3, [r2, #16]
 8006d4e:	e037      	b.n	8006dc0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	4413      	add	r3, r2
 8006d5a:	1e5a      	subs	r2, r3, #1
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	8afa      	ldrh	r2, [r7, #22]
 8006d6c:	fb03 f202 	mul.w	r2, r3, r2
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	8afb      	ldrh	r3, [r7, #22]
 8006d84:	04d9      	lsls	r1, r3, #19
 8006d86:	4b38      	ldr	r3, [pc, #224]	@ (8006e68 <USB_EPStartXfer+0x538>)
 8006d88:	400b      	ands	r3, r1
 8006d8a:	69b9      	ldr	r1, [r7, #24]
 8006d8c:	0148      	lsls	r0, r1, #5
 8006d8e:	69f9      	ldr	r1, [r7, #28]
 8006d90:	4401      	add	r1, r0
 8006d92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d96:	4313      	orrs	r3, r2
 8006d98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db0:	69b9      	ldr	r1, [r7, #24]
 8006db2:	0148      	lsls	r0, r1, #5
 8006db4:	69f9      	ldr	r1, [r7, #28]
 8006db6:	4401      	add	r1, r0
 8006db8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d10d      	bne.n	8006de2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	68d9      	ldr	r1, [r3, #12]
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dde:	460a      	mov	r2, r1
 8006de0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	791b      	ldrb	r3, [r3, #4]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d128      	bne.n	8006e3c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d110      	bne.n	8006e1c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	e00f      	b.n	8006e3c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	0151      	lsls	r1, r2, #5
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	440a      	add	r2, r1
 8006e32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	1ff80000 	.word	0x1ff80000

08006e6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d14a      	bne.n	8006f20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ea2:	f040 8086 	bne.w	8006fb2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	7812      	ldrb	r2, [r2, #0]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ec4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ec8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ee8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006eec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d902      	bls.n	8006f04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
          break;
 8006f02:	e056      	b.n	8006fb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f1c:	d0e7      	beq.n	8006eee <USB_EPStopXfer+0x82>
 8006f1e:	e048      	b.n	8006fb2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f38:	d13b      	bne.n	8006fb2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	7812      	ldrb	r2, [r2, #0]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d902      	bls.n	8006f98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
          break;
 8006f96:	e00c      	b.n	8006fb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fb0:	d0e7      	beq.n	8006f82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b089      	sub	sp, #36	@ 0x24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4611      	mov	r1, r2
 8006fcc:	461a      	mov	r2, r3
 8006fce:	460b      	mov	r3, r1
 8006fd0:	71fb      	strb	r3, [r7, #7]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006fde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d123      	bne.n	800702e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fe6:	88bb      	ldrh	r3, [r7, #4]
 8006fe8:	3303      	adds	r3, #3
 8006fea:	089b      	lsrs	r3, r3, #2
 8006fec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e018      	b.n	8007026 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	031a      	lsls	r2, r3, #12
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007000:	461a      	mov	r2, r3
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	3301      	adds	r3, #1
 800700c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	3301      	adds	r3, #1
 8007012:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	3301      	adds	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	3301      	adds	r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	3301      	adds	r3, #1
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	429a      	cmp	r2, r3
 800702c:	d3e2      	bcc.n	8006ff4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3724      	adds	r7, #36	@ 0x24
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800703c:	b480      	push	{r7}
 800703e:	b08b      	sub	sp, #44	@ 0x2c
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	4613      	mov	r3, r2
 8007048:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	089b      	lsrs	r3, r3, #2
 8007056:	b29b      	uxth	r3, r3
 8007058:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007062:	2300      	movs	r3, #0
 8007064:	623b      	str	r3, [r7, #32]
 8007066:	e014      	b.n	8007092 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	601a      	str	r2, [r3, #0]
    pDest++;
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	3301      	adds	r3, #1
 8007078:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	3301      	adds	r3, #1
 800707e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	3301      	adds	r3, #1
 8007084:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	3301      	adds	r3, #1
 800708a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	3301      	adds	r3, #1
 8007090:	623b      	str	r3, [r7, #32]
 8007092:	6a3a      	ldr	r2, [r7, #32]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	429a      	cmp	r2, r3
 8007098:	d3e6      	bcc.n	8007068 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800709a:	8bfb      	ldrh	r3, [r7, #30]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01e      	beq.n	80070de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070aa:	461a      	mov	r2, r3
 80070ac:	f107 0310 	add.w	r3, r7, #16
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	701a      	strb	r2, [r3, #0]
      i++;
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	3301      	adds	r3, #1
 80070ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	3301      	adds	r3, #1
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80070d2:	8bfb      	ldrh	r3, [r7, #30]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070d8:	8bfb      	ldrh	r3, [r7, #30]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1ea      	bne.n	80070b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	372c      	adds	r7, #44	@ 0x2c
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d12c      	bne.n	8007162 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	db12      	blt.n	8007140 <USB_EPSetStall+0x54>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00f      	beq.n	8007140 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800713a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800713e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	440a      	add	r2, r1
 8007156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800715a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e02b      	b.n	80071ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	db12      	blt.n	800719a <USB_EPSetStall+0xae>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00f      	beq.n	800719a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	0151      	lsls	r1, r2, #5
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	440a      	add	r2, r1
 8007190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007194:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007198:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	0151      	lsls	r1, r2, #5
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	440a      	add	r2, r1
 80071b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	785b      	ldrb	r3, [r3, #1]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d128      	bne.n	8007236 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	0151      	lsls	r1, r2, #5
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	440a      	add	r2, r1
 80071fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007202:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	791b      	ldrb	r3, [r3, #4]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d003      	beq.n	8007214 <USB_EPClearStall+0x4c>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	791b      	ldrb	r3, [r3, #4]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d138      	bne.n	8007286 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	440a      	add	r2, r1
 800722a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800722e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	e027      	b.n	8007286 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	440a      	add	r2, r1
 800724c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007250:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007254:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	791b      	ldrb	r3, [r3, #4]
 800725a:	2b03      	cmp	r3, #3
 800725c:	d003      	beq.n	8007266 <USB_EPClearStall+0x9e>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	791b      	ldrb	r3, [r3, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d10f      	bne.n	8007286 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	440a      	add	r2, r1
 800727c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007284:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80072b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80072c8:	68f9      	ldr	r1, [r7, #12]
 80072ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072ce:	4313      	orrs	r3, r2
 80072d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072fa:	f023 0303 	bic.w	r3, r3, #3
 80072fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800730e:	f023 0302 	bic.w	r3, r3, #2
 8007312:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007322:	b480      	push	{r7}
 8007324:	b085      	sub	sp, #20
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800733c:	f023 0303 	bic.w	r3, r3, #3
 8007340:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007350:	f043 0302 	orr.w	r3, r3, #2
 8007354:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4013      	ands	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800737c:	68fb      	ldr	r3, [r7, #12]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	4013      	ands	r3, r2
 80073ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	0c1b      	lsrs	r3, r3, #16
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	4013      	ands	r3, r2
 80073e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	b29b      	uxth	r3, r3
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	4013      	ands	r3, r2
 800741e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007420:	68bb      	ldr	r3, [r7, #8]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800742e:	b480      	push	{r7}
 8007430:	b087      	sub	sp, #28
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800744e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007450:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	fa22 f303 	lsr.w	r3, r2, r3
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	b2db      	uxtb	r3, r3
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	4313      	orrs	r3, r2
 8007466:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4013      	ands	r3, r2
 800747a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800747c:	68bb      	ldr	r3, [r7, #8]
}
 800747e:	4618      	mov	r0, r3
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f003 0301 	and.w	r3, r3, #1
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80074c4:	f023 0307 	bic.w	r3, r3, #7
 80074c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	460b      	mov	r3, r1
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	333c      	adds	r3, #60	@ 0x3c
 8007502:	3304      	adds	r3, #4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	4a26      	ldr	r2, [pc, #152]	@ (80075a4 <USB_EP0_OutStart+0xb8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d90a      	bls.n	8007526 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800751c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007520:	d101      	bne.n	8007526 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	e037      	b.n	8007596 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752c:	461a      	mov	r2, r3
 800752e:	2300      	movs	r3, #0
 8007530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007540:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007544:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007554:	f043 0318 	orr.w	r3, r3, #24
 8007558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007568:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800756c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d10f      	bne.n	8007594 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800758e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007592:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	4f54300a 	.word	0x4f54300a

080075a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075c0:	d901      	bls.n	80075c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e022      	b.n	800760c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	daf2      	bge.n	80075b4 <USB_CoreReset+0xc>

  count = 10U;
 80075ce:	230a      	movs	r3, #10
 80075d0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80075d2:	e002      	b.n	80075da <USB_CoreReset+0x32>
  {
    count--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1f9      	bne.n	80075d4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	f043 0201 	orr.w	r2, r3, #1
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3301      	adds	r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075f8:	d901      	bls.n	80075fe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e006      	b.n	800760c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b01      	cmp	r3, #1
 8007608:	d0f0      	beq.n	80075ec <USB_CoreReset+0x44>

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007624:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007628:	f005 faa2 	bl	800cb70 <USBD_static_malloc>
 800762c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d109      	bne.n	8007648 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	32b0      	adds	r2, #176	@ 0xb0
 800763e:	2100      	movs	r1, #0
 8007640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007644:	2302      	movs	r3, #2
 8007646:	e0d4      	b.n	80077f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007648:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800764c:	2100      	movs	r1, #0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f005 fad2 	bl	800cbf8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	32b0      	adds	r2, #176	@ 0xb0
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	32b0      	adds	r2, #176	@ 0xb0
 800766e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	7c1b      	ldrb	r3, [r3, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d138      	bne.n	80076f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007680:	4b5e      	ldr	r3, [pc, #376]	@ (80077fc <USBD_CDC_Init+0x1e4>)
 8007682:	7819      	ldrb	r1, [r3, #0]
 8007684:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007688:	2202      	movs	r2, #2
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f005 f94d 	bl	800c92a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007690:	4b5a      	ldr	r3, [pc, #360]	@ (80077fc <USBD_CDC_Init+0x1e4>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 020f 	and.w	r2, r3, #15
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	3323      	adds	r3, #35	@ 0x23
 80076a6:	2201      	movs	r2, #1
 80076a8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076aa:	4b55      	ldr	r3, [pc, #340]	@ (8007800 <USBD_CDC_Init+0x1e8>)
 80076ac:	7819      	ldrb	r1, [r3, #0]
 80076ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076b2:	2202      	movs	r2, #2
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f005 f938 	bl	800c92a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076ba:	4b51      	ldr	r3, [pc, #324]	@ (8007800 <USBD_CDC_Init+0x1e8>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	f003 020f 	and.w	r2, r3, #15
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80076d2:	2201      	movs	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80076d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007804 <USBD_CDC_Init+0x1ec>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	f003 020f 	and.w	r2, r3, #15
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	4613      	mov	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	440b      	add	r3, r1
 80076ea:	331c      	adds	r3, #28
 80076ec:	2210      	movs	r2, #16
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e035      	b.n	800775e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076f2:	4b42      	ldr	r3, [pc, #264]	@ (80077fc <USBD_CDC_Init+0x1e4>)
 80076f4:	7819      	ldrb	r1, [r3, #0]
 80076f6:	2340      	movs	r3, #64	@ 0x40
 80076f8:	2202      	movs	r2, #2
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f005 f915 	bl	800c92a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007700:	4b3e      	ldr	r3, [pc, #248]	@ (80077fc <USBD_CDC_Init+0x1e4>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	3323      	adds	r3, #35	@ 0x23
 8007716:	2201      	movs	r2, #1
 8007718:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800771a:	4b39      	ldr	r3, [pc, #228]	@ (8007800 <USBD_CDC_Init+0x1e8>)
 800771c:	7819      	ldrb	r1, [r3, #0]
 800771e:	2340      	movs	r3, #64	@ 0x40
 8007720:	2202      	movs	r2, #2
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f005 f901 	bl	800c92a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007728:	4b35      	ldr	r3, [pc, #212]	@ (8007800 <USBD_CDC_Init+0x1e8>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 020f 	and.w	r2, r3, #15
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007740:	2201      	movs	r2, #1
 8007742:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007744:	4b2f      	ldr	r3, [pc, #188]	@ (8007804 <USBD_CDC_Init+0x1ec>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 020f 	and.w	r2, r3, #15
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	440b      	add	r3, r1
 8007758:	331c      	adds	r3, #28
 800775a:	2210      	movs	r2, #16
 800775c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800775e:	4b29      	ldr	r3, [pc, #164]	@ (8007804 <USBD_CDC_Init+0x1ec>)
 8007760:	7819      	ldrb	r1, [r3, #0]
 8007762:	2308      	movs	r3, #8
 8007764:	2203      	movs	r2, #3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f005 f8df 	bl	800c92a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800776c:	4b25      	ldr	r3, [pc, #148]	@ (8007804 <USBD_CDC_Init+0x1ec>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	f003 020f 	and.w	r2, r3, #15
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	3323      	adds	r3, #35	@ 0x23
 8007782:	2201      	movs	r2, #1
 8007784:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	33b0      	adds	r3, #176	@ 0xb0
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80077bc:	2302      	movs	r3, #2
 80077be:	e018      	b.n	80077f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	7c1b      	ldrb	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007800 <USBD_CDC_Init+0x1e8>)
 80077ca:	7819      	ldrb	r1, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f005 f996 	bl	800cb08 <USBD_LL_PrepareReceive>
 80077dc:	e008      	b.n	80077f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077de:	4b08      	ldr	r3, [pc, #32]	@ (8007800 <USBD_CDC_Init+0x1e8>)
 80077e0:	7819      	ldrb	r1, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80077e8:	2340      	movs	r3, #64	@ 0x40
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f005 f98c 	bl	800cb08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000093 	.word	0x20000093
 8007800:	20000094 	.word	0x20000094
 8007804:	20000095 	.word	0x20000095

08007808 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007814:	4b3a      	ldr	r3, [pc, #232]	@ (8007900 <USBD_CDC_DeInit+0xf8>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f005 f8ab 	bl	800c976 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007820:	4b37      	ldr	r3, [pc, #220]	@ (8007900 <USBD_CDC_DeInit+0xf8>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	f003 020f 	and.w	r2, r3, #15
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	3323      	adds	r3, #35	@ 0x23
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800783a:	4b32      	ldr	r3, [pc, #200]	@ (8007904 <USBD_CDC_DeInit+0xfc>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f005 f898 	bl	800c976 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007846:	4b2f      	ldr	r3, [pc, #188]	@ (8007904 <USBD_CDC_DeInit+0xfc>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	f003 020f 	and.w	r2, r3, #15
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	440b      	add	r3, r1
 800785a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007862:	4b29      	ldr	r3, [pc, #164]	@ (8007908 <USBD_CDC_DeInit+0x100>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f005 f884 	bl	800c976 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800786e:	4b26      	ldr	r3, [pc, #152]	@ (8007908 <USBD_CDC_DeInit+0x100>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 020f 	and.w	r2, r3, #15
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	440b      	add	r3, r1
 8007882:	3323      	adds	r3, #35	@ 0x23
 8007884:	2200      	movs	r2, #0
 8007886:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007888:	4b1f      	ldr	r3, [pc, #124]	@ (8007908 <USBD_CDC_DeInit+0x100>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f003 020f 	and.w	r2, r3, #15
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	331c      	adds	r3, #28
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	32b0      	adds	r2, #176	@ 0xb0
 80078ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01f      	beq.n	80078f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	33b0      	adds	r3, #176	@ 0xb0
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	32b0      	adds	r2, #176	@ 0xb0
 80078d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f005 f958 	bl	800cb8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	32b0      	adds	r2, #176	@ 0xb0
 80078e6:	2100      	movs	r1, #0
 80078e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000093 	.word	0x20000093
 8007904:	20000094 	.word	0x20000094
 8007908:	20000095 	.word	0x20000095

0800790c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	32b0      	adds	r2, #176	@ 0xb0
 8007920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007924:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007938:	2303      	movs	r3, #3
 800793a:	e0bf      	b.n	8007abc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007944:	2b00      	cmp	r3, #0
 8007946:	d050      	beq.n	80079ea <USBD_CDC_Setup+0xde>
 8007948:	2b20      	cmp	r3, #32
 800794a:	f040 80af 	bne.w	8007aac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	88db      	ldrh	r3, [r3, #6]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d03a      	beq.n	80079cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	b25b      	sxtb	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	da1b      	bge.n	8007998 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	33b0      	adds	r3, #176	@ 0xb0
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007976:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	88d2      	ldrh	r2, [r2, #6]
 800797c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	88db      	ldrh	r3, [r3, #6]
 8007982:	2b07      	cmp	r3, #7
 8007984:	bf28      	it	cs
 8007986:	2307      	movcs	r3, #7
 8007988:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	89fa      	ldrh	r2, [r7, #14]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 fda9 	bl	80094e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007996:	e090      	b.n	8007aba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	785a      	ldrb	r2, [r3, #1]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	88db      	ldrh	r3, [r3, #6]
 80079a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80079a8:	d803      	bhi.n	80079b2 <USBD_CDC_Setup+0xa6>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	88db      	ldrh	r3, [r3, #6]
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	e000      	b.n	80079b4 <USBD_CDC_Setup+0xa8>
 80079b2:	2240      	movs	r2, #64	@ 0x40
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80079ba:	6939      	ldr	r1, [r7, #16]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80079c2:	461a      	mov	r2, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 fdbe 	bl	8009546 <USBD_CtlPrepareRx>
      break;
 80079ca:	e076      	b.n	8007aba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	33b0      	adds	r3, #176	@ 0xb0
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	7850      	ldrb	r0, [r2, #1]
 80079e2:	2200      	movs	r2, #0
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	4798      	blx	r3
      break;
 80079e8:	e067      	b.n	8007aba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	2b0b      	cmp	r3, #11
 80079f0:	d851      	bhi.n	8007a96 <USBD_CDC_Setup+0x18a>
 80079f2:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <USBD_CDC_Setup+0xec>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a29 	.word	0x08007a29
 80079fc:	08007aa5 	.word	0x08007aa5
 8007a00:	08007a97 	.word	0x08007a97
 8007a04:	08007a97 	.word	0x08007a97
 8007a08:	08007a97 	.word	0x08007a97
 8007a0c:	08007a97 	.word	0x08007a97
 8007a10:	08007a97 	.word	0x08007a97
 8007a14:	08007a97 	.word	0x08007a97
 8007a18:	08007a97 	.word	0x08007a97
 8007a1c:	08007a97 	.word	0x08007a97
 8007a20:	08007a53 	.word	0x08007a53
 8007a24:	08007a7d 	.word	0x08007a7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d107      	bne.n	8007a44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a34:	f107 030a 	add.w	r3, r7, #10
 8007a38:	2202      	movs	r2, #2
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fd53 	bl	80094e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a42:	e032      	b.n	8007aaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 fcd1 	bl	80093ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	75fb      	strb	r3, [r7, #23]
          break;
 8007a50:	e02b      	b.n	8007aaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d107      	bne.n	8007a6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a5e:	f107 030d 	add.w	r3, r7, #13
 8007a62:	2201      	movs	r2, #1
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fd3e 	bl	80094e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a6c:	e01d      	b.n	8007aaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fcbc 	bl	80093ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007a76:	2303      	movs	r3, #3
 8007a78:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7a:	e016      	b.n	8007aaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d00f      	beq.n	8007aa8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 fcaf 	bl	80093ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a94:	e008      	b.n	8007aa8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 fca8 	bl	80093ee <USBD_CtlError>
          ret = USBD_FAIL;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8007aa2:	e002      	b.n	8007aaa <USBD_CDC_Setup+0x19e>
          break;
 8007aa4:	bf00      	nop
 8007aa6:	e008      	b.n	8007aba <USBD_CDC_Setup+0x1ae>
          break;
 8007aa8:	bf00      	nop
      }
      break;
 8007aaa:	e006      	b.n	8007aba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 fc9d 	bl	80093ee <USBD_CtlError>
      ret = USBD_FAIL;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ad6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32b0      	adds	r2, #176	@ 0xb0
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e065      	b.n	8007bba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	32b0      	adds	r2, #176	@ 0xb0
 8007af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	3314      	adds	r3, #20
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d02f      	beq.n	8007b78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	f003 020f 	and.w	r2, r3, #15
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	3314      	adds	r3, #20
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	78fb      	ldrb	r3, [r7, #3]
 8007b30:	f003 010f 	and.w	r1, r3, #15
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	460b      	mov	r3, r1
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	440b      	add	r3, r1
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4403      	add	r3, r0
 8007b40:	331c      	adds	r3, #28
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b48:	fb01 f303 	mul.w	r3, r1, r3
 8007b4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d112      	bne.n	8007b78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	f003 020f 	and.w	r2, r3, #15
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	3314      	adds	r3, #20
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b6a:	78f9      	ldrb	r1, [r7, #3]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	2200      	movs	r2, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f004 ffa8 	bl	800cac6 <USBD_LL_Transmit>
 8007b76:	e01f      	b.n	8007bb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	33b0      	adds	r3, #176	@ 0xb0
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d010      	beq.n	8007bb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	33b0      	adds	r3, #176	@ 0xb0
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007bb4:	78fa      	ldrb	r2, [r7, #3]
 8007bb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	32b0      	adds	r2, #176	@ 0xb0
 8007bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	32b0      	adds	r2, #176	@ 0xb0
 8007be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e01a      	b.n	8007c2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f004 ffa6 	bl	800cb4a <USBD_LL_GetRxDataSize>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	33b0      	adds	r3, #176	@ 0xb0
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007c24:	4611      	mov	r1, r2
 8007c26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	32b0      	adds	r2, #176	@ 0xb0
 8007c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e024      	b.n	8007c9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	33b0      	adds	r3, #176	@ 0xb0
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d019      	beq.n	8007c9c <USBD_CDC_EP0_RxReady+0x6a>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007c6e:	2bff      	cmp	r3, #255	@ 0xff
 8007c70:	d014      	beq.n	8007c9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	33b0      	adds	r3, #176	@ 0xb0
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	22ff      	movs	r2, #255	@ 0xff
 8007c98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007cb0:	2182      	movs	r1, #130	@ 0x82
 8007cb2:	4818      	ldr	r0, [pc, #96]	@ (8007d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cb4:	f000 fd62 	bl	800877c <USBD_GetEpDesc>
 8007cb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cba:	2101      	movs	r1, #1
 8007cbc:	4815      	ldr	r0, [pc, #84]	@ (8007d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cbe:	f000 fd5d 	bl	800877c <USBD_GetEpDesc>
 8007cc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007cc4:	2181      	movs	r1, #129	@ 0x81
 8007cc6:	4813      	ldr	r0, [pc, #76]	@ (8007d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cc8:	f000 fd58 	bl	800877c <USBD_GetEpDesc>
 8007ccc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d006      	beq.n	8007cee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ce8:	711a      	strb	r2, [r3, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d006      	beq.n	8007d02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cfc:	711a      	strb	r2, [r3, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2243      	movs	r2, #67	@ 0x43
 8007d06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d08:	4b02      	ldr	r3, [pc, #8]	@ (8007d14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000050 	.word	0x20000050

08007d18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d20:	2182      	movs	r1, #130	@ 0x82
 8007d22:	4818      	ldr	r0, [pc, #96]	@ (8007d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d24:	f000 fd2a 	bl	800877c <USBD_GetEpDesc>
 8007d28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	4815      	ldr	r0, [pc, #84]	@ (8007d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d2e:	f000 fd25 	bl	800877c <USBD_GetEpDesc>
 8007d32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d34:	2181      	movs	r1, #129	@ 0x81
 8007d36:	4813      	ldr	r0, [pc, #76]	@ (8007d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d38:	f000 fd20 	bl	800877c <USBD_GetEpDesc>
 8007d3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2210      	movs	r2, #16
 8007d48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d006      	beq.n	8007d5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	2200      	movs	r2, #0
 8007d54:	711a      	strb	r2, [r3, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f042 0202 	orr.w	r2, r2, #2
 8007d5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d006      	beq.n	8007d72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	711a      	strb	r2, [r3, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f042 0202 	orr.w	r2, r2, #2
 8007d70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2243      	movs	r2, #67	@ 0x43
 8007d76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d78:	4b02      	ldr	r3, [pc, #8]	@ (8007d84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000050 	.word	0x20000050

08007d88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d90:	2182      	movs	r1, #130	@ 0x82
 8007d92:	4818      	ldr	r0, [pc, #96]	@ (8007df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d94:	f000 fcf2 	bl	800877c <USBD_GetEpDesc>
 8007d98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	4815      	ldr	r0, [pc, #84]	@ (8007df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d9e:	f000 fced 	bl	800877c <USBD_GetEpDesc>
 8007da2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007da4:	2181      	movs	r1, #129	@ 0x81
 8007da6:	4813      	ldr	r0, [pc, #76]	@ (8007df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007da8:	f000 fce8 	bl	800877c <USBD_GetEpDesc>
 8007dac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2210      	movs	r2, #16
 8007db8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d006      	beq.n	8007dce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dc8:	711a      	strb	r2, [r3, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d006      	beq.n	8007de2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ddc:	711a      	strb	r2, [r3, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2243      	movs	r2, #67	@ 0x43
 8007de6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007de8:	4b02      	ldr	r3, [pc, #8]	@ (8007df4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000050 	.word	0x20000050

08007df8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	220a      	movs	r2, #10
 8007e04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e06:	4b03      	ldr	r3, [pc, #12]	@ (8007e14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	2000000c 	.word	0x2000000c

08007e18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e009      	b.n	8007e40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	33b0      	adds	r3, #176	@ 0xb0
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	32b0      	adds	r2, #176	@ 0xb0
 8007e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e008      	b.n	8007e84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	371c      	adds	r7, #28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	32b0      	adds	r2, #176	@ 0xb0
 8007ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e004      	b.n	8007ebe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	32b0      	adds	r2, #176	@ 0xb0
 8007ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e025      	b.n	8007f3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d11f      	bne.n	8007f3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007f04:	4b10      	ldr	r3, [pc, #64]	@ (8007f48 <USBD_CDC_TransmitPacket+0x7c>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	f003 020f 	and.w	r2, r3, #15
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4403      	add	r3, r0
 8007f1e:	3314      	adds	r3, #20
 8007f20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007f22:	4b09      	ldr	r3, [pc, #36]	@ (8007f48 <USBD_CDC_TransmitPacket+0x7c>)
 8007f24:	7819      	ldrb	r1, [r3, #0]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f004 fdc7 	bl	800cac6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000093 	.word	0x20000093

08007f4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	32b0      	adds	r2, #176	@ 0xb0
 8007f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	32b0      	adds	r2, #176	@ 0xb0
 8007f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e018      	b.n	8007fac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7c1b      	ldrb	r3, [r3, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f82:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb4 <USBD_CDC_ReceivePacket+0x68>)
 8007f84:	7819      	ldrb	r1, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f004 fdb9 	bl	800cb08 <USBD_LL_PrepareReceive>
 8007f96:	e008      	b.n	8007faa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f98:	4b06      	ldr	r3, [pc, #24]	@ (8007fb4 <USBD_CDC_ReceivePacket+0x68>)
 8007f9a:	7819      	ldrb	r1, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007fa2:	2340      	movs	r3, #64	@ 0x40
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f004 fdaf 	bl	800cb08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20000094 	.word	0x20000094

08007fb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e01f      	b.n	8008010 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	79fa      	ldrb	r2, [r7, #7]
 8008002:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f004 fc29 	bl	800c85c <USBD_LL_Init>
 800800a:	4603      	mov	r3, r0
 800800c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800800e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800802c:	2303      	movs	r3, #3
 800802e:	e025      	b.n	800807c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	32ae      	adds	r2, #174	@ 0xae
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00f      	beq.n	800806c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	32ae      	adds	r2, #174	@ 0xae
 8008056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	f107 020e 	add.w	r2, r7, #14
 8008060:	4610      	mov	r0, r2
 8008062:	4798      	blx	r3
 8008064:	4602      	mov	r2, r0
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f004 fc31 	bl	800c8f4 <USBD_LL_Start>
 8008092:	4603      	mov	r3, r0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d009      	beq.n	80080e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	4611      	mov	r1, r2
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	78fa      	ldrb	r2, [r7, #3]
 8008104:	4611      	mov	r1, r2
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	4798      	blx	r3
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008110:	2303      	movs	r3, #3
 8008112:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	f001 f922 	bl	800937a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008144:	461a      	mov	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008152:	f003 031f 	and.w	r3, r3, #31
 8008156:	2b02      	cmp	r3, #2
 8008158:	d01a      	beq.n	8008190 <USBD_LL_SetupStage+0x72>
 800815a:	2b02      	cmp	r3, #2
 800815c:	d822      	bhi.n	80081a4 <USBD_LL_SetupStage+0x86>
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <USBD_LL_SetupStage+0x4a>
 8008162:	2b01      	cmp	r3, #1
 8008164:	d00a      	beq.n	800817c <USBD_LL_SetupStage+0x5e>
 8008166:	e01d      	b.n	80081a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fb77 	bl	8008864 <USBD_StdDevReq>
 8008176:	4603      	mov	r3, r0
 8008178:	73fb      	strb	r3, [r7, #15]
      break;
 800817a:	e020      	b.n	80081be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fbdf 	bl	8008948 <USBD_StdItfReq>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]
      break;
 800818e:	e016      	b.n	80081be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fc41 	bl	8008a20 <USBD_StdEPReq>
 800819e:	4603      	mov	r3, r0
 80081a0:	73fb      	strb	r3, [r7, #15]
      break;
 80081a2:	e00c      	b.n	80081be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80081aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f004 fbfe 	bl	800c9b4 <USBD_LL_StallEP>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73fb      	strb	r3, [r7, #15]
      break;
 80081bc:	bf00      	nop
  }

  return ret;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	460b      	mov	r3, r1
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80081da:	7afb      	ldrb	r3, [r7, #11]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d177      	bne.n	80082d0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80081e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	f040 80a1 	bne.w	8008336 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	8992      	ldrh	r2, [r2, #12]
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d91c      	bls.n	800823a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	8992      	ldrh	r2, [r2, #12]
 8008208:	1a9a      	subs	r2, r3, r2
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	8992      	ldrh	r2, [r2, #12]
 8008216:	441a      	add	r2, r3
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	6919      	ldr	r1, [r3, #16]
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	899b      	ldrh	r3, [r3, #12]
 8008224:	461a      	mov	r2, r3
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	4293      	cmp	r3, r2
 800822c:	bf38      	it	cc
 800822e:	4613      	movcc	r3, r2
 8008230:	461a      	mov	r2, r3
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f001 f9a8 	bl	8009588 <USBD_CtlContinueRx>
 8008238:	e07d      	b.n	8008336 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008240:	f003 031f 	and.w	r3, r3, #31
 8008244:	2b02      	cmp	r3, #2
 8008246:	d014      	beq.n	8008272 <USBD_LL_DataOutStage+0xaa>
 8008248:	2b02      	cmp	r3, #2
 800824a:	d81d      	bhi.n	8008288 <USBD_LL_DataOutStage+0xc0>
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <USBD_LL_DataOutStage+0x8e>
 8008250:	2b01      	cmp	r3, #1
 8008252:	d003      	beq.n	800825c <USBD_LL_DataOutStage+0x94>
 8008254:	e018      	b.n	8008288 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	75bb      	strb	r3, [r7, #22]
            break;
 800825a:	e018      	b.n	800828e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008262:	b2db      	uxtb	r3, r3
 8008264:	4619      	mov	r1, r3
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fa6e 	bl	8008748 <USBD_CoreFindIF>
 800826c:	4603      	mov	r3, r0
 800826e:	75bb      	strb	r3, [r7, #22]
            break;
 8008270:	e00d      	b.n	800828e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008278:	b2db      	uxtb	r3, r3
 800827a:	4619      	mov	r1, r3
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 fa70 	bl	8008762 <USBD_CoreFindEP>
 8008282:	4603      	mov	r3, r0
 8008284:	75bb      	strb	r3, [r7, #22]
            break;
 8008286:	e002      	b.n	800828e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	75bb      	strb	r3, [r7, #22]
            break;
 800828c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800828e:	7dbb      	ldrb	r3, [r7, #22]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d119      	bne.n	80082c8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b03      	cmp	r3, #3
 800829e:	d113      	bne.n	80082c8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80082a0:	7dba      	ldrb	r2, [r7, #22]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	32ae      	adds	r2, #174	@ 0xae
 80082a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80082b0:	7dba      	ldrb	r2, [r7, #22]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80082b8:	7dba      	ldrb	r2, [r7, #22]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	32ae      	adds	r2, #174	@ 0xae
 80082be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f001 f96e 	bl	80095aa <USBD_CtlSendStatus>
 80082ce:	e032      	b.n	8008336 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80082d0:	7afb      	ldrb	r3, [r7, #11]
 80082d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	4619      	mov	r1, r3
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 fa41 	bl	8008762 <USBD_CoreFindEP>
 80082e0:	4603      	mov	r3, r0
 80082e2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082e4:	7dbb      	ldrb	r3, [r7, #22]
 80082e6:	2bff      	cmp	r3, #255	@ 0xff
 80082e8:	d025      	beq.n	8008336 <USBD_LL_DataOutStage+0x16e>
 80082ea:	7dbb      	ldrb	r3, [r7, #22]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d122      	bne.n	8008336 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d117      	bne.n	800832c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80082fc:	7dba      	ldrb	r2, [r7, #22]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	32ae      	adds	r2, #174	@ 0xae
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00f      	beq.n	800832c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800830c:	7dba      	ldrb	r2, [r7, #22]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008314:	7dba      	ldrb	r2, [r7, #22]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	32ae      	adds	r2, #174	@ 0xae
 800831a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	7afa      	ldrb	r2, [r7, #11]
 8008322:	4611      	mov	r1, r2
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	4798      	blx	r3
 8008328:	4603      	mov	r3, r0
 800832a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	e000      	b.n	8008338 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	460b      	mov	r3, r1
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800834e:	7afb      	ldrb	r3, [r7, #11]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d178      	bne.n	8008446 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3314      	adds	r3, #20
 8008358:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008360:	2b02      	cmp	r3, #2
 8008362:	d163      	bne.n	800842c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	8992      	ldrh	r2, [r2, #12]
 800836c:	4293      	cmp	r3, r2
 800836e:	d91c      	bls.n	80083aa <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	8992      	ldrh	r2, [r2, #12]
 8008378:	1a9a      	subs	r2, r3, r2
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	8992      	ldrh	r2, [r2, #12]
 8008386:	441a      	add	r2, r3
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	6919      	ldr	r1, [r3, #16]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	461a      	mov	r2, r3
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f001 f8c4 	bl	8009524 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800839c:	2300      	movs	r3, #0
 800839e:	2200      	movs	r2, #0
 80083a0:	2100      	movs	r1, #0
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f004 fbb0 	bl	800cb08 <USBD_LL_PrepareReceive>
 80083a8:	e040      	b.n	800842c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	899b      	ldrh	r3, [r3, #12]
 80083ae:	461a      	mov	r2, r3
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d11c      	bne.n	80083f2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d316      	bcc.n	80083f2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d20f      	bcs.n	80083f2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083d2:	2200      	movs	r2, #0
 80083d4:	2100      	movs	r1, #0
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f001 f8a4 	bl	8009524 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083e4:	2300      	movs	r3, #0
 80083e6:	2200      	movs	r2, #0
 80083e8:	2100      	movs	r1, #0
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f004 fb8c 	bl	800cb08 <USBD_LL_PrepareReceive>
 80083f0:	e01c      	b.n	800842c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d10f      	bne.n	800841e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d009      	beq.n	800841e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800841e:	2180      	movs	r1, #128	@ 0x80
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f004 fac7 	bl	800c9b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f001 f8d2 	bl	80095d0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d03a      	beq.n	80084ac <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7ff fe30 	bl	800809c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008444:	e032      	b.n	80084ac <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800844c:	b2db      	uxtb	r3, r3
 800844e:	4619      	mov	r1, r3
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 f986 	bl	8008762 <USBD_CoreFindEP>
 8008456:	4603      	mov	r3, r0
 8008458:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	2bff      	cmp	r3, #255	@ 0xff
 800845e:	d025      	beq.n	80084ac <USBD_LL_DataInStage+0x16c>
 8008460:	7dfb      	ldrb	r3, [r7, #23]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d122      	bne.n	80084ac <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b03      	cmp	r3, #3
 8008470:	d11c      	bne.n	80084ac <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008472:	7dfa      	ldrb	r2, [r7, #23]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	32ae      	adds	r2, #174	@ 0xae
 8008478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d014      	beq.n	80084ac <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008482:	7dfa      	ldrb	r2, [r7, #23]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800848a:	7dfa      	ldrb	r2, [r7, #23]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	32ae      	adds	r2, #174	@ 0xae
 8008490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	7afa      	ldrb	r2, [r7, #11]
 8008498:	4611      	mov	r1, r2
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	4798      	blx	r3
 800849e:	4603      	mov	r3, r0
 80084a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80084a2:	7dbb      	ldrb	r3, [r7, #22]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80084a8:	7dbb      	ldrb	r3, [r7, #22]
 80084aa:	e000      	b.n	80084ae <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d014      	beq.n	800851c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00e      	beq.n	800851c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6852      	ldr	r2, [r2, #4]
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	4611      	mov	r1, r2
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	4798      	blx	r3
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008518:	2303      	movs	r3, #3
 800851a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800851c:	2340      	movs	r3, #64	@ 0x40
 800851e:	2200      	movs	r2, #0
 8008520:	2100      	movs	r1, #0
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f004 fa01 	bl	800c92a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2240      	movs	r2, #64	@ 0x40
 8008534:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008538:	2340      	movs	r3, #64	@ 0x40
 800853a:	2200      	movs	r2, #0
 800853c:	2180      	movs	r1, #128	@ 0x80
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f004 f9f3 	bl	800c92a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2240      	movs	r2, #64	@ 0x40
 8008550:	841a      	strh	r2, [r3, #32]

  return ret;
 8008552:	7bfb      	ldrb	r3, [r7, #15]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	78fa      	ldrb	r2, [r7, #3]
 800856c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b04      	cmp	r3, #4
 800858e:	d006      	beq.n	800859e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008596:	b2da      	uxtb	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2204      	movs	r2, #4
 80085a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d106      	bne.n	80085d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d110      	bne.n	800861a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	32ae      	adds	r2, #174	@ 0xae
 800863a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008642:	2303      	movs	r3, #3
 8008644:	e01c      	b.n	8008680 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b03      	cmp	r3, #3
 8008650:	d115      	bne.n	800867e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	32ae      	adds	r2, #174	@ 0xae
 800865c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00b      	beq.n	800867e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	32ae      	adds	r2, #174	@ 0xae
 8008670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	78fa      	ldrb	r2, [r7, #3]
 8008678:	4611      	mov	r1, r2
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	32ae      	adds	r2, #174	@ 0xae
 800869e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e01c      	b.n	80086e4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d115      	bne.n	80086e2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	32ae      	adds	r2, #174	@ 0xae
 80086c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00b      	beq.n	80086e2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	32ae      	adds	r2, #174	@ 0xae
 80086d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086da:	78fa      	ldrb	r2, [r7, #3]
 80086dc:	4611      	mov	r1, r2
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00e      	beq.n	800873e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6852      	ldr	r2, [r2, #4]
 800872c:	b2d2      	uxtb	r2, r2
 800872e:	4611      	mov	r1, r2
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	4798      	blx	r3
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800873a:	2303      	movs	r3, #3
 800873c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008754:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800876e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008790:	2300      	movs	r3, #0
 8008792:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	885b      	ldrh	r3, [r3, #2]
 8008798:	b29b      	uxth	r3, r3
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	7812      	ldrb	r2, [r2, #0]
 800879e:	4293      	cmp	r3, r2
 80087a0:	d91f      	bls.n	80087e2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80087a8:	e013      	b.n	80087d2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80087aa:	f107 030a 	add.w	r3, r7, #10
 80087ae:	4619      	mov	r1, r3
 80087b0:	6978      	ldr	r0, [r7, #20]
 80087b2:	f000 f81b 	bl	80087ec <USBD_GetNextDesc>
 80087b6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	2b05      	cmp	r3, #5
 80087be:	d108      	bne.n	80087d2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	789b      	ldrb	r3, [r3, #2]
 80087c8:	78fa      	ldrb	r2, [r7, #3]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d008      	beq.n	80087e0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	897b      	ldrh	r3, [r7, #10]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d8e5      	bhi.n	80087aa <USBD_GetEpDesc+0x2e>
 80087de:	e000      	b.n	80087e2 <USBD_GetEpDesc+0x66>
          break;
 80087e0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80087e2:	693b      	ldr	r3, [r7, #16]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	7812      	ldrb	r2, [r2, #0]
 8008802:	4413      	add	r3, r2
 8008804:	b29a      	uxth	r2, r3
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4413      	add	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008816:	68fb      	ldr	r3, [r7, #12]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	3301      	adds	r3, #1
 800883a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008842:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008846:	021b      	lsls	r3, r3, #8
 8008848:	b21a      	sxth	r2, r3
 800884a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800884e:	4313      	orrs	r3, r2
 8008850:	b21b      	sxth	r3, r3
 8008852:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008854:	89fb      	ldrh	r3, [r7, #14]
}
 8008856:	4618      	mov	r0, r3
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
	...

08008864 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800887a:	2b40      	cmp	r3, #64	@ 0x40
 800887c:	d005      	beq.n	800888a <USBD_StdDevReq+0x26>
 800887e:	2b40      	cmp	r3, #64	@ 0x40
 8008880:	d857      	bhi.n	8008932 <USBD_StdDevReq+0xce>
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00f      	beq.n	80088a6 <USBD_StdDevReq+0x42>
 8008886:	2b20      	cmp	r3, #32
 8008888:	d153      	bne.n	8008932 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	32ae      	adds	r2, #174	@ 0xae
 8008894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	4798      	blx	r3
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]
      break;
 80088a4:	e04a      	b.n	800893c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	2b09      	cmp	r3, #9
 80088ac:	d83b      	bhi.n	8008926 <USBD_StdDevReq+0xc2>
 80088ae:	a201      	add	r2, pc, #4	@ (adr r2, 80088b4 <USBD_StdDevReq+0x50>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	08008909 	.word	0x08008909
 80088b8:	0800891d 	.word	0x0800891d
 80088bc:	08008927 	.word	0x08008927
 80088c0:	08008913 	.word	0x08008913
 80088c4:	08008927 	.word	0x08008927
 80088c8:	080088e7 	.word	0x080088e7
 80088cc:	080088dd 	.word	0x080088dd
 80088d0:	08008927 	.word	0x08008927
 80088d4:	080088ff 	.word	0x080088ff
 80088d8:	080088f1 	.word	0x080088f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa3e 	bl	8008d60 <USBD_GetDescriptor>
          break;
 80088e4:	e024      	b.n	8008930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fba3 	bl	8009034 <USBD_SetAddress>
          break;
 80088ee:	e01f      	b.n	8008930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fbe2 	bl	80090bc <USBD_SetConfig>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73fb      	strb	r3, [r7, #15]
          break;
 80088fc:	e018      	b.n	8008930 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fc85 	bl	8009210 <USBD_GetConfig>
          break;
 8008906:	e013      	b.n	8008930 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fcb6 	bl	800927c <USBD_GetStatus>
          break;
 8008910:	e00e      	b.n	8008930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fce5 	bl	80092e4 <USBD_SetFeature>
          break;
 800891a:	e009      	b.n	8008930 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fd09 	bl	8009336 <USBD_ClrFeature>
          break;
 8008924:	e004      	b.n	8008930 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fd60 	bl	80093ee <USBD_CtlError>
          break;
 800892e:	bf00      	nop
      }
      break;
 8008930:	e004      	b.n	800893c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fd5a 	bl	80093ee <USBD_CtlError>
      break;
 800893a:	bf00      	nop
  }

  return ret;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop

08008948 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800895e:	2b40      	cmp	r3, #64	@ 0x40
 8008960:	d005      	beq.n	800896e <USBD_StdItfReq+0x26>
 8008962:	2b40      	cmp	r3, #64	@ 0x40
 8008964:	d852      	bhi.n	8008a0c <USBD_StdItfReq+0xc4>
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <USBD_StdItfReq+0x26>
 800896a:	2b20      	cmp	r3, #32
 800896c:	d14e      	bne.n	8008a0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008974:	b2db      	uxtb	r3, r3
 8008976:	3b01      	subs	r3, #1
 8008978:	2b02      	cmp	r3, #2
 800897a:	d840      	bhi.n	80089fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	889b      	ldrh	r3, [r3, #4]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b01      	cmp	r3, #1
 8008984:	d836      	bhi.n	80089f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	889b      	ldrh	r3, [r3, #4]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff feda 	bl	8008748 <USBD_CoreFindIF>
 8008994:	4603      	mov	r3, r0
 8008996:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	2bff      	cmp	r3, #255	@ 0xff
 800899c:	d01d      	beq.n	80089da <USBD_StdItfReq+0x92>
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d11a      	bne.n	80089da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80089a4:	7bba      	ldrb	r2, [r7, #14]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	32ae      	adds	r2, #174	@ 0xae
 80089aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00f      	beq.n	80089d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80089b4:	7bba      	ldrb	r2, [r7, #14]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80089bc:	7bba      	ldrb	r2, [r7, #14]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	32ae      	adds	r2, #174	@ 0xae
 80089c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	4798      	blx	r3
 80089ce:	4603      	mov	r3, r0
 80089d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80089d2:	e004      	b.n	80089de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80089d4:	2303      	movs	r3, #3
 80089d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80089d8:	e001      	b.n	80089de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80089da:	2303      	movs	r3, #3
 80089dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	88db      	ldrh	r3, [r3, #6]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d110      	bne.n	8008a08 <USBD_StdItfReq+0xc0>
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10d      	bne.n	8008a08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fddc 	bl	80095aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80089f2:	e009      	b.n	8008a08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fcf9 	bl	80093ee <USBD_CtlError>
          break;
 80089fc:	e004      	b.n	8008a08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fcf4 	bl	80093ee <USBD_CtlError>
          break;
 8008a06:	e000      	b.n	8008a0a <USBD_StdItfReq+0xc2>
          break;
 8008a08:	bf00      	nop
      }
      break;
 8008a0a:	e004      	b.n	8008a16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fced 	bl	80093ee <USBD_CtlError>
      break;
 8008a14:	bf00      	nop
  }

  return ret;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	889b      	ldrh	r3, [r3, #4]
 8008a32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a3c:	2b40      	cmp	r3, #64	@ 0x40
 8008a3e:	d007      	beq.n	8008a50 <USBD_StdEPReq+0x30>
 8008a40:	2b40      	cmp	r3, #64	@ 0x40
 8008a42:	f200 8181 	bhi.w	8008d48 <USBD_StdEPReq+0x328>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d02a      	beq.n	8008aa0 <USBD_StdEPReq+0x80>
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	f040 817c 	bne.w	8008d48 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff fe84 	bl	8008762 <USBD_CoreFindEP>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a5e:	7b7b      	ldrb	r3, [r7, #13]
 8008a60:	2bff      	cmp	r3, #255	@ 0xff
 8008a62:	f000 8176 	beq.w	8008d52 <USBD_StdEPReq+0x332>
 8008a66:	7b7b      	ldrb	r3, [r7, #13]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f040 8172 	bne.w	8008d52 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008a6e:	7b7a      	ldrb	r2, [r7, #13]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008a76:	7b7a      	ldrb	r2, [r7, #13]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	32ae      	adds	r2, #174	@ 0xae
 8008a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 8165 	beq.w	8008d52 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008a88:	7b7a      	ldrb	r2, [r7, #13]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	32ae      	adds	r2, #174	@ 0xae
 8008a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	4798      	blx	r3
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a9e:	e158      	b.n	8008d52 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	785b      	ldrb	r3, [r3, #1]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d008      	beq.n	8008aba <USBD_StdEPReq+0x9a>
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	f300 8147 	bgt.w	8008d3c <USBD_StdEPReq+0x31c>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 809b 	beq.w	8008bea <USBD_StdEPReq+0x1ca>
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d03c      	beq.n	8008b32 <USBD_StdEPReq+0x112>
 8008ab8:	e140      	b.n	8008d3c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d002      	beq.n	8008acc <USBD_StdEPReq+0xac>
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d016      	beq.n	8008af8 <USBD_StdEPReq+0xd8>
 8008aca:	e02c      	b.n	8008b26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00d      	beq.n	8008aee <USBD_StdEPReq+0xce>
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	2b80      	cmp	r3, #128	@ 0x80
 8008ad6:	d00a      	beq.n	8008aee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f003 ff69 	bl	800c9b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ae2:	2180      	movs	r1, #128	@ 0x80
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f003 ff65 	bl	800c9b4 <USBD_LL_StallEP>
 8008aea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008aec:	e020      	b.n	8008b30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fc7c 	bl	80093ee <USBD_CtlError>
              break;
 8008af6:	e01b      	b.n	8008b30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	885b      	ldrh	r3, [r3, #2]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10e      	bne.n	8008b1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00b      	beq.n	8008b1e <USBD_StdEPReq+0xfe>
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	2b80      	cmp	r3, #128	@ 0x80
 8008b0a:	d008      	beq.n	8008b1e <USBD_StdEPReq+0xfe>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	88db      	ldrh	r3, [r3, #6]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d104      	bne.n	8008b1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f003 ff4b 	bl	800c9b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fd43 	bl	80095aa <USBD_CtlSendStatus>

              break;
 8008b24:	e004      	b.n	8008b30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fc60 	bl	80093ee <USBD_CtlError>
              break;
 8008b2e:	bf00      	nop
          }
          break;
 8008b30:	e109      	b.n	8008d46 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d002      	beq.n	8008b44 <USBD_StdEPReq+0x124>
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d016      	beq.n	8008b70 <USBD_StdEPReq+0x150>
 8008b42:	e04b      	b.n	8008bdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00d      	beq.n	8008b66 <USBD_StdEPReq+0x146>
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
 8008b4c:	2b80      	cmp	r3, #128	@ 0x80
 8008b4e:	d00a      	beq.n	8008b66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f003 ff2d 	bl	800c9b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b5a:	2180      	movs	r1, #128	@ 0x80
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f003 ff29 	bl	800c9b4 <USBD_LL_StallEP>
 8008b62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b64:	e040      	b.n	8008be8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fc40 	bl	80093ee <USBD_CtlError>
              break;
 8008b6e:	e03b      	b.n	8008be8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	885b      	ldrh	r3, [r3, #2]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d136      	bne.n	8008be6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
 8008b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d004      	beq.n	8008b8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f003 ff33 	bl	800c9f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fd0c 	bl	80095aa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff fde3 	bl	8008762 <USBD_CoreFindEP>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ba0:	7b7b      	ldrb	r3, [r7, #13]
 8008ba2:	2bff      	cmp	r3, #255	@ 0xff
 8008ba4:	d01f      	beq.n	8008be6 <USBD_StdEPReq+0x1c6>
 8008ba6:	7b7b      	ldrb	r3, [r7, #13]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d11c      	bne.n	8008be6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008bac:	7b7a      	ldrb	r2, [r7, #13]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008bb4:	7b7a      	ldrb	r2, [r7, #13]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	32ae      	adds	r2, #174	@ 0xae
 8008bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d010      	beq.n	8008be6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008bc4:	7b7a      	ldrb	r2, [r7, #13]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	32ae      	adds	r2, #174	@ 0xae
 8008bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008bda:	e004      	b.n	8008be6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fc05 	bl	80093ee <USBD_CtlError>
              break;
 8008be4:	e000      	b.n	8008be8 <USBD_StdEPReq+0x1c8>
              break;
 8008be6:	bf00      	nop
          }
          break;
 8008be8:	e0ad      	b.n	8008d46 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d002      	beq.n	8008bfc <USBD_StdEPReq+0x1dc>
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d033      	beq.n	8008c62 <USBD_StdEPReq+0x242>
 8008bfa:	e099      	b.n	8008d30 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d007      	beq.n	8008c12 <USBD_StdEPReq+0x1f2>
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b80      	cmp	r3, #128	@ 0x80
 8008c06:	d004      	beq.n	8008c12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fbef 	bl	80093ee <USBD_CtlError>
                break;
 8008c10:	e093      	b.n	8008d3a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	da0b      	bge.n	8008c32 <USBD_StdEPReq+0x212>
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
 8008c1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c20:	4613      	mov	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	3310      	adds	r3, #16
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	3304      	adds	r3, #4
 8008c30:	e00b      	b.n	8008c4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c38:	4613      	mov	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	4413      	add	r3, r2
 8008c48:	3304      	adds	r3, #4
 8008c4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	330e      	adds	r3, #14
 8008c56:	2202      	movs	r2, #2
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fc44 	bl	80094e8 <USBD_CtlSendData>
              break;
 8008c60:	e06b      	b.n	8008d3a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	da11      	bge.n	8008c8e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	f003 020f 	and.w	r2, r3, #15
 8008c70:	6879      	ldr	r1, [r7, #4]
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	440b      	add	r3, r1
 8008c7c:	3323      	adds	r3, #35	@ 0x23
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d117      	bne.n	8008cb4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fbb1 	bl	80093ee <USBD_CtlError>
                  break;
 8008c8c:	e055      	b.n	8008d3a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	f003 020f 	and.w	r2, r3, #15
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d104      	bne.n	8008cb4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fb9e 	bl	80093ee <USBD_CtlError>
                  break;
 8008cb2:	e042      	b.n	8008d3a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	da0b      	bge.n	8008cd4 <USBD_StdEPReq+0x2b4>
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	3310      	adds	r3, #16
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	4413      	add	r3, r2
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	e00b      	b.n	8008cec <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
 8008cd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	4413      	add	r3, r2
 8008cea:	3304      	adds	r3, #4
 8008cec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <USBD_StdEPReq+0x2da>
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b80      	cmp	r3, #128	@ 0x80
 8008cf8:	d103      	bne.n	8008d02 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	739a      	strb	r2, [r3, #14]
 8008d00:	e00e      	b.n	8008d20 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d02:	7bbb      	ldrb	r3, [r7, #14]
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f003 fe92 	bl	800ca30 <USBD_LL_IsStallEP>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2201      	movs	r2, #1
 8008d16:	739a      	strb	r2, [r3, #14]
 8008d18:	e002      	b.n	8008d20 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	330e      	adds	r3, #14
 8008d24:	2202      	movs	r2, #2
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fbdd 	bl	80094e8 <USBD_CtlSendData>
              break;
 8008d2e:	e004      	b.n	8008d3a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fb5b 	bl	80093ee <USBD_CtlError>
              break;
 8008d38:	bf00      	nop
          }
          break;
 8008d3a:	e004      	b.n	8008d46 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fb55 	bl	80093ee <USBD_CtlError>
          break;
 8008d44:	bf00      	nop
      }
      break;
 8008d46:	e005      	b.n	8008d54 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fb4f 	bl	80093ee <USBD_CtlError>
      break;
 8008d50:	e000      	b.n	8008d54 <USBD_StdEPReq+0x334>
      break;
 8008d52:	bf00      	nop
  }

  return ret;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	885b      	ldrh	r3, [r3, #2]
 8008d7a:	0a1b      	lsrs	r3, r3, #8
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	2b06      	cmp	r3, #6
 8008d82:	f200 8128 	bhi.w	8008fd6 <USBD_GetDescriptor+0x276>
 8008d86:	a201      	add	r2, pc, #4	@ (adr r2, 8008d8c <USBD_GetDescriptor+0x2c>)
 8008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8c:	08008da9 	.word	0x08008da9
 8008d90:	08008dc1 	.word	0x08008dc1
 8008d94:	08008e01 	.word	0x08008e01
 8008d98:	08008fd7 	.word	0x08008fd7
 8008d9c:	08008fd7 	.word	0x08008fd7
 8008da0:	08008f77 	.word	0x08008f77
 8008da4:	08008fa3 	.word	0x08008fa3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7c12      	ldrb	r2, [r2, #16]
 8008db4:	f107 0108 	add.w	r1, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
      break;
 8008dbe:	e112      	b.n	8008fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7c1b      	ldrb	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10d      	bne.n	8008de4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	2202      	movs	r2, #2
 8008de0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008de2:	e100      	b.n	8008fe6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dec:	f107 0208 	add.w	r2, r7, #8
 8008df0:	4610      	mov	r0, r2
 8008df2:	4798      	blx	r3
 8008df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	701a      	strb	r2, [r3, #0]
      break;
 8008dfe:	e0f2      	b.n	8008fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	885b      	ldrh	r3, [r3, #2]
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b05      	cmp	r3, #5
 8008e08:	f200 80ac 	bhi.w	8008f64 <USBD_GetDescriptor+0x204>
 8008e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e14 <USBD_GetDescriptor+0xb4>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e2d 	.word	0x08008e2d
 8008e18:	08008e61 	.word	0x08008e61
 8008e1c:	08008e95 	.word	0x08008e95
 8008e20:	08008ec9 	.word	0x08008ec9
 8008e24:	08008efd 	.word	0x08008efd
 8008e28:	08008f31 	.word	0x08008f31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	7c12      	ldrb	r2, [r2, #16]
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4798      	blx	r3
 8008e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4e:	e091      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 facb 	bl	80093ee <USBD_CtlError>
            err++;
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5e:	e089      	b.n	8008f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	7c12      	ldrb	r2, [r2, #16]
 8008e78:	f107 0108 	add.w	r1, r7, #8
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
 8008e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e82:	e077      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fab1 	bl	80093ee <USBD_CtlError>
            err++;
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	72fb      	strb	r3, [r7, #11]
          break;
 8008e92:	e06f      	b.n	8008f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	7c12      	ldrb	r2, [r2, #16]
 8008eac:	f107 0108 	add.w	r1, r7, #8
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4798      	blx	r3
 8008eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eb6:	e05d      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa97 	bl	80093ee <USBD_CtlError>
            err++;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ec6:	e055      	b.n	8008f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	7c12      	ldrb	r2, [r2, #16]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eea:	e043      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa7d 	bl	80093ee <USBD_CtlError>
            err++;
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8008efa:	e03b      	b.n	8008f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	7c12      	ldrb	r2, [r2, #16]
 8008f14:	f107 0108 	add.w	r1, r7, #8
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
 8008f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1e:	e029      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa63 	bl	80093ee <USBD_CtlError>
            err++;
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2e:	e021      	b.n	8008f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	7c12      	ldrb	r2, [r2, #16]
 8008f48:	f107 0108 	add.w	r1, r7, #8
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f52:	e00f      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa49 	bl	80093ee <USBD_CtlError>
            err++;
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	72fb      	strb	r3, [r7, #11]
          break;
 8008f62:	e007      	b.n	8008f74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fa41 	bl	80093ee <USBD_CtlError>
          err++;
 8008f6c:	7afb      	ldrb	r3, [r7, #11]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008f72:	bf00      	nop
      }
      break;
 8008f74:	e037      	b.n	8008fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	7c1b      	ldrb	r3, [r3, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d109      	bne.n	8008f92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f86:	f107 0208 	add.w	r2, r7, #8
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	4798      	blx	r3
 8008f8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f90:	e029      	b.n	8008fe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fa2a 	bl	80093ee <USBD_CtlError>
        err++;
 8008f9a:	7afb      	ldrb	r3, [r7, #11]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8008fa0:	e021      	b.n	8008fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	7c1b      	ldrb	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10d      	bne.n	8008fc6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb2:	f107 0208 	add.w	r2, r7, #8
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	4798      	blx	r3
 8008fba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	2207      	movs	r2, #7
 8008fc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fc4:	e00f      	b.n	8008fe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fa10 	bl	80093ee <USBD_CtlError>
        err++;
 8008fce:	7afb      	ldrb	r3, [r7, #11]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8008fd4:	e007      	b.n	8008fe6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fa08 	bl	80093ee <USBD_CtlError>
      err++;
 8008fde:	7afb      	ldrb	r3, [r7, #11]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8008fe4:	bf00      	nop
  }

  if (err != 0U)
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d11e      	bne.n	800902a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	88db      	ldrh	r3, [r3, #6]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d016      	beq.n	8009022 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ff4:	893b      	ldrh	r3, [r7, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00e      	beq.n	8009018 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	88da      	ldrh	r2, [r3, #6]
 8008ffe:	893b      	ldrh	r3, [r7, #8]
 8009000:	4293      	cmp	r3, r2
 8009002:	bf28      	it	cs
 8009004:	4613      	movcs	r3, r2
 8009006:	b29b      	uxth	r3, r3
 8009008:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800900a:	893b      	ldrh	r3, [r7, #8]
 800900c:	461a      	mov	r2, r3
 800900e:	68f9      	ldr	r1, [r7, #12]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fa69 	bl	80094e8 <USBD_CtlSendData>
 8009016:	e009      	b.n	800902c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f9e7 	bl	80093ee <USBD_CtlError>
 8009020:	e004      	b.n	800902c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fac1 	bl	80095aa <USBD_CtlSendStatus>
 8009028:	e000      	b.n	800902c <USBD_GetDescriptor+0x2cc>
    return;
 800902a:	bf00      	nop
  }
}
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop

08009034 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	889b      	ldrh	r3, [r3, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d131      	bne.n	80090aa <USBD_SetAddress+0x76>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	88db      	ldrh	r3, [r3, #6]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d12d      	bne.n	80090aa <USBD_SetAddress+0x76>
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	885b      	ldrh	r3, [r3, #2]
 8009052:	2b7f      	cmp	r3, #127	@ 0x7f
 8009054:	d829      	bhi.n	80090aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	885b      	ldrh	r3, [r3, #2]
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009060:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b03      	cmp	r3, #3
 800906c:	d104      	bne.n	8009078 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f9bc 	bl	80093ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009076:	e01d      	b.n	80090b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	7bfa      	ldrb	r2, [r7, #15]
 800907c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f003 fcff 	bl	800ca88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa8d 	bl	80095aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2202      	movs	r2, #2
 800909a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909e:	e009      	b.n	80090b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a8:	e004      	b.n	80090b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f99e 	bl	80093ee <USBD_CtlError>
  }
}
 80090b2:	bf00      	nop
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	885b      	ldrh	r3, [r3, #2]
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	4b4e      	ldr	r3, [pc, #312]	@ (800920c <USBD_SetConfig+0x150>)
 80090d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090d4:	4b4d      	ldr	r3, [pc, #308]	@ (800920c <USBD_SetConfig+0x150>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d905      	bls.n	80090e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f985 	bl	80093ee <USBD_CtlError>
    return USBD_FAIL;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e08c      	b.n	8009202 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d002      	beq.n	80090fa <USBD_SetConfig+0x3e>
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d029      	beq.n	800914c <USBD_SetConfig+0x90>
 80090f8:	e075      	b.n	80091e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80090fa:	4b44      	ldr	r3, [pc, #272]	@ (800920c <USBD_SetConfig+0x150>)
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d020      	beq.n	8009144 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009102:	4b42      	ldr	r3, [pc, #264]	@ (800920c <USBD_SetConfig+0x150>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800910c:	4b3f      	ldr	r3, [pc, #252]	@ (800920c <USBD_SetConfig+0x150>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7fe ffcd 	bl	80080b2 <USBD_SetClassConfig>
 8009118:	4603      	mov	r3, r0
 800911a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d008      	beq.n	8009134 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f962 	bl	80093ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2202      	movs	r2, #2
 800912e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009132:	e065      	b.n	8009200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fa38 	bl	80095aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2203      	movs	r2, #3
 800913e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009142:	e05d      	b.n	8009200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa30 	bl	80095aa <USBD_CtlSendStatus>
      break;
 800914a:	e059      	b.n	8009200 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800914c:	4b2f      	ldr	r3, [pc, #188]	@ (800920c <USBD_SetConfig+0x150>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d112      	bne.n	800917a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800915c:	4b2b      	ldr	r3, [pc, #172]	@ (800920c <USBD_SetConfig+0x150>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	461a      	mov	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009166:	4b29      	ldr	r3, [pc, #164]	@ (800920c <USBD_SetConfig+0x150>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7fe ffbc 	bl	80080ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fa19 	bl	80095aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009178:	e042      	b.n	8009200 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800917a:	4b24      	ldr	r3, [pc, #144]	@ (800920c <USBD_SetConfig+0x150>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	429a      	cmp	r2, r3
 8009186:	d02a      	beq.n	80091de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7fe ffaa 	bl	80080ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009196:	4b1d      	ldr	r3, [pc, #116]	@ (800920c <USBD_SetConfig+0x150>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091a0:	4b1a      	ldr	r3, [pc, #104]	@ (800920c <USBD_SetConfig+0x150>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7fe ff83 	bl	80080b2 <USBD_SetClassConfig>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00f      	beq.n	80091d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f918 	bl	80093ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7fe ff8f 	bl	80080ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2202      	movs	r2, #2
 80091d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80091d4:	e014      	b.n	8009200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f9e7 	bl	80095aa <USBD_CtlSendStatus>
      break;
 80091dc:	e010      	b.n	8009200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f9e3 	bl	80095aa <USBD_CtlSendStatus>
      break;
 80091e4:	e00c      	b.n	8009200 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f900 	bl	80093ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091ee:	4b07      	ldr	r3, [pc, #28]	@ (800920c <USBD_SetConfig+0x150>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7fe ff78 	bl	80080ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80091fa:	2303      	movs	r3, #3
 80091fc:	73fb      	strb	r3, [r7, #15]
      break;
 80091fe:	bf00      	nop
  }

  return ret;
 8009200:	7bfb      	ldrb	r3, [r7, #15]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000344 	.word	0x20000344

08009210 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	88db      	ldrh	r3, [r3, #6]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d004      	beq.n	800922c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f8e2 	bl	80093ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800922a:	e023      	b.n	8009274 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b02      	cmp	r3, #2
 8009236:	dc02      	bgt.n	800923e <USBD_GetConfig+0x2e>
 8009238:	2b00      	cmp	r3, #0
 800923a:	dc03      	bgt.n	8009244 <USBD_GetConfig+0x34>
 800923c:	e015      	b.n	800926a <USBD_GetConfig+0x5a>
 800923e:	2b03      	cmp	r3, #3
 8009240:	d00b      	beq.n	800925a <USBD_GetConfig+0x4a>
 8009242:	e012      	b.n	800926a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3308      	adds	r3, #8
 800924e:	2201      	movs	r2, #1
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f948 	bl	80094e8 <USBD_CtlSendData>
        break;
 8009258:	e00c      	b.n	8009274 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3304      	adds	r3, #4
 800925e:	2201      	movs	r2, #1
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f940 	bl	80094e8 <USBD_CtlSendData>
        break;
 8009268:	e004      	b.n	8009274 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f8be 	bl	80093ee <USBD_CtlError>
        break;
 8009272:	bf00      	nop
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800928c:	b2db      	uxtb	r3, r3
 800928e:	3b01      	subs	r3, #1
 8009290:	2b02      	cmp	r3, #2
 8009292:	d81e      	bhi.n	80092d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	88db      	ldrh	r3, [r3, #6]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d004      	beq.n	80092a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f8a5 	bl	80093ee <USBD_CtlError>
        break;
 80092a4:	e01a      	b.n	80092dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d005      	beq.n	80092c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	f043 0202 	orr.w	r2, r3, #2
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	330c      	adds	r3, #12
 80092c6:	2202      	movs	r2, #2
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f90c 	bl	80094e8 <USBD_CtlSendData>
      break;
 80092d0:	e004      	b.n	80092dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f88a 	bl	80093ee <USBD_CtlError>
      break;
 80092da:	bf00      	nop
  }
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	885b      	ldrh	r3, [r3, #2]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d107      	bne.n	8009306 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f953 	bl	80095aa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009304:	e013      	b.n	800932e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	885b      	ldrh	r3, [r3, #2]
 800930a:	2b02      	cmp	r3, #2
 800930c:	d10b      	bne.n	8009326 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	889b      	ldrh	r3, [r3, #4]
 8009312:	0a1b      	lsrs	r3, r3, #8
 8009314:	b29b      	uxth	r3, r3
 8009316:	b2da      	uxtb	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f943 	bl	80095aa <USBD_CtlSendStatus>
}
 8009324:	e003      	b.n	800932e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f860 	bl	80093ee <USBD_CtlError>
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009346:	b2db      	uxtb	r3, r3
 8009348:	3b01      	subs	r3, #1
 800934a:	2b02      	cmp	r3, #2
 800934c:	d80b      	bhi.n	8009366 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	885b      	ldrh	r3, [r3, #2]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d10c      	bne.n	8009370 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f923 	bl	80095aa <USBD_CtlSendStatus>
      }
      break;
 8009364:	e004      	b.n	8009370 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f840 	bl	80093ee <USBD_CtlError>
      break;
 800936e:	e000      	b.n	8009372 <USBD_ClrFeature+0x3c>
      break;
 8009370:	bf00      	nop
  }
}
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	781a      	ldrb	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3301      	adds	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	781a      	ldrb	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3301      	adds	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f7ff fa3d 	bl	8008824 <SWAPBYTE>
 80093aa:	4603      	mov	r3, r0
 80093ac:	461a      	mov	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3301      	adds	r3, #1
 80093b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3301      	adds	r3, #1
 80093bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f7ff fa30 	bl	8008824 <SWAPBYTE>
 80093c4:	4603      	mov	r3, r0
 80093c6:	461a      	mov	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3301      	adds	r3, #1
 80093d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3301      	adds	r3, #1
 80093d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f7ff fa23 	bl	8008824 <SWAPBYTE>
 80093de:	4603      	mov	r3, r0
 80093e0:	461a      	mov	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	80da      	strh	r2, [r3, #6]
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80093f8:	2180      	movs	r1, #128	@ 0x80
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f003 fada 	bl	800c9b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009400:	2100      	movs	r1, #0
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f003 fad6 	bl	800c9b4 <USBD_LL_StallEP>
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d042      	beq.n	80094ac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800942a:	6938      	ldr	r0, [r7, #16]
 800942c:	f000 f842 	bl	80094b4 <USBD_GetLen>
 8009430:	4603      	mov	r3, r0
 8009432:	3301      	adds	r3, #1
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800943a:	d808      	bhi.n	800944e <USBD_GetString+0x3e>
 800943c:	6938      	ldr	r0, [r7, #16]
 800943e:	f000 f839 	bl	80094b4 <USBD_GetLen>
 8009442:	4603      	mov	r3, r0
 8009444:	3301      	adds	r3, #1
 8009446:	b29b      	uxth	r3, r3
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	b29a      	uxth	r2, r3
 800944c:	e001      	b.n	8009452 <USBD_GetString+0x42>
 800944e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009456:	7dfb      	ldrb	r3, [r7, #23]
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	4413      	add	r3, r2
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	7812      	ldrb	r2, [r2, #0]
 8009460:	701a      	strb	r2, [r3, #0]
  idx++;
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	3301      	adds	r3, #1
 8009466:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	4413      	add	r3, r2
 800946e:	2203      	movs	r2, #3
 8009470:	701a      	strb	r2, [r3, #0]
  idx++;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	3301      	adds	r3, #1
 8009476:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009478:	e013      	b.n	80094a2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	4413      	add	r3, r2
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	7812      	ldrb	r2, [r2, #0]
 8009484:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	3301      	adds	r3, #1
 800948a:	613b      	str	r3, [r7, #16]
    idx++;
 800948c:	7dfb      	ldrb	r3, [r7, #23]
 800948e:	3301      	adds	r3, #1
 8009490:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	4413      	add	r3, r2
 8009498:	2200      	movs	r2, #0
 800949a:	701a      	strb	r2, [r3, #0]
    idx++;
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	3301      	adds	r3, #1
 80094a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e7      	bne.n	800947a <USBD_GetString+0x6a>
 80094aa:	e000      	b.n	80094ae <USBD_GetString+0x9e>
    return;
 80094ac:	bf00      	nop
  }
}
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094bc:	2300      	movs	r3, #0
 80094be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80094c4:	e005      	b.n	80094d2 <USBD_GetLen+0x1e>
  {
    len++;
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	3301      	adds	r3, #1
 80094ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	3301      	adds	r3, #1
 80094d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1f5      	bne.n	80094c6 <USBD_GetLen+0x12>
  }

  return len;
 80094da:	7bfb      	ldrb	r3, [r7, #15]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	2100      	movs	r1, #0
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f003 fad6 	bl	800cac6 <USBD_LL_Transmit>

  return USBD_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	2100      	movs	r1, #0
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f003 fac5 	bl	800cac6 <USBD_LL_Transmit>

  return USBD_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2203      	movs	r2, #3
 8009556:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	2100      	movs	r1, #0
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f003 fac5 	bl	800cb08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f003 fab4 	bl	800cb08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2204      	movs	r2, #4
 80095b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095ba:	2300      	movs	r3, #0
 80095bc:	2200      	movs	r2, #0
 80095be:	2100      	movs	r1, #0
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f003 fa80 	bl	800cac6 <USBD_LL_Transmit>

  return USBD_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2205      	movs	r2, #5
 80095dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095e0:	2300      	movs	r3, #0
 80095e2:	2200      	movs	r2, #0
 80095e4:	2100      	movs	r1, #0
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f003 fa8e 	bl	800cb08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <__NVIC_SetPriority>:
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	6039      	str	r1, [r7, #0]
 8009602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009608:	2b00      	cmp	r3, #0
 800960a:	db0a      	blt.n	8009622 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	b2da      	uxtb	r2, r3
 8009610:	490c      	ldr	r1, [pc, #48]	@ (8009644 <__NVIC_SetPriority+0x4c>)
 8009612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009616:	0112      	lsls	r2, r2, #4
 8009618:	b2d2      	uxtb	r2, r2
 800961a:	440b      	add	r3, r1
 800961c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009620:	e00a      	b.n	8009638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	b2da      	uxtb	r2, r3
 8009626:	4908      	ldr	r1, [pc, #32]	@ (8009648 <__NVIC_SetPriority+0x50>)
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	f003 030f 	and.w	r3, r3, #15
 800962e:	3b04      	subs	r3, #4
 8009630:	0112      	lsls	r2, r2, #4
 8009632:	b2d2      	uxtb	r2, r2
 8009634:	440b      	add	r3, r1
 8009636:	761a      	strb	r2, [r3, #24]
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	e000e100 	.word	0xe000e100
 8009648:	e000ed00 	.word	0xe000ed00

0800964c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009650:	4b05      	ldr	r3, [pc, #20]	@ (8009668 <SysTick_Handler+0x1c>)
 8009652:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009654:	f001 fd46 	bl	800b0e4 <xTaskGetSchedulerState>
 8009658:	4603      	mov	r3, r0
 800965a:	2b01      	cmp	r3, #1
 800965c:	d001      	beq.n	8009662 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800965e:	f002 fb3b 	bl	800bcd8 <xPortSysTickHandler>
  }
}
 8009662:	bf00      	nop
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	e000e010 	.word	0xe000e010

0800966c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009670:	2100      	movs	r1, #0
 8009672:	f06f 0004 	mvn.w	r0, #4
 8009676:	f7ff ffbf 	bl	80095f8 <__NVIC_SetPriority>
#endif
}
 800967a:	bf00      	nop
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009686:	f3ef 8305 	mrs	r3, IPSR
 800968a:	603b      	str	r3, [r7, #0]
  return(result);
 800968c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009692:	f06f 0305 	mvn.w	r3, #5
 8009696:	607b      	str	r3, [r7, #4]
 8009698:	e00c      	b.n	80096b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800969a:	4b0a      	ldr	r3, [pc, #40]	@ (80096c4 <osKernelInitialize+0x44>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d105      	bne.n	80096ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096a2:	4b08      	ldr	r3, [pc, #32]	@ (80096c4 <osKernelInitialize+0x44>)
 80096a4:	2201      	movs	r2, #1
 80096a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	607b      	str	r3, [r7, #4]
 80096ac:	e002      	b.n	80096b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096ae:	f04f 33ff 	mov.w	r3, #4294967295
 80096b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096b4:	687b      	ldr	r3, [r7, #4]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	20000348 	.word	0x20000348

080096c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ce:	f3ef 8305 	mrs	r3, IPSR
 80096d2:	603b      	str	r3, [r7, #0]
  return(result);
 80096d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d003      	beq.n	80096e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80096da:	f06f 0305 	mvn.w	r3, #5
 80096de:	607b      	str	r3, [r7, #4]
 80096e0:	e010      	b.n	8009704 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80096e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009710 <osKernelStart+0x48>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d109      	bne.n	80096fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80096ea:	f7ff ffbf 	bl	800966c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80096ee:	4b08      	ldr	r3, [pc, #32]	@ (8009710 <osKernelStart+0x48>)
 80096f0:	2202      	movs	r2, #2
 80096f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80096f4:	f001 f892 	bl	800a81c <vTaskStartScheduler>
      stat = osOK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	607b      	str	r3, [r7, #4]
 80096fc:	e002      	b.n	8009704 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80096fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009702:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009704:	687b      	ldr	r3, [r7, #4]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20000348 	.word	0x20000348

08009714 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009714:	b580      	push	{r7, lr}
 8009716:	b08e      	sub	sp, #56	@ 0x38
 8009718:	af04      	add	r7, sp, #16
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009724:	f3ef 8305 	mrs	r3, IPSR
 8009728:	617b      	str	r3, [r7, #20]
  return(result);
 800972a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800972c:	2b00      	cmp	r3, #0
 800972e:	d17e      	bne.n	800982e <osThreadNew+0x11a>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d07b      	beq.n	800982e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009736:	2380      	movs	r3, #128	@ 0x80
 8009738:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800973a:	2318      	movs	r3, #24
 800973c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800973e:	2300      	movs	r3, #0
 8009740:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009742:	f04f 33ff 	mov.w	r3, #4294967295
 8009746:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d045      	beq.n	80097da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <osThreadNew+0x48>
        name = attr->name;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d008      	beq.n	8009782 <osThreadNew+0x6e>
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	2b38      	cmp	r3, #56	@ 0x38
 8009774:	d805      	bhi.n	8009782 <osThreadNew+0x6e>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <osThreadNew+0x72>
        return (NULL);
 8009782:	2300      	movs	r3, #0
 8009784:	e054      	b.n	8009830 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	089b      	lsrs	r3, r3, #2
 8009794:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00e      	beq.n	80097bc <osThreadNew+0xa8>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	2ba7      	cmp	r3, #167	@ 0xa7
 80097a4:	d90a      	bls.n	80097bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d006      	beq.n	80097bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d002      	beq.n	80097bc <osThreadNew+0xa8>
        mem = 1;
 80097b6:	2301      	movs	r3, #1
 80097b8:	61bb      	str	r3, [r7, #24]
 80097ba:	e010      	b.n	80097de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10c      	bne.n	80097de <osThreadNew+0xca>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d108      	bne.n	80097de <osThreadNew+0xca>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d104      	bne.n	80097de <osThreadNew+0xca>
          mem = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61bb      	str	r3, [r7, #24]
 80097d8:	e001      	b.n	80097de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80097da:	2300      	movs	r3, #0
 80097dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d110      	bne.n	8009806 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097ec:	9202      	str	r2, [sp, #8]
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	6a3a      	ldr	r2, [r7, #32]
 80097f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f000 fe1a 	bl	800a434 <xTaskCreateStatic>
 8009800:	4603      	mov	r3, r0
 8009802:	613b      	str	r3, [r7, #16]
 8009804:	e013      	b.n	800982e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d110      	bne.n	800982e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	b29a      	uxth	r2, r3
 8009810:	f107 0310 	add.w	r3, r7, #16
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fe68 	bl	800a4f4 <xTaskCreate>
 8009824:	4603      	mov	r3, r0
 8009826:	2b01      	cmp	r3, #1
 8009828:	d001      	beq.n	800982e <osThreadNew+0x11a>
            hTask = NULL;
 800982a:	2300      	movs	r3, #0
 800982c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800982e:	693b      	ldr	r3, [r7, #16]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3728      	adds	r7, #40	@ 0x28
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009840:	f3ef 8305 	mrs	r3, IPSR
 8009844:	60bb      	str	r3, [r7, #8]
  return(result);
 8009846:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <osDelay+0x1c>
    stat = osErrorISR;
 800984c:	f06f 0305 	mvn.w	r3, #5
 8009850:	60fb      	str	r3, [r7, #12]
 8009852:	e007      	b.n	8009864 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <osDelay+0x2c>
      vTaskDelay(ticks);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 ffa6 	bl	800a7b0 <vTaskDelay>
    }
  }

  return (stat);
 8009864:	68fb      	ldr	r3, [r7, #12]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4a07      	ldr	r2, [pc, #28]	@ (800989c <vApplicationGetIdleTaskMemory+0x2c>)
 8009880:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	4a06      	ldr	r2, [pc, #24]	@ (80098a0 <vApplicationGetIdleTaskMemory+0x30>)
 8009886:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2280      	movs	r2, #128	@ 0x80
 800988c:	601a      	str	r2, [r3, #0]
}
 800988e:	bf00      	nop
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	2000034c 	.word	0x2000034c
 80098a0:	200003f4 	.word	0x200003f4

080098a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4a07      	ldr	r2, [pc, #28]	@ (80098d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80098b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	4a06      	ldr	r2, [pc, #24]	@ (80098d4 <vApplicationGetTimerTaskMemory+0x30>)
 80098ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098c2:	601a      	str	r2, [r3, #0]
}
 80098c4:	bf00      	nop
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	200005f4 	.word	0x200005f4
 80098d4:	2000069c 	.word	0x2000069c

080098d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f103 0208 	add.w	r2, r3, #8
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f04f 32ff 	mov.w	r2, #4294967295
 80098f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f103 0208 	add.w	r2, r3, #8
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f103 0208 	add.w	r2, r3, #8
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009926:	bf00      	nop
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009932:	b480      	push	{r7}
 8009934:	b085      	sub	sp, #20
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	601a      	str	r2, [r3, #0]
}
 800996e:	bf00      	nop
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800997a:	b480      	push	{r7}
 800997c:	b085      	sub	sp, #20
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009990:	d103      	bne.n	800999a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	e00c      	b.n	80099b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3308      	adds	r3, #8
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e002      	b.n	80099a8 <vListInsert+0x2e>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d2f6      	bcs.n	80099a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	601a      	str	r2, [r3, #0]
}
 80099e0:	bf00      	nop
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	6892      	ldr	r2, [r2, #8]
 8009a02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	6852      	ldr	r2, [r2, #4]
 8009a0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d103      	bne.n	8009a20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	1e5a      	subs	r2, r3, #1
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10b      	bne.n	8009a6c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a66:	bf00      	nop
 8009a68:	bf00      	nop
 8009a6a:	e7fd      	b.n	8009a68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a6c:	f002 f8a4 	bl	800bbb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a78:	68f9      	ldr	r1, [r7, #12]
 8009a7a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a7c:	fb01 f303 	mul.w	r3, r1, r3
 8009a80:	441a      	add	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	68f9      	ldr	r1, [r7, #12]
 8009aa0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	441a      	add	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	22ff      	movs	r2, #255	@ 0xff
 8009ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	22ff      	movs	r2, #255	@ 0xff
 8009ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d114      	bne.n	8009aec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d01a      	beq.n	8009b00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3310      	adds	r3, #16
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f001 f942 	bl	800ad58 <xTaskRemoveFromEventList>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d012      	beq.n	8009b00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ada:	4b0d      	ldr	r3, [pc, #52]	@ (8009b10 <xQueueGenericReset+0xd0>)
 8009adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	e009      	b.n	8009b00 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3310      	adds	r3, #16
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fef1 	bl	80098d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3324      	adds	r3, #36	@ 0x24
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7ff feec 	bl	80098d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b00:	f002 f88c 	bl	800bc1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b04:	2301      	movs	r3, #1
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	e000ed04 	.word	0xe000ed04

08009b14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08e      	sub	sp, #56	@ 0x38
 8009b18:	af02      	add	r7, sp, #8
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10b      	bne.n	8009b40 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b3a:	bf00      	nop
 8009b3c:	bf00      	nop
 8009b3e:	e7fd      	b.n	8009b3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10b      	bne.n	8009b5e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	e7fd      	b.n	8009b5a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d002      	beq.n	8009b6a <xQueueGenericCreateStatic+0x56>
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <xQueueGenericCreateStatic+0x5a>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <xQueueGenericCreateStatic+0x5c>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10b      	bne.n	8009b8c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	623b      	str	r3, [r7, #32]
}
 8009b86:	bf00      	nop
 8009b88:	bf00      	nop
 8009b8a:	e7fd      	b.n	8009b88 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d102      	bne.n	8009b98 <xQueueGenericCreateStatic+0x84>
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <xQueueGenericCreateStatic+0x88>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e000      	b.n	8009b9e <xQueueGenericCreateStatic+0x8a>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10b      	bne.n	8009bba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	61fb      	str	r3, [r7, #28]
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop
 8009bb8:	e7fd      	b.n	8009bb6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009bba:	2350      	movs	r3, #80	@ 0x50
 8009bbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2b50      	cmp	r3, #80	@ 0x50
 8009bc2:	d00b      	beq.n	8009bdc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	61bb      	str	r3, [r7, #24]
}
 8009bd6:	bf00      	nop
 8009bd8:	bf00      	nop
 8009bda:	e7fd      	b.n	8009bd8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bdc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00d      	beq.n	8009c04 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bf0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	68b9      	ldr	r1, [r7, #8]
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 f805 	bl	8009c0e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3730      	adds	r7, #48	@ 0x30
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	607a      	str	r2, [r7, #4]
 8009c1a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d103      	bne.n	8009c2a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	e002      	b.n	8009c30 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	69b8      	ldr	r0, [r7, #24]
 8009c40:	f7ff fefe 	bl	8009a40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	78fa      	ldrb	r2, [r7, #3]
 8009c48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c4c:	bf00      	nop
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08e      	sub	sp, #56	@ 0x38
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c62:	2300      	movs	r3, #0
 8009c64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10b      	bne.n	8009c88 <xQueueGenericSend+0x34>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c82:	bf00      	nop
 8009c84:	bf00      	nop
 8009c86:	e7fd      	b.n	8009c84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d103      	bne.n	8009c96 <xQueueGenericSend+0x42>
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <xQueueGenericSend+0x46>
 8009c96:	2301      	movs	r3, #1
 8009c98:	e000      	b.n	8009c9c <xQueueGenericSend+0x48>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10b      	bne.n	8009cb8 <xQueueGenericSend+0x64>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009cb2:	bf00      	nop
 8009cb4:	bf00      	nop
 8009cb6:	e7fd      	b.n	8009cb4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d103      	bne.n	8009cc6 <xQueueGenericSend+0x72>
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d101      	bne.n	8009cca <xQueueGenericSend+0x76>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e000      	b.n	8009ccc <xQueueGenericSend+0x78>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10b      	bne.n	8009ce8 <xQueueGenericSend+0x94>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	623b      	str	r3, [r7, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	bf00      	nop
 8009ce6:	e7fd      	b.n	8009ce4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ce8:	f001 f9fc 	bl	800b0e4 <xTaskGetSchedulerState>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d102      	bne.n	8009cf8 <xQueueGenericSend+0xa4>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <xQueueGenericSend+0xa8>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <xQueueGenericSend+0xaa>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10b      	bne.n	8009d1a <xQueueGenericSend+0xc6>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	61fb      	str	r3, [r7, #28]
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop
 8009d18:	e7fd      	b.n	8009d16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d1a:	f001 ff4d 	bl	800bbb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d302      	bcc.n	8009d30 <xQueueGenericSend+0xdc>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d129      	bne.n	8009d84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d36:	f000 fa0f 	bl	800a158 <prvCopyDataToQueue>
 8009d3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d010      	beq.n	8009d66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d46:	3324      	adds	r3, #36	@ 0x24
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 f805 	bl	800ad58 <xTaskRemoveFromEventList>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d013      	beq.n	8009d7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d54:	4b3f      	ldr	r3, [pc, #252]	@ (8009e54 <xQueueGenericSend+0x200>)
 8009d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	e00a      	b.n	8009d7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d007      	beq.n	8009d7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d6c:	4b39      	ldr	r3, [pc, #228]	@ (8009e54 <xQueueGenericSend+0x200>)
 8009d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d7c:	f001 ff4e 	bl	800bc1c <vPortExitCritical>
				return pdPASS;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e063      	b.n	8009e4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d103      	bne.n	8009d92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d8a:	f001 ff47 	bl	800bc1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e05c      	b.n	8009e4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d106      	bne.n	8009da6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d98:	f107 0314 	add.w	r3, r7, #20
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f001 f83f 	bl	800ae20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009da2:	2301      	movs	r3, #1
 8009da4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009da6:	f001 ff39 	bl	800bc1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009daa:	f000 fda7 	bl	800a8fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dae:	f001 ff03 	bl	800bbb8 <vPortEnterCritical>
 8009db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009db8:	b25b      	sxtb	r3, r3
 8009dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbe:	d103      	bne.n	8009dc8 <xQueueGenericSend+0x174>
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dce:	b25b      	sxtb	r3, r3
 8009dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd4:	d103      	bne.n	8009dde <xQueueGenericSend+0x18a>
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009dde:	f001 ff1d 	bl	800bc1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009de2:	1d3a      	adds	r2, r7, #4
 8009de4:	f107 0314 	add.w	r3, r7, #20
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 f82e 	bl	800ae4c <xTaskCheckForTimeOut>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d124      	bne.n	8009e40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009df6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009df8:	f000 faa6 	bl	800a348 <prvIsQueueFull>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d018      	beq.n	8009e34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e04:	3310      	adds	r3, #16
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 ff52 	bl	800acb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e12:	f000 fa31 	bl	800a278 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e16:	f000 fd7f 	bl	800a918 <xTaskResumeAll>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f47f af7c 	bne.w	8009d1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009e22:	4b0c      	ldr	r3, [pc, #48]	@ (8009e54 <xQueueGenericSend+0x200>)
 8009e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	e772      	b.n	8009d1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e36:	f000 fa1f 	bl	800a278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e3a:	f000 fd6d 	bl	800a918 <xTaskResumeAll>
 8009e3e:	e76c      	b.n	8009d1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e42:	f000 fa19 	bl	800a278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e46:	f000 fd67 	bl	800a918 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3738      	adds	r7, #56	@ 0x38
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	e000ed04 	.word	0xe000ed04

08009e58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b090      	sub	sp, #64	@ 0x40
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10b      	bne.n	8009e88 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
 8009e86:	e7fd      	b.n	8009e84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d103      	bne.n	8009e96 <xQueueGenericSendFromISR+0x3e>
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <xQueueGenericSendFromISR+0x42>
 8009e96:	2301      	movs	r3, #1
 8009e98:	e000      	b.n	8009e9c <xQueueGenericSendFromISR+0x44>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10b      	bne.n	8009eb8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009eb2:	bf00      	nop
 8009eb4:	bf00      	nop
 8009eb6:	e7fd      	b.n	8009eb4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d103      	bne.n	8009ec6 <xQueueGenericSendFromISR+0x6e>
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d101      	bne.n	8009eca <xQueueGenericSendFromISR+0x72>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e000      	b.n	8009ecc <xQueueGenericSendFromISR+0x74>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d10b      	bne.n	8009ee8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	623b      	str	r3, [r7, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	bf00      	nop
 8009ee6:	e7fd      	b.n	8009ee4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ee8:	f001 ff46 	bl	800bd78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009eec:	f3ef 8211 	mrs	r2, BASEPRI
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	61fa      	str	r2, [r7, #28]
 8009f02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d302      	bcc.n	8009f1a <xQueueGenericSendFromISR+0xc2>
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d12f      	bne.n	8009f7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	68b9      	ldr	r1, [r7, #8]
 8009f2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f30:	f000 f912 	bl	800a158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3c:	d112      	bne.n	8009f64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d016      	beq.n	8009f74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f48:	3324      	adds	r3, #36	@ 0x24
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 ff04 	bl	800ad58 <xTaskRemoveFromEventList>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00e      	beq.n	8009f74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00b      	beq.n	8009f74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	e007      	b.n	8009f74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009f68:	3301      	adds	r3, #1
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	b25a      	sxtb	r2, r3
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009f74:	2301      	movs	r3, #1
 8009f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009f78:	e001      	b.n	8009f7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3740      	adds	r7, #64	@ 0x40
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08c      	sub	sp, #48	@ 0x30
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10b      	bne.n	8009fc6 <xQueueReceive+0x32>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	623b      	str	r3, [r7, #32]
}
 8009fc0:	bf00      	nop
 8009fc2:	bf00      	nop
 8009fc4:	e7fd      	b.n	8009fc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d103      	bne.n	8009fd4 <xQueueReceive+0x40>
 8009fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <xQueueReceive+0x44>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e000      	b.n	8009fda <xQueueReceive+0x46>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10b      	bne.n	8009ff6 <xQueueReceive+0x62>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	61fb      	str	r3, [r7, #28]
}
 8009ff0:	bf00      	nop
 8009ff2:	bf00      	nop
 8009ff4:	e7fd      	b.n	8009ff2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ff6:	f001 f875 	bl	800b0e4 <xTaskGetSchedulerState>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d102      	bne.n	800a006 <xQueueReceive+0x72>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <xQueueReceive+0x76>
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <xQueueReceive+0x78>
 800a00a:	2300      	movs	r3, #0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10b      	bne.n	800a028 <xQueueReceive+0x94>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	61bb      	str	r3, [r7, #24]
}
 800a022:	bf00      	nop
 800a024:	bf00      	nop
 800a026:	e7fd      	b.n	800a024 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a028:	f001 fdc6 	bl	800bbb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a030:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	2b00      	cmp	r3, #0
 800a036:	d01f      	beq.n	800a078 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a038:	68b9      	ldr	r1, [r7, #8]
 800a03a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a03c:	f000 f8f6 	bl	800a22c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	1e5a      	subs	r2, r3, #1
 800a044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a046:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00f      	beq.n	800a070 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a052:	3310      	adds	r3, #16
 800a054:	4618      	mov	r0, r3
 800a056:	f000 fe7f 	bl	800ad58 <xTaskRemoveFromEventList>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d007      	beq.n	800a070 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a060:	4b3c      	ldr	r3, [pc, #240]	@ (800a154 <xQueueReceive+0x1c0>)
 800a062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a066:	601a      	str	r2, [r3, #0]
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a070:	f001 fdd4 	bl	800bc1c <vPortExitCritical>
				return pdPASS;
 800a074:	2301      	movs	r3, #1
 800a076:	e069      	b.n	800a14c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d103      	bne.n	800a086 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a07e:	f001 fdcd 	bl	800bc1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a082:	2300      	movs	r3, #0
 800a084:	e062      	b.n	800a14c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d106      	bne.n	800a09a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a08c:	f107 0310 	add.w	r3, r7, #16
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fec5 	bl	800ae20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a096:	2301      	movs	r3, #1
 800a098:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a09a:	f001 fdbf 	bl	800bc1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a09e:	f000 fc2d 	bl	800a8fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0a2:	f001 fd89 	bl	800bbb8 <vPortEnterCritical>
 800a0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0ac:	b25b      	sxtb	r3, r3
 800a0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b2:	d103      	bne.n	800a0bc <xQueueReceive+0x128>
 800a0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0c2:	b25b      	sxtb	r3, r3
 800a0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c8:	d103      	bne.n	800a0d2 <xQueueReceive+0x13e>
 800a0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0d2:	f001 fda3 	bl	800bc1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0d6:	1d3a      	adds	r2, r7, #4
 800a0d8:	f107 0310 	add.w	r3, r7, #16
 800a0dc:	4611      	mov	r1, r2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 feb4 	bl	800ae4c <xTaskCheckForTimeOut>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d123      	bne.n	800a132 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0ec:	f000 f916 	bl	800a31c <prvIsQueueEmpty>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d017      	beq.n	800a126 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f8:	3324      	adds	r3, #36	@ 0x24
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 fdd8 	bl	800acb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a104:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a106:	f000 f8b7 	bl	800a278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a10a:	f000 fc05 	bl	800a918 <xTaskResumeAll>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d189      	bne.n	800a028 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a114:	4b0f      	ldr	r3, [pc, #60]	@ (800a154 <xQueueReceive+0x1c0>)
 800a116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	e780      	b.n	800a028 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a128:	f000 f8a6 	bl	800a278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a12c:	f000 fbf4 	bl	800a918 <xTaskResumeAll>
 800a130:	e77a      	b.n	800a028 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a134:	f000 f8a0 	bl	800a278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a138:	f000 fbee 	bl	800a918 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a13c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a13e:	f000 f8ed 	bl	800a31c <prvIsQueueEmpty>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	f43f af6f 	beq.w	800a028 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a14a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3730      	adds	r7, #48	@ 0x30
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	e000ed04 	.word	0xe000ed04

0800a158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a164:	2300      	movs	r3, #0
 800a166:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10d      	bne.n	800a192 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d14d      	bne.n	800a21a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	4618      	mov	r0, r3
 800a184:	f000 ffcc 	bl	800b120 <xTaskPriorityDisinherit>
 800a188:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	609a      	str	r2, [r3, #8]
 800a190:	e043      	b.n	800a21a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d119      	bne.n	800a1cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6858      	ldr	r0, [r3, #4]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	68b9      	ldr	r1, [r7, #8]
 800a1a4:	f002 fdb4 	bl	800cd10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b0:	441a      	add	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d32b      	bcc.n	800a21a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	605a      	str	r2, [r3, #4]
 800a1ca:	e026      	b.n	800a21a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	68d8      	ldr	r0, [r3, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	68b9      	ldr	r1, [r7, #8]
 800a1d8:	f002 fd9a 	bl	800cd10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e4:	425b      	negs	r3, r3
 800a1e6:	441a      	add	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d207      	bcs.n	800a208 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	689a      	ldr	r2, [r3, #8]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a200:	425b      	negs	r3, r3
 800a202:	441a      	add	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d105      	bne.n	800a21a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	3b01      	subs	r3, #1
 800a218:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a222:	697b      	ldr	r3, [r7, #20]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d018      	beq.n	800a270 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68da      	ldr	r2, [r3, #12]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a246:	441a      	add	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68da      	ldr	r2, [r3, #12]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	429a      	cmp	r2, r3
 800a256:	d303      	bcc.n	800a260 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68d9      	ldr	r1, [r3, #12]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a268:	461a      	mov	r2, r3
 800a26a:	6838      	ldr	r0, [r7, #0]
 800a26c:	f002 fd50 	bl	800cd10 <memcpy>
	}
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a280:	f001 fc9a 	bl	800bbb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a28a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a28c:	e011      	b.n	800a2b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a292:	2b00      	cmp	r3, #0
 800a294:	d012      	beq.n	800a2bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3324      	adds	r3, #36	@ 0x24
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 fd5c 	bl	800ad58 <xTaskRemoveFromEventList>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2a6:	f000 fe35 	bl	800af14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	dce9      	bgt.n	800a28e <prvUnlockQueue+0x16>
 800a2ba:	e000      	b.n	800a2be <prvUnlockQueue+0x46>
					break;
 800a2bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	22ff      	movs	r2, #255	@ 0xff
 800a2c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a2c6:	f001 fca9 	bl	800bc1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2ca:	f001 fc75 	bl	800bbb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a2d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2d6:	e011      	b.n	800a2fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d012      	beq.n	800a306 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3310      	adds	r3, #16
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 fd37 	bl	800ad58 <xTaskRemoveFromEventList>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2f0:	f000 fe10 	bl	800af14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2f4:	7bbb      	ldrb	r3, [r7, #14]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a300:	2b00      	cmp	r3, #0
 800a302:	dce9      	bgt.n	800a2d8 <prvUnlockQueue+0x60>
 800a304:	e000      	b.n	800a308 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a306:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	22ff      	movs	r2, #255	@ 0xff
 800a30c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a310:	f001 fc84 	bl	800bc1c <vPortExitCritical>
}
 800a314:	bf00      	nop
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a324:	f001 fc48 	bl	800bbb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a330:	2301      	movs	r3, #1
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	e001      	b.n	800a33a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a33a:	f001 fc6f 	bl	800bc1c <vPortExitCritical>

	return xReturn;
 800a33e:	68fb      	ldr	r3, [r7, #12]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a350:	f001 fc32 	bl	800bbb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d102      	bne.n	800a366 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a360:	2301      	movs	r3, #1
 800a362:	60fb      	str	r3, [r7, #12]
 800a364:	e001      	b.n	800a36a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a366:	2300      	movs	r3, #0
 800a368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a36a:	f001 fc57 	bl	800bc1c <vPortExitCritical>

	return xReturn;
 800a36e:	68fb      	ldr	r3, [r7, #12]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a382:	2300      	movs	r3, #0
 800a384:	60fb      	str	r3, [r7, #12]
 800a386:	e014      	b.n	800a3b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a388:	4a0f      	ldr	r2, [pc, #60]	@ (800a3c8 <vQueueAddToRegistry+0x50>)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10b      	bne.n	800a3ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a394:	490c      	ldr	r1, [pc, #48]	@ (800a3c8 <vQueueAddToRegistry+0x50>)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a39e:	4a0a      	ldr	r2, [pc, #40]	@ (800a3c8 <vQueueAddToRegistry+0x50>)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	4413      	add	r3, r2
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3aa:	e006      	b.n	800a3ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b07      	cmp	r3, #7
 800a3b6:	d9e7      	bls.n	800a388 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	20000a9c 	.word	0x20000a9c

0800a3cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3dc:	f001 fbec 	bl	800bbb8 <vPortEnterCritical>
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3e6:	b25b      	sxtb	r3, r3
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ec:	d103      	bne.n	800a3f6 <vQueueWaitForMessageRestricted+0x2a>
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3fc:	b25b      	sxtb	r3, r3
 800a3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a402:	d103      	bne.n	800a40c <vQueueWaitForMessageRestricted+0x40>
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a40c:	f001 fc06 	bl	800bc1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	3324      	adds	r3, #36	@ 0x24
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	68b9      	ldr	r1, [r7, #8]
 800a420:	4618      	mov	r0, r3
 800a422:	f000 fc6d 	bl	800ad00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f7ff ff26 	bl	800a278 <prvUnlockQueue>
	}
 800a42c:	bf00      	nop
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08e      	sub	sp, #56	@ 0x38
 800a438:	af04      	add	r7, sp, #16
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10b      	bne.n	800a460 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	623b      	str	r3, [r7, #32]
}
 800a45a:	bf00      	nop
 800a45c:	bf00      	nop
 800a45e:	e7fd      	b.n	800a45c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10b      	bne.n	800a47e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	61fb      	str	r3, [r7, #28]
}
 800a478:	bf00      	nop
 800a47a:	bf00      	nop
 800a47c:	e7fd      	b.n	800a47a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a47e:	23a8      	movs	r3, #168	@ 0xa8
 800a480:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	2ba8      	cmp	r3, #168	@ 0xa8
 800a486:	d00b      	beq.n	800a4a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	61bb      	str	r3, [r7, #24]
}
 800a49a:	bf00      	nop
 800a49c:	bf00      	nop
 800a49e:	e7fd      	b.n	800a49c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d01e      	beq.n	800a4e6 <xTaskCreateStatic+0xb2>
 800a4a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d01b      	beq.n	800a4e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	9303      	str	r3, [sp, #12]
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c6:	9302      	str	r3, [sp, #8]
 800a4c8:	f107 0314 	add.w	r3, r7, #20
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	68b9      	ldr	r1, [r7, #8]
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 f851 	bl	800a580 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a4e0:	f000 f8f6 	bl	800a6d0 <prvAddNewTaskToReadyList>
 800a4e4:	e001      	b.n	800a4ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4ea:	697b      	ldr	r3, [r7, #20]
	}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3728      	adds	r7, #40	@ 0x28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08c      	sub	sp, #48	@ 0x30
 800a4f8:	af04      	add	r7, sp, #16
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	4613      	mov	r3, r2
 800a502:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a504:	88fb      	ldrh	r3, [r7, #6]
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4618      	mov	r0, r3
 800a50a:	f001 fc77 	bl	800bdfc <pvPortMalloc>
 800a50e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00e      	beq.n	800a534 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a516:	20a8      	movs	r0, #168	@ 0xa8
 800a518:	f001 fc70 	bl	800bdfc <pvPortMalloc>
 800a51c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	631a      	str	r2, [r3, #48]	@ 0x30
 800a52a:	e005      	b.n	800a538 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a52c:	6978      	ldr	r0, [r7, #20]
 800a52e:	f001 fd33 	bl	800bf98 <vPortFree>
 800a532:	e001      	b.n	800a538 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a534:	2300      	movs	r3, #0
 800a536:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d017      	beq.n	800a56e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a546:	88fa      	ldrh	r2, [r7, #6]
 800a548:	2300      	movs	r3, #0
 800a54a:	9303      	str	r3, [sp, #12]
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	9302      	str	r3, [sp, #8]
 800a550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a552:	9301      	str	r3, [sp, #4]
 800a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68b9      	ldr	r1, [r7, #8]
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 f80f 	bl	800a580 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a562:	69f8      	ldr	r0, [r7, #28]
 800a564:	f000 f8b4 	bl	800a6d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a568:	2301      	movs	r3, #1
 800a56a:	61bb      	str	r3, [r7, #24]
 800a56c:	e002      	b.n	800a574 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a56e:	f04f 33ff 	mov.w	r3, #4294967295
 800a572:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a574:	69bb      	ldr	r3, [r7, #24]
	}
 800a576:	4618      	mov	r0, r3
 800a578:	3720      	adds	r7, #32
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a590:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	461a      	mov	r2, r3
 800a598:	21a5      	movs	r1, #165	@ 0xa5
 800a59a:	f002 fb2d 	bl	800cbf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	f023 0307 	bic.w	r3, r3, #7
 800a5b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00b      	beq.n	800a5da <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	617b      	str	r3, [r7, #20]
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop
 800a5d8:	e7fd      	b.n	800a5d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01f      	beq.n	800a620 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	61fb      	str	r3, [r7, #28]
 800a5e4:	e012      	b.n	800a60c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	7819      	ldrb	r1, [r3, #0]
 800a5ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	3334      	adds	r3, #52	@ 0x34
 800a5f6:	460a      	mov	r2, r1
 800a5f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	4413      	add	r3, r2
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d006      	beq.n	800a614 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	3301      	adds	r3, #1
 800a60a:	61fb      	str	r3, [r7, #28]
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	2b0f      	cmp	r3, #15
 800a610:	d9e9      	bls.n	800a5e6 <prvInitialiseNewTask+0x66>
 800a612:	e000      	b.n	800a616 <prvInitialiseNewTask+0x96>
			{
				break;
 800a614:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a61e:	e003      	b.n	800a628 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62a:	2b37      	cmp	r3, #55	@ 0x37
 800a62c:	d901      	bls.n	800a632 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a62e:	2337      	movs	r3, #55	@ 0x37
 800a630:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a636:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a63c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a640:	2200      	movs	r2, #0
 800a642:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a646:	3304      	adds	r3, #4
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff f965 	bl	8009918 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a650:	3318      	adds	r3, #24
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff f960 	bl	8009918 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a65c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a660:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a666:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a66c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a670:	2200      	movs	r2, #0
 800a672:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	3354      	adds	r3, #84	@ 0x54
 800a682:	224c      	movs	r2, #76	@ 0x4c
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f002 fab6 	bl	800cbf8 <memset>
 800a68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68e:	4a0d      	ldr	r2, [pc, #52]	@ (800a6c4 <prvInitialiseNewTask+0x144>)
 800a690:	659a      	str	r2, [r3, #88]	@ 0x58
 800a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a694:	4a0c      	ldr	r2, [pc, #48]	@ (800a6c8 <prvInitialiseNewTask+0x148>)
 800a696:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69a:	4a0c      	ldr	r2, [pc, #48]	@ (800a6cc <prvInitialiseNewTask+0x14c>)
 800a69c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	68f9      	ldr	r1, [r7, #12]
 800a6a2:	69b8      	ldr	r0, [r7, #24]
 800a6a4:	f001 f95a 	bl	800b95c <pxPortInitialiseStack>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6ba:	bf00      	nop
 800a6bc:	3720      	adds	r7, #32
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20006910 	.word	0x20006910
 800a6c8:	20006978 	.word	0x20006978
 800a6cc:	200069e0 	.word	0x200069e0

0800a6d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6d8:	f001 fa6e 	bl	800bbb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6dc:	4b2d      	ldr	r3, [pc, #180]	@ (800a794 <prvAddNewTaskToReadyList+0xc4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	4a2c      	ldr	r2, [pc, #176]	@ (800a794 <prvAddNewTaskToReadyList+0xc4>)
 800a6e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6e6:	4b2c      	ldr	r3, [pc, #176]	@ (800a798 <prvAddNewTaskToReadyList+0xc8>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d109      	bne.n	800a702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6ee:	4a2a      	ldr	r2, [pc, #168]	@ (800a798 <prvAddNewTaskToReadyList+0xc8>)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6f4:	4b27      	ldr	r3, [pc, #156]	@ (800a794 <prvAddNewTaskToReadyList+0xc4>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d110      	bne.n	800a71e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6fc:	f000 fc2e 	bl	800af5c <prvInitialiseTaskLists>
 800a700:	e00d      	b.n	800a71e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a702:	4b26      	ldr	r3, [pc, #152]	@ (800a79c <prvAddNewTaskToReadyList+0xcc>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d109      	bne.n	800a71e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a70a:	4b23      	ldr	r3, [pc, #140]	@ (800a798 <prvAddNewTaskToReadyList+0xc8>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a714:	429a      	cmp	r2, r3
 800a716:	d802      	bhi.n	800a71e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a718:	4a1f      	ldr	r2, [pc, #124]	@ (800a798 <prvAddNewTaskToReadyList+0xc8>)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a71e:	4b20      	ldr	r3, [pc, #128]	@ (800a7a0 <prvAddNewTaskToReadyList+0xd0>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3301      	adds	r3, #1
 800a724:	4a1e      	ldr	r2, [pc, #120]	@ (800a7a0 <prvAddNewTaskToReadyList+0xd0>)
 800a726:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a728:	4b1d      	ldr	r3, [pc, #116]	@ (800a7a0 <prvAddNewTaskToReadyList+0xd0>)
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a734:	4b1b      	ldr	r3, [pc, #108]	@ (800a7a4 <prvAddNewTaskToReadyList+0xd4>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d903      	bls.n	800a744 <prvAddNewTaskToReadyList+0x74>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a740:	4a18      	ldr	r2, [pc, #96]	@ (800a7a4 <prvAddNewTaskToReadyList+0xd4>)
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a748:	4613      	mov	r3, r2
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4a15      	ldr	r2, [pc, #84]	@ (800a7a8 <prvAddNewTaskToReadyList+0xd8>)
 800a752:	441a      	add	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	3304      	adds	r3, #4
 800a758:	4619      	mov	r1, r3
 800a75a:	4610      	mov	r0, r2
 800a75c:	f7ff f8e9 	bl	8009932 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a760:	f001 fa5c 	bl	800bc1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a764:	4b0d      	ldr	r3, [pc, #52]	@ (800a79c <prvAddNewTaskToReadyList+0xcc>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00e      	beq.n	800a78a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a76c:	4b0a      	ldr	r3, [pc, #40]	@ (800a798 <prvAddNewTaskToReadyList+0xc8>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a776:	429a      	cmp	r2, r3
 800a778:	d207      	bcs.n	800a78a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a77a:	4b0c      	ldr	r3, [pc, #48]	@ (800a7ac <prvAddNewTaskToReadyList+0xdc>)
 800a77c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	20000fb0 	.word	0x20000fb0
 800a798:	20000adc 	.word	0x20000adc
 800a79c:	20000fbc 	.word	0x20000fbc
 800a7a0:	20000fcc 	.word	0x20000fcc
 800a7a4:	20000fb8 	.word	0x20000fb8
 800a7a8:	20000ae0 	.word	0x20000ae0
 800a7ac:	e000ed04 	.word	0xe000ed04

0800a7b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d018      	beq.n	800a7f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7c2:	4b14      	ldr	r3, [pc, #80]	@ (800a814 <vTaskDelay+0x64>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00b      	beq.n	800a7e2 <vTaskDelay+0x32>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	60bb      	str	r3, [r7, #8]
}
 800a7dc:	bf00      	nop
 800a7de:	bf00      	nop
 800a7e0:	e7fd      	b.n	800a7de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7e2:	f000 f88b 	bl	800a8fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fd09 	bl	800b200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7ee:	f000 f893 	bl	800a918 <xTaskResumeAll>
 800a7f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d107      	bne.n	800a80a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a7fa:	4b07      	ldr	r3, [pc, #28]	@ (800a818 <vTaskDelay+0x68>)
 800a7fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a800:	601a      	str	r2, [r3, #0]
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a80a:	bf00      	nop
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20000fd8 	.word	0x20000fd8
 800a818:	e000ed04 	.word	0xe000ed04

0800a81c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b08a      	sub	sp, #40	@ 0x28
 800a820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a822:	2300      	movs	r3, #0
 800a824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a826:	2300      	movs	r3, #0
 800a828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a82a:	463a      	mov	r2, r7
 800a82c:	1d39      	adds	r1, r7, #4
 800a82e:	f107 0308 	add.w	r3, r7, #8
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff f81c 	bl	8009870 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	9202      	str	r2, [sp, #8]
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	2300      	movs	r3, #0
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	2300      	movs	r3, #0
 800a848:	460a      	mov	r2, r1
 800a84a:	4924      	ldr	r1, [pc, #144]	@ (800a8dc <vTaskStartScheduler+0xc0>)
 800a84c:	4824      	ldr	r0, [pc, #144]	@ (800a8e0 <vTaskStartScheduler+0xc4>)
 800a84e:	f7ff fdf1 	bl	800a434 <xTaskCreateStatic>
 800a852:	4603      	mov	r3, r0
 800a854:	4a23      	ldr	r2, [pc, #140]	@ (800a8e4 <vTaskStartScheduler+0xc8>)
 800a856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a858:	4b22      	ldr	r3, [pc, #136]	@ (800a8e4 <vTaskStartScheduler+0xc8>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d002      	beq.n	800a866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a860:	2301      	movs	r3, #1
 800a862:	617b      	str	r3, [r7, #20]
 800a864:	e001      	b.n	800a86a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a866:	2300      	movs	r3, #0
 800a868:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d102      	bne.n	800a876 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a870:	f000 fd1a 	bl	800b2a8 <xTimerCreateTimerTask>
 800a874:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d11b      	bne.n	800a8b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	613b      	str	r3, [r7, #16]
}
 800a88e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a890:	4b15      	ldr	r3, [pc, #84]	@ (800a8e8 <vTaskStartScheduler+0xcc>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3354      	adds	r3, #84	@ 0x54
 800a896:	4a15      	ldr	r2, [pc, #84]	@ (800a8ec <vTaskStartScheduler+0xd0>)
 800a898:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a89a:	4b15      	ldr	r3, [pc, #84]	@ (800a8f0 <vTaskStartScheduler+0xd4>)
 800a89c:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8a2:	4b14      	ldr	r3, [pc, #80]	@ (800a8f4 <vTaskStartScheduler+0xd8>)
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8a8:	4b13      	ldr	r3, [pc, #76]	@ (800a8f8 <vTaskStartScheduler+0xdc>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8ae:	f001 f8df 	bl	800ba70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8b2:	e00f      	b.n	800a8d4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ba:	d10b      	bne.n	800a8d4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	60fb      	str	r3, [r7, #12]
}
 800a8ce:	bf00      	nop
 800a8d0:	bf00      	nop
 800a8d2:	e7fd      	b.n	800a8d0 <vTaskStartScheduler+0xb4>
}
 800a8d4:	bf00      	nop
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	0800cee8 	.word	0x0800cee8
 800a8e0:	0800af2d 	.word	0x0800af2d
 800a8e4:	20000fd4 	.word	0x20000fd4
 800a8e8:	20000adc 	.word	0x20000adc
 800a8ec:	20000100 	.word	0x20000100
 800a8f0:	20000fd0 	.word	0x20000fd0
 800a8f4:	20000fbc 	.word	0x20000fbc
 800a8f8:	20000fb4 	.word	0x20000fb4

0800a8fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a900:	4b04      	ldr	r3, [pc, #16]	@ (800a914 <vTaskSuspendAll+0x18>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3301      	adds	r3, #1
 800a906:	4a03      	ldr	r2, [pc, #12]	@ (800a914 <vTaskSuspendAll+0x18>)
 800a908:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a90a:	bf00      	nop
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	20000fd8 	.word	0x20000fd8

0800a918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a922:	2300      	movs	r3, #0
 800a924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a926:	4b42      	ldr	r3, [pc, #264]	@ (800aa30 <xTaskResumeAll+0x118>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10b      	bne.n	800a946 <xTaskResumeAll+0x2e>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	603b      	str	r3, [r7, #0]
}
 800a940:	bf00      	nop
 800a942:	bf00      	nop
 800a944:	e7fd      	b.n	800a942 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a946:	f001 f937 	bl	800bbb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a94a:	4b39      	ldr	r3, [pc, #228]	@ (800aa30 <xTaskResumeAll+0x118>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3b01      	subs	r3, #1
 800a950:	4a37      	ldr	r2, [pc, #220]	@ (800aa30 <xTaskResumeAll+0x118>)
 800a952:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a954:	4b36      	ldr	r3, [pc, #216]	@ (800aa30 <xTaskResumeAll+0x118>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d162      	bne.n	800aa22 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a95c:	4b35      	ldr	r3, [pc, #212]	@ (800aa34 <xTaskResumeAll+0x11c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d05e      	beq.n	800aa22 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a964:	e02f      	b.n	800a9c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a966:	4b34      	ldr	r3, [pc, #208]	@ (800aa38 <xTaskResumeAll+0x120>)
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3318      	adds	r3, #24
 800a972:	4618      	mov	r0, r3
 800a974:	f7ff f83a 	bl	80099ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	3304      	adds	r3, #4
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff f835 	bl	80099ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a986:	4b2d      	ldr	r3, [pc, #180]	@ (800aa3c <xTaskResumeAll+0x124>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d903      	bls.n	800a996 <xTaskResumeAll+0x7e>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a992:	4a2a      	ldr	r2, [pc, #168]	@ (800aa3c <xTaskResumeAll+0x124>)
 800a994:	6013      	str	r3, [r2, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4a27      	ldr	r2, [pc, #156]	@ (800aa40 <xTaskResumeAll+0x128>)
 800a9a4:	441a      	add	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	f7fe ffc0 	bl	8009932 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b6:	4b23      	ldr	r3, [pc, #140]	@ (800aa44 <xTaskResumeAll+0x12c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d302      	bcc.n	800a9c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a9c0:	4b21      	ldr	r3, [pc, #132]	@ (800aa48 <xTaskResumeAll+0x130>)
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9c6:	4b1c      	ldr	r3, [pc, #112]	@ (800aa38 <xTaskResumeAll+0x120>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1cb      	bne.n	800a966 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d001      	beq.n	800a9d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9d4:	f000 fb66 	bl	800b0a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9d8:	4b1c      	ldr	r3, [pc, #112]	@ (800aa4c <xTaskResumeAll+0x134>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d010      	beq.n	800aa06 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9e4:	f000 f846 	bl	800aa74 <xTaskIncrementTick>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d002      	beq.n	800a9f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a9ee:	4b16      	ldr	r3, [pc, #88]	@ (800aa48 <xTaskResumeAll+0x130>)
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1f1      	bne.n	800a9e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800aa00:	4b12      	ldr	r3, [pc, #72]	@ (800aa4c <xTaskResumeAll+0x134>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa06:	4b10      	ldr	r3, [pc, #64]	@ (800aa48 <xTaskResumeAll+0x130>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d009      	beq.n	800aa22 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa12:	4b0f      	ldr	r3, [pc, #60]	@ (800aa50 <xTaskResumeAll+0x138>)
 800aa14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa22:	f001 f8fb 	bl	800bc1c <vPortExitCritical>

	return xAlreadyYielded;
 800aa26:	68bb      	ldr	r3, [r7, #8]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20000fd8 	.word	0x20000fd8
 800aa34:	20000fb0 	.word	0x20000fb0
 800aa38:	20000f70 	.word	0x20000f70
 800aa3c:	20000fb8 	.word	0x20000fb8
 800aa40:	20000ae0 	.word	0x20000ae0
 800aa44:	20000adc 	.word	0x20000adc
 800aa48:	20000fc4 	.word	0x20000fc4
 800aa4c:	20000fc0 	.word	0x20000fc0
 800aa50:	e000ed04 	.word	0xe000ed04

0800aa54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa5a:	4b05      	ldr	r3, [pc, #20]	@ (800aa70 <xTaskGetTickCount+0x1c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa60:	687b      	ldr	r3, [r7, #4]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	20000fb4 	.word	0x20000fb4

0800aa74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa7e:	4b4f      	ldr	r3, [pc, #316]	@ (800abbc <xTaskIncrementTick+0x148>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f040 8090 	bne.w	800aba8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa88:	4b4d      	ldr	r3, [pc, #308]	@ (800abc0 <xTaskIncrementTick+0x14c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa90:	4a4b      	ldr	r2, [pc, #300]	@ (800abc0 <xTaskIncrementTick+0x14c>)
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d121      	bne.n	800aae0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa9c:	4b49      	ldr	r3, [pc, #292]	@ (800abc4 <xTaskIncrementTick+0x150>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00b      	beq.n	800aabe <xTaskIncrementTick+0x4a>
	__asm volatile
 800aaa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	603b      	str	r3, [r7, #0]
}
 800aab8:	bf00      	nop
 800aaba:	bf00      	nop
 800aabc:	e7fd      	b.n	800aaba <xTaskIncrementTick+0x46>
 800aabe:	4b41      	ldr	r3, [pc, #260]	@ (800abc4 <xTaskIncrementTick+0x150>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	4b40      	ldr	r3, [pc, #256]	@ (800abc8 <xTaskIncrementTick+0x154>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a3e      	ldr	r2, [pc, #248]	@ (800abc4 <xTaskIncrementTick+0x150>)
 800aaca:	6013      	str	r3, [r2, #0]
 800aacc:	4a3e      	ldr	r2, [pc, #248]	@ (800abc8 <xTaskIncrementTick+0x154>)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6013      	str	r3, [r2, #0]
 800aad2:	4b3e      	ldr	r3, [pc, #248]	@ (800abcc <xTaskIncrementTick+0x158>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3301      	adds	r3, #1
 800aad8:	4a3c      	ldr	r2, [pc, #240]	@ (800abcc <xTaskIncrementTick+0x158>)
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	f000 fae2 	bl	800b0a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aae0:	4b3b      	ldr	r3, [pc, #236]	@ (800abd0 <xTaskIncrementTick+0x15c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d349      	bcc.n	800ab7e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaea:	4b36      	ldr	r3, [pc, #216]	@ (800abc4 <xTaskIncrementTick+0x150>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d104      	bne.n	800aafe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaf4:	4b36      	ldr	r3, [pc, #216]	@ (800abd0 <xTaskIncrementTick+0x15c>)
 800aaf6:	f04f 32ff 	mov.w	r2, #4294967295
 800aafa:	601a      	str	r2, [r3, #0]
					break;
 800aafc:	e03f      	b.n	800ab7e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aafe:	4b31      	ldr	r3, [pc, #196]	@ (800abc4 <xTaskIncrementTick+0x150>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d203      	bcs.n	800ab1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab16:	4a2e      	ldr	r2, [pc, #184]	@ (800abd0 <xTaskIncrementTick+0x15c>)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab1c:	e02f      	b.n	800ab7e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	3304      	adds	r3, #4
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe ff62 	bl	80099ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d004      	beq.n	800ab3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	3318      	adds	r3, #24
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe ff59 	bl	80099ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab3e:	4b25      	ldr	r3, [pc, #148]	@ (800abd4 <xTaskIncrementTick+0x160>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d903      	bls.n	800ab4e <xTaskIncrementTick+0xda>
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab4a:	4a22      	ldr	r2, [pc, #136]	@ (800abd4 <xTaskIncrementTick+0x160>)
 800ab4c:	6013      	str	r3, [r2, #0]
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4a1f      	ldr	r2, [pc, #124]	@ (800abd8 <xTaskIncrementTick+0x164>)
 800ab5c:	441a      	add	r2, r3
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4619      	mov	r1, r3
 800ab64:	4610      	mov	r0, r2
 800ab66:	f7fe fee4 	bl	8009932 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab6e:	4b1b      	ldr	r3, [pc, #108]	@ (800abdc <xTaskIncrementTick+0x168>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d3b8      	bcc.n	800aaea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab7c:	e7b5      	b.n	800aaea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab7e:	4b17      	ldr	r3, [pc, #92]	@ (800abdc <xTaskIncrementTick+0x168>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab84:	4914      	ldr	r1, [pc, #80]	@ (800abd8 <xTaskIncrementTick+0x164>)
 800ab86:	4613      	mov	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	440b      	add	r3, r1
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d901      	bls.n	800ab9a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ab96:	2301      	movs	r3, #1
 800ab98:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab9a:	4b11      	ldr	r3, [pc, #68]	@ (800abe0 <xTaskIncrementTick+0x16c>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d007      	beq.n	800abb2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800aba2:	2301      	movs	r3, #1
 800aba4:	617b      	str	r3, [r7, #20]
 800aba6:	e004      	b.n	800abb2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aba8:	4b0e      	ldr	r3, [pc, #56]	@ (800abe4 <xTaskIncrementTick+0x170>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	4a0d      	ldr	r2, [pc, #52]	@ (800abe4 <xTaskIncrementTick+0x170>)
 800abb0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800abb2:	697b      	ldr	r3, [r7, #20]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	20000fd8 	.word	0x20000fd8
 800abc0:	20000fb4 	.word	0x20000fb4
 800abc4:	20000f68 	.word	0x20000f68
 800abc8:	20000f6c 	.word	0x20000f6c
 800abcc:	20000fc8 	.word	0x20000fc8
 800abd0:	20000fd0 	.word	0x20000fd0
 800abd4:	20000fb8 	.word	0x20000fb8
 800abd8:	20000ae0 	.word	0x20000ae0
 800abdc:	20000adc 	.word	0x20000adc
 800abe0:	20000fc4 	.word	0x20000fc4
 800abe4:	20000fc0 	.word	0x20000fc0

0800abe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abee:	4b2b      	ldr	r3, [pc, #172]	@ (800ac9c <vTaskSwitchContext+0xb4>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abf6:	4b2a      	ldr	r3, [pc, #168]	@ (800aca0 <vTaskSwitchContext+0xb8>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abfc:	e047      	b.n	800ac8e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800abfe:	4b28      	ldr	r3, [pc, #160]	@ (800aca0 <vTaskSwitchContext+0xb8>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac04:	4b27      	ldr	r3, [pc, #156]	@ (800aca4 <vTaskSwitchContext+0xbc>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	e011      	b.n	800ac30 <vTaskSwitchContext+0x48>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10b      	bne.n	800ac2a <vTaskSwitchContext+0x42>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	607b      	str	r3, [r7, #4]
}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop
 800ac28:	e7fd      	b.n	800ac26 <vTaskSwitchContext+0x3e>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	491d      	ldr	r1, [pc, #116]	@ (800aca8 <vTaskSwitchContext+0xc0>)
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	4613      	mov	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	440b      	add	r3, r1
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d0e3      	beq.n	800ac0c <vTaskSwitchContext+0x24>
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4a16      	ldr	r2, [pc, #88]	@ (800aca8 <vTaskSwitchContext+0xc0>)
 800ac50:	4413      	add	r3, r2
 800ac52:	60bb      	str	r3, [r7, #8]
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	605a      	str	r2, [r3, #4]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	3308      	adds	r3, #8
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d104      	bne.n	800ac74 <vTaskSwitchContext+0x8c>
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	605a      	str	r2, [r3, #4]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	4a0c      	ldr	r2, [pc, #48]	@ (800acac <vTaskSwitchContext+0xc4>)
 800ac7c:	6013      	str	r3, [r2, #0]
 800ac7e:	4a09      	ldr	r2, [pc, #36]	@ (800aca4 <vTaskSwitchContext+0xbc>)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac84:	4b09      	ldr	r3, [pc, #36]	@ (800acac <vTaskSwitchContext+0xc4>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3354      	adds	r3, #84	@ 0x54
 800ac8a:	4a09      	ldr	r2, [pc, #36]	@ (800acb0 <vTaskSwitchContext+0xc8>)
 800ac8c:	6013      	str	r3, [r2, #0]
}
 800ac8e:	bf00      	nop
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	20000fd8 	.word	0x20000fd8
 800aca0:	20000fc4 	.word	0x20000fc4
 800aca4:	20000fb8 	.word	0x20000fb8
 800aca8:	20000ae0 	.word	0x20000ae0
 800acac:	20000adc 	.word	0x20000adc
 800acb0:	20000100 	.word	0x20000100

0800acb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10b      	bne.n	800acdc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	60fb      	str	r3, [r7, #12]
}
 800acd6:	bf00      	nop
 800acd8:	bf00      	nop
 800acda:	e7fd      	b.n	800acd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acdc:	4b07      	ldr	r3, [pc, #28]	@ (800acfc <vTaskPlaceOnEventList+0x48>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3318      	adds	r3, #24
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7fe fe48 	bl	800997a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acea:	2101      	movs	r1, #1
 800acec:	6838      	ldr	r0, [r7, #0]
 800acee:	f000 fa87 	bl	800b200 <prvAddCurrentTaskToDelayedList>
}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	20000adc 	.word	0x20000adc

0800ad00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10b      	bne.n	800ad2a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ad12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	617b      	str	r3, [r7, #20]
}
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop
 800ad28:	e7fd      	b.n	800ad26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad54 <vTaskPlaceOnEventListRestricted+0x54>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3318      	adds	r3, #24
 800ad30:	4619      	mov	r1, r3
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7fe fdfd 	bl	8009932 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ad3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	68b8      	ldr	r0, [r7, #8]
 800ad48:	f000 fa5a 	bl	800b200 <prvAddCurrentTaskToDelayedList>
	}
 800ad4c:	bf00      	nop
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	20000adc 	.word	0x20000adc

0800ad58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10b      	bne.n	800ad86 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	60fb      	str	r3, [r7, #12]
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	e7fd      	b.n	800ad82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	3318      	adds	r3, #24
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe fe2e 	bl	80099ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad90:	4b1d      	ldr	r3, [pc, #116]	@ (800ae08 <xTaskRemoveFromEventList+0xb0>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d11d      	bne.n	800add4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7fe fe25 	bl	80099ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ada6:	4b19      	ldr	r3, [pc, #100]	@ (800ae0c <xTaskRemoveFromEventList+0xb4>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d903      	bls.n	800adb6 <xTaskRemoveFromEventList+0x5e>
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb2:	4a16      	ldr	r2, [pc, #88]	@ (800ae0c <xTaskRemoveFromEventList+0xb4>)
 800adb4:	6013      	str	r3, [r2, #0]
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adba:	4613      	mov	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4a13      	ldr	r2, [pc, #76]	@ (800ae10 <xTaskRemoveFromEventList+0xb8>)
 800adc4:	441a      	add	r2, r3
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	3304      	adds	r3, #4
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f7fe fdb0 	bl	8009932 <vListInsertEnd>
 800add2:	e005      	b.n	800ade0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	3318      	adds	r3, #24
 800add8:	4619      	mov	r1, r3
 800adda:	480e      	ldr	r0, [pc, #56]	@ (800ae14 <xTaskRemoveFromEventList+0xbc>)
 800addc:	f7fe fda9 	bl	8009932 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ade4:	4b0c      	ldr	r3, [pc, #48]	@ (800ae18 <xTaskRemoveFromEventList+0xc0>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adea:	429a      	cmp	r2, r3
 800adec:	d905      	bls.n	800adfa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adee:	2301      	movs	r3, #1
 800adf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ae1c <xTaskRemoveFromEventList+0xc4>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	e001      	b.n	800adfe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800adfe:	697b      	ldr	r3, [r7, #20]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	20000fd8 	.word	0x20000fd8
 800ae0c:	20000fb8 	.word	0x20000fb8
 800ae10:	20000ae0 	.word	0x20000ae0
 800ae14:	20000f70 	.word	0x20000f70
 800ae18:	20000adc 	.word	0x20000adc
 800ae1c:	20000fc4 	.word	0x20000fc4

0800ae20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae28:	4b06      	ldr	r3, [pc, #24]	@ (800ae44 <vTaskInternalSetTimeOutState+0x24>)
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae30:	4b05      	ldr	r3, [pc, #20]	@ (800ae48 <vTaskInternalSetTimeOutState+0x28>)
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	605a      	str	r2, [r3, #4]
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	20000fc8 	.word	0x20000fc8
 800ae48:	20000fb4 	.word	0x20000fb4

0800ae4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10b      	bne.n	800ae74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	613b      	str	r3, [r7, #16]
}
 800ae6e:	bf00      	nop
 800ae70:	bf00      	nop
 800ae72:	e7fd      	b.n	800ae70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10b      	bne.n	800ae92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	60fb      	str	r3, [r7, #12]
}
 800ae8c:	bf00      	nop
 800ae8e:	bf00      	nop
 800ae90:	e7fd      	b.n	800ae8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ae92:	f000 fe91 	bl	800bbb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae96:	4b1d      	ldr	r3, [pc, #116]	@ (800af0c <xTaskCheckForTimeOut+0xc0>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	69ba      	ldr	r2, [r7, #24]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeae:	d102      	bne.n	800aeb6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61fb      	str	r3, [r7, #28]
 800aeb4:	e023      	b.n	800aefe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	4b15      	ldr	r3, [pc, #84]	@ (800af10 <xTaskCheckForTimeOut+0xc4>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d007      	beq.n	800aed2 <xTaskCheckForTimeOut+0x86>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d302      	bcc.n	800aed2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aecc:	2301      	movs	r3, #1
 800aece:	61fb      	str	r3, [r7, #28]
 800aed0:	e015      	b.n	800aefe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d20b      	bcs.n	800aef4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	1ad2      	subs	r2, r2, r3
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff ff99 	bl	800ae20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	61fb      	str	r3, [r7, #28]
 800aef2:	e004      	b.n	800aefe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aefa:	2301      	movs	r3, #1
 800aefc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aefe:	f000 fe8d 	bl	800bc1c <vPortExitCritical>

	return xReturn;
 800af02:	69fb      	ldr	r3, [r7, #28]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3720      	adds	r7, #32
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20000fb4 	.word	0x20000fb4
 800af10:	20000fc8 	.word	0x20000fc8

0800af14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af14:	b480      	push	{r7}
 800af16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af18:	4b03      	ldr	r3, [pc, #12]	@ (800af28 <vTaskMissedYield+0x14>)
 800af1a:	2201      	movs	r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
}
 800af1e:	bf00      	nop
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	20000fc4 	.word	0x20000fc4

0800af2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af34:	f000 f852 	bl	800afdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af38:	4b06      	ldr	r3, [pc, #24]	@ (800af54 <prvIdleTask+0x28>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d9f9      	bls.n	800af34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af40:	4b05      	ldr	r3, [pc, #20]	@ (800af58 <prvIdleTask+0x2c>)
 800af42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af50:	e7f0      	b.n	800af34 <prvIdleTask+0x8>
 800af52:	bf00      	nop
 800af54:	20000ae0 	.word	0x20000ae0
 800af58:	e000ed04 	.word	0xe000ed04

0800af5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af62:	2300      	movs	r3, #0
 800af64:	607b      	str	r3, [r7, #4]
 800af66:	e00c      	b.n	800af82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	4613      	mov	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4413      	add	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4a12      	ldr	r2, [pc, #72]	@ (800afbc <prvInitialiseTaskLists+0x60>)
 800af74:	4413      	add	r3, r2
 800af76:	4618      	mov	r0, r3
 800af78:	f7fe fcae 	bl	80098d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3301      	adds	r3, #1
 800af80:	607b      	str	r3, [r7, #4]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b37      	cmp	r3, #55	@ 0x37
 800af86:	d9ef      	bls.n	800af68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af88:	480d      	ldr	r0, [pc, #52]	@ (800afc0 <prvInitialiseTaskLists+0x64>)
 800af8a:	f7fe fca5 	bl	80098d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af8e:	480d      	ldr	r0, [pc, #52]	@ (800afc4 <prvInitialiseTaskLists+0x68>)
 800af90:	f7fe fca2 	bl	80098d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af94:	480c      	ldr	r0, [pc, #48]	@ (800afc8 <prvInitialiseTaskLists+0x6c>)
 800af96:	f7fe fc9f 	bl	80098d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af9a:	480c      	ldr	r0, [pc, #48]	@ (800afcc <prvInitialiseTaskLists+0x70>)
 800af9c:	f7fe fc9c 	bl	80098d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afa0:	480b      	ldr	r0, [pc, #44]	@ (800afd0 <prvInitialiseTaskLists+0x74>)
 800afa2:	f7fe fc99 	bl	80098d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afa6:	4b0b      	ldr	r3, [pc, #44]	@ (800afd4 <prvInitialiseTaskLists+0x78>)
 800afa8:	4a05      	ldr	r2, [pc, #20]	@ (800afc0 <prvInitialiseTaskLists+0x64>)
 800afaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afac:	4b0a      	ldr	r3, [pc, #40]	@ (800afd8 <prvInitialiseTaskLists+0x7c>)
 800afae:	4a05      	ldr	r2, [pc, #20]	@ (800afc4 <prvInitialiseTaskLists+0x68>)
 800afb0:	601a      	str	r2, [r3, #0]
}
 800afb2:	bf00      	nop
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	20000ae0 	.word	0x20000ae0
 800afc0:	20000f40 	.word	0x20000f40
 800afc4:	20000f54 	.word	0x20000f54
 800afc8:	20000f70 	.word	0x20000f70
 800afcc:	20000f84 	.word	0x20000f84
 800afd0:	20000f9c 	.word	0x20000f9c
 800afd4:	20000f68 	.word	0x20000f68
 800afd8:	20000f6c 	.word	0x20000f6c

0800afdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afe2:	e019      	b.n	800b018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afe4:	f000 fde8 	bl	800bbb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe8:	4b10      	ldr	r3, [pc, #64]	@ (800b02c <prvCheckTasksWaitingTermination+0x50>)
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3304      	adds	r3, #4
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fe fcf9 	bl	80099ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800affa:	4b0d      	ldr	r3, [pc, #52]	@ (800b030 <prvCheckTasksWaitingTermination+0x54>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	3b01      	subs	r3, #1
 800b000:	4a0b      	ldr	r2, [pc, #44]	@ (800b030 <prvCheckTasksWaitingTermination+0x54>)
 800b002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b004:	4b0b      	ldr	r3, [pc, #44]	@ (800b034 <prvCheckTasksWaitingTermination+0x58>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3b01      	subs	r3, #1
 800b00a:	4a0a      	ldr	r2, [pc, #40]	@ (800b034 <prvCheckTasksWaitingTermination+0x58>)
 800b00c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b00e:	f000 fe05 	bl	800bc1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f810 	bl	800b038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b018:	4b06      	ldr	r3, [pc, #24]	@ (800b034 <prvCheckTasksWaitingTermination+0x58>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e1      	bne.n	800afe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b020:	bf00      	nop
 800b022:	bf00      	nop
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20000f84 	.word	0x20000f84
 800b030:	20000fb0 	.word	0x20000fb0
 800b034:	20000f98 	.word	0x20000f98

0800b038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3354      	adds	r3, #84	@ 0x54
 800b044:	4618      	mov	r0, r3
 800b046:	f001 fddf 	bl	800cc08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b050:	2b00      	cmp	r3, #0
 800b052:	d108      	bne.n	800b066 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 ff9d 	bl	800bf98 <vPortFree>
				vPortFree( pxTCB );
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 ff9a 	bl	800bf98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b064:	e019      	b.n	800b09a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d103      	bne.n	800b078 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 ff91 	bl	800bf98 <vPortFree>
	}
 800b076:	e010      	b.n	800b09a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d00b      	beq.n	800b09a <prvDeleteTCB+0x62>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	60fb      	str	r3, [r7, #12]
}
 800b094:	bf00      	nop
 800b096:	bf00      	nop
 800b098:	e7fd      	b.n	800b096 <prvDeleteTCB+0x5e>
	}
 800b09a:	bf00      	nop
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
	...

0800b0a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b0dc <prvResetNextTaskUnblockTime+0x38>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d104      	bne.n	800b0be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e0 <prvResetNextTaskUnblockTime+0x3c>)
 800b0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0bc:	e008      	b.n	800b0d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0be:	4b07      	ldr	r3, [pc, #28]	@ (800b0dc <prvResetNextTaskUnblockTime+0x38>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	4a04      	ldr	r2, [pc, #16]	@ (800b0e0 <prvResetNextTaskUnblockTime+0x3c>)
 800b0ce:	6013      	str	r3, [r2, #0]
}
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	20000f68 	.word	0x20000f68
 800b0e0:	20000fd0 	.word	0x20000fd0

0800b0e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0ea:	4b0b      	ldr	r3, [pc, #44]	@ (800b118 <xTaskGetSchedulerState+0x34>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d102      	bne.n	800b0f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	607b      	str	r3, [r7, #4]
 800b0f6:	e008      	b.n	800b10a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0f8:	4b08      	ldr	r3, [pc, #32]	@ (800b11c <xTaskGetSchedulerState+0x38>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d102      	bne.n	800b106 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b100:	2302      	movs	r3, #2
 800b102:	607b      	str	r3, [r7, #4]
 800b104:	e001      	b.n	800b10a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b106:	2300      	movs	r3, #0
 800b108:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b10a:	687b      	ldr	r3, [r7, #4]
	}
 800b10c:	4618      	mov	r0, r3
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	20000fbc 	.word	0x20000fbc
 800b11c:	20000fd8 	.word	0x20000fd8

0800b120 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b12c:	2300      	movs	r3, #0
 800b12e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d058      	beq.n	800b1e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b136:	4b2f      	ldr	r3, [pc, #188]	@ (800b1f4 <xTaskPriorityDisinherit+0xd4>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d00b      	beq.n	800b158 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	60fb      	str	r3, [r7, #12]
}
 800b152:	bf00      	nop
 800b154:	bf00      	nop
 800b156:	e7fd      	b.n	800b154 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10b      	bne.n	800b178 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	60bb      	str	r3, [r7, #8]
}
 800b172:	bf00      	nop
 800b174:	bf00      	nop
 800b176:	e7fd      	b.n	800b174 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b17c:	1e5a      	subs	r2, r3, #1
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d02c      	beq.n	800b1e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b192:	2b00      	cmp	r3, #0
 800b194:	d128      	bne.n	800b1e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	3304      	adds	r3, #4
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe fc26 	bl	80099ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b1f8 <xTaskPriorityDisinherit+0xd8>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d903      	bls.n	800b1c8 <xTaskPriorityDisinherit+0xa8>
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c4:	4a0c      	ldr	r2, [pc, #48]	@ (800b1f8 <xTaskPriorityDisinherit+0xd8>)
 800b1c6:	6013      	str	r3, [r2, #0]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4a09      	ldr	r2, [pc, #36]	@ (800b1fc <xTaskPriorityDisinherit+0xdc>)
 800b1d6:	441a      	add	r2, r3
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4619      	mov	r1, r3
 800b1de:	4610      	mov	r0, r2
 800b1e0:	f7fe fba7 	bl	8009932 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1e8:	697b      	ldr	r3, [r7, #20]
	}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20000adc 	.word	0x20000adc
 800b1f8:	20000fb8 	.word	0x20000fb8
 800b1fc:	20000ae0 	.word	0x20000ae0

0800b200 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b20a:	4b21      	ldr	r3, [pc, #132]	@ (800b290 <prvAddCurrentTaskToDelayedList+0x90>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b210:	4b20      	ldr	r3, [pc, #128]	@ (800b294 <prvAddCurrentTaskToDelayedList+0x94>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3304      	adds	r3, #4
 800b216:	4618      	mov	r0, r3
 800b218:	f7fe fbe8 	bl	80099ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b222:	d10a      	bne.n	800b23a <prvAddCurrentTaskToDelayedList+0x3a>
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d007      	beq.n	800b23a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b22a:	4b1a      	ldr	r3, [pc, #104]	@ (800b294 <prvAddCurrentTaskToDelayedList+0x94>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3304      	adds	r3, #4
 800b230:	4619      	mov	r1, r3
 800b232:	4819      	ldr	r0, [pc, #100]	@ (800b298 <prvAddCurrentTaskToDelayedList+0x98>)
 800b234:	f7fe fb7d 	bl	8009932 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b238:	e026      	b.n	800b288 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4413      	add	r3, r2
 800b240:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b242:	4b14      	ldr	r3, [pc, #80]	@ (800b294 <prvAddCurrentTaskToDelayedList+0x94>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d209      	bcs.n	800b266 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b252:	4b12      	ldr	r3, [pc, #72]	@ (800b29c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	4b0f      	ldr	r3, [pc, #60]	@ (800b294 <prvAddCurrentTaskToDelayedList+0x94>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4619      	mov	r1, r3
 800b25e:	4610      	mov	r0, r2
 800b260:	f7fe fb8b 	bl	800997a <vListInsert>
}
 800b264:	e010      	b.n	800b288 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b266:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	4b0a      	ldr	r3, [pc, #40]	@ (800b294 <prvAddCurrentTaskToDelayedList+0x94>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3304      	adds	r3, #4
 800b270:	4619      	mov	r1, r3
 800b272:	4610      	mov	r0, r2
 800b274:	f7fe fb81 	bl	800997a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b278:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d202      	bcs.n	800b288 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b282:	4a08      	ldr	r2, [pc, #32]	@ (800b2a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	6013      	str	r3, [r2, #0]
}
 800b288:	bf00      	nop
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20000fb4 	.word	0x20000fb4
 800b294:	20000adc 	.word	0x20000adc
 800b298:	20000f9c 	.word	0x20000f9c
 800b29c:	20000f6c 	.word	0x20000f6c
 800b2a0:	20000f68 	.word	0x20000f68
 800b2a4:	20000fd0 	.word	0x20000fd0

0800b2a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08a      	sub	sp, #40	@ 0x28
 800b2ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b2b2:	f000 fb13 	bl	800b8dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b32c <xTimerCreateTimerTask+0x84>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d021      	beq.n	800b302 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b2c6:	1d3a      	adds	r2, r7, #4
 800b2c8:	f107 0108 	add.w	r1, r7, #8
 800b2cc:	f107 030c 	add.w	r3, r7, #12
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fe fae7 	bl	80098a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b2d6:	6879      	ldr	r1, [r7, #4]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	9202      	str	r2, [sp, #8]
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	460a      	mov	r2, r1
 800b2e8:	4911      	ldr	r1, [pc, #68]	@ (800b330 <xTimerCreateTimerTask+0x88>)
 800b2ea:	4812      	ldr	r0, [pc, #72]	@ (800b334 <xTimerCreateTimerTask+0x8c>)
 800b2ec:	f7ff f8a2 	bl	800a434 <xTaskCreateStatic>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	4a11      	ldr	r2, [pc, #68]	@ (800b338 <xTimerCreateTimerTask+0x90>)
 800b2f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2f6:	4b10      	ldr	r3, [pc, #64]	@ (800b338 <xTimerCreateTimerTask+0x90>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b2fe:	2301      	movs	r3, #1
 800b300:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10b      	bne.n	800b320 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	613b      	str	r3, [r7, #16]
}
 800b31a:	bf00      	nop
 800b31c:	bf00      	nop
 800b31e:	e7fd      	b.n	800b31c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b320:	697b      	ldr	r3, [r7, #20]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	2000100c 	.word	0x2000100c
 800b330:	0800cef0 	.word	0x0800cef0
 800b334:	0800b475 	.word	0x0800b475
 800b338:	20001010 	.word	0x20001010

0800b33c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08a      	sub	sp, #40	@ 0x28
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10b      	bne.n	800b36c <xTimerGenericCommand+0x30>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	623b      	str	r3, [r7, #32]
}
 800b366:	bf00      	nop
 800b368:	bf00      	nop
 800b36a:	e7fd      	b.n	800b368 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b36c:	4b19      	ldr	r3, [pc, #100]	@ (800b3d4 <xTimerGenericCommand+0x98>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d02a      	beq.n	800b3ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2b05      	cmp	r3, #5
 800b384:	dc18      	bgt.n	800b3b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b386:	f7ff fead 	bl	800b0e4 <xTaskGetSchedulerState>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d109      	bne.n	800b3a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b390:	4b10      	ldr	r3, [pc, #64]	@ (800b3d4 <xTimerGenericCommand+0x98>)
 800b392:	6818      	ldr	r0, [r3, #0]
 800b394:	f107 0110 	add.w	r1, r7, #16
 800b398:	2300      	movs	r3, #0
 800b39a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b39c:	f7fe fc5a 	bl	8009c54 <xQueueGenericSend>
 800b3a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b3a2:	e012      	b.n	800b3ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d4 <xTimerGenericCommand+0x98>)
 800b3a6:	6818      	ldr	r0, [r3, #0]
 800b3a8:	f107 0110 	add.w	r1, r7, #16
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f7fe fc50 	bl	8009c54 <xQueueGenericSend>
 800b3b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b3b6:	e008      	b.n	800b3ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b3b8:	4b06      	ldr	r3, [pc, #24]	@ (800b3d4 <xTimerGenericCommand+0x98>)
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	f107 0110 	add.w	r1, r7, #16
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	f7fe fd48 	bl	8009e58 <xQueueGenericSendFromISR>
 800b3c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3728      	adds	r7, #40	@ 0x28
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	2000100c 	.word	0x2000100c

0800b3d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b088      	sub	sp, #32
 800b3dc:	af02      	add	r7, sp, #8
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3e2:	4b23      	ldr	r3, [pc, #140]	@ (800b470 <prvProcessExpiredTimer+0x98>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fe fafb 	bl	80099ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3fc:	f003 0304 	and.w	r3, r3, #4
 800b400:	2b00      	cmp	r3, #0
 800b402:	d023      	beq.n	800b44c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	699a      	ldr	r2, [r3, #24]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	18d1      	adds	r1, r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	6978      	ldr	r0, [r7, #20]
 800b412:	f000 f8d5 	bl	800b5c0 <prvInsertTimerInActiveList>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d020      	beq.n	800b45e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b41c:	2300      	movs	r3, #0
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	2300      	movs	r3, #0
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	2100      	movs	r1, #0
 800b426:	6978      	ldr	r0, [r7, #20]
 800b428:	f7ff ff88 	bl	800b33c <xTimerGenericCommand>
 800b42c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d114      	bne.n	800b45e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	60fb      	str	r3, [r7, #12]
}
 800b446:	bf00      	nop
 800b448:	bf00      	nop
 800b44a:	e7fd      	b.n	800b448 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b452:	f023 0301 	bic.w	r3, r3, #1
 800b456:	b2da      	uxtb	r2, r3
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	6978      	ldr	r0, [r7, #20]
 800b464:	4798      	blx	r3
}
 800b466:	bf00      	nop
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20001004 	.word	0x20001004

0800b474 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b47c:	f107 0308 	add.w	r3, r7, #8
 800b480:	4618      	mov	r0, r3
 800b482:	f000 f859 	bl	800b538 <prvGetNextExpireTime>
 800b486:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	4619      	mov	r1, r3
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f000 f805 	bl	800b49c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b492:	f000 f8d7 	bl	800b644 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b496:	bf00      	nop
 800b498:	e7f0      	b.n	800b47c <prvTimerTask+0x8>
	...

0800b49c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b4a6:	f7ff fa29 	bl	800a8fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4aa:	f107 0308 	add.w	r3, r7, #8
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 f866 	bl	800b580 <prvSampleTimeNow>
 800b4b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d130      	bne.n	800b51e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10a      	bne.n	800b4d8 <prvProcessTimerOrBlockTask+0x3c>
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d806      	bhi.n	800b4d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b4ca:	f7ff fa25 	bl	800a918 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b4ce:	68f9      	ldr	r1, [r7, #12]
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7ff ff81 	bl	800b3d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b4d6:	e024      	b.n	800b522 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d008      	beq.n	800b4f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b4de:	4b13      	ldr	r3, [pc, #76]	@ (800b52c <prvProcessTimerOrBlockTask+0x90>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <prvProcessTimerOrBlockTask+0x50>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e000      	b.n	800b4ee <prvProcessTimerOrBlockTask+0x52>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b4f0:	4b0f      	ldr	r3, [pc, #60]	@ (800b530 <prvProcessTimerOrBlockTask+0x94>)
 800b4f2:	6818      	ldr	r0, [r3, #0]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	f7fe ff65 	bl	800a3cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b502:	f7ff fa09 	bl	800a918 <xTaskResumeAll>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10a      	bne.n	800b522 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b50c:	4b09      	ldr	r3, [pc, #36]	@ (800b534 <prvProcessTimerOrBlockTask+0x98>)
 800b50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	f3bf 8f6f 	isb	sy
}
 800b51c:	e001      	b.n	800b522 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b51e:	f7ff f9fb 	bl	800a918 <xTaskResumeAll>
}
 800b522:	bf00      	nop
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20001008 	.word	0x20001008
 800b530:	2000100c 	.word	0x2000100c
 800b534:	e000ed04 	.word	0xe000ed04

0800b538 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b540:	4b0e      	ldr	r3, [pc, #56]	@ (800b57c <prvGetNextExpireTime+0x44>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <prvGetNextExpireTime+0x16>
 800b54a:	2201      	movs	r2, #1
 800b54c:	e000      	b.n	800b550 <prvGetNextExpireTime+0x18>
 800b54e:	2200      	movs	r2, #0
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d105      	bne.n	800b568 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b55c:	4b07      	ldr	r3, [pc, #28]	@ (800b57c <prvGetNextExpireTime+0x44>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60fb      	str	r3, [r7, #12]
 800b566:	e001      	b.n	800b56c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b568:	2300      	movs	r3, #0
 800b56a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b56c:	68fb      	ldr	r3, [r7, #12]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	20001004 	.word	0x20001004

0800b580 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b588:	f7ff fa64 	bl	800aa54 <xTaskGetTickCount>
 800b58c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b58e:	4b0b      	ldr	r3, [pc, #44]	@ (800b5bc <prvSampleTimeNow+0x3c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	429a      	cmp	r2, r3
 800b596:	d205      	bcs.n	800b5a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b598:	f000 f93a 	bl	800b810 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	e002      	b.n	800b5aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b5aa:	4a04      	ldr	r2, [pc, #16]	@ (800b5bc <prvSampleTimeNow+0x3c>)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20001014 	.word	0x20001014

0800b5c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d812      	bhi.n	800b60c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	1ad2      	subs	r2, r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d302      	bcc.n	800b5fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	617b      	str	r3, [r7, #20]
 800b5f8:	e01b      	b.n	800b632 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b5fa:	4b10      	ldr	r3, [pc, #64]	@ (800b63c <prvInsertTimerInActiveList+0x7c>)
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	3304      	adds	r3, #4
 800b602:	4619      	mov	r1, r3
 800b604:	4610      	mov	r0, r2
 800b606:	f7fe f9b8 	bl	800997a <vListInsert>
 800b60a:	e012      	b.n	800b632 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	429a      	cmp	r2, r3
 800b612:	d206      	bcs.n	800b622 <prvInsertTimerInActiveList+0x62>
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d302      	bcc.n	800b622 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b61c:	2301      	movs	r3, #1
 800b61e:	617b      	str	r3, [r7, #20]
 800b620:	e007      	b.n	800b632 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b622:	4b07      	ldr	r3, [pc, #28]	@ (800b640 <prvInsertTimerInActiveList+0x80>)
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	3304      	adds	r3, #4
 800b62a:	4619      	mov	r1, r3
 800b62c:	4610      	mov	r0, r2
 800b62e:	f7fe f9a4 	bl	800997a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b632:	697b      	ldr	r3, [r7, #20]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	20001008 	.word	0x20001008
 800b640:	20001004 	.word	0x20001004

0800b644 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b08e      	sub	sp, #56	@ 0x38
 800b648:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b64a:	e0ce      	b.n	800b7ea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	da19      	bge.n	800b686 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b652:	1d3b      	adds	r3, r7, #4
 800b654:	3304      	adds	r3, #4
 800b656:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10b      	bne.n	800b676 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	61fb      	str	r3, [r7, #28]
}
 800b670:	bf00      	nop
 800b672:	bf00      	nop
 800b674:	e7fd      	b.n	800b672 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b67c:	6850      	ldr	r0, [r2, #4]
 800b67e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b680:	6892      	ldr	r2, [r2, #8]
 800b682:	4611      	mov	r1, r2
 800b684:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f2c0 80ae 	blt.w	800b7ea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d004      	beq.n	800b6a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69c:	3304      	adds	r3, #4
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe f9a4 	bl	80099ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6a4:	463b      	mov	r3, r7
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7ff ff6a 	bl	800b580 <prvSampleTimeNow>
 800b6ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b09      	cmp	r3, #9
 800b6b2:	f200 8097 	bhi.w	800b7e4 <prvProcessReceivedCommands+0x1a0>
 800b6b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6bc <prvProcessReceivedCommands+0x78>)
 800b6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6bc:	0800b6e5 	.word	0x0800b6e5
 800b6c0:	0800b6e5 	.word	0x0800b6e5
 800b6c4:	0800b6e5 	.word	0x0800b6e5
 800b6c8:	0800b75b 	.word	0x0800b75b
 800b6cc:	0800b76f 	.word	0x0800b76f
 800b6d0:	0800b7bb 	.word	0x0800b7bb
 800b6d4:	0800b6e5 	.word	0x0800b6e5
 800b6d8:	0800b6e5 	.word	0x0800b6e5
 800b6dc:	0800b75b 	.word	0x0800b75b
 800b6e0:	0800b76f 	.word	0x0800b76f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6ea:	f043 0301 	orr.w	r3, r3, #1
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	18d1      	adds	r1, r2, r3
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b704:	f7ff ff5c 	bl	800b5c0 <prvInsertTimerInActiveList>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d06c      	beq.n	800b7e8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b714:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b718:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	d061      	beq.n	800b7e8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	441a      	add	r2, r3
 800b72c:	2300      	movs	r3, #0
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	2300      	movs	r3, #0
 800b732:	2100      	movs	r1, #0
 800b734:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b736:	f7ff fe01 	bl	800b33c <xTimerGenericCommand>
 800b73a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d152      	bne.n	800b7e8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	61bb      	str	r3, [r7, #24]
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop
 800b758:	e7fd      	b.n	800b756 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b760:	f023 0301 	bic.w	r3, r3, #1
 800b764:	b2da      	uxtb	r2, r3
 800b766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b768:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b76c:	e03d      	b.n	800b7ea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b774:	f043 0301 	orr.w	r3, r3, #1
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b77c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b784:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10b      	bne.n	800b7a6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	617b      	str	r3, [r7, #20]
}
 800b7a0:	bf00      	nop
 800b7a2:	bf00      	nop
 800b7a4:	e7fd      	b.n	800b7a2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a8:	699a      	ldr	r2, [r3, #24]
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ac:	18d1      	adds	r1, r2, r3
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7b4:	f7ff ff04 	bl	800b5c0 <prvInsertTimerInActiveList>
					break;
 800b7b8:	e017      	b.n	800b7ea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7c0:	f003 0302 	and.w	r3, r3, #2
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d103      	bne.n	800b7d0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b7c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7ca:	f000 fbe5 	bl	800bf98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b7ce:	e00c      	b.n	800b7ea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7d6:	f023 0301 	bic.w	r3, r3, #1
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b7e2:	e002      	b.n	800b7ea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b7e4:	bf00      	nop
 800b7e6:	e000      	b.n	800b7ea <prvProcessReceivedCommands+0x1a6>
					break;
 800b7e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7ea:	4b08      	ldr	r3, [pc, #32]	@ (800b80c <prvProcessReceivedCommands+0x1c8>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	1d39      	adds	r1, r7, #4
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe fbce 	bl	8009f94 <xQueueReceive>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f47f af26 	bne.w	800b64c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b800:	bf00      	nop
 800b802:	bf00      	nop
 800b804:	3730      	adds	r7, #48	@ 0x30
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	2000100c 	.word	0x2000100c

0800b810 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b816:	e049      	b.n	800b8ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b818:	4b2e      	ldr	r3, [pc, #184]	@ (800b8d4 <prvSwitchTimerLists+0xc4>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b822:	4b2c      	ldr	r3, [pc, #176]	@ (800b8d4 <prvSwitchTimerLists+0xc4>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	3304      	adds	r3, #4
 800b830:	4618      	mov	r0, r3
 800b832:	f7fe f8db 	bl	80099ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b844:	f003 0304 	and.w	r3, r3, #4
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d02f      	beq.n	800b8ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	4413      	add	r3, r2
 800b854:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d90e      	bls.n	800b87c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b86a:	4b1a      	ldr	r3, [pc, #104]	@ (800b8d4 <prvSwitchTimerLists+0xc4>)
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3304      	adds	r3, #4
 800b872:	4619      	mov	r1, r3
 800b874:	4610      	mov	r0, r2
 800b876:	f7fe f880 	bl	800997a <vListInsert>
 800b87a:	e017      	b.n	800b8ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b87c:	2300      	movs	r3, #0
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	2300      	movs	r3, #0
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	2100      	movs	r1, #0
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f7ff fd58 	bl	800b33c <xTimerGenericCommand>
 800b88c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10b      	bne.n	800b8ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	603b      	str	r3, [r7, #0]
}
 800b8a6:	bf00      	nop
 800b8a8:	bf00      	nop
 800b8aa:	e7fd      	b.n	800b8a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8ac:	4b09      	ldr	r3, [pc, #36]	@ (800b8d4 <prvSwitchTimerLists+0xc4>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1b0      	bne.n	800b818 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b8b6:	4b07      	ldr	r3, [pc, #28]	@ (800b8d4 <prvSwitchTimerLists+0xc4>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b8bc:	4b06      	ldr	r3, [pc, #24]	@ (800b8d8 <prvSwitchTimerLists+0xc8>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a04      	ldr	r2, [pc, #16]	@ (800b8d4 <prvSwitchTimerLists+0xc4>)
 800b8c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b8c4:	4a04      	ldr	r2, [pc, #16]	@ (800b8d8 <prvSwitchTimerLists+0xc8>)
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	6013      	str	r3, [r2, #0]
}
 800b8ca:	bf00      	nop
 800b8cc:	3718      	adds	r7, #24
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20001004 	.word	0x20001004
 800b8d8:	20001008 	.word	0x20001008

0800b8dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b8e2:	f000 f969 	bl	800bbb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b8e6:	4b15      	ldr	r3, [pc, #84]	@ (800b93c <prvCheckForValidListAndQueue+0x60>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d120      	bne.n	800b930 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b8ee:	4814      	ldr	r0, [pc, #80]	@ (800b940 <prvCheckForValidListAndQueue+0x64>)
 800b8f0:	f7fd fff2 	bl	80098d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b8f4:	4813      	ldr	r0, [pc, #76]	@ (800b944 <prvCheckForValidListAndQueue+0x68>)
 800b8f6:	f7fd ffef 	bl	80098d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b8fa:	4b13      	ldr	r3, [pc, #76]	@ (800b948 <prvCheckForValidListAndQueue+0x6c>)
 800b8fc:	4a10      	ldr	r2, [pc, #64]	@ (800b940 <prvCheckForValidListAndQueue+0x64>)
 800b8fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b900:	4b12      	ldr	r3, [pc, #72]	@ (800b94c <prvCheckForValidListAndQueue+0x70>)
 800b902:	4a10      	ldr	r2, [pc, #64]	@ (800b944 <prvCheckForValidListAndQueue+0x68>)
 800b904:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b906:	2300      	movs	r3, #0
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	4b11      	ldr	r3, [pc, #68]	@ (800b950 <prvCheckForValidListAndQueue+0x74>)
 800b90c:	4a11      	ldr	r2, [pc, #68]	@ (800b954 <prvCheckForValidListAndQueue+0x78>)
 800b90e:	2110      	movs	r1, #16
 800b910:	200a      	movs	r0, #10
 800b912:	f7fe f8ff 	bl	8009b14 <xQueueGenericCreateStatic>
 800b916:	4603      	mov	r3, r0
 800b918:	4a08      	ldr	r2, [pc, #32]	@ (800b93c <prvCheckForValidListAndQueue+0x60>)
 800b91a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b91c:	4b07      	ldr	r3, [pc, #28]	@ (800b93c <prvCheckForValidListAndQueue+0x60>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d005      	beq.n	800b930 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b924:	4b05      	ldr	r3, [pc, #20]	@ (800b93c <prvCheckForValidListAndQueue+0x60>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	490b      	ldr	r1, [pc, #44]	@ (800b958 <prvCheckForValidListAndQueue+0x7c>)
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fe fd24 	bl	800a378 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b930:	f000 f974 	bl	800bc1c <vPortExitCritical>
}
 800b934:	bf00      	nop
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	2000100c 	.word	0x2000100c
 800b940:	20000fdc 	.word	0x20000fdc
 800b944:	20000ff0 	.word	0x20000ff0
 800b948:	20001004 	.word	0x20001004
 800b94c:	20001008 	.word	0x20001008
 800b950:	200010b8 	.word	0x200010b8
 800b954:	20001018 	.word	0x20001018
 800b958:	0800cef8 	.word	0x0800cef8

0800b95c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	3b04      	subs	r3, #4
 800b96c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	3b04      	subs	r3, #4
 800b97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f023 0201 	bic.w	r2, r3, #1
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	3b04      	subs	r3, #4
 800b98a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b98c:	4a0c      	ldr	r2, [pc, #48]	@ (800b9c0 <pxPortInitialiseStack+0x64>)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	3b14      	subs	r3, #20
 800b996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3b04      	subs	r3, #4
 800b9a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f06f 0202 	mvn.w	r2, #2
 800b9aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	3b20      	subs	r3, #32
 800b9b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	0800b9c5 	.word	0x0800b9c5

0800b9c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9ce:	4b13      	ldr	r3, [pc, #76]	@ (800ba1c <prvTaskExitError+0x58>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d6:	d00b      	beq.n	800b9f0 <prvTaskExitError+0x2c>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	60fb      	str	r3, [r7, #12]
}
 800b9ea:	bf00      	nop
 800b9ec:	bf00      	nop
 800b9ee:	e7fd      	b.n	800b9ec <prvTaskExitError+0x28>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	60bb      	str	r3, [r7, #8]
}
 800ba02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba04:	bf00      	nop
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d0fc      	beq.n	800ba06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba0c:	bf00      	nop
 800ba0e:	bf00      	nop
 800ba10:	3714      	adds	r7, #20
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	20000098 	.word	0x20000098

0800ba20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba20:	4b07      	ldr	r3, [pc, #28]	@ (800ba40 <pxCurrentTCBConst2>)
 800ba22:	6819      	ldr	r1, [r3, #0]
 800ba24:	6808      	ldr	r0, [r1, #0]
 800ba26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2a:	f380 8809 	msr	PSP, r0
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f04f 0000 	mov.w	r0, #0
 800ba36:	f380 8811 	msr	BASEPRI, r0
 800ba3a:	4770      	bx	lr
 800ba3c:	f3af 8000 	nop.w

0800ba40 <pxCurrentTCBConst2>:
 800ba40:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba44:	bf00      	nop
 800ba46:	bf00      	nop

0800ba48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba48:	4808      	ldr	r0, [pc, #32]	@ (800ba6c <prvPortStartFirstTask+0x24>)
 800ba4a:	6800      	ldr	r0, [r0, #0]
 800ba4c:	6800      	ldr	r0, [r0, #0]
 800ba4e:	f380 8808 	msr	MSP, r0
 800ba52:	f04f 0000 	mov.w	r0, #0
 800ba56:	f380 8814 	msr	CONTROL, r0
 800ba5a:	b662      	cpsie	i
 800ba5c:	b661      	cpsie	f
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	df00      	svc	0
 800ba68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba6a:	bf00      	nop
 800ba6c:	e000ed08 	.word	0xe000ed08

0800ba70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba76:	4b47      	ldr	r3, [pc, #284]	@ (800bb94 <xPortStartScheduler+0x124>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a47      	ldr	r2, [pc, #284]	@ (800bb98 <xPortStartScheduler+0x128>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d10b      	bne.n	800ba98 <xPortStartScheduler+0x28>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	60fb      	str	r3, [r7, #12]
}
 800ba92:	bf00      	nop
 800ba94:	bf00      	nop
 800ba96:	e7fd      	b.n	800ba94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba98:	4b3e      	ldr	r3, [pc, #248]	@ (800bb94 <xPortStartScheduler+0x124>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a3f      	ldr	r2, [pc, #252]	@ (800bb9c <xPortStartScheduler+0x12c>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d10b      	bne.n	800baba <xPortStartScheduler+0x4a>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	613b      	str	r3, [r7, #16]
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop
 800bab8:	e7fd      	b.n	800bab6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800baba:	4b39      	ldr	r3, [pc, #228]	@ (800bba0 <xPortStartScheduler+0x130>)
 800babc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	22ff      	movs	r2, #255	@ 0xff
 800baca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bad4:	78fb      	ldrb	r3, [r7, #3]
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800badc:	b2da      	uxtb	r2, r3
 800bade:	4b31      	ldr	r3, [pc, #196]	@ (800bba4 <xPortStartScheduler+0x134>)
 800bae0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bae2:	4b31      	ldr	r3, [pc, #196]	@ (800bba8 <xPortStartScheduler+0x138>)
 800bae4:	2207      	movs	r2, #7
 800bae6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bae8:	e009      	b.n	800bafe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800baea:	4b2f      	ldr	r3, [pc, #188]	@ (800bba8 <xPortStartScheduler+0x138>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3b01      	subs	r3, #1
 800baf0:	4a2d      	ldr	r2, [pc, #180]	@ (800bba8 <xPortStartScheduler+0x138>)
 800baf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800baf4:	78fb      	ldrb	r3, [r7, #3]
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bafe:	78fb      	ldrb	r3, [r7, #3]
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb06:	2b80      	cmp	r3, #128	@ 0x80
 800bb08:	d0ef      	beq.n	800baea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb0a:	4b27      	ldr	r3, [pc, #156]	@ (800bba8 <xPortStartScheduler+0x138>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f1c3 0307 	rsb	r3, r3, #7
 800bb12:	2b04      	cmp	r3, #4
 800bb14:	d00b      	beq.n	800bb2e <xPortStartScheduler+0xbe>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	60bb      	str	r3, [r7, #8]
}
 800bb28:	bf00      	nop
 800bb2a:	bf00      	nop
 800bb2c:	e7fd      	b.n	800bb2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb2e:	4b1e      	ldr	r3, [pc, #120]	@ (800bba8 <xPortStartScheduler+0x138>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	021b      	lsls	r3, r3, #8
 800bb34:	4a1c      	ldr	r2, [pc, #112]	@ (800bba8 <xPortStartScheduler+0x138>)
 800bb36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb38:	4b1b      	ldr	r3, [pc, #108]	@ (800bba8 <xPortStartScheduler+0x138>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bb40:	4a19      	ldr	r2, [pc, #100]	@ (800bba8 <xPortStartScheduler+0x138>)
 800bb42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb4c:	4b17      	ldr	r3, [pc, #92]	@ (800bbac <xPortStartScheduler+0x13c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a16      	ldr	r2, [pc, #88]	@ (800bbac <xPortStartScheduler+0x13c>)
 800bb52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bb56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb58:	4b14      	ldr	r3, [pc, #80]	@ (800bbac <xPortStartScheduler+0x13c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a13      	ldr	r2, [pc, #76]	@ (800bbac <xPortStartScheduler+0x13c>)
 800bb5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bb62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb64:	f000 f8da 	bl	800bd1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb68:	4b11      	ldr	r3, [pc, #68]	@ (800bbb0 <xPortStartScheduler+0x140>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb6e:	f000 f8f9 	bl	800bd64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb72:	4b10      	ldr	r3, [pc, #64]	@ (800bbb4 <xPortStartScheduler+0x144>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a0f      	ldr	r2, [pc, #60]	@ (800bbb4 <xPortStartScheduler+0x144>)
 800bb78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bb7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb7e:	f7ff ff63 	bl	800ba48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb82:	f7ff f831 	bl	800abe8 <vTaskSwitchContext>
	prvTaskExitError();
 800bb86:	f7ff ff1d 	bl	800b9c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	e000ed00 	.word	0xe000ed00
 800bb98:	410fc271 	.word	0x410fc271
 800bb9c:	410fc270 	.word	0x410fc270
 800bba0:	e000e400 	.word	0xe000e400
 800bba4:	20001108 	.word	0x20001108
 800bba8:	2000110c 	.word	0x2000110c
 800bbac:	e000ed20 	.word	0xe000ed20
 800bbb0:	20000098 	.word	0x20000098
 800bbb4:	e000ef34 	.word	0xe000ef34

0800bbb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	607b      	str	r3, [r7, #4]
}
 800bbd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbd2:	4b10      	ldr	r3, [pc, #64]	@ (800bc14 <vPortEnterCritical+0x5c>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	4a0e      	ldr	r2, [pc, #56]	@ (800bc14 <vPortEnterCritical+0x5c>)
 800bbda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bbdc:	4b0d      	ldr	r3, [pc, #52]	@ (800bc14 <vPortEnterCritical+0x5c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d110      	bne.n	800bc06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbe4:	4b0c      	ldr	r3, [pc, #48]	@ (800bc18 <vPortEnterCritical+0x60>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00b      	beq.n	800bc06 <vPortEnterCritical+0x4e>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	603b      	str	r3, [r7, #0]
}
 800bc00:	bf00      	nop
 800bc02:	bf00      	nop
 800bc04:	e7fd      	b.n	800bc02 <vPortEnterCritical+0x4a>
	}
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	20000098 	.word	0x20000098
 800bc18:	e000ed04 	.word	0xe000ed04

0800bc1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc22:	4b12      	ldr	r3, [pc, #72]	@ (800bc6c <vPortExitCritical+0x50>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10b      	bne.n	800bc42 <vPortExitCritical+0x26>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	607b      	str	r3, [r7, #4]
}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	e7fd      	b.n	800bc3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc42:	4b0a      	ldr	r3, [pc, #40]	@ (800bc6c <vPortExitCritical+0x50>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	4a08      	ldr	r2, [pc, #32]	@ (800bc6c <vPortExitCritical+0x50>)
 800bc4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc4c:	4b07      	ldr	r3, [pc, #28]	@ (800bc6c <vPortExitCritical+0x50>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d105      	bne.n	800bc60 <vPortExitCritical+0x44>
 800bc54:	2300      	movs	r3, #0
 800bc56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	f383 8811 	msr	BASEPRI, r3
}
 800bc5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	20000098 	.word	0x20000098

0800bc70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc70:	f3ef 8009 	mrs	r0, PSP
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	4b15      	ldr	r3, [pc, #84]	@ (800bcd0 <pxCurrentTCBConst>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	f01e 0f10 	tst.w	lr, #16
 800bc80:	bf08      	it	eq
 800bc82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8a:	6010      	str	r0, [r2, #0]
 800bc8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bc94:	f380 8811 	msr	BASEPRI, r0
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f7fe ffa2 	bl	800abe8 <vTaskSwitchContext>
 800bca4:	f04f 0000 	mov.w	r0, #0
 800bca8:	f380 8811 	msr	BASEPRI, r0
 800bcac:	bc09      	pop	{r0, r3}
 800bcae:	6819      	ldr	r1, [r3, #0]
 800bcb0:	6808      	ldr	r0, [r1, #0]
 800bcb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb6:	f01e 0f10 	tst.w	lr, #16
 800bcba:	bf08      	it	eq
 800bcbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bcc0:	f380 8809 	msr	PSP, r0
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	f3af 8000 	nop.w

0800bcd0 <pxCurrentTCBConst>:
 800bcd0:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bcd4:	bf00      	nop
 800bcd6:	bf00      	nop

0800bcd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
	__asm volatile
 800bcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce2:	f383 8811 	msr	BASEPRI, r3
 800bce6:	f3bf 8f6f 	isb	sy
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	607b      	str	r3, [r7, #4]
}
 800bcf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bcf2:	f7fe febf 	bl	800aa74 <xTaskIncrementTick>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d003      	beq.n	800bd04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcfc:	4b06      	ldr	r3, [pc, #24]	@ (800bd18 <xPortSysTickHandler+0x40>)
 800bcfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	2300      	movs	r3, #0
 800bd06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	f383 8811 	msr	BASEPRI, r3
}
 800bd0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd10:	bf00      	nop
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	e000ed04 	.word	0xe000ed04

0800bd1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd20:	4b0b      	ldr	r3, [pc, #44]	@ (800bd50 <vPortSetupTimerInterrupt+0x34>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd26:	4b0b      	ldr	r3, [pc, #44]	@ (800bd54 <vPortSetupTimerInterrupt+0x38>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd2c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd58 <vPortSetupTimerInterrupt+0x3c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a0a      	ldr	r2, [pc, #40]	@ (800bd5c <vPortSetupTimerInterrupt+0x40>)
 800bd32:	fba2 2303 	umull	r2, r3, r2, r3
 800bd36:	099b      	lsrs	r3, r3, #6
 800bd38:	4a09      	ldr	r2, [pc, #36]	@ (800bd60 <vPortSetupTimerInterrupt+0x44>)
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd3e:	4b04      	ldr	r3, [pc, #16]	@ (800bd50 <vPortSetupTimerInterrupt+0x34>)
 800bd40:	2207      	movs	r2, #7
 800bd42:	601a      	str	r2, [r3, #0]
}
 800bd44:	bf00      	nop
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr
 800bd4e:	bf00      	nop
 800bd50:	e000e010 	.word	0xe000e010
 800bd54:	e000e018 	.word	0xe000e018
 800bd58:	20000000 	.word	0x20000000
 800bd5c:	10624dd3 	.word	0x10624dd3
 800bd60:	e000e014 	.word	0xe000e014

0800bd64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bd74 <vPortEnableVFP+0x10>
 800bd68:	6801      	ldr	r1, [r0, #0]
 800bd6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bd6e:	6001      	str	r1, [r0, #0]
 800bd70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd72:	bf00      	nop
 800bd74:	e000ed88 	.word	0xe000ed88

0800bd78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd7e:	f3ef 8305 	mrs	r3, IPSR
 800bd82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b0f      	cmp	r3, #15
 800bd88:	d915      	bls.n	800bdb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd8a:	4a18      	ldr	r2, [pc, #96]	@ (800bdec <vPortValidateInterruptPriority+0x74>)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	4413      	add	r3, r2
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd94:	4b16      	ldr	r3, [pc, #88]	@ (800bdf0 <vPortValidateInterruptPriority+0x78>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	7afa      	ldrb	r2, [r7, #11]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d20b      	bcs.n	800bdb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	607b      	str	r3, [r7, #4]
}
 800bdb0:	bf00      	nop
 800bdb2:	bf00      	nop
 800bdb4:	e7fd      	b.n	800bdb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	@ (800bdf4 <vPortValidateInterruptPriority+0x7c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf8 <vPortValidateInterruptPriority+0x80>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d90b      	bls.n	800bdde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	603b      	str	r3, [r7, #0]
}
 800bdd8:	bf00      	nop
 800bdda:	bf00      	nop
 800bddc:	e7fd      	b.n	800bdda <vPortValidateInterruptPriority+0x62>
	}
 800bdde:	bf00      	nop
 800bde0:	3714      	adds	r7, #20
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	e000e3f0 	.word	0xe000e3f0
 800bdf0:	20001108 	.word	0x20001108
 800bdf4:	e000ed0c 	.word	0xe000ed0c
 800bdf8:	2000110c 	.word	0x2000110c

0800bdfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08a      	sub	sp, #40	@ 0x28
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be04:	2300      	movs	r3, #0
 800be06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be08:	f7fe fd78 	bl	800a8fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be0c:	4b5c      	ldr	r3, [pc, #368]	@ (800bf80 <pvPortMalloc+0x184>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be14:	f000 f924 	bl	800c060 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be18:	4b5a      	ldr	r3, [pc, #360]	@ (800bf84 <pvPortMalloc+0x188>)
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4013      	ands	r3, r2
 800be20:	2b00      	cmp	r3, #0
 800be22:	f040 8095 	bne.w	800bf50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01e      	beq.n	800be6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800be2c:	2208      	movs	r2, #8
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4413      	add	r3, r2
 800be32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f003 0307 	and.w	r3, r3, #7
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d015      	beq.n	800be6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f023 0307 	bic.w	r3, r3, #7
 800be44:	3308      	adds	r3, #8
 800be46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f003 0307 	and.w	r3, r3, #7
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00b      	beq.n	800be6a <pvPortMalloc+0x6e>
	__asm volatile
 800be52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	617b      	str	r3, [r7, #20]
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop
 800be68:	e7fd      	b.n	800be66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d06f      	beq.n	800bf50 <pvPortMalloc+0x154>
 800be70:	4b45      	ldr	r3, [pc, #276]	@ (800bf88 <pvPortMalloc+0x18c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	429a      	cmp	r2, r3
 800be78:	d86a      	bhi.n	800bf50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be7a:	4b44      	ldr	r3, [pc, #272]	@ (800bf8c <pvPortMalloc+0x190>)
 800be7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be7e:	4b43      	ldr	r3, [pc, #268]	@ (800bf8c <pvPortMalloc+0x190>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be84:	e004      	b.n	800be90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800be86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	429a      	cmp	r2, r3
 800be98:	d903      	bls.n	800bea2 <pvPortMalloc+0xa6>
 800be9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1f1      	bne.n	800be86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bea2:	4b37      	ldr	r3, [pc, #220]	@ (800bf80 <pvPortMalloc+0x184>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d051      	beq.n	800bf50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2208      	movs	r2, #8
 800beb2:	4413      	add	r3, r2
 800beb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800beb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	6a3b      	ldr	r3, [r7, #32]
 800bebc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	685a      	ldr	r2, [r3, #4]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	1ad2      	subs	r2, r2, r3
 800bec6:	2308      	movs	r3, #8
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	429a      	cmp	r2, r3
 800becc:	d920      	bls.n	800bf10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4413      	add	r3, r2
 800bed4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	f003 0307 	and.w	r3, r3, #7
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00b      	beq.n	800bef8 <pvPortMalloc+0xfc>
	__asm volatile
 800bee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	613b      	str	r3, [r7, #16]
}
 800bef2:	bf00      	nop
 800bef4:	bf00      	nop
 800bef6:	e7fd      	b.n	800bef4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	1ad2      	subs	r2, r2, r3
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf0a:	69b8      	ldr	r0, [r7, #24]
 800bf0c:	f000 f90a 	bl	800c124 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf10:	4b1d      	ldr	r3, [pc, #116]	@ (800bf88 <pvPortMalloc+0x18c>)
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	4a1b      	ldr	r2, [pc, #108]	@ (800bf88 <pvPortMalloc+0x18c>)
 800bf1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf1e:	4b1a      	ldr	r3, [pc, #104]	@ (800bf88 <pvPortMalloc+0x18c>)
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	4b1b      	ldr	r3, [pc, #108]	@ (800bf90 <pvPortMalloc+0x194>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d203      	bcs.n	800bf32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf2a:	4b17      	ldr	r3, [pc, #92]	@ (800bf88 <pvPortMalloc+0x18c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a18      	ldr	r2, [pc, #96]	@ (800bf90 <pvPortMalloc+0x194>)
 800bf30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf34:	685a      	ldr	r2, [r3, #4]
 800bf36:	4b13      	ldr	r3, [pc, #76]	@ (800bf84 <pvPortMalloc+0x188>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf46:	4b13      	ldr	r3, [pc, #76]	@ (800bf94 <pvPortMalloc+0x198>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	4a11      	ldr	r2, [pc, #68]	@ (800bf94 <pvPortMalloc+0x198>)
 800bf4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf50:	f7fe fce2 	bl	800a918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	f003 0307 	and.w	r3, r3, #7
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00b      	beq.n	800bf76 <pvPortMalloc+0x17a>
	__asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	60fb      	str	r3, [r7, #12]
}
 800bf70:	bf00      	nop
 800bf72:	bf00      	nop
 800bf74:	e7fd      	b.n	800bf72 <pvPortMalloc+0x176>
	return pvReturn;
 800bf76:	69fb      	ldr	r3, [r7, #28]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3728      	adds	r7, #40	@ 0x28
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	20004d18 	.word	0x20004d18
 800bf84:	20004d2c 	.word	0x20004d2c
 800bf88:	20004d1c 	.word	0x20004d1c
 800bf8c:	20004d10 	.word	0x20004d10
 800bf90:	20004d20 	.word	0x20004d20
 800bf94:	20004d24 	.word	0x20004d24

0800bf98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d04f      	beq.n	800c04a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfaa:	2308      	movs	r3, #8
 800bfac:	425b      	negs	r3, r3
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	4b25      	ldr	r3, [pc, #148]	@ (800c054 <vPortFree+0xbc>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10b      	bne.n	800bfde <vPortFree+0x46>
	__asm volatile
 800bfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	60fb      	str	r3, [r7, #12]
}
 800bfd8:	bf00      	nop
 800bfda:	bf00      	nop
 800bfdc:	e7fd      	b.n	800bfda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00b      	beq.n	800bffe <vPortFree+0x66>
	__asm volatile
 800bfe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfea:	f383 8811 	msr	BASEPRI, r3
 800bfee:	f3bf 8f6f 	isb	sy
 800bff2:	f3bf 8f4f 	dsb	sy
 800bff6:	60bb      	str	r3, [r7, #8]
}
 800bff8:	bf00      	nop
 800bffa:	bf00      	nop
 800bffc:	e7fd      	b.n	800bffa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	685a      	ldr	r2, [r3, #4]
 800c002:	4b14      	ldr	r3, [pc, #80]	@ (800c054 <vPortFree+0xbc>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4013      	ands	r3, r2
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d01e      	beq.n	800c04a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d11a      	bne.n	800c04a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	685a      	ldr	r2, [r3, #4]
 800c018:	4b0e      	ldr	r3, [pc, #56]	@ (800c054 <vPortFree+0xbc>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	43db      	mvns	r3, r3
 800c01e:	401a      	ands	r2, r3
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c024:	f7fe fc6a 	bl	800a8fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	4b0a      	ldr	r3, [pc, #40]	@ (800c058 <vPortFree+0xc0>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4413      	add	r3, r2
 800c032:	4a09      	ldr	r2, [pc, #36]	@ (800c058 <vPortFree+0xc0>)
 800c034:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c036:	6938      	ldr	r0, [r7, #16]
 800c038:	f000 f874 	bl	800c124 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c03c:	4b07      	ldr	r3, [pc, #28]	@ (800c05c <vPortFree+0xc4>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	3301      	adds	r3, #1
 800c042:	4a06      	ldr	r2, [pc, #24]	@ (800c05c <vPortFree+0xc4>)
 800c044:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c046:	f7fe fc67 	bl	800a918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c04a:	bf00      	nop
 800c04c:	3718      	adds	r7, #24
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	20004d2c 	.word	0x20004d2c
 800c058:	20004d1c 	.word	0x20004d1c
 800c05c:	20004d28 	.word	0x20004d28

0800c060 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c066:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c06a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c06c:	4b27      	ldr	r3, [pc, #156]	@ (800c10c <prvHeapInit+0xac>)
 800c06e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f003 0307 	and.w	r3, r3, #7
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00c      	beq.n	800c094 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	3307      	adds	r3, #7
 800c07e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f023 0307 	bic.w	r3, r3, #7
 800c086:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	4a1f      	ldr	r2, [pc, #124]	@ (800c10c <prvHeapInit+0xac>)
 800c090:	4413      	add	r3, r2
 800c092:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c098:	4a1d      	ldr	r2, [pc, #116]	@ (800c110 <prvHeapInit+0xb0>)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c09e:	4b1c      	ldr	r3, [pc, #112]	@ (800c110 <prvHeapInit+0xb0>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0ac:	2208      	movs	r2, #8
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	1a9b      	subs	r3, r3, r2
 800c0b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 0307 	bic.w	r3, r3, #7
 800c0ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	4a15      	ldr	r2, [pc, #84]	@ (800c114 <prvHeapInit+0xb4>)
 800c0c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0c2:	4b14      	ldr	r3, [pc, #80]	@ (800c114 <prvHeapInit+0xb4>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0ca:	4b12      	ldr	r3, [pc, #72]	@ (800c114 <prvHeapInit+0xb4>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	1ad2      	subs	r2, r2, r3
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c114 <prvHeapInit+0xb4>)
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	4a0a      	ldr	r2, [pc, #40]	@ (800c118 <prvHeapInit+0xb8>)
 800c0ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	4a09      	ldr	r2, [pc, #36]	@ (800c11c <prvHeapInit+0xbc>)
 800c0f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0f8:	4b09      	ldr	r3, [pc, #36]	@ (800c120 <prvHeapInit+0xc0>)
 800c0fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c0fe:	601a      	str	r2, [r3, #0]
}
 800c100:	bf00      	nop
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	20001110 	.word	0x20001110
 800c110:	20004d10 	.word	0x20004d10
 800c114:	20004d18 	.word	0x20004d18
 800c118:	20004d20 	.word	0x20004d20
 800c11c:	20004d1c 	.word	0x20004d1c
 800c120:	20004d2c 	.word	0x20004d2c

0800c124 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c12c:	4b28      	ldr	r3, [pc, #160]	@ (800c1d0 <prvInsertBlockIntoFreeList+0xac>)
 800c12e:	60fb      	str	r3, [r7, #12]
 800c130:	e002      	b.n	800c138 <prvInsertBlockIntoFreeList+0x14>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	60fb      	str	r3, [r7, #12]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d8f7      	bhi.n	800c132 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	4413      	add	r3, r2
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	429a      	cmp	r2, r3
 800c152:	d108      	bne.n	800c166 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	441a      	add	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	441a      	add	r2, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	429a      	cmp	r2, r3
 800c178:	d118      	bne.n	800c1ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	4b15      	ldr	r3, [pc, #84]	@ (800c1d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	429a      	cmp	r2, r3
 800c184:	d00d      	beq.n	800c1a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	685a      	ldr	r2, [r3, #4]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	441a      	add	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	601a      	str	r2, [r3, #0]
 800c1a0:	e008      	b.n	800c1b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c1d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	601a      	str	r2, [r3, #0]
 800c1aa:	e003      	b.n	800c1b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d002      	beq.n	800c1c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1c2:	bf00      	nop
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	20004d10 	.word	0x20004d10
 800c1d4:	20004d18 	.word	0x20004d18

0800c1d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	4912      	ldr	r1, [pc, #72]	@ (800c228 <MX_USB_DEVICE_Init+0x50>)
 800c1e0:	4812      	ldr	r0, [pc, #72]	@ (800c22c <MX_USB_DEVICE_Init+0x54>)
 800c1e2:	f7fb fee9 	bl	8007fb8 <USBD_Init>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c1ec:	f7f4 fc53 	bl	8000a96 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c1f0:	490f      	ldr	r1, [pc, #60]	@ (800c230 <MX_USB_DEVICE_Init+0x58>)
 800c1f2:	480e      	ldr	r0, [pc, #56]	@ (800c22c <MX_USB_DEVICE_Init+0x54>)
 800c1f4:	f7fb ff10 	bl	8008018 <USBD_RegisterClass>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d001      	beq.n	800c202 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c1fe:	f7f4 fc4a 	bl	8000a96 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c202:	490c      	ldr	r1, [pc, #48]	@ (800c234 <MX_USB_DEVICE_Init+0x5c>)
 800c204:	4809      	ldr	r0, [pc, #36]	@ (800c22c <MX_USB_DEVICE_Init+0x54>)
 800c206:	f7fb fe07 	bl	8007e18 <USBD_CDC_RegisterInterface>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d001      	beq.n	800c214 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c210:	f7f4 fc41 	bl	8000a96 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c214:	4805      	ldr	r0, [pc, #20]	@ (800c22c <MX_USB_DEVICE_Init+0x54>)
 800c216:	f7fb ff35 	bl	8008084 <USBD_Start>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c220:	f7f4 fc39 	bl	8000a96 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c224:	bf00      	nop
 800c226:	bd80      	pop	{r7, pc}
 800c228:	200000b0 	.word	0x200000b0
 800c22c:	20004d30 	.word	0x20004d30
 800c230:	20000018 	.word	0x20000018
 800c234:	2000009c 	.word	0x2000009c

0800c238 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c23c:	2200      	movs	r2, #0
 800c23e:	4905      	ldr	r1, [pc, #20]	@ (800c254 <CDC_Init_FS+0x1c>)
 800c240:	4805      	ldr	r0, [pc, #20]	@ (800c258 <CDC_Init_FS+0x20>)
 800c242:	f7fb fe03 	bl	8007e4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c246:	4905      	ldr	r1, [pc, #20]	@ (800c25c <CDC_Init_FS+0x24>)
 800c248:	4803      	ldr	r0, [pc, #12]	@ (800c258 <CDC_Init_FS+0x20>)
 800c24a:	f7fb fe21 	bl	8007e90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c24e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c250:	4618      	mov	r0, r3
 800c252:	bd80      	pop	{r7, pc}
 800c254:	2000580c 	.word	0x2000580c
 800c258:	20004d30 	.word	0x20004d30
 800c25c:	2000500c 	.word	0x2000500c

0800c260 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c260:	b480      	push	{r7}
 800c262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c264:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c266:	4618      	mov	r0, r3
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	6039      	str	r1, [r7, #0]
 800c27a:	71fb      	strb	r3, [r7, #7]
 800c27c:	4613      	mov	r3, r2
 800c27e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c280:	79fb      	ldrb	r3, [r7, #7]
 800c282:	2b23      	cmp	r3, #35	@ 0x23
 800c284:	d84a      	bhi.n	800c31c <CDC_Control_FS+0xac>
 800c286:	a201      	add	r2, pc, #4	@ (adr r2, 800c28c <CDC_Control_FS+0x1c>)
 800c288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c28c:	0800c31d 	.word	0x0800c31d
 800c290:	0800c31d 	.word	0x0800c31d
 800c294:	0800c31d 	.word	0x0800c31d
 800c298:	0800c31d 	.word	0x0800c31d
 800c29c:	0800c31d 	.word	0x0800c31d
 800c2a0:	0800c31d 	.word	0x0800c31d
 800c2a4:	0800c31d 	.word	0x0800c31d
 800c2a8:	0800c31d 	.word	0x0800c31d
 800c2ac:	0800c31d 	.word	0x0800c31d
 800c2b0:	0800c31d 	.word	0x0800c31d
 800c2b4:	0800c31d 	.word	0x0800c31d
 800c2b8:	0800c31d 	.word	0x0800c31d
 800c2bc:	0800c31d 	.word	0x0800c31d
 800c2c0:	0800c31d 	.word	0x0800c31d
 800c2c4:	0800c31d 	.word	0x0800c31d
 800c2c8:	0800c31d 	.word	0x0800c31d
 800c2cc:	0800c31d 	.word	0x0800c31d
 800c2d0:	0800c31d 	.word	0x0800c31d
 800c2d4:	0800c31d 	.word	0x0800c31d
 800c2d8:	0800c31d 	.word	0x0800c31d
 800c2dc:	0800c31d 	.word	0x0800c31d
 800c2e0:	0800c31d 	.word	0x0800c31d
 800c2e4:	0800c31d 	.word	0x0800c31d
 800c2e8:	0800c31d 	.word	0x0800c31d
 800c2ec:	0800c31d 	.word	0x0800c31d
 800c2f0:	0800c31d 	.word	0x0800c31d
 800c2f4:	0800c31d 	.word	0x0800c31d
 800c2f8:	0800c31d 	.word	0x0800c31d
 800c2fc:	0800c31d 	.word	0x0800c31d
 800c300:	0800c31d 	.word	0x0800c31d
 800c304:	0800c31d 	.word	0x0800c31d
 800c308:	0800c31d 	.word	0x0800c31d
 800c30c:	0800c31d 	.word	0x0800c31d
 800c310:	0800c31d 	.word	0x0800c31d
 800c314:	0800c31d 	.word	0x0800c31d
 800c318:	0800c31d 	.word	0x0800c31d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c31c:	bf00      	nop
  }

  return (USBD_OK);
 800c31e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c320:	4618      	mov	r0, r3
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c336:	6879      	ldr	r1, [r7, #4]
 800c338:	4805      	ldr	r0, [pc, #20]	@ (800c350 <CDC_Receive_FS+0x24>)
 800c33a:	f7fb fda9 	bl	8007e90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c33e:	4804      	ldr	r0, [pc, #16]	@ (800c350 <CDC_Receive_FS+0x24>)
 800c340:	f7fb fe04 	bl	8007f4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c344:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c346:	4618      	mov	r0, r3
 800c348:	3708      	adds	r7, #8
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20004d30 	.word	0x20004d30

0800c354 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	460b      	mov	r3, r1
 800c35e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c360:	2300      	movs	r3, #0
 800c362:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c364:	4b0d      	ldr	r3, [pc, #52]	@ (800c39c <CDC_Transmit_FS+0x48>)
 800c366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c36a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c372:	2b00      	cmp	r3, #0
 800c374:	d001      	beq.n	800c37a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c376:	2301      	movs	r3, #1
 800c378:	e00b      	b.n	800c392 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c37a:	887b      	ldrh	r3, [r7, #2]
 800c37c:	461a      	mov	r2, r3
 800c37e:	6879      	ldr	r1, [r7, #4]
 800c380:	4806      	ldr	r0, [pc, #24]	@ (800c39c <CDC_Transmit_FS+0x48>)
 800c382:	f7fb fd63 	bl	8007e4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c386:	4805      	ldr	r0, [pc, #20]	@ (800c39c <CDC_Transmit_FS+0x48>)
 800c388:	f7fb fda0 	bl	8007ecc <USBD_CDC_TransmitPacket>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c390:	7bfb      	ldrb	r3, [r7, #15]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20004d30 	.word	0x20004d30

0800c3a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b087      	sub	sp, #28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c3b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	371c      	adds	r7, #28
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
	...

0800c3c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	6039      	str	r1, [r7, #0]
 800c3ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2212      	movs	r2, #18
 800c3d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c3d6:	4b03      	ldr	r3, [pc, #12]	@ (800c3e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	200000cc 	.word	0x200000cc

0800c3e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	6039      	str	r1, [r7, #0]
 800c3f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	2204      	movs	r2, #4
 800c3f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c3fa:	4b03      	ldr	r3, [pc, #12]	@ (800c408 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	200000e0 	.word	0x200000e0

0800c40c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	4603      	mov	r3, r0
 800c414:	6039      	str	r1, [r7, #0]
 800c416:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c418:	79fb      	ldrb	r3, [r7, #7]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d105      	bne.n	800c42a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	4907      	ldr	r1, [pc, #28]	@ (800c440 <USBD_FS_ProductStrDescriptor+0x34>)
 800c422:	4808      	ldr	r0, [pc, #32]	@ (800c444 <USBD_FS_ProductStrDescriptor+0x38>)
 800c424:	f7fc fff4 	bl	8009410 <USBD_GetString>
 800c428:	e004      	b.n	800c434 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	4904      	ldr	r1, [pc, #16]	@ (800c440 <USBD_FS_ProductStrDescriptor+0x34>)
 800c42e:	4805      	ldr	r0, [pc, #20]	@ (800c444 <USBD_FS_ProductStrDescriptor+0x38>)
 800c430:	f7fc ffee 	bl	8009410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c434:	4b02      	ldr	r3, [pc, #8]	@ (800c440 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c436:	4618      	mov	r0, r3
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	2000600c 	.word	0x2000600c
 800c444:	0800cf00 	.word	0x0800cf00

0800c448 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	6039      	str	r1, [r7, #0]
 800c452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c454:	683a      	ldr	r2, [r7, #0]
 800c456:	4904      	ldr	r1, [pc, #16]	@ (800c468 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c458:	4804      	ldr	r0, [pc, #16]	@ (800c46c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c45a:	f7fc ffd9 	bl	8009410 <USBD_GetString>
  return USBD_StrDesc;
 800c45e:	4b02      	ldr	r3, [pc, #8]	@ (800c468 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c460:	4618      	mov	r0, r3
 800c462:	3708      	adds	r7, #8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	2000600c 	.word	0x2000600c
 800c46c:	0800cf18 	.word	0x0800cf18

0800c470 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	6039      	str	r1, [r7, #0]
 800c47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	221a      	movs	r2, #26
 800c480:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c482:	f000 f843 	bl	800c50c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c486:	4b02      	ldr	r3, [pc, #8]	@ (800c490 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	200000e4 	.word	0x200000e4

0800c494 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	4603      	mov	r3, r0
 800c49c:	6039      	str	r1, [r7, #0]
 800c49e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d105      	bne.n	800c4b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	4907      	ldr	r1, [pc, #28]	@ (800c4c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4aa:	4808      	ldr	r0, [pc, #32]	@ (800c4cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4ac:	f7fc ffb0 	bl	8009410 <USBD_GetString>
 800c4b0:	e004      	b.n	800c4bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4b2:	683a      	ldr	r2, [r7, #0]
 800c4b4:	4904      	ldr	r1, [pc, #16]	@ (800c4c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4b6:	4805      	ldr	r0, [pc, #20]	@ (800c4cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c4b8:	f7fc ffaa 	bl	8009410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4bc:	4b02      	ldr	r3, [pc, #8]	@ (800c4c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	2000600c 	.word	0x2000600c
 800c4cc:	0800cf2c 	.word	0x0800cf2c

0800c4d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	6039      	str	r1, [r7, #0]
 800c4da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4dc:	79fb      	ldrb	r3, [r7, #7]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d105      	bne.n	800c4ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4e2:	683a      	ldr	r2, [r7, #0]
 800c4e4:	4907      	ldr	r1, [pc, #28]	@ (800c504 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4e6:	4808      	ldr	r0, [pc, #32]	@ (800c508 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4e8:	f7fc ff92 	bl	8009410 <USBD_GetString>
 800c4ec:	e004      	b.n	800c4f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	4904      	ldr	r1, [pc, #16]	@ (800c504 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4f2:	4805      	ldr	r0, [pc, #20]	@ (800c508 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4f4:	f7fc ff8c 	bl	8009410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4f8:	4b02      	ldr	r3, [pc, #8]	@ (800c504 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	2000600c 	.word	0x2000600c
 800c508:	0800cf38 	.word	0x0800cf38

0800c50c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c512:	4b0f      	ldr	r3, [pc, #60]	@ (800c550 <Get_SerialNum+0x44>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c518:	4b0e      	ldr	r3, [pc, #56]	@ (800c554 <Get_SerialNum+0x48>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c51e:	4b0e      	ldr	r3, [pc, #56]	@ (800c558 <Get_SerialNum+0x4c>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4413      	add	r3, r2
 800c52a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d009      	beq.n	800c546 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c532:	2208      	movs	r2, #8
 800c534:	4909      	ldr	r1, [pc, #36]	@ (800c55c <Get_SerialNum+0x50>)
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f000 f814 	bl	800c564 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c53c:	2204      	movs	r2, #4
 800c53e:	4908      	ldr	r1, [pc, #32]	@ (800c560 <Get_SerialNum+0x54>)
 800c540:	68b8      	ldr	r0, [r7, #8]
 800c542:	f000 f80f 	bl	800c564 <IntToUnicode>
  }
}
 800c546:	bf00      	nop
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	1fff7a10 	.word	0x1fff7a10
 800c554:	1fff7a14 	.word	0x1fff7a14
 800c558:	1fff7a18 	.word	0x1fff7a18
 800c55c:	200000e6 	.word	0x200000e6
 800c560:	200000f6 	.word	0x200000f6

0800c564 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c564:	b480      	push	{r7}
 800c566:	b087      	sub	sp, #28
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	4613      	mov	r3, r2
 800c570:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c572:	2300      	movs	r3, #0
 800c574:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c576:	2300      	movs	r3, #0
 800c578:	75fb      	strb	r3, [r7, #23]
 800c57a:	e027      	b.n	800c5cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	0f1b      	lsrs	r3, r3, #28
 800c580:	2b09      	cmp	r3, #9
 800c582:	d80b      	bhi.n	800c59c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	0f1b      	lsrs	r3, r3, #28
 800c588:	b2da      	uxtb	r2, r3
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
 800c58c:	005b      	lsls	r3, r3, #1
 800c58e:	4619      	mov	r1, r3
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	440b      	add	r3, r1
 800c594:	3230      	adds	r2, #48	@ 0x30
 800c596:	b2d2      	uxtb	r2, r2
 800c598:	701a      	strb	r2, [r3, #0]
 800c59a:	e00a      	b.n	800c5b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	0f1b      	lsrs	r3, r3, #28
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	005b      	lsls	r3, r3, #1
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	440b      	add	r3, r1
 800c5ac:	3237      	adds	r2, #55	@ 0x37
 800c5ae:	b2d2      	uxtb	r2, r2
 800c5b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	011b      	lsls	r3, r3, #4
 800c5b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ba:	005b      	lsls	r3, r3, #1
 800c5bc:	3301      	adds	r3, #1
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c5c6:	7dfb      	ldrb	r3, [r7, #23]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	75fb      	strb	r3, [r7, #23]
 800c5cc:	7dfa      	ldrb	r2, [r7, #23]
 800c5ce:	79fb      	ldrb	r3, [r7, #7]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d3d3      	bcc.n	800c57c <IntToUnicode+0x18>
  }
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop
 800c5d8:	371c      	adds	r7, #28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
	...

0800c5e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08a      	sub	sp, #40	@ 0x28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5ec:	f107 0314 	add.w	r3, r7, #20
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	601a      	str	r2, [r3, #0]
 800c5f4:	605a      	str	r2, [r3, #4]
 800c5f6:	609a      	str	r2, [r3, #8]
 800c5f8:	60da      	str	r2, [r3, #12]
 800c5fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c604:	d13a      	bne.n	800c67c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c606:	2300      	movs	r3, #0
 800c608:	613b      	str	r3, [r7, #16]
 800c60a:	4b1e      	ldr	r3, [pc, #120]	@ (800c684 <HAL_PCD_MspInit+0xa0>)
 800c60c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c60e:	4a1d      	ldr	r2, [pc, #116]	@ (800c684 <HAL_PCD_MspInit+0xa0>)
 800c610:	f043 0301 	orr.w	r3, r3, #1
 800c614:	6313      	str	r3, [r2, #48]	@ 0x30
 800c616:	4b1b      	ldr	r3, [pc, #108]	@ (800c684 <HAL_PCD_MspInit+0xa0>)
 800c618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c61a:	f003 0301 	and.w	r3, r3, #1
 800c61e:	613b      	str	r3, [r7, #16]
 800c620:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c622:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c628:	2302      	movs	r3, #2
 800c62a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c62c:	2300      	movs	r3, #0
 800c62e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c630:	2303      	movs	r3, #3
 800c632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c634:	230a      	movs	r3, #10
 800c636:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c638:	f107 0314 	add.w	r3, r7, #20
 800c63c:	4619      	mov	r1, r3
 800c63e:	4812      	ldr	r0, [pc, #72]	@ (800c688 <HAL_PCD_MspInit+0xa4>)
 800c640:	f7f6 fd44 	bl	80030cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c644:	4b0f      	ldr	r3, [pc, #60]	@ (800c684 <HAL_PCD_MspInit+0xa0>)
 800c646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c648:	4a0e      	ldr	r2, [pc, #56]	@ (800c684 <HAL_PCD_MspInit+0xa0>)
 800c64a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c64e:	6353      	str	r3, [r2, #52]	@ 0x34
 800c650:	2300      	movs	r3, #0
 800c652:	60fb      	str	r3, [r7, #12]
 800c654:	4b0b      	ldr	r3, [pc, #44]	@ (800c684 <HAL_PCD_MspInit+0xa0>)
 800c656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c658:	4a0a      	ldr	r2, [pc, #40]	@ (800c684 <HAL_PCD_MspInit+0xa0>)
 800c65a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c65e:	6453      	str	r3, [r2, #68]	@ 0x44
 800c660:	4b08      	ldr	r3, [pc, #32]	@ (800c684 <HAL_PCD_MspInit+0xa0>)
 800c662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c668:	60fb      	str	r3, [r7, #12]
 800c66a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c66c:	2200      	movs	r2, #0
 800c66e:	2105      	movs	r1, #5
 800c670:	2043      	movs	r0, #67	@ 0x43
 800c672:	f7f6 f991 	bl	8002998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c676:	2043      	movs	r0, #67	@ 0x43
 800c678:	f7f6 f9aa 	bl	80029d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c67c:	bf00      	nop
 800c67e:	3728      	adds	r7, #40	@ 0x28
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	40023800 	.word	0x40023800
 800c688:	40020000 	.word	0x40020000

0800c68c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	4610      	mov	r0, r2
 800c6a4:	f7fb fd3b 	bl	800811e <USBD_LL_SetupStage>
}
 800c6a8:	bf00      	nop
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c6c2:	78fa      	ldrb	r2, [r7, #3]
 800c6c4:	6879      	ldr	r1, [r7, #4]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	4413      	add	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	440b      	add	r3, r1
 800c6d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	78fb      	ldrb	r3, [r7, #3]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	f7fb fd75 	bl	80081c8 <USBD_LL_DataOutStage>
}
 800c6de:	bf00      	nop
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b082      	sub	sp, #8
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c6f8:	78fa      	ldrb	r2, [r7, #3]
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	4413      	add	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	440b      	add	r3, r1
 800c706:	3320      	adds	r3, #32
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	78fb      	ldrb	r3, [r7, #3]
 800c70c:	4619      	mov	r1, r3
 800c70e:	f7fb fe17 	bl	8008340 <USBD_LL_DataInStage>
}
 800c712:	bf00      	nop
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b082      	sub	sp, #8
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fb ff5b 	bl	80085e4 <USBD_LL_SOF>
}
 800c72e:	bf00      	nop
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b084      	sub	sp, #16
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c73e:	2301      	movs	r3, #1
 800c740:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	79db      	ldrb	r3, [r3, #7]
 800c746:	2b02      	cmp	r3, #2
 800c748:	d001      	beq.n	800c74e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c74a:	f7f4 f9a4 	bl	8000a96 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c754:	7bfa      	ldrb	r2, [r7, #15]
 800c756:	4611      	mov	r1, r2
 800c758:	4618      	mov	r0, r3
 800c75a:	f7fb feff 	bl	800855c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c764:	4618      	mov	r0, r3
 800c766:	f7fb fea6 	bl	80084b6 <USBD_LL_Reset>
}
 800c76a:	bf00      	nop
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
	...

0800c774 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c782:	4618      	mov	r0, r3
 800c784:	f7fb fefa 	bl	800857c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6812      	ldr	r2, [r2, #0]
 800c796:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c79a:	f043 0301 	orr.w	r3, r3, #1
 800c79e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	7adb      	ldrb	r3, [r3, #11]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d005      	beq.n	800c7b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c7a8:	4b04      	ldr	r3, [pc, #16]	@ (800c7bc <HAL_PCD_SuspendCallback+0x48>)
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	4a03      	ldr	r2, [pc, #12]	@ (800c7bc <HAL_PCD_SuspendCallback+0x48>)
 800c7ae:	f043 0306 	orr.w	r3, r3, #6
 800c7b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c7b4:	bf00      	nop
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	e000ed00 	.word	0xe000ed00

0800c7c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fb fef0 	bl	80085b4 <USBD_LL_Resume>
}
 800c7d4:	bf00      	nop
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7ee:	78fa      	ldrb	r2, [r7, #3]
 800c7f0:	4611      	mov	r1, r2
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fb ff48 	bl	8008688 <USBD_LL_IsoOUTIncomplete>
}
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c812:	78fa      	ldrb	r2, [r7, #3]
 800c814:	4611      	mov	r1, r2
 800c816:	4618      	mov	r0, r3
 800c818:	f7fb ff04 	bl	8008624 <USBD_LL_IsoINIncomplete>
}
 800c81c:	bf00      	nop
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c832:	4618      	mov	r0, r3
 800c834:	f7fb ff5a 	bl	80086ec <USBD_LL_DevConnected>
}
 800c838:	bf00      	nop
 800c83a:	3708      	adds	r7, #8
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fb ff57 	bl	8008702 <USBD_LL_DevDisconnected>
}
 800c854:	bf00      	nop
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d13c      	bne.n	800c8e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c86c:	4a20      	ldr	r2, [pc, #128]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4a1e      	ldr	r2, [pc, #120]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c878:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c87c:	4b1c      	ldr	r3, [pc, #112]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c87e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c882:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c884:	4b1a      	ldr	r3, [pc, #104]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c886:	2204      	movs	r2, #4
 800c888:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c88a:	4b19      	ldr	r3, [pc, #100]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c88c:	2202      	movs	r2, #2
 800c88e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c890:	4b17      	ldr	r3, [pc, #92]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c892:	2200      	movs	r2, #0
 800c894:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c896:	4b16      	ldr	r3, [pc, #88]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c898:	2202      	movs	r2, #2
 800c89a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c89c:	4b14      	ldr	r3, [pc, #80]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c8a2:	4b13      	ldr	r3, [pc, #76]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c8a8:	4b11      	ldr	r3, [pc, #68]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c8ae:	4b10      	ldr	r3, [pc, #64]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c8ba:	480d      	ldr	r0, [pc, #52]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c8bc:	f7f6 ff1a 	bl	80036f4 <HAL_PCD_Init>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d001      	beq.n	800c8ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c8c6:	f7f4 f8e6 	bl	8000a96 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c8ca:	2180      	movs	r1, #128	@ 0x80
 800c8cc:	4808      	ldr	r0, [pc, #32]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c8ce:	f7f8 f946 	bl	8004b5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c8d2:	2240      	movs	r2, #64	@ 0x40
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	4806      	ldr	r0, [pc, #24]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c8d8:	f7f8 f8fa 	bl	8004ad0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c8dc:	2280      	movs	r2, #128	@ 0x80
 800c8de:	2101      	movs	r1, #1
 800c8e0:	4803      	ldr	r0, [pc, #12]	@ (800c8f0 <USBD_LL_Init+0x94>)
 800c8e2:	f7f8 f8f5 	bl	8004ad0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	2000620c 	.word	0x2000620c

0800c8f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7f7 f801 	bl	8003912 <HAL_PCD_Start>
 800c910:	4603      	mov	r3, r0
 800c912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c914:	7bfb      	ldrb	r3, [r7, #15]
 800c916:	4618      	mov	r0, r3
 800c918:	f000 f942 	bl	800cba0 <USBD_Get_USB_Status>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c920:	7bbb      	ldrb	r3, [r7, #14]
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b084      	sub	sp, #16
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	4608      	mov	r0, r1
 800c934:	4611      	mov	r1, r2
 800c936:	461a      	mov	r2, r3
 800c938:	4603      	mov	r3, r0
 800c93a:	70fb      	strb	r3, [r7, #3]
 800c93c:	460b      	mov	r3, r1
 800c93e:	70bb      	strb	r3, [r7, #2]
 800c940:	4613      	mov	r3, r2
 800c942:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c952:	78bb      	ldrb	r3, [r7, #2]
 800c954:	883a      	ldrh	r2, [r7, #0]
 800c956:	78f9      	ldrb	r1, [r7, #3]
 800c958:	f7f7 fcd5 	bl	8004306 <HAL_PCD_EP_Open>
 800c95c:	4603      	mov	r3, r0
 800c95e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c960:	7bfb      	ldrb	r3, [r7, #15]
 800c962:	4618      	mov	r0, r3
 800c964:	f000 f91c 	bl	800cba0 <USBD_Get_USB_Status>
 800c968:	4603      	mov	r3, r0
 800c96a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c96c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	460b      	mov	r3, r1
 800c980:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c986:	2300      	movs	r3, #0
 800c988:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c990:	78fa      	ldrb	r2, [r7, #3]
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f7f7 fd20 	bl	80043da <HAL_PCD_EP_Close>
 800c99a:	4603      	mov	r3, r0
 800c99c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c99e:	7bfb      	ldrb	r3, [r7, #15]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 f8fd 	bl	800cba0 <USBD_Get_USB_Status>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9ce:	78fa      	ldrb	r2, [r7, #3]
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7f7 fdd8 	bl	8004588 <HAL_PCD_EP_SetStall>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9dc:	7bfb      	ldrb	r3, [r7, #15]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f000 f8de 	bl	800cba0 <USBD_Get_USB_Status>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b084      	sub	sp, #16
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca0c:	78fa      	ldrb	r2, [r7, #3]
 800ca0e:	4611      	mov	r1, r2
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7f7 fe1c 	bl	800464e <HAL_PCD_EP_ClrStall>
 800ca16:	4603      	mov	r3, r0
 800ca18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 f8bf 	bl	800cba0 <USBD_Get_USB_Status>
 800ca22:	4603      	mov	r3, r0
 800ca24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	da0b      	bge.n	800ca64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca4c:	78fb      	ldrb	r3, [r7, #3]
 800ca4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca52:	68f9      	ldr	r1, [r7, #12]
 800ca54:	4613      	mov	r3, r2
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	3316      	adds	r3, #22
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	e00b      	b.n	800ca7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca64:	78fb      	ldrb	r3, [r7, #3]
 800ca66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca6a:	68f9      	ldr	r1, [r7, #12]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	4413      	add	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	440b      	add	r3, r1
 800ca76:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ca7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	460b      	mov	r3, r1
 800ca92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800caa2:	78fa      	ldrb	r2, [r7, #3]
 800caa4:	4611      	mov	r1, r2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f7 fc09 	bl	80042be <HAL_PCD_SetAddress>
 800caac:	4603      	mov	r3, r0
 800caae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f000 f874 	bl	800cba0 <USBD_Get_USB_Status>
 800cab8:	4603      	mov	r3, r0
 800caba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b086      	sub	sp, #24
 800caca:	af00      	add	r7, sp, #0
 800cacc:	60f8      	str	r0, [r7, #12]
 800cace:	607a      	str	r2, [r7, #4]
 800cad0:	603b      	str	r3, [r7, #0]
 800cad2:	460b      	mov	r3, r1
 800cad4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cada:	2300      	movs	r3, #0
 800cadc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cae4:	7af9      	ldrb	r1, [r7, #11]
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	f7f7 fd13 	bl	8004514 <HAL_PCD_EP_Transmit>
 800caee:	4603      	mov	r3, r0
 800caf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caf2:	7dfb      	ldrb	r3, [r7, #23]
 800caf4:	4618      	mov	r0, r3
 800caf6:	f000 f853 	bl	800cba0 <USBD_Get_USB_Status>
 800cafa:	4603      	mov	r3, r0
 800cafc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cafe:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3718      	adds	r7, #24
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	460b      	mov	r3, r1
 800cb16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cb26:	7af9      	ldrb	r1, [r7, #11]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	f7f7 fc9f 	bl	800446e <HAL_PCD_EP_Receive>
 800cb30:	4603      	mov	r3, r0
 800cb32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb34:	7dfb      	ldrb	r3, [r7, #23]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f000 f832 	bl	800cba0 <USBD_Get_USB_Status>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb40:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3718      	adds	r7, #24
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b082      	sub	sp, #8
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	460b      	mov	r3, r1
 800cb54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb5c:	78fa      	ldrb	r2, [r7, #3]
 800cb5e:	4611      	mov	r1, r2
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7f7 fcbf 	bl	80044e4 <HAL_PCD_EP_GetRxCount>
 800cb66:	4603      	mov	r3, r0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb78:	4b03      	ldr	r3, [pc, #12]	@ (800cb88 <USBD_static_malloc+0x18>)
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	370c      	adds	r7, #12
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	200066f0 	.word	0x200066f0

0800cb8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]

}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cbae:	79fb      	ldrb	r3, [r7, #7]
 800cbb0:	2b03      	cmp	r3, #3
 800cbb2:	d817      	bhi.n	800cbe4 <USBD_Get_USB_Status+0x44>
 800cbb4:	a201      	add	r2, pc, #4	@ (adr r2, 800cbbc <USBD_Get_USB_Status+0x1c>)
 800cbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbba:	bf00      	nop
 800cbbc:	0800cbcd 	.word	0x0800cbcd
 800cbc0:	0800cbd3 	.word	0x0800cbd3
 800cbc4:	0800cbd9 	.word	0x0800cbd9
 800cbc8:	0800cbdf 	.word	0x0800cbdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd0:	e00b      	b.n	800cbea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbd2:	2303      	movs	r3, #3
 800cbd4:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd6:	e008      	b.n	800cbea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	73fb      	strb	r3, [r7, #15]
    break;
 800cbdc:	e005      	b.n	800cbea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe2:	e002      	b.n	800cbea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe8:	bf00      	nop
  }
  return usb_status;
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3714      	adds	r7, #20
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <memset>:
 800cbf8:	4402      	add	r2, r0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d100      	bne.n	800cc02 <memset+0xa>
 800cc00:	4770      	bx	lr
 800cc02:	f803 1b01 	strb.w	r1, [r3], #1
 800cc06:	e7f9      	b.n	800cbfc <memset+0x4>

0800cc08 <_reclaim_reent>:
 800cc08:	4b2d      	ldr	r3, [pc, #180]	@ (800ccc0 <_reclaim_reent+0xb8>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4283      	cmp	r3, r0
 800cc0e:	b570      	push	{r4, r5, r6, lr}
 800cc10:	4604      	mov	r4, r0
 800cc12:	d053      	beq.n	800ccbc <_reclaim_reent+0xb4>
 800cc14:	69c3      	ldr	r3, [r0, #28]
 800cc16:	b31b      	cbz	r3, 800cc60 <_reclaim_reent+0x58>
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	b163      	cbz	r3, 800cc36 <_reclaim_reent+0x2e>
 800cc1c:	2500      	movs	r5, #0
 800cc1e:	69e3      	ldr	r3, [r4, #28]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	5959      	ldr	r1, [r3, r5]
 800cc24:	b9b1      	cbnz	r1, 800cc54 <_reclaim_reent+0x4c>
 800cc26:	3504      	adds	r5, #4
 800cc28:	2d80      	cmp	r5, #128	@ 0x80
 800cc2a:	d1f8      	bne.n	800cc1e <_reclaim_reent+0x16>
 800cc2c:	69e3      	ldr	r3, [r4, #28]
 800cc2e:	4620      	mov	r0, r4
 800cc30:	68d9      	ldr	r1, [r3, #12]
 800cc32:	f000 f87b 	bl	800cd2c <_free_r>
 800cc36:	69e3      	ldr	r3, [r4, #28]
 800cc38:	6819      	ldr	r1, [r3, #0]
 800cc3a:	b111      	cbz	r1, 800cc42 <_reclaim_reent+0x3a>
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f000 f875 	bl	800cd2c <_free_r>
 800cc42:	69e3      	ldr	r3, [r4, #28]
 800cc44:	689d      	ldr	r5, [r3, #8]
 800cc46:	b15d      	cbz	r5, 800cc60 <_reclaim_reent+0x58>
 800cc48:	4629      	mov	r1, r5
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	682d      	ldr	r5, [r5, #0]
 800cc4e:	f000 f86d 	bl	800cd2c <_free_r>
 800cc52:	e7f8      	b.n	800cc46 <_reclaim_reent+0x3e>
 800cc54:	680e      	ldr	r6, [r1, #0]
 800cc56:	4620      	mov	r0, r4
 800cc58:	f000 f868 	bl	800cd2c <_free_r>
 800cc5c:	4631      	mov	r1, r6
 800cc5e:	e7e1      	b.n	800cc24 <_reclaim_reent+0x1c>
 800cc60:	6961      	ldr	r1, [r4, #20]
 800cc62:	b111      	cbz	r1, 800cc6a <_reclaim_reent+0x62>
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 f861 	bl	800cd2c <_free_r>
 800cc6a:	69e1      	ldr	r1, [r4, #28]
 800cc6c:	b111      	cbz	r1, 800cc74 <_reclaim_reent+0x6c>
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f000 f85c 	bl	800cd2c <_free_r>
 800cc74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cc76:	b111      	cbz	r1, 800cc7e <_reclaim_reent+0x76>
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 f857 	bl	800cd2c <_free_r>
 800cc7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc80:	b111      	cbz	r1, 800cc88 <_reclaim_reent+0x80>
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 f852 	bl	800cd2c <_free_r>
 800cc88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cc8a:	b111      	cbz	r1, 800cc92 <_reclaim_reent+0x8a>
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f000 f84d 	bl	800cd2c <_free_r>
 800cc92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cc94:	b111      	cbz	r1, 800cc9c <_reclaim_reent+0x94>
 800cc96:	4620      	mov	r0, r4
 800cc98:	f000 f848 	bl	800cd2c <_free_r>
 800cc9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cc9e:	b111      	cbz	r1, 800cca6 <_reclaim_reent+0x9e>
 800cca0:	4620      	mov	r0, r4
 800cca2:	f000 f843 	bl	800cd2c <_free_r>
 800cca6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cca8:	b111      	cbz	r1, 800ccb0 <_reclaim_reent+0xa8>
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 f83e 	bl	800cd2c <_free_r>
 800ccb0:	6a23      	ldr	r3, [r4, #32]
 800ccb2:	b11b      	cbz	r3, 800ccbc <_reclaim_reent+0xb4>
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccba:	4718      	bx	r3
 800ccbc:	bd70      	pop	{r4, r5, r6, pc}
 800ccbe:	bf00      	nop
 800ccc0:	20000100 	.word	0x20000100

0800ccc4 <__libc_init_array>:
 800ccc4:	b570      	push	{r4, r5, r6, lr}
 800ccc6:	4d0d      	ldr	r5, [pc, #52]	@ (800ccfc <__libc_init_array+0x38>)
 800ccc8:	4c0d      	ldr	r4, [pc, #52]	@ (800cd00 <__libc_init_array+0x3c>)
 800ccca:	1b64      	subs	r4, r4, r5
 800cccc:	10a4      	asrs	r4, r4, #2
 800ccce:	2600      	movs	r6, #0
 800ccd0:	42a6      	cmp	r6, r4
 800ccd2:	d109      	bne.n	800cce8 <__libc_init_array+0x24>
 800ccd4:	4d0b      	ldr	r5, [pc, #44]	@ (800cd04 <__libc_init_array+0x40>)
 800ccd6:	4c0c      	ldr	r4, [pc, #48]	@ (800cd08 <__libc_init_array+0x44>)
 800ccd8:	f000 f87e 	bl	800cdd8 <_init>
 800ccdc:	1b64      	subs	r4, r4, r5
 800ccde:	10a4      	asrs	r4, r4, #2
 800cce0:	2600      	movs	r6, #0
 800cce2:	42a6      	cmp	r6, r4
 800cce4:	d105      	bne.n	800ccf2 <__libc_init_array+0x2e>
 800cce6:	bd70      	pop	{r4, r5, r6, pc}
 800cce8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccec:	4798      	blx	r3
 800ccee:	3601      	adds	r6, #1
 800ccf0:	e7ee      	b.n	800ccd0 <__libc_init_array+0xc>
 800ccf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccf6:	4798      	blx	r3
 800ccf8:	3601      	adds	r6, #1
 800ccfa:	e7f2      	b.n	800cce2 <__libc_init_array+0x1e>
 800ccfc:	0800d018 	.word	0x0800d018
 800cd00:	0800d018 	.word	0x0800d018
 800cd04:	0800d018 	.word	0x0800d018
 800cd08:	0800d01c 	.word	0x0800d01c

0800cd0c <__retarget_lock_acquire_recursive>:
 800cd0c:	4770      	bx	lr

0800cd0e <__retarget_lock_release_recursive>:
 800cd0e:	4770      	bx	lr

0800cd10 <memcpy>:
 800cd10:	440a      	add	r2, r1
 800cd12:	4291      	cmp	r1, r2
 800cd14:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd18:	d100      	bne.n	800cd1c <memcpy+0xc>
 800cd1a:	4770      	bx	lr
 800cd1c:	b510      	push	{r4, lr}
 800cd1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd26:	4291      	cmp	r1, r2
 800cd28:	d1f9      	bne.n	800cd1e <memcpy+0xe>
 800cd2a:	bd10      	pop	{r4, pc}

0800cd2c <_free_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4605      	mov	r5, r0
 800cd30:	2900      	cmp	r1, #0
 800cd32:	d041      	beq.n	800cdb8 <_free_r+0x8c>
 800cd34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd38:	1f0c      	subs	r4, r1, #4
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	bfb8      	it	lt
 800cd3e:	18e4      	addlt	r4, r4, r3
 800cd40:	f000 f83e 	bl	800cdc0 <__malloc_lock>
 800cd44:	4a1d      	ldr	r2, [pc, #116]	@ (800cdbc <_free_r+0x90>)
 800cd46:	6813      	ldr	r3, [r2, #0]
 800cd48:	b933      	cbnz	r3, 800cd58 <_free_r+0x2c>
 800cd4a:	6063      	str	r3, [r4, #4]
 800cd4c:	6014      	str	r4, [r2, #0]
 800cd4e:	4628      	mov	r0, r5
 800cd50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd54:	f000 b83a 	b.w	800cdcc <__malloc_unlock>
 800cd58:	42a3      	cmp	r3, r4
 800cd5a:	d908      	bls.n	800cd6e <_free_r+0x42>
 800cd5c:	6820      	ldr	r0, [r4, #0]
 800cd5e:	1821      	adds	r1, r4, r0
 800cd60:	428b      	cmp	r3, r1
 800cd62:	bf01      	itttt	eq
 800cd64:	6819      	ldreq	r1, [r3, #0]
 800cd66:	685b      	ldreq	r3, [r3, #4]
 800cd68:	1809      	addeq	r1, r1, r0
 800cd6a:	6021      	streq	r1, [r4, #0]
 800cd6c:	e7ed      	b.n	800cd4a <_free_r+0x1e>
 800cd6e:	461a      	mov	r2, r3
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	b10b      	cbz	r3, 800cd78 <_free_r+0x4c>
 800cd74:	42a3      	cmp	r3, r4
 800cd76:	d9fa      	bls.n	800cd6e <_free_r+0x42>
 800cd78:	6811      	ldr	r1, [r2, #0]
 800cd7a:	1850      	adds	r0, r2, r1
 800cd7c:	42a0      	cmp	r0, r4
 800cd7e:	d10b      	bne.n	800cd98 <_free_r+0x6c>
 800cd80:	6820      	ldr	r0, [r4, #0]
 800cd82:	4401      	add	r1, r0
 800cd84:	1850      	adds	r0, r2, r1
 800cd86:	4283      	cmp	r3, r0
 800cd88:	6011      	str	r1, [r2, #0]
 800cd8a:	d1e0      	bne.n	800cd4e <_free_r+0x22>
 800cd8c:	6818      	ldr	r0, [r3, #0]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	6053      	str	r3, [r2, #4]
 800cd92:	4408      	add	r0, r1
 800cd94:	6010      	str	r0, [r2, #0]
 800cd96:	e7da      	b.n	800cd4e <_free_r+0x22>
 800cd98:	d902      	bls.n	800cda0 <_free_r+0x74>
 800cd9a:	230c      	movs	r3, #12
 800cd9c:	602b      	str	r3, [r5, #0]
 800cd9e:	e7d6      	b.n	800cd4e <_free_r+0x22>
 800cda0:	6820      	ldr	r0, [r4, #0]
 800cda2:	1821      	adds	r1, r4, r0
 800cda4:	428b      	cmp	r3, r1
 800cda6:	bf04      	itt	eq
 800cda8:	6819      	ldreq	r1, [r3, #0]
 800cdaa:	685b      	ldreq	r3, [r3, #4]
 800cdac:	6063      	str	r3, [r4, #4]
 800cdae:	bf04      	itt	eq
 800cdb0:	1809      	addeq	r1, r1, r0
 800cdb2:	6021      	streq	r1, [r4, #0]
 800cdb4:	6054      	str	r4, [r2, #4]
 800cdb6:	e7ca      	b.n	800cd4e <_free_r+0x22>
 800cdb8:	bd38      	pop	{r3, r4, r5, pc}
 800cdba:	bf00      	nop
 800cdbc:	20006a4c 	.word	0x20006a4c

0800cdc0 <__malloc_lock>:
 800cdc0:	4801      	ldr	r0, [pc, #4]	@ (800cdc8 <__malloc_lock+0x8>)
 800cdc2:	f7ff bfa3 	b.w	800cd0c <__retarget_lock_acquire_recursive>
 800cdc6:	bf00      	nop
 800cdc8:	20006a48 	.word	0x20006a48

0800cdcc <__malloc_unlock>:
 800cdcc:	4801      	ldr	r0, [pc, #4]	@ (800cdd4 <__malloc_unlock+0x8>)
 800cdce:	f7ff bf9e 	b.w	800cd0e <__retarget_lock_release_recursive>
 800cdd2:	bf00      	nop
 800cdd4:	20006a48 	.word	0x20006a48

0800cdd8 <_init>:
 800cdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdda:	bf00      	nop
 800cddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdde:	bc08      	pop	{r3}
 800cde0:	469e      	mov	lr, r3
 800cde2:	4770      	bx	lr

0800cde4 <_fini>:
 800cde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde6:	bf00      	nop
 800cde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdea:	bc08      	pop	{r3}
 800cdec:	469e      	mov	lr, r3
 800cdee:	4770      	bx	lr
