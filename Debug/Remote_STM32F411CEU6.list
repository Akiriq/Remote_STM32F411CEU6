
Remote_STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd50  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800cef0  0800cef0  0000def0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d110  0800d110  0000f150  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d110  0800d110  0000e110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d118  0800d118  0000f150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d118  0800d118  0000e118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d11c  0800d11c  0000e11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800d120  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006900  20000150  0800d270  0000f150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006a50  0800d270  0000fa50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f3c  00000000  00000000  0000f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ae9  00000000  00000000  000360bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c0  00000000  00000000  0003bba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a0b  00000000  00000000  0003dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000077c9  00000000  00000000  0003f773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000283d8  00000000  00000000  00046f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac050  00000000  00000000  0006f314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000918c  00000000  00000000  0011b3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00124534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ced8 	.word	0x0800ced8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800ced8 	.word	0x0800ced8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 fc74 	bl	8001dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f848 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f9ca 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 f9a8 	bl	8000870 <MX_DMA_Init>
  MX_SPI1_Init();
 8000520:	f000 f970 	bl	8000804 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000524:	f000 f940 	bl	80007a8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000528:	f000 f8a6 	bl	8000678 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052c:	f009 f922 	bl	8009774 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000530:	4a11      	ldr	r2, [pc, #68]	@ (8000578 <main+0x6c>)
 8000532:	2100      	movs	r1, #0
 8000534:	4811      	ldr	r0, [pc, #68]	@ (800057c <main+0x70>)
 8000536:	f009 f967 	bl	8009808 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a10      	ldr	r2, [pc, #64]	@ (8000580 <main+0x74>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of send_usb_data */
  send_usb_dataHandle = osThreadNew(send_usb_data_func, NULL, &send_usb_data_attributes);
 8000540:	4a10      	ldr	r2, [pc, #64]	@ (8000584 <main+0x78>)
 8000542:	2100      	movs	r1, #0
 8000544:	4810      	ldr	r0, [pc, #64]	@ (8000588 <main+0x7c>)
 8000546:	f009 f95f 	bl	8009808 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0f      	ldr	r2, [pc, #60]	@ (800058c <main+0x80>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of read_nrf */
  read_nrfHandle = osThreadNew(read_nrf_func, NULL, &read_nrf_attributes);
 8000550:	4a0f      	ldr	r2, [pc, #60]	@ (8000590 <main+0x84>)
 8000552:	2100      	movs	r1, #0
 8000554:	480f      	ldr	r0, [pc, #60]	@ (8000594 <main+0x88>)
 8000556:	f009 f957 	bl	8009808 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <main+0x8c>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of send_nrf */
  send_nrfHandle = osThreadNew(send_nrf_func, NULL, &send_nrf_attributes);
 8000560:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <main+0x90>)
 8000562:	2100      	movs	r1, #0
 8000564:	480e      	ldr	r0, [pc, #56]	@ (80005a0 <main+0x94>)
 8000566:	f009 f94f 	bl	8009808 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0d      	ldr	r2, [pc, #52]	@ (80005a4 <main+0x98>)
 800056e:	6013      	str	r3, [r2, #0]

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000570:	f009 f924 	bl	80097bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <main+0x68>
 8000578:	0800d048 	.word	0x0800d048
 800057c:	08000a1d 	.word	0x08000a1d
 8000580:	200002c0 	.word	0x200002c0
 8000584:	0800d06c 	.word	0x0800d06c
 8000588:	08000a49 	.word	0x08000a49
 800058c:	200002c4 	.word	0x200002c4
 8000590:	0800d090 	.word	0x0800d090
 8000594:	08000a59 	.word	0x08000a59
 8000598:	200002c8 	.word	0x200002c8
 800059c:	0800d0b4 	.word	0x0800d0b4
 80005a0:	08000a69 	.word	0x08000a69
 80005a4:	200002cc 	.word	0x200002cc

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	@ 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f00c fb9e 	bl	800ccf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <SystemClock_Config+0xc8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a26      	ldr	r2, [pc, #152]	@ (8000670 <SystemClock_Config+0xc8>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <SystemClock_Config+0xc8>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <SystemClock_Config+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <SystemClock_Config+0xcc>)
 80005f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <SystemClock_Config+0xcc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800060c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000618:	2319      	movs	r3, #25
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800061c:	23c0      	movs	r3, #192	@ 0xc0
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f004 fb2d 	bl	8004c8c <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 fa2d 	bl	8000a96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2103      	movs	r1, #3
 8000658:	4618      	mov	r0, r3
 800065a:	f004 fd8f 	bl	800517c <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000664:	f000 fa17 	bl	8000a96 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	@ 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068a:	4b44      	ldr	r3, [pc, #272]	@ (800079c <MX_ADC1_Init+0x124>)
 800068c:	4a44      	ldr	r2, [pc, #272]	@ (80007a0 <MX_ADC1_Init+0x128>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000690:	4b42      	ldr	r3, [pc, #264]	@ (800079c <MX_ADC1_Init+0x124>)
 8000692:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000696:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000698:	4b40      	ldr	r3, [pc, #256]	@ (800079c <MX_ADC1_Init+0x124>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800069e:	4b3f      	ldr	r3, [pc, #252]	@ (800079c <MX_ADC1_Init+0x124>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a4:	4b3d      	ldr	r3, [pc, #244]	@ (800079c <MX_ADC1_Init+0x124>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006aa:	4b3c      	ldr	r3, [pc, #240]	@ (800079c <MX_ADC1_Init+0x124>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <MX_ADC1_Init+0x124>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b8:	4b38      	ldr	r3, [pc, #224]	@ (800079c <MX_ADC1_Init+0x124>)
 80006ba:	4a3a      	ldr	r2, [pc, #232]	@ (80007a4 <MX_ADC1_Init+0x12c>)
 80006bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006be:	4b37      	ldr	r3, [pc, #220]	@ (800079c <MX_ADC1_Init+0x124>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80006c4:	4b35      	ldr	r3, [pc, #212]	@ (800079c <MX_ADC1_Init+0x124>)
 80006c6:	2206      	movs	r2, #6
 80006c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ca:	4b34      	ldr	r3, [pc, #208]	@ (800079c <MX_ADC1_Init+0x124>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b32      	ldr	r3, [pc, #200]	@ (800079c <MX_ADC1_Init+0x124>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d8:	4830      	ldr	r0, [pc, #192]	@ (800079c <MX_ADC1_Init+0x124>)
 80006da:	f001 fbf5 	bl	8001ec8 <HAL_ADC_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006e4:	f000 f9d7 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006f0:	2307      	movs	r3, #7
 80006f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4828      	ldr	r0, [pc, #160]	@ (800079c <MX_ADC1_Init+0x124>)
 80006fa:	f001 fe55 	bl	80023a8 <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000704:	f000 f9c7 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000708:	2302      	movs	r3, #2
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4821      	ldr	r0, [pc, #132]	@ (800079c <MX_ADC1_Init+0x124>)
 8000716:	f001 fe47 	bl	80023a8 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000720:	f000 f9b9 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000724:	2303      	movs	r3, #3
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000728:	2303      	movs	r3, #3
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	481a      	ldr	r0, [pc, #104]	@ (800079c <MX_ADC1_Init+0x124>)
 8000732:	f001 fe39 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800073c:	f000 f9ab 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000740:	2304      	movs	r3, #4
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4813      	ldr	r0, [pc, #76]	@ (800079c <MX_ADC1_Init+0x124>)
 800074e:	f001 fe2b 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000758:	f000 f99d 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800075c:	2305      	movs	r3, #5
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000760:	2305      	movs	r3, #5
 8000762:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <MX_ADC1_Init+0x124>)
 800076a:	f001 fe1d 	bl	80023a8 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000774:	f000 f98f 	bl	8000a96 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000778:	2306      	movs	r3, #6
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800077c:	2306      	movs	r3, #6
 800077e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_ADC1_Init+0x124>)
 8000786:	f001 fe0f 	bl	80023a8 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000790:	f000 f981 	bl	8000a96 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000016c 	.word	0x2000016c
 80007a0:	40012000 	.word	0x40012000
 80007a4:	0f000001 	.word	0x0f000001

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f002 febb 	bl	8003560 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f951 	bl	8000a96 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000214 	.word	0x20000214
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2220      	movs	r2, #32
 800083a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f004 fe8f 	bl	8005578 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f919 	bl	8000a96 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000268 	.word	0x20000268
 800086c:	40013000 	.word	0x40013000

08000870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_DMA_Init+0x3c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <MX_DMA_Init+0x3c>)
 8000880:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_DMA_Init+0x3c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2105      	movs	r1, #5
 8000896:	2038      	movs	r0, #56	@ 0x38
 8000898:	f002 f8f8 	bl	8002a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800089c:	2038      	movs	r0, #56	@ 0x38
 800089e:	f002 f911 	bl	8002ac4 <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b50      	ldr	r3, [pc, #320]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a4f      	ldr	r2, [pc, #316]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b4d      	ldr	r3, [pc, #308]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b49      	ldr	r3, [pc, #292]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a48      	ldr	r2, [pc, #288]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b46      	ldr	r3, [pc, #280]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b42      	ldr	r3, [pc, #264]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a41      	ldr	r2, [pc, #260]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a3a      	ldr	r2, [pc, #232]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <MX_GPIO_Init+0x15c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093c:	4834      	ldr	r0, [pc, #208]	@ (8000a10 <MX_GPIO_Init+0x160>)
 800093e:	f002 fddb 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000948:	4832      	ldr	r0, [pc, #200]	@ (8000a14 <MX_GPIO_Init+0x164>)
 800094a:	f002 fdd5 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000954:	4830      	ldr	r0, [pc, #192]	@ (8000a18 <MX_GPIO_Init+0x168>)
 8000956:	f002 fdcf 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800095a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000960:	2311      	movs	r3, #17
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4827      	ldr	r0, [pc, #156]	@ (8000a10 <MX_GPIO_Init+0x160>)
 8000974:	f002 fc24 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_Pin BP_G_Pin DSW_0_Pin */
  GPIO_InitStruct.Pin = BP_Pin|BP_G_Pin|DSW_0_Pin;
 8000978:	f240 1381 	movw	r3, #385	@ 0x181
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4822      	ldr	r0, [pc, #136]	@ (8000a18 <MX_GPIO_Init+0x168>)
 800098e:	f002 fc17 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_M_Pin BP_D_Pin BP_SEL_Pin BP_JOY_Pin
                           DSW_3_Pin DSW_2_Pin DSW_1_Pin */
  GPIO_InitStruct.Pin = BP_M_Pin|BP_D_Pin|BP_SEL_Pin|BP_JOY_Pin
 8000992:	f24f 0307 	movw	r3, #61447	@ 0xf007
 8000996:	617b      	str	r3, [r7, #20]
                          |DSW_3_Pin|DSW_2_Pin|DSW_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099c:	2301      	movs	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	481b      	ldr	r0, [pc, #108]	@ (8000a14 <MX_GPIO_Init+0x164>)
 80009a8:	f002 fc0a 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|NRF_CE_Pin;
 80009ac:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <MX_GPIO_Init+0x164>)
 80009c6:	f002 fbfb 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 80009ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <MX_GPIO_Init+0x168>)
 80009e4:	f002 fbec 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80009e8:	2380      	movs	r3, #128	@ 0x80
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_GPIO_Init+0x164>)
 80009fe:	f002 fbdf 	bl	80031c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	@ 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020800 	.word	0x40020800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40020000 	.word	0x40020000

08000a1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a24:	f00b fc58 	bl	800c2d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)readvalue, 6);
 8000a28:	2206      	movs	r2, #6
 8000a2a:	4905      	ldr	r1, [pc, #20]	@ (8000a40 <StartDefaultTask+0x24>)
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <StartDefaultTask+0x28>)
 8000a2e:	f001 fb9f 	bl	8002170 <HAL_ADC_Start_DMA>
  runRadio();
 8000a32:	f000 fef5 	bl	8001820 <runRadio>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f008 ff78 	bl	800992c <osDelay>
 8000a3c:	e7fb      	b.n	8000a36 <StartDefaultTask+0x1a>
 8000a3e:	bf00      	nop
 8000a40:	200002dc 	.word	0x200002dc
 8000a44:	2000016c 	.word	0x2000016c

08000a48 <send_usb_data_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_usb_data_func */
void send_usb_data_func(void *argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_usb_data_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f008 ff6b 	bl	800992c <osDelay>
 8000a56:	e7fb      	b.n	8000a50 <send_usb_data_func+0x8>

08000a58 <read_nrf_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_nrf_func */
void read_nrf_func(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_nrf_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f008 ff63 	bl	800992c <osDelay>
 8000a66:	e7fb      	b.n	8000a60 <read_nrf_func+0x8>

08000a68 <send_nrf_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_nrf_func */
void send_nrf_func(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_nrf_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f008 ff5b 	bl	800992c <osDelay>
 8000a76:	e7fb      	b.n	8000a70 <send_nrf_func+0x8>

08000a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a88:	d101      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a8a:	f001 f9d9 	bl	8001e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9a:	b672      	cpsid	i
}
 8000a9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9e:	bf00      	nop
 8000aa0:	e7fd      	b.n	8000a9e <Error_Handler+0x8>
	...

08000aa4 <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aae:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <nRF24_CSN_L+0x14>)
 8000ab0:	f002 fd22 	bl	80034f8 <HAL_GPIO_WritePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40020000 	.word	0x40020000

08000abc <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ac6:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <nRF24_CSN_H+0x14>)
 8000ac8:	f002 fd16 	bl	80034f8 <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 8000ade:	f107 020f 	add.w	r2, r7, #15
 8000ae2:	1df9      	adds	r1, r7, #7
 8000ae4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2301      	movs	r3, #1
 8000aec:	4806      	ldr	r0, [pc, #24]	@ (8000b08 <nRF24_LL_RW+0x34>)
 8000aee:	f004 fdcc 	bl	800568a <HAL_SPI_TransmitReceive>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <nRF24_LL_RW+0x28>
        Error_Handler();
 8000af8:	f7ff ffcd 	bl	8000a96 <Error_Handler>
    };
    return result;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000268 	.word	0x20000268

08000b0c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000b16:	f7ff ffc5 	bl	8000aa4 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 031f 	and.w	r3, r3, #31
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffd6 	bl	8000ad4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000b28:	20ff      	movs	r0, #255	@ 0xff
 8000b2a:	f7ff ffd3 	bl	8000ad4 <nRF24_LL_RW>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000b32:	f7ff ffc3 	bl	8000abc <nRF24_CSN_H>

	return value;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	460a      	mov	r2, r1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000b50:	f7ff ffa8 	bl	8000aa4 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b1f      	cmp	r3, #31
 8000b58:	d810      	bhi.n	8000b7c <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	f003 031f 	and.w	r3, r3, #31
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ffb1 	bl	8000ad4 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000b72:	79bb      	ldrb	r3, [r7, #6]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffad 	bl	8000ad4 <nRF24_LL_RW>
 8000b7a:	e013      	b.n	8000ba4 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffa8 	bl	8000ad4 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2be1      	cmp	r3, #225	@ 0xe1
 8000b88:	d00c      	beq.n	8000ba4 <nRF24_WriteReg+0x64>
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2be2      	cmp	r3, #226	@ 0xe2
 8000b8e:	d009      	beq.n	8000ba4 <nRF24_WriteReg+0x64>
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2be3      	cmp	r3, #227	@ 0xe3
 8000b94:	d006      	beq.n	8000ba4 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2bff      	cmp	r3, #255	@ 0xff
 8000b9a:	d003      	beq.n	8000ba4 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff98 	bl	8000ad4 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000ba4:	f7ff ff8a 	bl	8000abc <nRF24_CSN_H>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000bc0:	f7ff ff70 	bl	8000aa4 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff84 	bl	8000ad4 <nRF24_LL_RW>
	while (count--) {
 8000bcc:	e007      	b.n	8000bde <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000bce:	683c      	ldr	r4, [r7, #0]
 8000bd0:	1c63      	adds	r3, r4, #1
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	20ff      	movs	r0, #255	@ 0xff
 8000bd6:	f7ff ff7d 	bl	8000ad4 <nRF24_LL_RW>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000bde:	79bb      	ldrb	r3, [r7, #6]
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	71ba      	strb	r2, [r7, #6]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f2      	bne.n	8000bce <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000be8:	f7ff ff68 	bl	8000abc <nRF24_CSN_H>
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	4613      	mov	r3, r2
 8000c02:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000c04:	f7ff ff4e 	bl	8000aa4 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff62 	bl	8000ad4 <nRF24_LL_RW>
	while (count--) {
 8000c10:	e006      	b.n	8000c20 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	603a      	str	r2, [r7, #0]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff5a 	bl	8000ad4 <nRF24_LL_RW>
	while (count--) {
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	71ba      	strb	r2, [r7, #6]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f3      	bne.n	8000c12 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000c2a:	f7ff ff47 	bl	8000abc <nRF24_CSN_H>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ff7f 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000c42:	213f      	movs	r1, #63	@ 0x3f
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ff7b 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f7ff ff77 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000c52:	2103      	movs	r1, #3
 8000c54:	2003      	movs	r0, #3
 8000c56:	f7ff ff73 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000c5a:	2103      	movs	r1, #3
 8000c5c:	2004      	movs	r0, #4
 8000c5e:	f7ff ff6f 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8000c62:	2102      	movs	r1, #2
 8000c64:	2005      	movs	r0, #5
 8000c66:	f7ff ff6b 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000c6a:	210e      	movs	r1, #14
 8000c6c:	2006      	movs	r0, #6
 8000c6e:	f7ff ff67 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8000c72:	2100      	movs	r1, #0
 8000c74:	2007      	movs	r0, #7
 8000c76:	f7ff ff63 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2011      	movs	r0, #17
 8000c7e:	f7ff ff5f 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000c82:	2100      	movs	r1, #0
 8000c84:	2012      	movs	r0, #18
 8000c86:	f7ff ff5b 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2013      	movs	r0, #19
 8000c8e:	f7ff ff57 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000c92:	2100      	movs	r1, #0
 8000c94:	2014      	movs	r0, #20
 8000c96:	f7ff ff53 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2015      	movs	r0, #21
 8000c9e:	f7ff ff4f 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2016      	movs	r0, #22
 8000ca6:	f7ff ff4b 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8000caa:	2100      	movs	r1, #0
 8000cac:	201c      	movs	r0, #28
 8000cae:	f7ff ff47 	bl	8000b40 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	201d      	movs	r0, #29
 8000cb6:	f7ff ff43 	bl	8000b40 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8000cba:	f000 f9cd 	bl	8001058 <nRF24_FlushRX>
	nRF24_FlushTX();
 8000cbe:	f000 f9c3 	bl	8001048 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8000cc2:	f000 f9d1 	bl	8001068 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000cc6:	f7ff fef9 	bl	8000abc <nRF24_CSN_H>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <nRF24_Check+0x58>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000cda:	2205      	movs	r2, #5
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	2030      	movs	r0, #48	@ 0x30
 8000ce0:	f7ff ff88 	bl	8000bf4 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2010      	movs	r0, #16
 8000cec:	f7ff ff60 	bl	8000bb0 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73fb      	strb	r3, [r7, #15]
 8000cf4:	e00f      	b.n	8000d16 <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3310      	adds	r3, #16
 8000cfa:	443b      	add	r3, r7
 8000cfc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c59      	adds	r1, r3, #1
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d001      	beq.n	8000d10 <nRF24_Check+0x40>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e006      	b.n	8000d1e <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	3301      	adds	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d9ec      	bls.n	8000cf6 <nRF24_Check+0x26>
	}

	return 1;
 8000d1c:	2301      	movs	r3, #1
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	0800cf24 	.word	0x0800cf24

08000d2c <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fee8 	bl	8000b0c <nRF24_ReadReg>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d104      	bne.n	8000d50 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e003      	b.n	8000d58 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	f023 0302 	bic.w	r3, r3, #2
 8000d56:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff feef 	bl	8000b40 <nRF24_WriteReg>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fec9 	bl	8000b0c <nRF24_ReadReg>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fece 	bl	8000b40 <nRF24_WriteReg>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fea8 	bl	8000b0c <nRF24_ReadReg>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	f023 030c 	bic.w	r3, r3, #12
 8000dc6:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	b25a      	sxtb	r2, r3
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	4619      	mov	r1, r3
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff fead 	bl	8000b40 <nRF24_WriteReg>
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f7ff fe9f 	bl	8000b40 <nRF24_WriteReg>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	3b02      	subs	r3, #2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f7ff fe8f 	bl	8000b40 <nRF24_WriteReg>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d00a      	beq.n	8000e54 <nRF24_SetAddr+0x28>
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	dc36      	bgt.n	8000eb0 <nRF24_SetAddr+0x84>
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	dc02      	bgt.n	8000e4c <nRF24_SetAddr+0x20>
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	da04      	bge.n	8000e54 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8000e4a:	e031      	b.n	8000eb0 <nRF24_SetAddr+0x84>
 8000e4c:	3b02      	subs	r3, #2
	switch (pipe) {
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d82e      	bhi.n	8000eb0 <nRF24_SetAddr+0x84>
 8000e52:	e023      	b.n	8000e9c <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000e54:	2003      	movs	r0, #3
 8000e56:	f7ff fe59 	bl	8000b0c <nRF24_ReadReg>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8000e68:	f7ff fe1c 	bl	8000aa4 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a13      	ldr	r2, [pc, #76]	@ (8000ebc <nRF24_SetAddr+0x90>)
 8000e70:	5cd3      	ldrb	r3, [r2, r3]
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe2b 	bl	8000ad4 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	1e5a      	subs	r2, r3, #1
 8000e82:	603a      	str	r2, [r7, #0]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fe24 	bl	8000ad4 <nRF24_LL_RW>
			} while (addr_width--);
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	73fa      	strb	r2, [r7, #15]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f3      	bne.n	8000e7e <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8000e96:	f7ff fe11 	bl	8000abc <nRF24_CSN_H>
			break;
 8000e9a:	e00a      	b.n	8000eb2 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <nRF24_SetAddr+0x90>)
 8000ea0:	5cd2      	ldrb	r2, [r2, r3]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	f7ff fe49 	bl	8000b40 <nRF24_WriteReg>
			break;
 8000eae:	e000      	b.n	8000eb2 <nRF24_SetAddr+0x86>
			break;
 8000eb0:	bf00      	nop
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	0800d0e0 	.word	0x0800d0e0

08000ec0 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000eca:	2006      	movs	r0, #6
 8000ecc:	f7ff fe1e 	bl	8000b0c <nRF24_ReadReg>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	f023 0306 	bic.w	r3, r3, #6
 8000eda:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	2006      	movs	r0, #6
 8000eea:	f7ff fe29 	bl	8000b40 <nRF24_WriteReg>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000f00:	2006      	movs	r0, #6
 8000f02:	f7ff fe03 	bl	8000b0c <nRF24_ReadReg>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000f10:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f7ff fe0e 	bl	8000b40 <nRF24_WriteReg>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	460b      	mov	r3, r1
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f7ff fde4 	bl	8000b0c <nRF24_ReadReg>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f5c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	4619      	mov	r1, r3
 8000f62:	2002      	movs	r0, #2
 8000f64:	f7ff fdec 	bl	8000b40 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a19      	ldr	r2, [pc, #100]	@ (8000fd0 <nRF24_SetRXPipe+0xa4>)
 8000f6c:	5cd2      	ldrb	r2, [r2, r3]
 8000f6e:	797b      	ldrb	r3, [r7, #5]
 8000f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	4610      	mov	r0, r2
 8000f7a:	f7ff fde1 	bl	8000b40 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff fdc4 	bl	8000b0c <nRF24_ReadReg>
 8000f84:	4603      	mov	r3, r0
 8000f86:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d10a      	bne.n	8000fa4 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2201      	movs	r2, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	b25a      	sxtb	r2, r3
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e00b      	b.n	8000fbc <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff fdbd 	bl	8000b40 <nRF24_WriteReg>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	0800d0d8 	.word	0x0800d0d8

08000fd4 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d904      	bls.n	8000fee <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff fdaa 	bl	8000b40 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8000fec:	e015      	b.n	800101a <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff fd8c 	bl	8000b0c <nRF24_ReadReg>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	b25b      	sxtb	r3, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	b25a      	sxtb	r2, r3
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4013      	ands	r3, r2
 800100c:	b25b      	sxtb	r3, r3
 800100e:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	4619      	mov	r1, r3
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff fd93 	bl	8000b40 <nRF24_WriteReg>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8001026:	2007      	movs	r0, #7
 8001028:	f7ff fd70 	bl	8000b0c <nRF24_ReadReg>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}

08001032 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8001036:	2017      	movs	r0, #23
 8001038:	f7ff fd68 	bl	8000b0c <nRF24_ReadReg>
 800103c:	4603      	mov	r3, r0
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}

08001048 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800104c:	21ff      	movs	r1, #255	@ 0xff
 800104e:	20e1      	movs	r0, #225	@ 0xe1
 8001050:	f7ff fd76 	bl	8000b40 <nRF24_WriteReg>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800105c:	21ff      	movs	r1, #255	@ 0xff
 800105e:	20e2      	movs	r0, #226	@ 0xe2
 8001060:	f7ff fd6e 	bl	8000b40 <nRF24_WriteReg>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800106e:	2007      	movs	r0, #7
 8001070:	f7ff fd4c 	bl	8000b0c <nRF24_ReadReg>
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800107e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4619      	mov	r1, r3
 8001084:	2007      	movs	r0, #7
 8001086:	f7ff fd5b 	bl	8000b40 <nRF24_WriteReg>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	461a      	mov	r2, r3
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	20a0      	movs	r0, #160	@ 0xa0
 80010a6:	f7ff fda5 	bl	8000bf4 <nRF24_WriteMBReg>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 80010b8:	f7ff fcf4 	bl	8000aa4 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 80010bc:	2060      	movs	r0, #96	@ 0x60
 80010be:	f7ff fd09 	bl	8000ad4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80010c2:	20ff      	movs	r0, #255	@ 0xff
 80010c4:	f7ff fd06 	bl	8000ad4 <nRF24_LL_RW>
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 80010cc:	f7ff fcf6 	bl	8000abc <nRF24_CSN_H>

	return value;
 80010d0:	79fb      	ldrb	r3, [r7, #7]

}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80010ea:	2007      	movs	r0, #7
 80010ec:	f7ff fd0e 	bl	8000b0c <nRF24_ReadReg>
 80010f0:	4603      	mov	r3, r0
 80010f2:	105b      	asrs	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b05      	cmp	r3, #5
 8001100:	d829      	bhi.n	8001156 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00f      	beq.n	8001128 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8001108:	f7ff ffd3 	bl	80010b2 <nRF24_GetRxDplPayloadWidth>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b20      	cmp	r3, #32
 800111a:	d90f      	bls.n	800113c <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8001122:	f7ff ff99 	bl	8001058 <nRF24_FlushRX>
 8001126:	e009      	b.n	800113c <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <nRF24_ReadPayloadGeneric+0x8c>)
 800112c:	5cd3      	ldrb	r3, [r2, r3]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fcec 	bl	8000b0c <nRF24_ReadReg>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	68f9      	ldr	r1, [r7, #12]
 800114c:	2061      	movs	r0, #97	@ 0x61
 800114e:	f7ff fd2f 	bl	8000bb0 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	e003      	b.n	800115e <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800115c:	23ff      	movs	r3, #255	@ 0xff
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	0800d0d8 	.word	0x0800d0d8

0800116c <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 8001176:	2200      	movs	r2, #0
 8001178:	6839      	ldr	r1, [r7, #0]
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffae 	bl	80010dc <nRF24_ReadPayloadGeneric>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2140      	movs	r1, #64	@ 0x40
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <nRF24_CE_L+0x14>)
 8001196:	f002 f9af 	bl	80034f8 <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40020400 	.word	0x40020400

080011a4 <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2140      	movs	r1, #64	@ 0x40
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <nRF24_CE_H+0x14>)
 80011ae:	f002 f9a3 	bl	80034f8 <HAL_GPIO_WritePin>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020400 	.word	0x40020400

080011bc <UART_SendChar>:
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);



void UART_SendChar(char b)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    //HAL_UART_Transmit(&huart2, (uint8_t *) &b, 1, 200);
    CDC_Transmit_FS((uint8_t *) &b, 1);
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00b f942 	bl	800c454 <CDC_Transmit_FS>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <UART_SendStr>:

void UART_SendStr(char *string)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t *) string, (uint16_t) strlen(string), 200);

	CDC_Transmit_FS((uint8_t *) string,sizeof(string));
 80011e0:	2104      	movs	r1, #4
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f00b f936 	bl	800c454 <CDC_Transmit_FS>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <Toggle_LED>:

void Toggle_LED()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80011f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <Toggle_LED+0x14>)
 80011fa:	f002 f996 	bl	800352a <HAL_GPIO_TogglePin>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020800 	.word	0x40020800

08001208 <UART_SendBufHex>:

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	81fb      	strh	r3, [r7, #14]
 8001218:	e018      	b.n	800124c <UART_SendBufHex+0x44>
        ch = *buf++;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	737b      	strb	r3, [r7, #13]
        UART_SendChar(HEX_CHARS[(ch >> 4) % 0x10]);
 8001224:	7b7b      	ldrb	r3, [r7, #13]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <UART_SendBufHex+0x58>)
 800122e:	5c9b      	ldrb	r3, [r3, r2]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ffc3 	bl	80011bc <UART_SendChar>
        UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8001236:	7b7b      	ldrb	r3, [r7, #13]
 8001238:	f003 030f 	and.w	r3, r3, #15
 800123c:	4a08      	ldr	r2, [pc, #32]	@ (8001260 <UART_SendBufHex+0x58>)
 800123e:	5cd3      	ldrb	r3, [r2, r3]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ffbb 	bl	80011bc <UART_SendChar>
    for (i = 0; i < bufsize; i++) {
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	3301      	adds	r3, #1
 800124a:	81fb      	strh	r3, [r7, #14]
 800124c:	89fa      	ldrh	r2, [r7, #14]
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	429a      	cmp	r2, r3
 8001252:	d3e2      	bcc.n	800121a <UART_SendBufHex+0x12>
    }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	0800cf2c 	.word	0x0800cf2c

08001264 <UART_SendHex8>:

void UART_SendHex8(uint16_t num) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
    UART_SendChar(HEX_CHARS[(num >> 4) % 0x10]);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	b29b      	uxth	r3, r3
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	4a08      	ldr	r2, [pc, #32]	@ (800129c <UART_SendHex8+0x38>)
 800127a:	5cd3      	ldrb	r3, [r2, r3]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff9d 	bl	80011bc <UART_SendChar>
    UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <UART_SendHex8+0x38>)
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff95 	bl	80011bc <UART_SendChar>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	0800cf2c 	.word	0x0800cf2c

080012a0 <UART_SendInt>:

void UART_SendInt(int32_t num) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da05      	bge.n	80012be <UART_SendInt+0x1e>
        UART_SendChar('-');
 80012b2:	202d      	movs	r0, #45	@ 0x2d
 80012b4:	f7ff ff82 	bl	80011bc <UART_SendChar>
        num *= -1;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	425b      	negs	r3, r3
 80012bc:	607b      	str	r3, [r7, #4]
    }
    do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <UART_SendInt+0x90>)
 80012c2:	fb83 1302 	smull	r1, r3, r3, r2
 80012c6:	1099      	asrs	r1, r3, #2
 80012c8:	17d3      	asrs	r3, r2, #31
 80012ca:	1ac9      	subs	r1, r1, r3
 80012cc:	460b      	mov	r3, r1
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	1ad1      	subs	r1, r2, r3
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	1c59      	adds	r1, r3, #1
 80012dc:	6179      	str	r1, [r7, #20]
 80012de:	3230      	adds	r2, #48	@ 0x30
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	3318      	adds	r3, #24
 80012e4:	443b      	add	r3, r7
 80012e6:	f803 2c10 	strb.w	r2, [r3, #-16]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a10      	ldr	r2, [pc, #64]	@ (8001330 <UART_SendInt+0x90>)
 80012ee:	fb82 1203 	smull	r1, r2, r2, r3
 80012f2:	1092      	asrs	r2, r2, #2
 80012f4:	17db      	asrs	r3, r3, #31
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dcde      	bgt.n	80012be <UART_SendInt+0x1e>
    for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3b01      	subs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e00a      	b.n	800131e <UART_SendInt+0x7e>
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff52 	bl	80011bc <UART_SendChar>
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3b01      	subs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b00      	cmp	r3, #0
 8001322:	daf1      	bge.n	8001308 <UART_SendInt+0x68>
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	66666667 	.word	0x66666667

08001334 <nRF24_TransmitPacket>:
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <nRF24_TransmitPacket+0x94>)
 8001342:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8001344:	f7ff ff22 	bl	800118c <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fea0 	bl	8001092 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8001352:	f7ff ff27 	bl	80011a4 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8001356:	f7ff fe64 	bl	8001022 <nRF24_GetStatus>
 800135a:	4603      	mov	r3, r0
 800135c:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001364:	2b00      	cmp	r3, #0
 8001366:	d105      	bne.n	8001374 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	1e5a      	subs	r2, r3, #1
 800136c:	60ba      	str	r2, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f1      	bne.n	8001356 <nRF24_TransmitPacket+0x22>
 8001372:	e000      	b.n	8001376 <nRF24_TransmitPacket+0x42>
			break;
 8001374:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8001376:	f7ff ff09 	bl	800118c <nRF24_CE_L>

	if (!wait) {
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8001380:	2302      	movs	r3, #2
 8001382:	e01d      	b.n	80013c0 <nRF24_TransmitPacket+0x8c>
	}

	// Check the flags in STATUS register
	UART_SendStr("[");
 8001384:	4811      	ldr	r0, [pc, #68]	@ (80013cc <nRF24_TransmitPacket+0x98>)
 8001386:	f7ff ff27 	bl	80011d8 <UART_SendStr>
	UART_SendHex8(status);
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff68 	bl	8001264 <UART_SendHex8>
	UART_SendStr("] ");
 8001394:	480e      	ldr	r0, [pc, #56]	@ (80013d0 <nRF24_TransmitPacket+0x9c>)
 8001396:	f7ff ff1f 	bl	80011d8 <UART_SendStr>

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 800139a:	f7ff fe65 	bl	8001068 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <nRF24_TransmitPacket+0x78>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e009      	b.n	80013c0 <nRF24_TransmitPacket+0x8c>
	}

	if (status & nRF24_FLAG_TX_DS) {
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	f003 0320 	and.w	r3, r3, #32
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <nRF24_TransmitPacket+0x86>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e002      	b.n	80013c0 <nRF24_TransmitPacket+0x8c>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 80013ba:	f7ff fe45 	bl	8001048 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	000fffff 	.word	0x000fffff
 80013cc:	0800cf40 	.word	0x0800cf40
 80013d0:	0800cf44 	.word	0x0800cf44

080013d4 <send_payload>:

void send_payload(uint8_t* payload, uint8_t length)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff fcc2 	bl	8000d6a <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 80013e6:	f7ff fe3f 	bl	8001068 <nRF24_ClearIRQFlags>

	UART_SendStr("PAYLOAD:>");
 80013ea:	481f      	ldr	r0, [pc, #124]	@ (8001468 <send_payload+0x94>)
 80013ec:	f7ff fef4 	bl	80011d8 <UART_SendStr>
	UART_SendBufHex((char *)payload, length);
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4619      	mov	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff06 	bl	8001208 <UART_SendBufHex>
	UART_SendStr("< ... TX: ");
 80013fc:	481b      	ldr	r0, [pc, #108]	@ (800146c <send_payload+0x98>)
 80013fe:	f7ff feeb 	bl	80011d8 <UART_SendStr>

	// Transmit a packet
	tx_res = nRF24_TransmitPacket(payload, length);
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	4619      	mov	r1, r3
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ff94 	bl	8001334 <nRF24_TransmitPacket>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <send_payload+0x9c>)
 8001412:	701a      	strb	r2, [r3, #0]
	switch (tx_res) {
 8001414:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <send_payload+0x9c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d00e      	beq.n	800143a <send_payload+0x66>
 800141c:	2b03      	cmp	r3, #3
 800141e:	dc10      	bgt.n	8001442 <send_payload+0x6e>
 8001420:	2b01      	cmp	r3, #1
 8001422:	d002      	beq.n	800142a <send_payload+0x56>
 8001424:	2b02      	cmp	r3, #2
 8001426:	d004      	beq.n	8001432 <send_payload+0x5e>
 8001428:	e00b      	b.n	8001442 <send_payload+0x6e>
		case nRF24_TX_SUCCESS:
			UART_SendStr("OK");
 800142a:	4812      	ldr	r0, [pc, #72]	@ (8001474 <send_payload+0xa0>)
 800142c:	f7ff fed4 	bl	80011d8 <UART_SendStr>
			break;
 8001430:	e00b      	b.n	800144a <send_payload+0x76>
		case nRF24_TX_TIMEOUT:
			UART_SendStr("TIMEOUT");
 8001432:	4811      	ldr	r0, [pc, #68]	@ (8001478 <send_payload+0xa4>)
 8001434:	f7ff fed0 	bl	80011d8 <UART_SendStr>
			break;
 8001438:	e007      	b.n	800144a <send_payload+0x76>
		case nRF24_TX_MAXRT:
			UART_SendStr("MAX RETRANSMIT");
 800143a:	4810      	ldr	r0, [pc, #64]	@ (800147c <send_payload+0xa8>)
 800143c:	f7ff fecc 	bl	80011d8 <UART_SendStr>
			break;
 8001440:	e003      	b.n	800144a <send_payload+0x76>
		default:
			UART_SendStr("ERROR");
 8001442:	480f      	ldr	r0, [pc, #60]	@ (8001480 <send_payload+0xac>)
 8001444:	f7ff fec8 	bl	80011d8 <UART_SendStr>
			break;
 8001448:	bf00      	nop
	}
	UART_SendStr("\r\n");
 800144a:	480e      	ldr	r0, [pc, #56]	@ (8001484 <send_payload+0xb0>)
 800144c:	f7ff fec4 	bl	80011d8 <UART_SendStr>
	osDelay(5);
 8001450:	2005      	movs	r0, #5
 8001452:	f008 fa6b 	bl	800992c <osDelay>
    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff fc87 	bl	8000d6a <nRF24_SetOperationalMode>


    // Put the transceiver to the RX mode
    nRF24_CE_H();
 800145c:	f7ff fea2 	bl	80011a4 <nRF24_CE_H>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	0800cf48 	.word	0x0800cf48
 800146c:	0800cf54 	.word	0x0800cf54
 8001470:	200002f6 	.word	0x200002f6
 8001474:	0800cf60 	.word	0x0800cf60
 8001478:	0800cf64 	.word	0x0800cf64
 800147c:	0800cf6c 	.word	0x0800cf6c
 8001480:	0800cf7c 	.word	0x0800cf7c
 8001484:	0800cf84 	.word	0x0800cf84

08001488 <ecretage_joy>:

void ecretage_joy(uint16_t* val)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	uint16_t range = 400;
 8001490:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001494:	81fb      	strh	r3, [r7, #14]

	if 		(2084 - range < *val && *val < 2048 + range) 	*val = 2048;
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	f5c3 6302 	rsb	r3, r3, #2080	@ 0x820
 800149c:	3304      	adds	r3, #4
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	8812      	ldrh	r2, [r2, #0]
 80014a2:	4293      	cmp	r3, r2
 80014a4:	da0b      	bge.n	80014be <ecretage_joy+0x36>
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	4293      	cmp	r3, r2
 80014b2:	db04      	blt.n	80014be <ecretage_joy+0x36>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ba:	801a      	strh	r2, [r3, #0]
 80014bc:	e015      	b.n	80014ea <ecretage_joy+0x62>
	else if (4096 - range < *val)							*val = 4096 - range;
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	8812      	ldrh	r2, [r2, #0]
 80014c8:	4293      	cmp	r3, r2
 80014ca:	da06      	bge.n	80014da <ecretage_joy+0x52>
 80014cc:	89fb      	ldrh	r3, [r7, #14]
 80014ce:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	801a      	strh	r2, [r3, #0]
 80014d8:	e007      	b.n	80014ea <ecretage_joy+0x62>
	else if (*val < range)									*val = range;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	89fa      	ldrh	r2, [r7, #14]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d902      	bls.n	80014ea <ecretage_joy+0x62>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	89fa      	ldrh	r2, [r7, #14]
 80014e8:	801a      	strh	r2, [r3, #0]

	if 		(*val < 2048) *val = 2048 - range - (2048 - range - *val)*(2048 - range)/(2048 - 2*range);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014f2:	d21a      	bcs.n	800152a <ecretage_joy+0xa2>
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	8812      	ldrh	r2, [r2, #0]
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	89fa      	ldrh	r2, [r7, #14]
 8001502:	f5c2 6200 	rsb	r2, r2, #2048	@ 0x800
 8001506:	fb03 f202 	mul.w	r2, r3, r2
 800150a:	89fb      	ldrh	r3, [r7, #14]
 800150c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fb92 f3f3 	sdiv	r3, r2, r3
 8001516:	b29a      	uxth	r2, r3
 8001518:	89fb      	ldrh	r3, [r7, #14]
 800151a:	4413      	add	r3, r2
 800151c:	b29b      	uxth	r3, r3
 800151e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001522:	b29a      	uxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	801a      	strh	r2, [r3, #0]
	else if (2048 < *val) *val = 2048 + range + (*val - 2048 - range)*(2048 - range)/(2048 - 2*range);
}
 8001528:	e01e      	b.n	8001568 <ecretage_joy+0xe0>
	else if (2048 < *val) *val = 2048 + range + (*val - 2048 - range)*(2048 - range)/(2048 - 2*range);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001532:	d919      	bls.n	8001568 <ecretage_joy+0xe0>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	f5a3 6200 	sub.w	r2, r3, #2048	@ 0x800
 800153c:	89fb      	ldrh	r3, [r7, #14]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	89fa      	ldrh	r2, [r7, #14]
 8001542:	f5c2 6200 	rsb	r2, r2, #2048	@ 0x800
 8001546:	fb03 f202 	mul.w	r2, r3, r2
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fb92 f3f3 	sdiv	r3, r2, r3
 8001556:	b29a      	uxth	r2, r3
 8001558:	89fb      	ldrh	r3, [r7, #14]
 800155a:	4413      	add	r3, r2
 800155c:	b29b      	uxth	r3, r3
 800155e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001562:	b29a      	uxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	801a      	strh	r2, [r3, #0]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <ecretage_slide>:

void ecretage_slide(uint16_t* val)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	uint16_t range = 400;
 800157c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001580:	81fb      	strh	r3, [r7, #14]

	if		(4096 - range < *val)	*val =  4096 - range;
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	8812      	ldrh	r2, [r2, #0]
 800158c:	4293      	cmp	r3, r2
 800158e:	da06      	bge.n	800159e <ecretage_slide+0x2a>
 8001590:	89fb      	ldrh	r3, [r7, #14]
 8001592:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001596:	b29a      	uxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	801a      	strh	r2, [r3, #0]
 800159c:	e007      	b.n	80015ae <ecretage_slide+0x3a>
	else if (*val < range)			*val = 0 ;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	89fa      	ldrh	r2, [r7, #14]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d902      	bls.n	80015ae <ecretage_slide+0x3a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	801a      	strh	r2, [r3, #0]
	*val *= 4096/(4096-range);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	881a      	ldrh	r2, [r3, #0]
 80015b2:	89fb      	ldrh	r3, [r7, #14]
 80015b4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80015b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015bc:	fb91 f3f3 	sdiv	r3, r1, r3
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	fb12 f303 	smulbb	r3, r2, r3
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	801a      	strh	r2, [r3, #0]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <sendCommande>:

void sendCommande(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80015e4:	e022      	b.n	800162c <sendCommande+0x54>
	{
		pot1 = (uint16_t) readvalue[0];
 80015e6:	4b3a      	ldr	r3, [pc, #232]	@ (80016d0 <sendCommande+0xf8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b39      	ldr	r3, [pc, #228]	@ (80016d4 <sendCommande+0xfc>)
 80015ee:	801a      	strh	r2, [r3, #0]
		pot2 = (uint16_t) readvalue[1];
 80015f0:	4b37      	ldr	r3, [pc, #220]	@ (80016d0 <sendCommande+0xf8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <sendCommande+0x100>)
 80015f8:	801a      	strh	r2, [r3, #0]
		pot3 = (uint16_t) readvalue[2];
 80015fa:	4b35      	ldr	r3, [pc, #212]	@ (80016d0 <sendCommande+0xf8>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b36      	ldr	r3, [pc, #216]	@ (80016dc <sendCommande+0x104>)
 8001602:	801a      	strh	r2, [r3, #0]
		pot4 = (uint16_t) readvalue[3];
 8001604:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <sendCommande+0xf8>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b35      	ldr	r3, [pc, #212]	@ (80016e0 <sendCommande+0x108>)
 800160c:	801a      	strh	r2, [r3, #0]
		pot5 = (uint16_t) readvalue[4];
 800160e:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <sendCommande+0xf8>)
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <sendCommande+0x10c>)
 8001616:	801a      	strh	r2, [r3, #0]
		pot6 = (uint16_t) readvalue[5];
 8001618:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <sendCommande+0xf8>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b32      	ldr	r3, [pc, #200]	@ (80016e8 <sendCommande+0x110>)
 8001620:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
 8001622:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001626:	3301      	adds	r3, #1
 8001628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800162c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001630:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <sendCommande+0x114>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3d6      	bcc.n	80015e6 <sendCommande+0xe>
	}
	uint8_t commande;
	if(HAL_GPIO_ReadPin (BP_SEL_GPIO_Port, BP_SEL_Pin)) commande = 0xaa;
 8001638:	2104      	movs	r1, #4
 800163a:	482d      	ldr	r0, [pc, #180]	@ (80016f0 <sendCommande+0x118>)
 800163c:	f001 ff44 	bl	80034c8 <HAL_GPIO_ReadPin>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <sendCommande+0x76>
 8001646:	23aa      	movs	r3, #170	@ 0xaa
 8001648:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800164c:	e002      	b.n	8001654 <sendCommande+0x7c>
	else commande = 0xbb;
 800164e:	23bb      	movs	r3, #187	@ 0xbb
 8001650:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if(HAL_GPIO_ReadPin(BP_GPIO_Port, BP_Pin)) commande = 0xcc;
 8001654:	2101      	movs	r1, #1
 8001656:	4827      	ldr	r0, [pc, #156]	@ (80016f4 <sendCommande+0x11c>)
 8001658:	f001 ff36 	bl	80034c8 <HAL_GPIO_ReadPin>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <sendCommande+0x90>
 8001662:	23cc      	movs	r3, #204	@ 0xcc
 8001664:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	ecretage_slide(&pot2);
 8001668:	481b      	ldr	r0, [pc, #108]	@ (80016d8 <sendCommande+0x100>)
 800166a:	f7ff ff83 	bl	8001574 <ecretage_slide>
	ecretage_joy(&pot3);
 800166e:	481b      	ldr	r0, [pc, #108]	@ (80016dc <sendCommande+0x104>)
 8001670:	f7ff ff0a 	bl	8001488 <ecretage_joy>
	ecretage_joy(&pot4);
 8001674:	481a      	ldr	r0, [pc, #104]	@ (80016e0 <sendCommande+0x108>)
 8001676:	f7ff ff07 	bl	8001488 <ecretage_joy>

	uint8_t payload[32] = {commande,(uint8_t)(pot2/16),(uint8_t)(pot3/16),(uint8_t)(pot4/16),(uint8_t)(pot5/16)};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2220      	movs	r2, #32
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f00b fb39 	bl	800ccf8 <memset>
 8001686:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800168a:	713b      	strb	r3, [r7, #4]
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <sendCommande+0x100>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	717b      	strb	r3, [r7, #5]
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <sendCommande+0x104>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	71bb      	strb	r3, [r7, #6]
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <sendCommande+0x108>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <sendCommande+0x10c>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	723b      	strb	r3, [r7, #8]

	send_payload(payload, 5);
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2105      	movs	r1, #5
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fe87 	bl	80013d4 <send_payload>
}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	@ 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200002dc 	.word	0x200002dc
 80016d4:	200002d0 	.word	0x200002d0
 80016d8:	200002d2 	.word	0x200002d2
 80016dc:	200002d4 	.word	0x200002d4
 80016e0:	200002d6 	.word	0x200002d6
 80016e4:	200002d8 	.word	0x200002d8
 80016e8:	200002da 	.word	0x200002da
 80016ec:	2000016c 	.word	0x2000016c
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020000 	.word	0x40020000

080016f8 <channel>:

uint8_t channel(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	uint8_t channel = 115;
 80016fe:	2373      	movs	r3, #115	@ 0x73
 8001700:	71fb      	strb	r3, [r7, #7]
	uint8_t set_channel = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	71bb      	strb	r3, [r7, #6]
	if(HAL_GPIO_ReadPin (DSW_0_GPIO_Port, DSW_0_Pin)) set_channel += 1;
 8001706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170a:	4843      	ldr	r0, [pc, #268]	@ (8001818 <channel+0x120>)
 800170c:	f001 fedc 	bl	80034c8 <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <channel+0x24>
 8001716:	79bb      	ldrb	r3, [r7, #6]
 8001718:	3301      	adds	r3, #1
 800171a:	71bb      	strb	r3, [r7, #6]
	if(HAL_GPIO_ReadPin (DSW_1_GPIO_Port, DSW_1_Pin)) set_channel += 2;
 800171c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001720:	483e      	ldr	r0, [pc, #248]	@ (800181c <channel+0x124>)
 8001722:	f001 fed1 	bl	80034c8 <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <channel+0x3a>
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	3302      	adds	r3, #2
 8001730:	71bb      	strb	r3, [r7, #6]
	if(HAL_GPIO_ReadPin (DSW_2_GPIO_Port, DSW_2_Pin)) set_channel += 4;
 8001732:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001736:	4839      	ldr	r0, [pc, #228]	@ (800181c <channel+0x124>)
 8001738:	f001 fec6 	bl	80034c8 <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <channel+0x50>
 8001742:	79bb      	ldrb	r3, [r7, #6]
 8001744:	3304      	adds	r3, #4
 8001746:	71bb      	strb	r3, [r7, #6]
	if(HAL_GPIO_ReadPin (DSW_3_GPIO_Port, DSW_3_Pin)) set_channel += 8;
 8001748:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800174c:	4833      	ldr	r0, [pc, #204]	@ (800181c <channel+0x124>)
 800174e:	f001 febb 	bl	80034c8 <HAL_GPIO_ReadPin>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <channel+0x66>
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	3308      	adds	r3, #8
 800175c:	71bb      	strb	r3, [r7, #6]

	switch(set_channel)
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d853      	bhi.n	800180c <channel+0x114>
 8001764:	a201      	add	r2, pc, #4	@ (adr r2, 800176c <channel+0x74>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	080017ad 	.word	0x080017ad
 8001770:	080017b3 	.word	0x080017b3
 8001774:	080017b9 	.word	0x080017b9
 8001778:	080017bf 	.word	0x080017bf
 800177c:	080017c5 	.word	0x080017c5
 8001780:	080017cb 	.word	0x080017cb
 8001784:	080017d1 	.word	0x080017d1
 8001788:	080017d7 	.word	0x080017d7
 800178c:	080017dd 	.word	0x080017dd
 8001790:	080017e3 	.word	0x080017e3
 8001794:	080017e9 	.word	0x080017e9
 8001798:	080017ef 	.word	0x080017ef
 800179c:	080017f5 	.word	0x080017f5
 80017a0:	080017fb 	.word	0x080017fb
 80017a4:	08001801 	.word	0x08001801
 80017a8:	08001807 	.word	0x08001807
	{
	case 0 :
		channel = 115;
 80017ac:	2373      	movs	r3, #115	@ 0x73
 80017ae:	71fb      	strb	r3, [r7, #7]
		break;
 80017b0:	e02c      	b.n	800180c <channel+0x114>
	case 1 :
		channel = 10;
 80017b2:	230a      	movs	r3, #10
 80017b4:	71fb      	strb	r3, [r7, #7]
		break;
 80017b6:	e029      	b.n	800180c <channel+0x114>
	case 2 :
		channel = 20;
 80017b8:	2314      	movs	r3, #20
 80017ba:	71fb      	strb	r3, [r7, #7]
		break;
 80017bc:	e026      	b.n	800180c <channel+0x114>
	case 3 :
		channel = 30;
 80017be:	231e      	movs	r3, #30
 80017c0:	71fb      	strb	r3, [r7, #7]
		break;
 80017c2:	e023      	b.n	800180c <channel+0x114>
	case 4 :
		channel = 40;
 80017c4:	2328      	movs	r3, #40	@ 0x28
 80017c6:	71fb      	strb	r3, [r7, #7]
		break;
 80017c8:	e020      	b.n	800180c <channel+0x114>
	case 5 :
		channel = 50;
 80017ca:	2332      	movs	r3, #50	@ 0x32
 80017cc:	71fb      	strb	r3, [r7, #7]
		break;
 80017ce:	e01d      	b.n	800180c <channel+0x114>
	case 6 :
		channel = 60;
 80017d0:	233c      	movs	r3, #60	@ 0x3c
 80017d2:	71fb      	strb	r3, [r7, #7]
		break;
 80017d4:	e01a      	b.n	800180c <channel+0x114>
	case 7 :
		channel = 70;
 80017d6:	2346      	movs	r3, #70	@ 0x46
 80017d8:	71fb      	strb	r3, [r7, #7]
		break;
 80017da:	e017      	b.n	800180c <channel+0x114>
	case 8 :
		channel = 80;
 80017dc:	2350      	movs	r3, #80	@ 0x50
 80017de:	71fb      	strb	r3, [r7, #7]
		break;
 80017e0:	e014      	b.n	800180c <channel+0x114>
	case 9 :
		channel = 90;
 80017e2:	235a      	movs	r3, #90	@ 0x5a
 80017e4:	71fb      	strb	r3, [r7, #7]
		break;
 80017e6:	e011      	b.n	800180c <channel+0x114>
	case 10 :
		channel = 100;
 80017e8:	2364      	movs	r3, #100	@ 0x64
 80017ea:	71fb      	strb	r3, [r7, #7]
		break;
 80017ec:	e00e      	b.n	800180c <channel+0x114>
	case 11 :
		channel = 110;
 80017ee:	236e      	movs	r3, #110	@ 0x6e
 80017f0:	71fb      	strb	r3, [r7, #7]
		break;
 80017f2:	e00b      	b.n	800180c <channel+0x114>
	case 12 :
		channel = 120;
 80017f4:	2378      	movs	r3, #120	@ 0x78
 80017f6:	71fb      	strb	r3, [r7, #7]
		break;
 80017f8:	e008      	b.n	800180c <channel+0x114>
	case 13 :
		channel = 125;
 80017fa:	237d      	movs	r3, #125	@ 0x7d
 80017fc:	71fb      	strb	r3, [r7, #7]
		break;
 80017fe:	e005      	b.n	800180c <channel+0x114>
	case 14 :
		channel = 127;
 8001800:	237f      	movs	r3, #127	@ 0x7f
 8001802:	71fb      	strb	r3, [r7, #7]
		break;
 8001804:	e002      	b.n	800180c <channel+0x114>
	case 15 :
		channel = 115;
 8001806:	2373      	movs	r3, #115	@ 0x73
 8001808:	71fb      	strb	r3, [r7, #7]
		break;
 800180a:	bf00      	nop
	}

	return channel;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400

08001820 <runRadio>:

void runRadio(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
	UART_SendStr("\r\nSTM32F411CEU6 is online.\r\n");
 8001826:	484e      	ldr	r0, [pc, #312]	@ (8001960 <runRadio+0x140>)
 8001828:	f7ff fcd6 	bl	80011d8 <UART_SendStr>
	osDelay(1000);
 800182c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001830:	f008 f87c 	bl	800992c <osDelay>
	// RX/TX disabled
	nRF24_CE_L();
 8001834:	f7ff fcaa 	bl	800118c <nRF24_CE_L>

	// Configure the nRF24L01+
	UART_SendStr("nRF24L01+ check: ");
 8001838:	484a      	ldr	r0, [pc, #296]	@ (8001964 <runRadio+0x144>)
 800183a:	f7ff fccd 	bl	80011d8 <UART_SendStr>
	osDelay(1000);
 800183e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001842:	f008 f873 	bl	800992c <osDelay>
	if (!nRF24_Check())
 8001846:	f7ff fa43 	bl	8000cd0 <nRF24_Check>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10e      	bne.n	800186e <runRadio+0x4e>
	{
		UART_SendStr("FAIL\r\n");
 8001850:	4845      	ldr	r0, [pc, #276]	@ (8001968 <runRadio+0x148>)
 8001852:	f7ff fcc1 	bl	80011d8 <UART_SendStr>
		while (1)
		{
			Toggle_LED();
 8001856:	f7ff fccb 	bl	80011f0 <Toggle_LED>
			osDelay(100);
 800185a:	2064      	movs	r0, #100	@ 0x64
 800185c:	f008 f866 	bl	800992c <osDelay>
			if (nRF24_Check()) break;
 8001860:	f7ff fa36 	bl	8000cd0 <nRF24_Check>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d100      	bne.n	800186c <runRadio+0x4c>
			Toggle_LED();
 800186a:	e7f4      	b.n	8001856 <runRadio+0x36>
			if (nRF24_Check()) break;
 800186c:	bf00      	nop
		}
	}

	UART_SendStr("OK\r\n");
 800186e:	483f      	ldr	r0, [pc, #252]	@ (800196c <runRadio+0x14c>)
 8001870:	f7ff fcb2 	bl	80011d8 <UART_SendStr>


	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 8001874:	f7ff f9df 	bl	8000c36 <nRF24_Init>
	//   - CRC scheme		: 2 byte

    // The transmitter sends a 5-byte packets to the address '0xE7 0x1C 0xE3' without Auto-ACK (ShockBurst disabled)

    // Disable ShockBurst for all RX pipes
    nRF24_DisableAA(0xFF);
 8001878:	20ff      	movs	r0, #255	@ 0xff
 800187a:	f7ff fbab 	bl	8000fd4 <nRF24_DisableAA>

    // Set RF channel
    nRF24_SetRFChannel(channel());
 800187e:	f7ff ff3b 	bl	80016f8 <channel>
 8001882:	4603      	mov	r3, r0
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fab2 	bl	8000dee <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_DR_250kbps);
 800188a:	2020      	movs	r0, #32
 800188c:	f7ff fb33 	bl	8000ef6 <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8001890:	200c      	movs	r0, #12
 8001892:	f7ff fa8b 	bl	8000dac <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 8001896:	2003      	movs	r0, #3
 8001898:	f7ff fab7 	bl	8000e0a <nRF24_SetAddrWidth>

    // Configure RX PIPE#1
    static const uint8_t nRF24_ADDR_Rx[] = { 0xE7, 0x1C, 0xE4 };
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR_Rx); // program address for RX pipe #1
 800189c:	4934      	ldr	r1, [pc, #208]	@ (8001970 <runRadio+0x150>)
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff fac4 	bl	8000e2c <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 5); // Auto-ACK: disabled, payload length: 5 bytes
 80018a4:	2205      	movs	r2, #5
 80018a6:	2100      	movs	r1, #0
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff fb3f 	bl	8000f2c <nRF24_SetRXPipe>

    // Configure TX PIPE
    static const uint8_t nRF24_ADDR_Tx[] = { 0xE7, 0x1C, 0xE3 };
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR_Tx); // program TX address
 80018ae:	4931      	ldr	r1, [pc, #196]	@ (8001974 <runRadio+0x154>)
 80018b0:	2006      	movs	r0, #6
 80018b2:	f7ff fabb 	bl	8000e2c <nRF24_SetAddr>

    // Set TX power (maximum)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 80018b6:	2006      	movs	r0, #6
 80018b8:	f7ff fb02 	bl	8000ec0 <nRF24_SetTXPower>

    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fa54 	bl	8000d6a <nRF24_SetOperationalMode>

    // Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 80018c2:	2002      	movs	r0, #2
 80018c4:	f7ff fa32 	bl	8000d2c <nRF24_SetPowerMode>

    // Put the transceiver to the RX mode
    nRF24_CE_H();
 80018c8:	f7ff fc6c 	bl	80011a4 <nRF24_CE_H>


    // The main loop
    uint32_t watch_dog = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t blink = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
    while (1) {

    	if (watch_dog++ > 100)
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80018da:	2b64      	cmp	r3, #100	@ 0x64
 80018dc:	d904      	bls.n	80018e8 <runRadio+0xc8>
    	{
    		watch_dog = 100;
 80018de:	2364      	movs	r3, #100	@ 0x64
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
    		blink += 10;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	330a      	adds	r3, #10
 80018e6:	623b      	str	r3, [r7, #32]
    	}

    	if(blink++ > 500)
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	623a      	str	r2, [r7, #32]
 80018ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018f2:	d903      	bls.n	80018fc <runRadio+0xdc>
    	{
    		blink = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
    		Toggle_LED();
 80018f8:	f7ff fc7a 	bl	80011f0 <Toggle_LED>
    	}

    	osDelay(2);
 80018fc:	2002      	movs	r0, #2
 80018fe:	f008 f815 	bl	800992c <osDelay>
    	sendCommande();
 8001902:	f7ff fe69 	bl	80015d8 <sendCommande>

    	// Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
    	//
    	// This is far from best solution, but it's ok for testing purposes
    	// More smart way is to use the IRQ pin :)
    	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY)
 8001906:	f7ff fb94 	bl	8001032 <nRF24_GetStatus_RXFIFO>
 800190a:	4603      	mov	r3, r0
 800190c:	2b01      	cmp	r3, #1
 800190e:	d0e1      	beq.n	80018d4 <runRadio+0xb4>
    	{

    		uint8_t nRF24_payload[32];
    		// Get a payload from the transceiver
    		pipe = nRF24_ReadPayload(nRF24_payload, &payload_length);
 8001910:	463b      	mov	r3, r7
 8001912:	4919      	ldr	r1, [pc, #100]	@ (8001978 <runRadio+0x158>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fc29 	bl	800116c <nRF24_ReadPayload>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <runRadio+0x15c>)
 8001920:	701a      	strb	r2, [r3, #0]

    		// Clear all pending IRQ flags
			nRF24_ClearIRQFlags();
 8001922:	f7ff fba1 	bl	8001068 <nRF24_ClearIRQFlags>

			// Print a payload contents to UART
			UART_SendStr("RCV PIPE#");
 8001926:	4816      	ldr	r0, [pc, #88]	@ (8001980 <runRadio+0x160>)
 8001928:	f7ff fc56 	bl	80011d8 <UART_SendStr>
			UART_SendInt(pipe);
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <runRadio+0x15c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fcb5 	bl	80012a0 <UART_SendInt>
			UART_SendStr(" PAYLOAD:>");
 8001936:	4813      	ldr	r0, [pc, #76]	@ (8001984 <runRadio+0x164>)
 8001938:	f7ff fc4e 	bl	80011d8 <UART_SendStr>
			UART_SendBufHex((char *)nRF24_payload, payload_length);
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <runRadio+0x158>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	463b      	mov	r3, r7
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fc5e 	bl	8001208 <UART_SendBufHex>
			UART_SendStr("<\r\n");
 800194c:	480e      	ldr	r0, [pc, #56]	@ (8001988 <runRadio+0x168>)
 800194e:	f7ff fc43 	bl	80011d8 <UART_SendStr>

			osDelay(2);
 8001952:	2002      	movs	r0, #2
 8001954:	f007 ffea 	bl	800992c <osDelay>
			watch_dog = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
    	if (watch_dog++ > 100)
 800195c:	e7ba      	b.n	80018d4 <runRadio+0xb4>
 800195e:	bf00      	nop
 8001960:	0800cf88 	.word	0x0800cf88
 8001964:	0800cfa8 	.word	0x0800cfa8
 8001968:	0800cfbc 	.word	0x0800cfbc
 800196c:	0800cfc4 	.word	0x0800cfc4
 8001970:	0800d0e8 	.word	0x0800d0e8
 8001974:	0800d0ec 	.word	0x0800d0ec
 8001978:	200002f5 	.word	0x200002f5
 800197c:	200002f4 	.word	0x200002f4
 8001980:	0800cfcc 	.word	0x0800cfcc
 8001984:	0800cfd8 	.word	0x0800cfd8
 8001988:	0800cfe4 	.word	0x0800cfe4

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_MspInit+0x54>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <HAL_MspInit+0x54>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <HAL_MspInit+0x54>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_MspInit+0x54>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <HAL_MspInit+0x54>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <HAL_MspInit+0x54>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	210f      	movs	r1, #15
 80019ce:	f06f 0001 	mvn.w	r0, #1
 80019d2:	f001 f85b 	bl	8002a8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a33      	ldr	r2, [pc, #204]	@ (8001ad0 <HAL_ADC_MspInit+0xec>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d160      	bne.n	8001ac8 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <HAL_ADC_MspInit+0xf0>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4a31      	ldr	r2, [pc, #196]	@ (8001ad4 <HAL_ADC_MspInit+0xf0>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a16:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <HAL_ADC_MspInit+0xf0>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <HAL_ADC_MspInit+0xf0>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad4 <HAL_ADC_MspInit+0xf0>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b28      	ldr	r3, [pc, #160]	@ (8001ad4 <HAL_ADC_MspInit+0xf0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_SPAR_Pin|ADC1_SLIDE_Pin|ADC1_JOY_X_Pin|ADC1_JOY_Y_Pin
 8001a3e:	237e      	movs	r3, #126	@ 0x7e
 8001a40:	617b      	str	r3, [r7, #20]
                          |ADC1_POT_A_Pin|ADC1_POT_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a42:	2303      	movs	r3, #3
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4821      	ldr	r0, [pc, #132]	@ (8001ad8 <HAL_ADC_MspInit+0xf4>)
 8001a52:	f001 fbb5 	bl	80031c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a56:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a58:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <HAL_ADC_MspInit+0xfc>)
 8001a5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a62:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a68:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a94:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a9c:	480f      	ldr	r0, [pc, #60]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001a9e:	f001 f81f 	bl	8002ae0 <HAL_DMA_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001aa8:	f7fe fff5 	bl	8000a96 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001ab0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <HAL_ADC_MspInit+0xf8>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2105      	movs	r1, #5
 8001abc:	2012      	movs	r0, #18
 8001abe:	f000 ffe5 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ac2:	2012      	movs	r0, #18
 8001ac4:	f000 fffe 	bl	8002ac4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	@ 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40012000 	.word	0x40012000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	200001b4 	.word	0x200001b4
 8001ae0:	40026410 	.word	0x40026410

08001ae4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	@ (8001b68 <HAL_I2C_MspInit+0x84>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12c      	bne.n	8001b60 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b28:	2312      	movs	r3, #18
 8001b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b34:	2304      	movs	r3, #4
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <HAL_I2C_MspInit+0x8c>)
 8001b40:	f001 fb3e 	bl	80031c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	@ 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020400 	.word	0x40020400

08001b74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a19      	ldr	r2, [pc, #100]	@ (8001bf8 <HAL_SPI_MspInit+0x84>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d12b      	bne.n	8001bee <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a17      	ldr	r2, [pc, #92]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a10      	ldr	r2, [pc, #64]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <HAL_SPI_MspInit+0x88>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bce:	2338      	movs	r3, #56	@ 0x38
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bde:	2305      	movs	r3, #5
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <HAL_SPI_MspInit+0x8c>)
 8001bea:	f001 fae9 	bl	80031c0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	@ 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40013000 	.word	0x40013000
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020400 	.word	0x40020400

08001c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	@ 0x38
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_InitTick+0xe8>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	4a33      	ldr	r2, [pc, #204]	@ (8001cec <HAL_InitTick+0xe8>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c24:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <HAL_InitTick+0xe8>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c30:	f107 0210 	add.w	r2, r7, #16
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fc6a 	bl	8005514 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d103      	bne.n	8001c52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c4a:	f003 fc4f 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8001c4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c50:	e004      	b.n	8001c5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c52:	f003 fc4b 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 8001c56:	4603      	mov	r3, r0
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c5e:	4a24      	ldr	r2, [pc, #144]	@ (8001cf0 <HAL_InitTick+0xec>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0c9b      	lsrs	r3, r3, #18
 8001c66:	3b01      	subs	r3, #1
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <HAL_InitTick+0xf0>)
 8001c6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c70:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_InitTick+0xf0>)
 8001c74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c78:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf4 <HAL_InitTick+0xf0>)
 8001c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c7e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <HAL_InitTick+0xf0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <HAL_InitTick+0xf0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_InitTick+0xf0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001c92:	4818      	ldr	r0, [pc, #96]	@ (8001cf4 <HAL_InitTick+0xf0>)
 8001c94:	f003 ff7e 	bl	8005b94 <HAL_TIM_Base_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d11b      	bne.n	8001cde <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001ca6:	4813      	ldr	r0, [pc, #76]	@ (8001cf4 <HAL_InitTick+0xf0>)
 8001ca8:	f003 ffce 	bl	8005c48 <HAL_TIM_Base_Start_IT>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d111      	bne.n	8001cde <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cba:	201c      	movs	r0, #28
 8001cbc:	f000 ff02 	bl	8002ac4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	d808      	bhi.n	8001cd8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	201c      	movs	r0, #28
 8001ccc:	f000 fede 	bl	8002a8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd0:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_InitTick+0xf4>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e002      	b.n	8001cde <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cde:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3738      	adds	r7, #56	@ 0x38
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	431bde83 	.word	0x431bde83
 8001cf4:	200002f8 	.word	0x200002f8
 8001cf8:	20000004 	.word	0x20000004

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <NMI_Handler+0x4>

08001d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <MemManage_Handler+0x4>

08001d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <ADC_IRQHandler+0x10>)
 8001d3a:	f000 f908 	bl	8001f4e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000016c 	.word	0x2000016c

08001d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <TIM2_IRQHandler+0x10>)
 8001d4e:	f003 ffdd 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200002f8 	.word	0x200002f8

08001d5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <DMA2_Stream0_IRQHandler+0x10>)
 8001d62:	f000 ffc3 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200001b4 	.word	0x200001b4

08001d70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d74:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <OTG_FS_IRQHandler+0x10>)
 8001d76:	f001 fe7b 	bl	8003a70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000620c 	.word	0x2000620c

08001d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <SystemInit+0x20>)
 8001d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <SystemInit+0x20>)
 8001d90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001da8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001de0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dac:	f7ff ffea 	bl	8001d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db0:	480c      	ldr	r0, [pc, #48]	@ (8001de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001db2:	490d      	ldr	r1, [pc, #52]	@ (8001de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dd6:	f00a fff5 	bl	800cdc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dda:	f7fe fb97 	bl	800050c <main>
  bx  lr    
 8001dde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001dec:	0800d120 	.word	0x0800d120
  ldr r2, =_sbss
 8001df0:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001df4:	20006a50 	.word	0x20006a50

08001df8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <DMA1_Stream0_IRQHandler>
	...

08001dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <HAL_Init+0x40>)
 8001e06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <HAL_Init+0x40>)
 8001e12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e18:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	@ (8001e3c <HAL_Init+0x40>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f000 fe26 	bl	8002a76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2a:	200f      	movs	r0, #15
 8001e2c:	f7ff feea 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e30:	f7ff fdac 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000340 	.word	0x20000340

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000340 	.word	0x20000340

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e033      	b.n	8001f46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fd7c 	bl	80019e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f0e:	f023 0302 	bic.w	r3, r3, #2
 8001f12:	f043 0202 	orr.w	r2, r3, #2
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fb76 	bl	800260c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f023 0303 	bic.w	r3, r3, #3
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f36:	e001      	b.n	8001f3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d049      	beq.n	8002018 <HAL_ADC_IRQHandler+0xca>
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d046      	beq.n	8002018 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d12b      	bne.n	8002008 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d127      	bne.n	8002008 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d119      	bne.n	8002008 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0220 	bic.w	r2, r2, #32
 8001fe2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f9a5 	bl	8002358 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f06f 0212 	mvn.w	r2, #18
 8002016:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002026:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d057      	beq.n	80020de <HAL_ADC_IRQHandler+0x190>
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d054      	beq.n	80020de <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d105      	bne.n	800204c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d139      	bne.n	80020ce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002060:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002064:	2b00      	cmp	r3, #0
 8002066:	d006      	beq.n	8002076 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002072:	2b00      	cmp	r3, #0
 8002074:	d12b      	bne.n	80020ce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002080:	2b00      	cmp	r3, #0
 8002082:	d124      	bne.n	80020ce <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	d11d      	bne.n	80020ce <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d119      	bne.n	80020ce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020a8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fc1a 	bl	8002908 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 020c 	mvn.w	r2, #12
 80020dc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d017      	beq.n	8002124 <HAL_ADC_IRQHandler+0x1d6>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d014      	beq.n	8002124 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d10d      	bne.n	8002124 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f933 	bl	8002380 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f06f 0201 	mvn.w	r2, #1
 8002122:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002132:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d015      	beq.n	8002166 <HAL_ADC_IRQHandler+0x218>
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d012      	beq.n	8002166 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	f043 0202 	orr.w	r2, r3, #2
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0220 	mvn.w	r2, #32
 8002154:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f91c 	bl	8002394 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0220 	mvn.w	r2, #32
 8002164:	601a      	str	r2, [r3, #0]
  }
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_ADC_Start_DMA+0x22>
 800218e:	2302      	movs	r3, #2
 8002190:	e0d0      	b.n	8002334 <HAL_ADC_Start_DMA+0x1c4>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d018      	beq.n	80021da <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021b8:	4b60      	ldr	r3, [pc, #384]	@ (800233c <HAL_ADC_Start_DMA+0x1cc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a60      	ldr	r2, [pc, #384]	@ (8002340 <HAL_ADC_Start_DMA+0x1d0>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0c9a      	lsrs	r2, r3, #18
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80021cc:	e002      	b.n	80021d4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f9      	bne.n	80021ce <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021e8:	d107      	bne.n	80021fa <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021f8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	f040 8088 	bne.w	800231a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002234:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002248:	d106      	bne.n	8002258 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	f023 0206 	bic.w	r2, r3, #6
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44
 8002256:	e002      	b.n	800225e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002266:	4b37      	ldr	r3, [pc, #220]	@ (8002344 <HAL_ADC_Start_DMA+0x1d4>)
 8002268:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226e:	4a36      	ldr	r2, [pc, #216]	@ (8002348 <HAL_ADC_Start_DMA+0x1d8>)
 8002270:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002276:	4a35      	ldr	r2, [pc, #212]	@ (800234c <HAL_ADC_Start_DMA+0x1dc>)
 8002278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227e:	4a34      	ldr	r2, [pc, #208]	@ (8002350 <HAL_ADC_Start_DMA+0x1e0>)
 8002280:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800228a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800229a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022aa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	334c      	adds	r3, #76	@ 0x4c
 80022b6:	4619      	mov	r1, r3
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f000 fcbe 	bl	8002c3c <HAL_DMA_Start_IT>
 80022c0:	4603      	mov	r3, r0
 80022c2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10f      	bne.n	80022f0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d129      	bne.n	8002332 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	e020      	b.n	8002332 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a17      	ldr	r2, [pc, #92]	@ (8002354 <HAL_ADC_Start_DMA+0x1e4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d11b      	bne.n	8002332 <HAL_ADC_Start_DMA+0x1c2>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d114      	bne.n	8002332 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	e00b      	b.n	8002332 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f043 0210 	orr.w	r2, r3, #16
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002332:	7ffb      	ldrb	r3, [r7, #31]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000000 	.word	0x20000000
 8002340:	431bde83 	.word	0x431bde83
 8002344:	40012300 	.word	0x40012300
 8002348:	08002805 	.word	0x08002805
 800234c:	080028bf 	.word	0x080028bf
 8002350:	080028db 	.word	0x080028db
 8002354:	40012000 	.word	0x40012000

08002358 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1c>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e113      	b.n	80025ec <HAL_ADC_ConfigChannel+0x244>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	d925      	bls.n	8002420 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68d9      	ldr	r1, [r3, #12]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	3b1e      	subs	r3, #30
 80023ea:	2207      	movs	r2, #7
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43da      	mvns	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	400a      	ands	r2, r1
 80023f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68d9      	ldr	r1, [r3, #12]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	4618      	mov	r0, r3
 800240c:	4603      	mov	r3, r0
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4403      	add	r3, r0
 8002412:	3b1e      	subs	r3, #30
 8002414:	409a      	lsls	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	e022      	b.n	8002466 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6919      	ldr	r1, [r3, #16]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	2207      	movs	r2, #7
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	400a      	ands	r2, r1
 8002442:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6919      	ldr	r1, [r3, #16]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	4618      	mov	r0, r3
 8002456:	4603      	mov	r3, r0
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4403      	add	r3, r0
 800245c:	409a      	lsls	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b06      	cmp	r3, #6
 800246c:	d824      	bhi.n	80024b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	3b05      	subs	r3, #5
 8002480:	221f      	movs	r2, #31
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	400a      	ands	r2, r1
 800248e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	4618      	mov	r0, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3b05      	subs	r3, #5
 80024aa:	fa00 f203 	lsl.w	r2, r0, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80024b6:	e04c      	b.n	8002552 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b0c      	cmp	r3, #12
 80024be:	d824      	bhi.n	800250a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3b23      	subs	r3, #35	@ 0x23
 80024d2:	221f      	movs	r2, #31
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43da      	mvns	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	400a      	ands	r2, r1
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b23      	subs	r3, #35	@ 0x23
 80024fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
 8002508:	e023      	b.n	8002552 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	3b41      	subs	r3, #65	@ 0x41
 800251c:	221f      	movs	r2, #31
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	400a      	ands	r2, r1
 800252a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	4618      	mov	r0, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	3b41      	subs	r3, #65	@ 0x41
 8002546:	fa00 f203 	lsl.w	r2, r0, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002552:	4b29      	ldr	r3, [pc, #164]	@ (80025f8 <HAL_ADC_ConfigChannel+0x250>)
 8002554:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a28      	ldr	r2, [pc, #160]	@ (80025fc <HAL_ADC_ConfigChannel+0x254>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d10f      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1d8>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b12      	cmp	r3, #18
 8002566:	d10b      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1d      	ldr	r2, [pc, #116]	@ (80025fc <HAL_ADC_ConfigChannel+0x254>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d12b      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x23a>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1c      	ldr	r2, [pc, #112]	@ (8002600 <HAL_ADC_ConfigChannel+0x258>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <HAL_ADC_ConfigChannel+0x1f4>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b11      	cmp	r3, #17
 800259a:	d122      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a11      	ldr	r2, [pc, #68]	@ (8002600 <HAL_ADC_ConfigChannel+0x258>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d111      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_ADC_ConfigChannel+0x25c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a11      	ldr	r2, [pc, #68]	@ (8002608 <HAL_ADC_ConfigChannel+0x260>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	0c9a      	lsrs	r2, r3, #18
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025d4:	e002      	b.n	80025dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	3b01      	subs	r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f9      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40012300 	.word	0x40012300
 80025fc:	40012000 	.word	0x40012000
 8002600:	10000012 	.word	0x10000012
 8002604:	20000000 	.word	0x20000000
 8002608:	431bde83 	.word	0x431bde83

0800260c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002614:	4b79      	ldr	r3, [pc, #484]	@ (80027fc <ADC_Init+0x1f0>)
 8002616:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	431a      	orrs	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	021a      	lsls	r2, r3, #8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6899      	ldr	r1, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269e:	4a58      	ldr	r2, [pc, #352]	@ (8002800 <ADC_Init+0x1f4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d022      	beq.n	80026ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e00f      	b.n	800270a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002708:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0202 	bic.w	r2, r2, #2
 8002718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6899      	ldr	r1, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7e1b      	ldrb	r3, [r3, #24]
 8002724:	005a      	lsls	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01b      	beq.n	8002770 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002746:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002756:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	3b01      	subs	r3, #1
 8002764:	035a      	lsls	r2, r3, #13
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	e007      	b.n	8002780 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800277e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800278e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	3b01      	subs	r3, #1
 800279c:	051a      	lsls	r2, r3, #20
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6899      	ldr	r1, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027c2:	025a      	lsls	r2, r3, #9
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	029a      	lsls	r2, r3, #10
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40012300 	.word	0x40012300
 8002800:	0f000001 	.word	0x0f000001

08002804 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800281a:	2b00      	cmp	r3, #0
 800281c:	d13c      	bne.n	8002898 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d12b      	bne.n	8002890 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800283c:	2b00      	cmp	r3, #0
 800283e:	d127      	bne.n	8002890 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002858:	2b00      	cmp	r3, #0
 800285a:	d119      	bne.n	8002890 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0220 	bic.w	r2, r2, #32
 800286a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7ff fd61 	bl	8002358 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002896:	e00e      	b.n	80028b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fd75 	bl	8002394 <HAL_ADC_ErrorCallback>
}
 80028aa:	e004      	b.n	80028b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ca:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7ff fd4d 	bl	800236c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2240      	movs	r2, #64	@ 0x40
 80028ec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f043 0204 	orr.w	r2, r3, #4
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff fd4a 	bl	8002394 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	@ (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ff4c 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9e:	f7ff ff61 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002aa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	6978      	ldr	r0, [r7, #20]
 8002aaa:	f7ff ffb1 	bl	8002a10 <NVIC_EncodePriority>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff80 	bl	80029bc <__NVIC_SetPriority>
}
 8002abc:	bf00      	nop
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff54 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002aec:	f7ff f9bc 	bl	8001e68 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e099      	b.n	8002c30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1c:	e00f      	b.n	8002b3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b1e:	f7ff f9a3 	bl	8001e68 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d908      	bls.n	8002b3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e078      	b.n	8002c30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e8      	bne.n	8002b1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4b38      	ldr	r3, [pc, #224]	@ (8002c38 <HAL_DMA_Init+0x158>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d107      	bne.n	8002ba8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f023 0307 	bic.w	r3, r3, #7
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d117      	bne.n	8002c02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fa6f 	bl	80030c8 <DMA_CheckFifoParam>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2240      	movs	r2, #64	@ 0x40
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e016      	b.n	8002c30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa26 	bl	800305c <DMA_CalcBaseAndBitshift>
 8002c10:	4603      	mov	r3, r0
 8002c12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c18:	223f      	movs	r2, #63	@ 0x3f
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	f010803f 	.word	0xf010803f

08002c3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_DMA_Start_IT+0x26>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e040      	b.n	8002ce4 <HAL_DMA_Start_IT+0xa8>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d12f      	bne.n	8002cd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f9b8 	bl	8003000 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	223f      	movs	r2, #63	@ 0x3f
 8002c96:	409a      	lsls	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0216 	orr.w	r2, r2, #22
 8002caa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0208 	orr.w	r2, r2, #8
 8002cc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e005      	b.n	8002ce2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cf8:	4b8e      	ldr	r3, [pc, #568]	@ (8002f34 <HAL_DMA_IRQHandler+0x248>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a8e      	ldr	r2, [pc, #568]	@ (8002f38 <HAL_DMA_IRQHandler+0x24c>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d16:	2208      	movs	r2, #8
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0204 	bic.w	r2, r2, #4
 8002d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d44:	2208      	movs	r2, #8
 8002d46:	409a      	lsls	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d92:	2204      	movs	r2, #4
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db0:	2204      	movs	r2, #4
 8002db2:	409a      	lsls	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	2210      	movs	r2, #16
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d043      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03c      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de6:	2210      	movs	r2, #16
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
 8002e1a:	e01f      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
 8002e2c:	e016      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0208 	bic.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	2220      	movs	r2, #32
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 808f 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8087 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e82:	2220      	movs	r2, #32
 8002e84:	409a      	lsls	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d136      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0216 	bic.w	r2, r2, #22
 8002ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x1da>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0208 	bic.w	r2, r2, #8
 8002ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	223f      	movs	r2, #63	@ 0x3f
 8002edc:	409a      	lsls	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d07e      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
        }
        return;
 8002f02:	e079      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01d      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d031      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	e02c      	b.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
 8002f32:	bf00      	nop
 8002f34:	20000000 	.word	0x20000000
 8002f38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e01e      	b.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10f      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0210 	bic.w	r2, r2, #16
 8002f6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d032      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d022      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2205      	movs	r2, #5
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d307      	bcc.n	8002fd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f2      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x2cc>
 8002fd2:	e000      	b.n	8002fd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	e000      	b.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ff8:	bf00      	nop
    }
  }
}
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800301c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b40      	cmp	r3, #64	@ 0x40
 800302c:	d108      	bne.n	8003040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800303e:	e007      	b.n	8003050 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3b10      	subs	r3, #16
 800306c:	4a14      	ldr	r2, [pc, #80]	@ (80030c0 <DMA_CalcBaseAndBitshift+0x64>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003076:	4a13      	ldr	r2, [pc, #76]	@ (80030c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d909      	bls.n	800309e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	1d1a      	adds	r2, r3, #4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	659a      	str	r2, [r3, #88]	@ 0x58
 800309c:	e007      	b.n	80030ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030a6:	f023 0303 	bic.w	r3, r3, #3
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	aaaaaaab 	.word	0xaaaaaaab
 80030c4:	0800d108 	.word	0x0800d108

080030c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11f      	bne.n	8003122 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d856      	bhi.n	8003196 <DMA_CheckFifoParam+0xce>
 80030e8:	a201      	add	r2, pc, #4	@ (adr r2, 80030f0 <DMA_CheckFifoParam+0x28>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	08003113 	.word	0x08003113
 80030f8:	08003101 	.word	0x08003101
 80030fc:	08003197 	.word	0x08003197
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d046      	beq.n	800319a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003110:	e043      	b.n	800319a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003116:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800311a:	d140      	bne.n	800319e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003120:	e03d      	b.n	800319e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800312a:	d121      	bne.n	8003170 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d837      	bhi.n	80031a2 <DMA_CheckFifoParam+0xda>
 8003132:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <DMA_CheckFifoParam+0x70>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	08003149 	.word	0x08003149
 800313c:	0800314f 	.word	0x0800314f
 8003140:	08003149 	.word	0x08003149
 8003144:	08003161 	.word	0x08003161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e030      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003152:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d025      	beq.n	80031a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315e:	e022      	b.n	80031a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003168:	d11f      	bne.n	80031aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800316e:	e01c      	b.n	80031aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d903      	bls.n	800317e <DMA_CheckFifoParam+0xb6>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d003      	beq.n	8003184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800317c:	e018      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
      break;
 8003182:	e015      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      break;
 8003194:	e00b      	b.n	80031ae <DMA_CheckFifoParam+0xe6>
      break;
 8003196:	bf00      	nop
 8003198:	e00a      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 800319a:	bf00      	nop
 800319c:	e008      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 800319e:	bf00      	nop
 80031a0:	e006      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031a2:	bf00      	nop
 80031a4:	e004      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ae:	bf00      	nop
    }
  } 
  
  return status; 
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	@ 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e159      	b.n	8003490 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031dc:	2201      	movs	r2, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	f040 8148 	bne.w	800348a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d005      	beq.n	8003212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320e:	2b02      	cmp	r3, #2
 8003210:	d130      	bne.n	8003274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003248:	2201      	movs	r2, #1
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 0201 	and.w	r2, r3, #1
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b03      	cmp	r3, #3
 800327e:	d017      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d123      	bne.n	8003304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	08da      	lsrs	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3208      	adds	r2, #8
 80032c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	220f      	movs	r2, #15
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	08da      	lsrs	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3208      	adds	r2, #8
 80032fe:	69b9      	ldr	r1, [r7, #24]
 8003300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2203      	movs	r2, #3
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0203 	and.w	r2, r3, #3
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a2 	beq.w	800348a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	4b57      	ldr	r3, [pc, #348]	@ (80034a8 <HAL_GPIO_Init+0x2e8>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334e:	4a56      	ldr	r2, [pc, #344]	@ (80034a8 <HAL_GPIO_Init+0x2e8>)
 8003350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003354:	6453      	str	r3, [r2, #68]	@ 0x44
 8003356:	4b54      	ldr	r3, [pc, #336]	@ (80034a8 <HAL_GPIO_Init+0x2e8>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003362:	4a52      	ldr	r2, [pc, #328]	@ (80034ac <HAL_GPIO_Init+0x2ec>)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	3302      	adds	r3, #2
 800336a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a49      	ldr	r2, [pc, #292]	@ (80034b0 <HAL_GPIO_Init+0x2f0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x202>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a48      	ldr	r2, [pc, #288]	@ (80034b4 <HAL_GPIO_Init+0x2f4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x1fe>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a47      	ldr	r2, [pc, #284]	@ (80034b8 <HAL_GPIO_Init+0x2f8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x1fa>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a46      	ldr	r2, [pc, #280]	@ (80034bc <HAL_GPIO_Init+0x2fc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x1f6>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a45      	ldr	r2, [pc, #276]	@ (80034c0 <HAL_GPIO_Init+0x300>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x1f2>
 80033ae:	2304      	movs	r3, #4
 80033b0:	e008      	b.n	80033c4 <HAL_GPIO_Init+0x204>
 80033b2:	2307      	movs	r3, #7
 80033b4:	e006      	b.n	80033c4 <HAL_GPIO_Init+0x204>
 80033b6:	2303      	movs	r3, #3
 80033b8:	e004      	b.n	80033c4 <HAL_GPIO_Init+0x204>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e002      	b.n	80033c4 <HAL_GPIO_Init+0x204>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_GPIO_Init+0x204>
 80033c2:	2300      	movs	r3, #0
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	f002 0203 	and.w	r2, r2, #3
 80033ca:	0092      	lsls	r2, r2, #2
 80033cc:	4093      	lsls	r3, r2
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033d4:	4935      	ldr	r1, [pc, #212]	@ (80034ac <HAL_GPIO_Init+0x2ec>)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	3302      	adds	r3, #2
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033e2:	4b38      	ldr	r3, [pc, #224]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003406:	4a2f      	ldr	r2, [pc, #188]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800340c:	4b2d      	ldr	r3, [pc, #180]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003430:	4a24      	ldr	r2, [pc, #144]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003436:	4b23      	ldr	r3, [pc, #140]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800345a:	4a1a      	ldr	r2, [pc, #104]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003460:	4b18      	ldr	r3, [pc, #96]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003484:	4a0f      	ldr	r2, [pc, #60]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3301      	adds	r3, #1
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b0f      	cmp	r3, #15
 8003494:	f67f aea2 	bls.w	80031dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3724      	adds	r7, #36	@ 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40013800 	.word	0x40013800
 80034b0:	40020000 	.word	0x40020000
 80034b4:	40020400 	.word	0x40020400
 80034b8:	40020800 	.word	0x40020800
 80034bc:	40020c00 	.word	0x40020c00
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40013c00 	.word	0x40013c00

080034c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	887b      	ldrh	r3, [r7, #2]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	e001      	b.n	80034ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
 8003504:	4613      	mov	r3, r2
 8003506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003508:	787b      	ldrb	r3, [r7, #1]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003514:	e003      	b.n	800351e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	041a      	lsls	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	619a      	str	r2, [r3, #24]
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800352a:	b480      	push	{r7}
 800352c:	b085      	sub	sp, #20
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	460b      	mov	r3, r1
 8003534:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800353c:	887a      	ldrh	r2, [r7, #2]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4013      	ands	r3, r2
 8003542:	041a      	lsls	r2, r3, #16
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	43d9      	mvns	r1, r3
 8003548:	887b      	ldrh	r3, [r7, #2]
 800354a:	400b      	ands	r3, r1
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	619a      	str	r2, [r3, #24]
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e12b      	b.n	80037ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fe faac 	bl	8001ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2224      	movs	r2, #36	@ 0x24
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c4:	f001 ff92 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 80035c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4a81      	ldr	r2, [pc, #516]	@ (80037d4 <HAL_I2C_Init+0x274>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d807      	bhi.n	80035e4 <HAL_I2C_Init+0x84>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a80      	ldr	r2, [pc, #512]	@ (80037d8 <HAL_I2C_Init+0x278>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	bf94      	ite	ls
 80035dc:	2301      	movls	r3, #1
 80035de:	2300      	movhi	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e006      	b.n	80035f2 <HAL_I2C_Init+0x92>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a7d      	ldr	r2, [pc, #500]	@ (80037dc <HAL_I2C_Init+0x27c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	bf94      	ite	ls
 80035ec:	2301      	movls	r3, #1
 80035ee:	2300      	movhi	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0e7      	b.n	80037ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a78      	ldr	r2, [pc, #480]	@ (80037e0 <HAL_I2C_Init+0x280>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	0c9b      	lsrs	r3, r3, #18
 8003604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a6a      	ldr	r2, [pc, #424]	@ (80037d4 <HAL_I2C_Init+0x274>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d802      	bhi.n	8003634 <HAL_I2C_Init+0xd4>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3301      	adds	r3, #1
 8003632:	e009      	b.n	8003648 <HAL_I2C_Init+0xe8>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	4a69      	ldr	r2, [pc, #420]	@ (80037e4 <HAL_I2C_Init+0x284>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	3301      	adds	r3, #1
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	430b      	orrs	r3, r1
 800364e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800365a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	495c      	ldr	r1, [pc, #368]	@ (80037d4 <HAL_I2C_Init+0x274>)
 8003664:	428b      	cmp	r3, r1
 8003666:	d819      	bhi.n	800369c <HAL_I2C_Init+0x13c>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1e59      	subs	r1, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	fbb1 f3f3 	udiv	r3, r1, r3
 8003676:	1c59      	adds	r1, r3, #1
 8003678:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800367c:	400b      	ands	r3, r1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_I2C_Init+0x138>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1e59      	subs	r1, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003696:	e051      	b.n	800373c <HAL_I2C_Init+0x1dc>
 8003698:	2304      	movs	r3, #4
 800369a:	e04f      	b.n	800373c <HAL_I2C_Init+0x1dc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d111      	bne.n	80036c8 <HAL_I2C_Init+0x168>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	440b      	add	r3, r1
 80036b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e012      	b.n	80036ee <HAL_I2C_Init+0x18e>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e58      	subs	r0, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	0099      	lsls	r1, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	fbb0 f3f3 	udiv	r3, r0, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Init+0x196>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e022      	b.n	800373c <HAL_I2C_Init+0x1dc>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10e      	bne.n	800371c <HAL_I2C_Init+0x1bc>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1e58      	subs	r0, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	440b      	add	r3, r1
 800370c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003710:	3301      	adds	r3, #1
 8003712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800371a:	e00f      	b.n	800373c <HAL_I2C_Init+0x1dc>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e58      	subs	r0, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	0099      	lsls	r1, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	6809      	ldr	r1, [r1, #0]
 8003740:	4313      	orrs	r3, r2
 8003742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800376a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6911      	ldr	r1, [r2, #16]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68d2      	ldr	r2, [r2, #12]
 8003776:	4311      	orrs	r1, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	430b      	orrs	r3, r1
 800377e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	000186a0 	.word	0x000186a0
 80037d8:	001e847f 	.word	0x001e847f
 80037dc:	003d08ff 	.word	0x003d08ff
 80037e0:	431bde83 	.word	0x431bde83
 80037e4:	10624dd3 	.word	0x10624dd3

080037e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e101      	b.n	80039fe <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f008 ff65 	bl	800c6e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2203      	movs	r2, #3
 800381e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003828:	d102      	bne.n	8003830 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f002 fd32 	bl	800629e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7c1a      	ldrb	r2, [r3, #16]
 8003842:	f88d 2000 	strb.w	r2, [sp]
 8003846:	3304      	adds	r3, #4
 8003848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800384a:	f002 fc11 	bl	8006070 <USB_CoreInit>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0ce      	b.n	80039fe <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f002 fd2a 	bl	80062c0 <USB_SetCurrentMode>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0bf      	b.n	80039fe <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	e04a      	b.n	800391a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3315      	adds	r3, #21
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3314      	adds	r3, #20
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	b298      	uxth	r0, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	332e      	adds	r3, #46	@ 0x2e
 80038c0:	4602      	mov	r2, r0
 80038c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3318      	adds	r3, #24
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	331c      	adds	r3, #28
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3320      	adds	r3, #32
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3324      	adds	r3, #36	@ 0x24
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	3301      	adds	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	791b      	ldrb	r3, [r3, #4]
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	429a      	cmp	r2, r3
 8003922:	d3af      	bcc.n	8003884 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e044      	b.n	80039b4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	3301      	adds	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	791b      	ldrb	r3, [r3, #4]
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3b5      	bcc.n	800392a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	7c1a      	ldrb	r2, [r3, #16]
 80039c6:	f88d 2000 	strb.w	r2, [sp]
 80039ca:	3304      	adds	r3, #4
 80039cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ce:	f002 fcc3 	bl	8006358 <USB_DevInit>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e00c      	b.n	80039fe <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 fd0d 	bl	8007416 <USB_DevDisconnect>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_PCD_Start+0x1c>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e022      	b.n	8003a68 <HAL_PCD_Start+0x62>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f002 fc14 	bl	800627c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 fcbb 	bl	80073d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b08d      	sub	sp, #52	@ 0x34
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f003 fd79 	bl	800757e <USB_GetMode>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f040 848c 	bne.w	80043ac <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f003 fcdd 	bl	8007458 <USB_ReadInterrupts>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8482 	beq.w	80043aa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 fcca 	bl	8007458 <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d107      	bne.n	8003ade <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f002 0202 	and.w	r2, r2, #2
 8003adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 fcb8 	bl	8007458 <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d161      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0210 	bic.w	r2, r2, #16
 8003b00:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f003 020f 	and.w	r2, r3, #15
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3304      	adds	r3, #4
 8003b20:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b2c:	d124      	bne.n	8003b78 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d035      	beq.n	8003ba6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	6a38      	ldr	r0, [r7, #32]
 8003b4e:	f003 faef 	bl	8007130 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5e:	441a      	add	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b70:	441a      	add	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	615a      	str	r2, [r3, #20]
 8003b76:	e016      	b.n	8003ba6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b7e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b82:	d110      	bne.n	8003ba6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6a38      	ldr	r0, [r7, #32]
 8003b90:	f003 face 	bl	8007130 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba0:	441a      	add	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0210 	orr.w	r2, r2, #16
 8003bb4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f003 fc4c 	bl	8007458 <USB_ReadInterrupts>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bc6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bca:	f040 80a7 	bne.w	8003d1c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 fc51 	bl	800747e <USB_ReadDevAllOutEpInterrupt>
 8003bdc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003bde:	e099      	b.n	8003d14 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 808e 	beq.w	8003d08 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 fc75 	bl	80074e6 <USB_ReadDevOutEPInterrupt>
 8003bfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c14:	461a      	mov	r2, r3
 8003c16:	2301      	movs	r3, #1
 8003c18:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fea3 	bl	8004968 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 ff79 	bl	8004b38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2310      	movs	r3, #16
 8003c60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d030      	beq.n	8003cce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c74:	2b80      	cmp	r3, #128	@ 0x80
 8003c76:	d109      	bne.n	8003c8c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c8a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	78db      	ldrb	r3, [r3, #3]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d108      	bne.n	8003cbc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f008 fe10 	bl	800c8dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2302      	movs	r3, #2
 8003ccc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d009      	beq.n	8003d08 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d00:	461a      	mov	r2, r3
 8003d02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d06:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f47f af62 	bne.w	8003be0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f003 fb99 	bl	8007458 <USB_ReadInterrupts>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d30:	f040 80db 	bne.w	8003eea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f003 fbba 	bl	80074b2 <USB_ReadDevAllInEpInterrupt>
 8003d3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003d44:	e0cd      	b.n	8003ee2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80c2 	beq.w	8003ed6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 fbe0 	bl	8007522 <USB_ReadDevInEPInterrupt>
 8003d62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d057      	beq.n	8003e1e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	2201      	movs	r2, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69f9      	ldr	r1, [r7, #28]
 8003d8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d8e:	4013      	ands	r3, r2
 8003d90:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2301      	movs	r3, #1
 8003da2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	799b      	ldrb	r3, [r3, #6]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d132      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	3320      	adds	r3, #32
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4403      	add	r3, r0
 8003dcc:	331c      	adds	r3, #28
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4419      	add	r1, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4403      	add	r3, r0
 8003de0:	3320      	adds	r3, #32
 8003de2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d113      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x3a2>
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	3324      	adds	r3, #36	@ 0x24
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d108      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	f003 fbe7 	bl	80075e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f008 fce4 	bl	800c7e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e34:	461a      	mov	r2, r3
 8003e36:	2308      	movs	r3, #8
 8003e38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e50:	461a      	mov	r2, r3
 8003e52:	2310      	movs	r3, #16
 8003e54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2340      	movs	r3, #64	@ 0x40
 8003e70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d023      	beq.n	8003ec4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e7e:	6a38      	ldr	r0, [r7, #32]
 8003e80:	f002 fbce 	bl	8006620 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	3310      	adds	r3, #16
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	3304      	adds	r3, #4
 8003e96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	78db      	ldrb	r3, [r3, #3]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d108      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f008 fd27 	bl	800c900 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ece:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fcbd 	bl	8004850 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	3301      	adds	r3, #1
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f af2e 	bne.w	8003d46 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f003 fab2 	bl	8007458 <USB_ReadInterrupts>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003efe:	d122      	bne.n	8003f46 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d108      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f26:	2100      	movs	r1, #0
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fea3 	bl	8004c74 <HAL_PCDEx_LPM_Callback>
 8003f2e:	e002      	b.n	8003f36 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f008 fcc5 	bl	800c8c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f003 fa84 	bl	8007458 <USB_ReadInterrupts>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f5a:	d112      	bne.n	8003f82 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d102      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f008 fc81 	bl	800c874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f80:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f003 fa66 	bl	8007458 <USB_ReadInterrupts>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f96:	f040 80b7 	bne.w	8004108 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2110      	movs	r1, #16
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f002 fb33 	bl	8006620 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fbe:	e046      	b.n	800404e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fd2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ff2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004000:	461a      	mov	r2, r3
 8004002:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004006:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004022:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004026:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004042:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004046:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404a:	3301      	adds	r3, #1
 800404c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	791b      	ldrb	r3, [r3, #4]
 8004052:	461a      	mov	r2, r3
 8004054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004056:	4293      	cmp	r3, r2
 8004058:	d3b2      	bcc.n	8003fc0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004068:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800406c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	7bdb      	ldrb	r3, [r3, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800407c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004086:	f043 030b 	orr.w	r3, r3, #11
 800408a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800409c:	f043 030b 	orr.w	r3, r3, #11
 80040a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040a2:	e015      	b.n	80040d0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040b6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80040ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ca:	f043 030b 	orr.w	r3, r3, #11
 80040ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80040e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040f2:	461a      	mov	r2, r3
 80040f4:	f003 fa74 	bl	80075e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f003 f9a3 	bl	8007458 <USB_ReadInterrupts>
 8004112:	4603      	mov	r3, r0
 8004114:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800411c:	d123      	bne.n	8004166 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f003 fa39 	bl	800759a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f002 faf0 	bl	8006712 <USB_GetDevSpeed>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681c      	ldr	r4, [r3, #0]
 800413e:	f001 f9c9 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 8004142:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004148:	461a      	mov	r2, r3
 800414a:	4620      	mov	r0, r4
 800414c:	f001 fff4 	bl	8006138 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f008 fb70 	bl	800c836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004164:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f003 f974 	bl	8007458 <USB_ReadInterrupts>
 8004170:	4603      	mov	r3, r0
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b08      	cmp	r3, #8
 8004178:	d10a      	bne.n	8004190 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f008 fb4d 	bl	800c81a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f002 0208 	and.w	r2, r2, #8
 800418e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f003 f95f 	bl	8007458 <USB_ReadInterrupts>
 800419a:	4603      	mov	r3, r0
 800419c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a0:	2b80      	cmp	r3, #128	@ 0x80
 80041a2:	d123      	bne.n	80041ec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041b0:	2301      	movs	r3, #1
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b4:	e014      	b.n	80041e0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb0a 	bl	80047ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	3301      	adds	r3, #1
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d3e4      	bcc.n	80041b6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f003 f931 	bl	8007458 <USB_ReadInterrupts>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004200:	d13c      	bne.n	800427c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004202:	2301      	movs	r3, #1
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
 8004206:	e02b      	b.n	8004260 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3318      	adds	r3, #24
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d115      	bne.n	800425a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800422e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004230:	2b00      	cmp	r3, #0
 8004232:	da12      	bge.n	800425a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	3317      	adds	r3, #23
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004250:	b2db      	uxtb	r3, r3
 8004252:	4619      	mov	r1, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 faca 	bl	80047ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	3301      	adds	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	791b      	ldrb	r3, [r3, #4]
 8004264:	461a      	mov	r2, r3
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	4293      	cmp	r3, r2
 800426a:	d3cd      	bcc.n	8004208 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800427a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f003 f8e9 	bl	8007458 <USB_ReadInterrupts>
 8004286:	4603      	mov	r3, r0
 8004288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800428c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004290:	d156      	bne.n	8004340 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004292:	2301      	movs	r3, #1
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
 8004296:	e045      	b.n	8004324 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d12e      	bne.n	800431e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da2b      	bge.n	800431e <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	0c1a      	lsrs	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80042d0:	4053      	eors	r3, r2
 80042d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d121      	bne.n	800431e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004316:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800431a:	6053      	str	r3, [r2, #4]
            break;
 800431c:	e008      	b.n	8004330 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	3301      	adds	r3, #1
 8004322:	627b      	str	r3, [r7, #36]	@ 0x24
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	791b      	ldrb	r3, [r3, #4]
 8004328:	461a      	mov	r2, r3
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	4293      	cmp	r3, r2
 800432e:	d3b3      	bcc.n	8004298 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800433e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f003 f887 	bl	8007458 <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004354:	d10a      	bne.n	800436c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f008 fae4 	bl	800c924 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800436a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f003 f871 	bl	8007458 <USB_ReadInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b04      	cmp	r3, #4
 800437e:	d115      	bne.n	80043ac <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f008 fad4 	bl	800c940 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	e000      	b.n	80043ac <HAL_PCD_IRQHandler+0x93c>
      return;
 80043aa:	bf00      	nop
    }
  }
}
 80043ac:	3734      	adds	r7, #52	@ 0x34
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd90      	pop	{r4, r7, pc}

080043b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_PCD_SetAddress+0x1a>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e012      	b.n	80043f2 <HAL_PCD_SetAddress+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f002 ffd0 	bl	8007388 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	4608      	mov	r0, r1
 8004404:	4611      	mov	r1, r2
 8004406:	461a      	mov	r2, r3
 8004408:	4603      	mov	r3, r0
 800440a:	70fb      	strb	r3, [r7, #3]
 800440c:	460b      	mov	r3, r1
 800440e:	803b      	strh	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800441c:	2b00      	cmp	r3, #0
 800441e:	da0f      	bge.n	8004440 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	f003 020f 	and.w	r2, r3, #15
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	3310      	adds	r3, #16
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	3304      	adds	r3, #4
 8004436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	705a      	strb	r2, [r3, #1]
 800443e:	e00f      	b.n	8004460 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800446c:	883b      	ldrh	r3, [r7, #0]
 800446e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	78ba      	ldrb	r2, [r7, #2]
 800447a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	785b      	ldrb	r3, [r3, #1]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800448e:	78bb      	ldrb	r3, [r7, #2]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d102      	bne.n	800449a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_PCD_EP_Open+0xae>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e00e      	b.n	80044c6 <HAL_PCD_EP_Open+0xcc>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f002 f950 	bl	800675c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80044c4:	7afb      	ldrb	r3, [r7, #11]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da0f      	bge.n	8004502 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	f003 020f 	and.w	r2, r3, #15
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	3310      	adds	r3, #16
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	3304      	adds	r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	705a      	strb	r2, [r3, #1]
 8004500:	e00f      	b.n	8004522 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	3304      	adds	r3, #4
 800451a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_PCD_EP_Close+0x6e>
 8004538:	2302      	movs	r3, #2
 800453a:	e00e      	b.n	800455a <HAL_PCD_EP_Close+0x8c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	4618      	mov	r0, r3
 800454c:	f002 f98e 	bl	800686c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	460b      	mov	r3, r1
 8004570:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004572:	7afb      	ldrb	r3, [r7, #11]
 8004574:	f003 020f 	and.w	r2, r3, #15
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	3304      	adds	r3, #4
 800458a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2200      	movs	r2, #0
 800459c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045a4:	7afb      	ldrb	r3, [r7, #11]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	799b      	ldrb	r3, [r3, #6]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d102      	bne.n	80045be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	799b      	ldrb	r3, [r3, #6]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6979      	ldr	r1, [r7, #20]
 80045ca:	f002 fa2b 	bl	8006a24 <USB_EPStartXfer>

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80045fa:	681b      	ldr	r3, [r3, #0]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	460b      	mov	r3, r1
 8004616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004618:	7afb      	ldrb	r3, [r7, #11]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	3310      	adds	r3, #16
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	3304      	adds	r3, #4
 800462e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2201      	movs	r2, #1
 8004646:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	b2da      	uxtb	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	799b      	ldrb	r3, [r3, #6]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d102      	bne.n	8004662 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	799b      	ldrb	r3, [r3, #6]
 800466a:	461a      	mov	r2, r3
 800466c:	6979      	ldr	r1, [r7, #20]
 800466e:	f002 f9d9 	bl	8006a24 <USB_EPStartXfer>

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	7912      	ldrb	r2, [r2, #4]
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e04f      	b.n	800473a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800469a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da0f      	bge.n	80046c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	3310      	adds	r3, #16
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	3304      	adds	r3, #4
 80046b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	705a      	strb	r2, [r3, #1]
 80046c0:	e00d      	b.n	80046de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	3304      	adds	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_PCD_EP_SetStall+0x82>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e01d      	b.n	800473a <HAL_PCD_EP_SetStall+0xbe>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	4618      	mov	r0, r3
 800470e:	f002 fd67 	bl	80071e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7999      	ldrb	r1, [r3, #6]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800472a:	461a      	mov	r2, r3
 800472c:	f002 ff58 	bl	80075e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	7912      	ldrb	r2, [r2, #4]
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e042      	b.n	80047e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004764:	2b00      	cmp	r3, #0
 8004766:	da0f      	bge.n	8004788 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 020f 	and.w	r2, r3, #15
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	3310      	adds	r3, #16
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4413      	add	r3, r2
 800477c:	3304      	adds	r3, #4
 800477e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	705a      	strb	r2, [r3, #1]
 8004786:	e00f      	b.n	80047a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	3304      	adds	r3, #4
 80047a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_PCD_EP_ClrStall+0x86>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e00e      	b.n	80047e6 <HAL_PCD_EP_ClrStall+0xa4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68f9      	ldr	r1, [r7, #12]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f002 fd70 	bl	80072bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da0c      	bge.n	800481c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	f003 020f 	and.w	r2, r3, #15
 8004808:	4613      	mov	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	3310      	adds	r3, #16
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	3304      	adds	r3, #4
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e00c      	b.n	8004836 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	f003 020f 	and.w	r2, r3, #15
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	3304      	adds	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	4618      	mov	r0, r3
 800483e:	f002 fb8f 	bl	8006f60 <USB_EPStopXfer>
 8004842:	4603      	mov	r3, r0
 8004844:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004846:	7afb      	ldrb	r3, [r7, #11]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	@ 0x28
 8004854:	af02      	add	r7, sp, #8
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	3310      	adds	r3, #16
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	4413      	add	r3, r2
 8004874:	3304      	adds	r3, #4
 8004876:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	429a      	cmp	r2, r3
 8004882:	d901      	bls.n	8004888 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e06b      	b.n	8004960 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	429a      	cmp	r2, r3
 800489c:	d902      	bls.n	80048a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3303      	adds	r3, #3
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048ac:	e02a      	b.n	8004904 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d902      	bls.n	80048ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3303      	adds	r3, #3
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4603      	mov	r3, r0
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	f002 fbe4 	bl	80070b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	441a      	add	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	429a      	cmp	r2, r3
 8004918:	d809      	bhi.n	800492e <PCD_WriteEmptyTxFifo+0xde>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004922:	429a      	cmp	r2, r3
 8004924:	d203      	bcs.n	800492e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1bf      	bne.n	80048ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	429a      	cmp	r2, r3
 8004938:	d811      	bhi.n	800495e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	2201      	movs	r2, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	43db      	mvns	r3, r3
 8004954:	6939      	ldr	r1, [r7, #16]
 8004956:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800495a:	4013      	ands	r3, r2
 800495c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	333c      	adds	r3, #60	@ 0x3c
 8004980:	3304      	adds	r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	799b      	ldrb	r3, [r3, #6]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d17b      	bne.n	8004a96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d015      	beq.n	80049d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4a61      	ldr	r2, [pc, #388]	@ (8004b30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	f240 80b9 	bls.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80b3 	beq.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049d0:	6093      	str	r3, [r2, #8]
 80049d2:	e0a7      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ea:	461a      	mov	r2, r3
 80049ec:	2320      	movs	r3, #32
 80049ee:	6093      	str	r3, [r2, #8]
 80049f0:	e098      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8093 	bne.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	4a4b      	ldr	r2, [pc, #300]	@ (8004b30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d90f      	bls.n	8004a26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a22:	6093      	str	r3, [r2, #8]
 8004a24:	e07e      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	3304      	adds	r3, #4
 8004a3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	440b      	add	r3, r1
 8004a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d114      	bne.n	8004a88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a70:	461a      	mov	r2, r3
 8004a72:	2101      	movs	r1, #1
 8004a74:	f002 fdb4 	bl	80075e0 <USB_EP0_OutStart>
 8004a78:	e006      	b.n	8004a88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	441a      	add	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f007 fe8e 	bl	800c7b0 <HAL_PCD_DataOutStageCallback>
 8004a94:	e046      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	4a26      	ldr	r2, [pc, #152]	@ (8004b34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d124      	bne.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aba:	6093      	str	r3, [r2, #8]
 8004abc:	e032      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f007 fe65 	bl	800c7b0 <HAL_PCD_DataOutStageCallback>
 8004ae6:	e01d      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d114      	bne.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b10:	461a      	mov	r2, r3
 8004b12:	2100      	movs	r1, #0
 8004b14:	f002 fd64 	bl	80075e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f007 fe46 	bl	800c7b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	4f54300a 	.word	0x4f54300a
 8004b34:	4f54310a 	.word	0x4f54310a

08004b38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	333c      	adds	r3, #60	@ 0x3c
 8004b50:	3304      	adds	r3, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d90e      	bls.n	8004b8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f007 fdfd 	bl	800c78c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d90c      	bls.n	8004bb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	799b      	ldrb	r3, [r3, #6]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d108      	bne.n	8004bb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bac:	461a      	mov	r2, r3
 8004bae:	2101      	movs	r1, #1
 8004bb0:	f002 fd16 	bl	80075e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	4f54300a 	.word	0x4f54300a

08004bc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004be2:	883b      	ldrh	r3, [r7, #0]
 8004be4:	0419      	lsls	r1, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bf0:	e028      	b.n	8004c44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
 8004c04:	e00d      	b.n	8004c22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	3340      	adds	r3, #64	@ 0x40
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4413      	add	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3ec      	bcc.n	8004c06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c2c:	883b      	ldrh	r3, [r7, #0]
 8004c2e:	0418      	lsls	r0, r3, #16
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	4302      	orrs	r2, r0
 8004c3c:	3340      	adds	r3, #64	@ 0x40
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e267      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d075      	beq.n	8004d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004caa:	4b88      	ldr	r3, [pc, #544]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4b85      	ldr	r3, [pc, #532]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d112      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc2:	4b82      	ldr	r3, [pc, #520]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cce:	d10b      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d157      	bne.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e242      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCC_OscConfig+0x74>
 8004cf2:	4b76      	ldr	r3, [pc, #472]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x98>
 8004d0a:	4b70      	ldr	r3, [pc, #448]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b6d      	ldr	r3, [pc, #436]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d24:	4b69      	ldr	r3, [pc, #420]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a68      	ldr	r2, [pc, #416]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b66      	ldr	r3, [pc, #408]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fd f890 	bl	8001e68 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fd f88c 	bl	8001e68 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e207      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fd f87c 	bl	8001e68 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fd f878 	bl	8001e68 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	@ 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1f3      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	4b51      	ldr	r3, [pc, #324]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004da2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b47      	ldr	r3, [pc, #284]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dba:	4b44      	ldr	r3, [pc, #272]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e1c7      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4937      	ldr	r1, [pc, #220]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	e03a      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	4b34      	ldr	r3, [pc, #208]	@ (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fd f831 	bl	8001e68 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fd f82d 	bl	8001e68 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1a8      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b28      	ldr	r3, [pc, #160]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4925      	ldr	r1, [pc, #148]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	e015      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fd f810 	bl	8001e68 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fd f80c 	bl	8001e68 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e187      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fc fff0 	bl	8001e68 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e8c:	f7fc ffec 	bl	8001e68 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e167      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x200>
 8004eaa:	e01b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eac:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fc ffd9 	bl	8001e68 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	e00e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eba:	f7fc ffd5 	bl	8001e68 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d907      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e150      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	42470000 	.word	0x42470000
 8004ed4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	4b88      	ldr	r3, [pc, #544]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ea      	bne.n	8004eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8097 	beq.w	8005020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef6:	4b81      	ldr	r3, [pc, #516]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	4b7d      	ldr	r3, [pc, #500]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f12:	4b7a      	ldr	r3, [pc, #488]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b77      	ldr	r3, [pc, #476]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4b74      	ldr	r3, [pc, #464]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a73      	ldr	r2, [pc, #460]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fc ff95 	bl	8001e68 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fc ff91 	bl	8001e68 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e10c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b6a      	ldr	r3, [pc, #424]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2ea>
 8004f68:	4b64      	ldr	r3, [pc, #400]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6c:	4a63      	ldr	r2, [pc, #396]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x30c>
 8004f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	4a5e      	ldr	r2, [pc, #376]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f98:	4b58      	ldr	r3, [pc, #352]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9c:	4a57      	ldr	r2, [pc, #348]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa4:	4b55      	ldr	r3, [pc, #340]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa8:	4a54      	ldr	r2, [pc, #336]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fc ff56 	bl	8001e68 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fc ff52 	bl	8001e68 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0cb      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	4b49      	ldr	r3, [pc, #292]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe4:	f7fc ff40 	bl	8001e68 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fc ff3c 	bl	8001e68 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0b5      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005014:	4b39      	ldr	r3, [pc, #228]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	4a38      	ldr	r2, [pc, #224]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a1 	beq.w	800516c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502a:	4b34      	ldr	r3, [pc, #208]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d05c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d141      	bne.n	80050c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b31      	ldr	r3, [pc, #196]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fc ff10 	bl	8001e68 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504c:	f7fc ff0c 	bl	8001e68 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e087      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b27      	ldr	r3, [pc, #156]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	491b      	ldr	r1, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fc fee5 	bl	8001e68 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fc fee1 	bl	8001e68 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e05c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	4b11      	ldr	r3, [pc, #68]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x416>
 80050c0:	e054      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fc fece 	bl	8001e68 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fc feca 	bl	8001e68 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e045      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x444>
 80050ee:	e03d      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e038      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
 8005104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005108:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_RCC_OscConfig+0x4ec>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d028      	beq.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d121      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d11a      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800513e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d111      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cc      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b68      	ldr	r3, [pc, #416]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b65      	ldr	r3, [pc, #404]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3f      	ldr	r3, [pc, #252]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3b      	ldr	r3, [pc, #236]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e067      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b37      	ldr	r3, [pc, #220]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4934      	ldr	r1, [pc, #208]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fc fdfc 	bl	8001e68 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fc fdf8 	bl	8001e68 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	@ (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fc fc6e 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	0800d0f0 	.word	0x0800d0f0
 8005340:	20000000 	.word	0x20000000
 8005344:	20000004 	.word	0x20000004

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b090      	sub	sp, #64	@ 0x40
 800534e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005360:	4b59      	ldr	r3, [pc, #356]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00d      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800536c:	2b08      	cmp	r3, #8
 800536e:	f200 80a1 	bhi.w	80054b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
 8005376:	2b04      	cmp	r3, #4
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800537a:	e09b      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b53      	ldr	r3, [pc, #332]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x184>)
 800537e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005380:	e09b      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b53      	ldr	r3, [pc, #332]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005384:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005386:	e098      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005388:	4b4f      	ldr	r3, [pc, #316]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005390:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005392:	4b4d      	ldr	r3, [pc, #308]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d028      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b4a      	ldr	r3, [pc, #296]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053b0:	2100      	movs	r1, #0
 80053b2:	4b47      	ldr	r3, [pc, #284]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053b4:	fb03 f201 	mul.w	r2, r3, r1
 80053b8:	2300      	movs	r3, #0
 80053ba:	fb00 f303 	mul.w	r3, r0, r3
 80053be:	4413      	add	r3, r2
 80053c0:	4a43      	ldr	r2, [pc, #268]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053c2:	fba0 1202 	umull	r1, r2, r0, r2
 80053c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053c8:	460a      	mov	r2, r1
 80053ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ce:	4413      	add	r3, r2
 80053d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d4:	2200      	movs	r2, #0
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	61fa      	str	r2, [r7, #28]
 80053da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053e2:	f7fa fefd 	bl	80001e0 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4613      	mov	r3, r2
 80053ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ee:	e053      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f0:	4b35      	ldr	r3, [pc, #212]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	2200      	movs	r2, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	617a      	str	r2, [r7, #20]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005402:	f04f 0b00 	mov.w	fp, #0
 8005406:	4652      	mov	r2, sl
 8005408:	465b      	mov	r3, fp
 800540a:	f04f 0000 	mov.w	r0, #0
 800540e:	f04f 0100 	mov.w	r1, #0
 8005412:	0159      	lsls	r1, r3, #5
 8005414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005418:	0150      	lsls	r0, r2, #5
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	ebb2 080a 	subs.w	r8, r2, sl
 8005422:	eb63 090b 	sbc.w	r9, r3, fp
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005432:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005436:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800543a:	ebb2 0408 	subs.w	r4, r2, r8
 800543e:	eb63 0509 	sbc.w	r5, r3, r9
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	00eb      	lsls	r3, r5, #3
 800544c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005450:	00e2      	lsls	r2, r4, #3
 8005452:	4614      	mov	r4, r2
 8005454:	461d      	mov	r5, r3
 8005456:	eb14 030a 	adds.w	r3, r4, sl
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	eb45 030b 	adc.w	r3, r5, fp
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800546e:	4629      	mov	r1, r5
 8005470:	028b      	lsls	r3, r1, #10
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005478:	4621      	mov	r1, r4
 800547a:	028a      	lsls	r2, r1, #10
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005482:	2200      	movs	r2, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800548c:	f7fa fea8 	bl	80001e0 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005498:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	3301      	adds	r3, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80054a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b4:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x184>)
 80054b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3740      	adds	r7, #64	@ 0x40
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	017d7840 	.word	0x017d7840

080054d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b03      	ldr	r3, [pc, #12]	@ (80054e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000000 	.word	0x20000000

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054f0:	f7ff fff0 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	@ (800550c <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0a9b      	lsrs	r3, r3, #10
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	@ (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	0800d100 	.word	0x0800d100

08005514 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	220f      	movs	r2, #15
 8005522:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005524:	4b12      	ldr	r3, [pc, #72]	@ (8005570 <HAL_RCC_GetClockConfig+0x5c>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0203 	and.w	r2, r3, #3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005530:	4b0f      	ldr	r3, [pc, #60]	@ (8005570 <HAL_RCC_GetClockConfig+0x5c>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800553c:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <HAL_RCC_GetClockConfig+0x5c>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005548:	4b09      	ldr	r3, [pc, #36]	@ (8005570 <HAL_RCC_GetClockConfig+0x5c>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	08db      	lsrs	r3, r3, #3
 800554e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005556:	4b07      	ldr	r3, [pc, #28]	@ (8005574 <HAL_RCC_GetClockConfig+0x60>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0207 	and.w	r2, r3, #7
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	601a      	str	r2, [r3, #0]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40023800 	.word	0x40023800
 8005574:	40023c00 	.word	0x40023c00

08005578 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e07b      	b.n	8005682 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800559a:	d009      	beq.n	80055b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	61da      	str	r2, [r3, #28]
 80055a2:	e005      	b.n	80055b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fc fad2 	bl	8001b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005634:	ea42 0103 	orr.w	r1, r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	f003 0104 	and.w	r1, r3, #4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005656:	f003 0210 	and.w	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005670:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b08a      	sub	sp, #40	@ 0x28
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005698:	2301      	movs	r3, #1
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800569c:	f7fc fbe4 	bl	8001e68 <HAL_GetTick>
 80056a0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056a8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056b0:	887b      	ldrh	r3, [r7, #2]
 80056b2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056b4:	7ffb      	ldrb	r3, [r7, #31]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d00c      	beq.n	80056d4 <HAL_SPI_TransmitReceive+0x4a>
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c0:	d106      	bne.n	80056d0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <HAL_SPI_TransmitReceive+0x46>
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d001      	beq.n	80056d4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
 80056d2:	e17f      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_SPI_TransmitReceive+0x5c>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_SPI_TransmitReceive+0x5c>
 80056e0:	887b      	ldrh	r3, [r7, #2]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e174      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x6e>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e16d      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x34a>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b04      	cmp	r3, #4
 800570a:	d003      	beq.n	8005714 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2205      	movs	r2, #5
 8005710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	887a      	ldrh	r2, [r7, #2]
 8005724:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	887a      	ldrh	r2, [r7, #2]
 800572a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	887a      	ldrh	r2, [r7, #2]
 8005736:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	887a      	ldrh	r2, [r7, #2]
 800573c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005754:	2b40      	cmp	r3, #64	@ 0x40
 8005756:	d007      	beq.n	8005768 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005766:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005770:	d17e      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_SPI_TransmitReceive+0xf6>
 800577a:	8afb      	ldrh	r3, [r7, #22]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d16c      	bne.n	800585a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005784:	881a      	ldrh	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005790:	1c9a      	adds	r2, r3, #2
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057a4:	e059      	b.n	800585a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d11b      	bne.n	80057ec <HAL_SPI_TransmitReceive+0x162>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d016      	beq.n	80057ec <HAL_SPI_TransmitReceive+0x162>
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d113      	bne.n	80057ec <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	881a      	ldrh	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	1c9a      	adds	r2, r3, #2
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d119      	bne.n	800582e <HAL_SPI_TransmitReceive+0x1a4>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d014      	beq.n	800582e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580e:	b292      	uxth	r2, r2
 8005810:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005816:	1c9a      	adds	r2, r3, #2
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800582a:	2301      	movs	r3, #1
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800582e:	f7fc fb1b 	bl	8001e68 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800583a:	429a      	cmp	r2, r3
 800583c:	d80d      	bhi.n	800585a <HAL_SPI_TransmitReceive+0x1d0>
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d009      	beq.n	800585a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e0bc      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1a0      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x11c>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d19b      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x11c>
 800586e:	e082      	b.n	8005976 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_SPI_TransmitReceive+0x1f4>
 8005878:	8afb      	ldrh	r3, [r7, #22]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d171      	bne.n	8005962 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	7812      	ldrb	r2, [r2, #0]
 800588a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058a4:	e05d      	b.n	8005962 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d11c      	bne.n	80058ee <HAL_SPI_TransmitReceive+0x264>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d017      	beq.n	80058ee <HAL_SPI_TransmitReceive+0x264>
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d114      	bne.n	80058ee <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	7812      	ldrb	r2, [r2, #0]
 80058d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d119      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x2a6>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d014      	beq.n	8005930 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800592c:	2301      	movs	r3, #1
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005930:	f7fc fa9a 	bl	8001e68 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800593c:	429a      	cmp	r2, r3
 800593e:	d803      	bhi.n	8005948 <HAL_SPI_TransmitReceive+0x2be>
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d102      	bne.n	800594e <HAL_SPI_TransmitReceive+0x2c4>
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e038      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d19c      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0x21c>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d197      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f8b6 	bl	8005aec <SPI_EndRxTxTransaction>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e01d      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3728      	adds	r7, #40	@ 0x28
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059ec:	f7fc fa3c 	bl	8001e68 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	4413      	add	r3, r2
 80059fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059fc:	f7fc fa34 	bl	8001e68 <HAL_GetTick>
 8005a00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a02:	4b39      	ldr	r3, [pc, #228]	@ (8005ae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	015b      	lsls	r3, r3, #5
 8005a08:	0d1b      	lsrs	r3, r3, #20
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a12:	e055      	b.n	8005ac0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1a:	d051      	beq.n	8005ac0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a1c:	f7fc fa24 	bl	8001e68 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d902      	bls.n	8005a32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d13d      	bne.n	8005aae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a4a:	d111      	bne.n	8005a70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a54:	d004      	beq.n	8005a60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5e:	d107      	bne.n	8005a70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a78:	d10f      	bne.n	8005a9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e018      	b.n	8005ae0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	e002      	b.n	8005ac0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	bf0c      	ite	eq
 8005ad0:	2301      	moveq	r3, #1
 8005ad2:	2300      	movne	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d19a      	bne.n	8005a14 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000000 	.word	0x20000000

08005aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2201      	movs	r2, #1
 8005b00:	2102      	movs	r1, #2
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff ff6a 	bl	80059dc <SPI_WaitFlagStateUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b12:	f043 0220 	orr.w	r2, r3, #32
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e032      	b.n	8005b84 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b8c <SPI_EndRxTxTransaction+0xa0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1b      	ldr	r2, [pc, #108]	@ (8005b90 <SPI_EndRxTxTransaction+0xa4>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	0d5b      	lsrs	r3, r3, #21
 8005b2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b3c:	d112      	bne.n	8005b64 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2200      	movs	r2, #0
 8005b46:	2180      	movs	r1, #128	@ 0x80
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7ff ff47 	bl	80059dc <SPI_WaitFlagStateUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d016      	beq.n	8005b82 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b58:	f043 0220 	orr.w	r2, r3, #32
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e00f      	b.n	8005b84 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7a:	2b80      	cmp	r3, #128	@ 0x80
 8005b7c:	d0f2      	beq.n	8005b64 <SPI_EndRxTxTransaction+0x78>
 8005b7e:	e000      	b.n	8005b82 <SPI_EndRxTxTransaction+0x96>
        break;
 8005b80:	bf00      	nop
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000000 	.word	0x20000000
 8005b90:	165e9f81 	.word	0x165e9f81

08005b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e041      	b.n	8005c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f839 	bl	8005c32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f000 f9b2 	bl	8005f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d001      	beq.n	8005c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e044      	b.n	8005cea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d018      	beq.n	8005cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c8a:	d013      	beq.n	8005cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1a      	ldr	r2, [pc, #104]	@ (8005cfc <HAL_TIM_Base_Start_IT+0xb4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00e      	beq.n	8005cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a19      	ldr	r2, [pc, #100]	@ (8005d00 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a17      	ldr	r2, [pc, #92]	@ (8005d04 <HAL_TIM_Base_Start_IT+0xbc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <HAL_TIM_Base_Start_IT+0x6c>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a16      	ldr	r2, [pc, #88]	@ (8005d08 <HAL_TIM_Base_Start_IT+0xc0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d111      	bne.n	8005cd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b06      	cmp	r3, #6
 8005cc4:	d010      	beq.n	8005ce8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0201 	orr.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd6:	e007      	b.n	8005ce8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800
 8005d04:	40000c00 	.word	0x40000c00
 8005d08:	40014000 	.word	0x40014000

08005d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d020      	beq.n	8005d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01b      	beq.n	8005d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0202 	mvn.w	r2, #2
 8005d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f8d2 	bl	8005f00 <HAL_TIM_IC_CaptureCallback>
 8005d5c:	e005      	b.n	8005d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f8c4 	bl	8005eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f8d5 	bl	8005f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d020      	beq.n	8005dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01b      	beq.n	8005dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0204 	mvn.w	r2, #4
 8005d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f8ac 	bl	8005f00 <HAL_TIM_IC_CaptureCallback>
 8005da8:	e005      	b.n	8005db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f89e 	bl	8005eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f8af 	bl	8005f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d020      	beq.n	8005e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01b      	beq.n	8005e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0208 	mvn.w	r2, #8
 8005dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2204      	movs	r2, #4
 8005dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f886 	bl	8005f00 <HAL_TIM_IC_CaptureCallback>
 8005df4:	e005      	b.n	8005e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f878 	bl	8005eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f889 	bl	8005f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 0310 	and.w	r3, r3, #16
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d020      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01b      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0210 	mvn.w	r2, #16
 8005e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2208      	movs	r2, #8
 8005e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f860 	bl	8005f00 <HAL_TIM_IC_CaptureCallback>
 8005e40:	e005      	b.n	8005e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f852 	bl	8005eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f863 	bl	8005f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00c      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0201 	mvn.w	r2, #1
 8005e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fa fe00 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00c      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f8e0 	bl	800605c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00c      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f834 	bl	8005f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00c      	beq.n	8005ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d007      	beq.n	8005ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0220 	mvn.w	r2, #32
 8005edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f8b2 	bl	8006048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a37      	ldr	r2, [pc, #220]	@ (800602c <TIM_Base_SetConfig+0xf0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00f      	beq.n	8005f74 <TIM_Base_SetConfig+0x38>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f5a:	d00b      	beq.n	8005f74 <TIM_Base_SetConfig+0x38>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a34      	ldr	r2, [pc, #208]	@ (8006030 <TIM_Base_SetConfig+0xf4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d007      	beq.n	8005f74 <TIM_Base_SetConfig+0x38>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a33      	ldr	r2, [pc, #204]	@ (8006034 <TIM_Base_SetConfig+0xf8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_Base_SetConfig+0x38>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a32      	ldr	r2, [pc, #200]	@ (8006038 <TIM_Base_SetConfig+0xfc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d108      	bne.n	8005f86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a28      	ldr	r2, [pc, #160]	@ (800602c <TIM_Base_SetConfig+0xf0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d01b      	beq.n	8005fc6 <TIM_Base_SetConfig+0x8a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f94:	d017      	beq.n	8005fc6 <TIM_Base_SetConfig+0x8a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a25      	ldr	r2, [pc, #148]	@ (8006030 <TIM_Base_SetConfig+0xf4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <TIM_Base_SetConfig+0x8a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a24      	ldr	r2, [pc, #144]	@ (8006034 <TIM_Base_SetConfig+0xf8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_Base_SetConfig+0x8a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a23      	ldr	r2, [pc, #140]	@ (8006038 <TIM_Base_SetConfig+0xfc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_Base_SetConfig+0x8a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a22      	ldr	r2, [pc, #136]	@ (800603c <TIM_Base_SetConfig+0x100>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_Base_SetConfig+0x8a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a21      	ldr	r2, [pc, #132]	@ (8006040 <TIM_Base_SetConfig+0x104>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_Base_SetConfig+0x8a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a20      	ldr	r2, [pc, #128]	@ (8006044 <TIM_Base_SetConfig+0x108>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d108      	bne.n	8005fd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800602c <TIM_Base_SetConfig+0xf0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d103      	bne.n	8006006 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f043 0204 	orr.w	r2, r3, #4
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	601a      	str	r2, [r3, #0]
}
 800601e:	bf00      	nop
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40010000 	.word	0x40010000
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40000c00 	.word	0x40000c00
 800603c:	40014000 	.word	0x40014000
 8006040:	40014400 	.word	0x40014400
 8006044:	40014800 	.word	0x40014800

08006048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006070:	b084      	sub	sp, #16
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	f107 001c 	add.w	r0, r7, #28
 800607e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006082:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006086:	2b01      	cmp	r3, #1
 8006088:	d123      	bne.n	80060d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800609e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d105      	bne.n	80060c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 fae8 	bl	800769c <USB_CoreReset>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
 80060d0:	e01b      	b.n	800610a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 fadc 	bl	800769c <USB_CoreReset>
 80060e4:	4603      	mov	r3, r0
 80060e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d106      	bne.n	80060fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80060fc:	e005      	b.n	800610a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006102:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800610a:	7fbb      	ldrb	r3, [r7, #30]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10b      	bne.n	8006128 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f043 0206 	orr.w	r2, r3, #6
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f043 0220 	orr.w	r2, r3, #32
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006134:	b004      	add	sp, #16
 8006136:	4770      	bx	lr

08006138 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d165      	bne.n	8006218 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4a41      	ldr	r2, [pc, #260]	@ (8006254 <USB_SetTurnaroundTime+0x11c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d906      	bls.n	8006162 <USB_SetTurnaroundTime+0x2a>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4a40      	ldr	r2, [pc, #256]	@ (8006258 <USB_SetTurnaroundTime+0x120>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d202      	bcs.n	8006162 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800615c:	230f      	movs	r3, #15
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e062      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4a3c      	ldr	r2, [pc, #240]	@ (8006258 <USB_SetTurnaroundTime+0x120>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d306      	bcc.n	8006178 <USB_SetTurnaroundTime+0x40>
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4a3b      	ldr	r2, [pc, #236]	@ (800625c <USB_SetTurnaroundTime+0x124>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d202      	bcs.n	8006178 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006172:	230e      	movs	r3, #14
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	e057      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4a38      	ldr	r2, [pc, #224]	@ (800625c <USB_SetTurnaroundTime+0x124>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d306      	bcc.n	800618e <USB_SetTurnaroundTime+0x56>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4a37      	ldr	r2, [pc, #220]	@ (8006260 <USB_SetTurnaroundTime+0x128>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d202      	bcs.n	800618e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006188:	230d      	movs	r3, #13
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e04c      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4a33      	ldr	r2, [pc, #204]	@ (8006260 <USB_SetTurnaroundTime+0x128>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d306      	bcc.n	80061a4 <USB_SetTurnaroundTime+0x6c>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	4a32      	ldr	r2, [pc, #200]	@ (8006264 <USB_SetTurnaroundTime+0x12c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d802      	bhi.n	80061a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800619e:	230c      	movs	r3, #12
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	e041      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4a2f      	ldr	r2, [pc, #188]	@ (8006264 <USB_SetTurnaroundTime+0x12c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d906      	bls.n	80061ba <USB_SetTurnaroundTime+0x82>
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4a2e      	ldr	r2, [pc, #184]	@ (8006268 <USB_SetTurnaroundTime+0x130>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d802      	bhi.n	80061ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80061b4:	230b      	movs	r3, #11
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e036      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006268 <USB_SetTurnaroundTime+0x130>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d906      	bls.n	80061d0 <USB_SetTurnaroundTime+0x98>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4a29      	ldr	r2, [pc, #164]	@ (800626c <USB_SetTurnaroundTime+0x134>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d802      	bhi.n	80061d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80061ca:	230a      	movs	r3, #10
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	e02b      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4a26      	ldr	r2, [pc, #152]	@ (800626c <USB_SetTurnaroundTime+0x134>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d906      	bls.n	80061e6 <USB_SetTurnaroundTime+0xae>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4a25      	ldr	r2, [pc, #148]	@ (8006270 <USB_SetTurnaroundTime+0x138>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d202      	bcs.n	80061e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80061e0:	2309      	movs	r3, #9
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	e020      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	4a21      	ldr	r2, [pc, #132]	@ (8006270 <USB_SetTurnaroundTime+0x138>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d306      	bcc.n	80061fc <USB_SetTurnaroundTime+0xc4>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4a20      	ldr	r2, [pc, #128]	@ (8006274 <USB_SetTurnaroundTime+0x13c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d802      	bhi.n	80061fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80061f6:	2308      	movs	r3, #8
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	e015      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006274 <USB_SetTurnaroundTime+0x13c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d906      	bls.n	8006212 <USB_SetTurnaroundTime+0xda>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4a1c      	ldr	r2, [pc, #112]	@ (8006278 <USB_SetTurnaroundTime+0x140>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d202      	bcs.n	8006212 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800620c:	2307      	movs	r3, #7
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e00a      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006212:	2306      	movs	r3, #6
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	e007      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800621e:	2309      	movs	r3, #9
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	e001      	b.n	8006228 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006224:	2309      	movs	r3, #9
 8006226:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	029b      	lsls	r3, r3, #10
 800623c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006240:	431a      	orrs	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	00d8acbf 	.word	0x00d8acbf
 8006258:	00e4e1c0 	.word	0x00e4e1c0
 800625c:	00f42400 	.word	0x00f42400
 8006260:	01067380 	.word	0x01067380
 8006264:	011a499f 	.word	0x011a499f
 8006268:	01312cff 	.word	0x01312cff
 800626c:	014ca43f 	.word	0x014ca43f
 8006270:	016e3600 	.word	0x016e3600
 8006274:	01a6ab1f 	.word	0x01a6ab1f
 8006278:	01e84800 	.word	0x01e84800

0800627c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f043 0201 	orr.w	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f023 0201 	bic.w	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062dc:	78fb      	ldrb	r3, [r7, #3]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d115      	bne.n	800630e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062ee:	200a      	movs	r0, #10
 80062f0:	f7fb fdc6 	bl	8001e80 <HAL_Delay>
      ms += 10U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	330a      	adds	r3, #10
 80062f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 f93f 	bl	800757e <USB_GetMode>
 8006300:	4603      	mov	r3, r0
 8006302:	2b01      	cmp	r3, #1
 8006304:	d01e      	beq.n	8006344 <USB_SetCurrentMode+0x84>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2bc7      	cmp	r3, #199	@ 0xc7
 800630a:	d9f0      	bls.n	80062ee <USB_SetCurrentMode+0x2e>
 800630c:	e01a      	b.n	8006344 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d115      	bne.n	8006340 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006320:	200a      	movs	r0, #10
 8006322:	f7fb fdad 	bl	8001e80 <HAL_Delay>
      ms += 10U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	330a      	adds	r3, #10
 800632a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 f926 	bl	800757e <USB_GetMode>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <USB_SetCurrentMode+0x84>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2bc7      	cmp	r3, #199	@ 0xc7
 800633c:	d9f0      	bls.n	8006320 <USB_SetCurrentMode+0x60>
 800633e:	e001      	b.n	8006344 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e005      	b.n	8006350 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2bc8      	cmp	r3, #200	@ 0xc8
 8006348:	d101      	bne.n	800634e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006358:	b084      	sub	sp, #16
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006372:	2300      	movs	r3, #0
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	e009      	b.n	800638c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	3340      	adds	r3, #64	@ 0x40
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	2200      	movs	r2, #0
 8006384:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	3301      	adds	r3, #1
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b0e      	cmp	r3, #14
 8006390:	d9f2      	bls.n	8006378 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006392:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006396:	2b00      	cmp	r3, #0
 8006398:	d11c      	bne.n	80063d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063a8:	f043 0302 	orr.w	r3, r3, #2
 80063ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80063d2:	e00b      	b.n	80063ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063f2:	461a      	mov	r2, r3
 80063f4:	2300      	movs	r3, #0
 80063f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d10d      	bne.n	800641c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006408:	2100      	movs	r1, #0
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f968 	bl	80066e0 <USB_SetDevSpeed>
 8006410:	e008      	b.n	8006424 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006412:	2101      	movs	r1, #1
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f963 	bl	80066e0 <USB_SetDevSpeed>
 800641a:	e003      	b.n	8006424 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800641c:	2103      	movs	r1, #3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f95e 	bl	80066e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006424:	2110      	movs	r1, #16
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f8fa 	bl	8006620 <USB_FlushTxFifo>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f924 	bl	8006684 <USB_FlushRxFifo>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800644c:	461a      	mov	r2, r3
 800644e:	2300      	movs	r3, #0
 8006450:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	461a      	mov	r2, r3
 800645a:	2300      	movs	r3, #0
 800645c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006464:	461a      	mov	r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	e043      	b.n	80064f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006482:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006486:	d118      	bne.n	80064ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800649a:	461a      	mov	r2, r3
 800649c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	e013      	b.n	80064cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b0:	461a      	mov	r2, r3
 80064b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	e008      	b.n	80064cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c6:	461a      	mov	r2, r3
 80064c8:	2300      	movs	r3, #0
 80064ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d8:	461a      	mov	r2, r3
 80064da:	2300      	movs	r3, #0
 80064dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ea:	461a      	mov	r2, r3
 80064ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	3301      	adds	r3, #1
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064fc:	461a      	mov	r2, r3
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4293      	cmp	r3, r2
 8006502:	d3b5      	bcc.n	8006470 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006504:	2300      	movs	r3, #0
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	e043      	b.n	8006592 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800651c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006520:	d118      	bne.n	8006554 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006534:	461a      	mov	r2, r3
 8006536:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	e013      	b.n	8006566 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654a:	461a      	mov	r2, r3
 800654c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e008      	b.n	8006566 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006560:	461a      	mov	r2, r3
 8006562:	2300      	movs	r3, #0
 8006564:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006572:	461a      	mov	r2, r3
 8006574:	2300      	movs	r3, #0
 8006576:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006584:	461a      	mov	r2, r3
 8006586:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800658a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	3301      	adds	r3, #1
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006596:	461a      	mov	r2, r3
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4293      	cmp	r3, r2
 800659c:	d3b5      	bcc.n	800650a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80065be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d105      	bne.n	80065d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f043 0210 	orr.w	r2, r3, #16
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699a      	ldr	r2, [r3, #24]
 80065d8:	4b10      	ldr	r3, [pc, #64]	@ (800661c <USB_DevInit+0x2c4>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d005      	beq.n	80065f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f043 0208 	orr.w	r2, r3, #8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d107      	bne.n	800660c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006604:	f043 0304 	orr.w	r3, r3, #4
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006618:	b004      	add	sp, #16
 800661a:	4770      	bx	lr
 800661c:	803c3800 	.word	0x803c3800

08006620 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800663a:	d901      	bls.n	8006640 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e01b      	b.n	8006678 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	daf2      	bge.n	800662e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	019b      	lsls	r3, r3, #6
 8006650:	f043 0220 	orr.w	r2, r3, #32
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3301      	adds	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006664:	d901      	bls.n	800666a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e006      	b.n	8006678 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b20      	cmp	r3, #32
 8006674:	d0f0      	beq.n	8006658 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3301      	adds	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800669c:	d901      	bls.n	80066a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e018      	b.n	80066d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	daf2      	bge.n	8006690 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2210      	movs	r2, #16
 80066b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066c0:	d901      	bls.n	80066c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e006      	b.n	80066d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d0f0      	beq.n	80066b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	68f9      	ldr	r1, [r7, #12]
 80066fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006700:	4313      	orrs	r3, r2
 8006702:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b087      	sub	sp, #28
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0306 	and.w	r3, r3, #6
 800672a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006732:	2300      	movs	r3, #0
 8006734:	75fb      	strb	r3, [r7, #23]
 8006736:	e00a      	b.n	800674e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d002      	beq.n	8006744 <USB_GetDevSpeed+0x32>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b06      	cmp	r3, #6
 8006742:	d102      	bne.n	800674a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006744:	2302      	movs	r3, #2
 8006746:	75fb      	strb	r3, [r7, #23]
 8006748:	e001      	b.n	800674e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800674a:	230f      	movs	r3, #15
 800674c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800674e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006750:	4618      	mov	r0, r3
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d13a      	bne.n	80067ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	2101      	movs	r1, #1
 800678a:	fa01 f303 	lsl.w	r3, r1, r3
 800678e:	b29b      	uxth	r3, r3
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006796:	4313      	orrs	r3, r2
 8006798:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d155      	bne.n	800685c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	791b      	ldrb	r3, [r3, #4]
 80067ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	059b      	lsls	r3, r3, #22
 80067d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067d4:	4313      	orrs	r3, r2
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	e036      	b.n	800685c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f4:	69da      	ldr	r2, [r3, #28]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	2101      	movs	r1, #1
 8006800:	fa01 f303 	lsl.w	r3, r1, r3
 8006804:	041b      	lsls	r3, r3, #16
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800680c:	4313      	orrs	r3, r2
 800680e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d11a      	bne.n	800685c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	791b      	ldrb	r3, [r3, #4]
 8006840:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006842:	430b      	orrs	r3, r1
 8006844:	4313      	orrs	r3, r2
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800685a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d161      	bne.n	800694c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800689a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800689e:	d11f      	bne.n	80068e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	2101      	movs	r1, #1
 80068f2:	fa01 f303 	lsl.w	r3, r1, r3
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	43db      	mvns	r3, r3
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006900:	4013      	ands	r3, r2
 8006902:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	2101      	movs	r1, #1
 8006916:	fa01 f303 	lsl.w	r3, r1, r3
 800691a:	b29b      	uxth	r3, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006924:	4013      	ands	r3, r2
 8006926:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	0159      	lsls	r1, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	440b      	add	r3, r1
 800693e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006942:	4619      	mov	r1, r3
 8006944:	4b35      	ldr	r3, [pc, #212]	@ (8006a1c <USB_DeactivateEndpoint+0x1b0>)
 8006946:	4013      	ands	r3, r2
 8006948:	600b      	str	r3, [r1, #0]
 800694a:	e060      	b.n	8006a0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800695e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006962:	d11f      	bne.n	80069a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	440a      	add	r2, r1
 800697a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800697e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006982:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800699e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	2101      	movs	r1, #1
 80069b6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	43db      	mvns	r3, r3
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069c4:	4013      	ands	r3, r2
 80069c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	2101      	movs	r1, #1
 80069da:	fa01 f303 	lsl.w	r3, r1, r3
 80069de:	041b      	lsls	r3, r3, #16
 80069e0:	43db      	mvns	r3, r3
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069e8:	4013      	ands	r3, r2
 80069ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	0159      	lsls	r1, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	440b      	add	r3, r1
 8006a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a06:	4619      	mov	r1, r3
 8006a08:	4b05      	ldr	r3, [pc, #20]	@ (8006a20 <USB_DeactivateEndpoint+0x1b4>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	ec337800 	.word	0xec337800
 8006a20:	eff37800 	.word	0xeff37800

08006a24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08a      	sub	sp, #40	@ 0x28
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	f040 817f 	bne.w	8006d44 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d132      	bne.n	8006ab4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a68:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a6c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	0151      	lsls	r1, r2, #5
 8006aa4:	69fa      	ldr	r2, [r7, #28]
 8006aa6:	440a      	add	r2, r1
 8006aa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aac:	0cdb      	lsrs	r3, r3, #19
 8006aae:	04db      	lsls	r3, r3, #19
 8006ab0:	6113      	str	r3, [r2, #16]
 8006ab2:	e097      	b.n	8006be4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ace:	0cdb      	lsrs	r3, r3, #19
 8006ad0:	04db      	lsls	r3, r3, #19
 8006ad2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006af2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006af6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d11a      	bne.n	8006b34 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	691a      	ldr	r2, [r3, #16]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d903      	bls.n	8006b12 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	0151      	lsls	r1, r2, #5
 8006b24:	69fa      	ldr	r2, [r7, #28]
 8006b26:	440a      	add	r2, r1
 8006b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b30:	6113      	str	r3, [r2, #16]
 8006b32:	e044      	b.n	8006bbe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	691a      	ldr	r2, [r3, #16]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	1e5a      	subs	r2, r3, #1
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b48:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	8afb      	ldrh	r3, [r7, #22]
 8006b5a:	04d9      	lsls	r1, r3, #19
 8006b5c:	4ba4      	ldr	r3, [pc, #656]	@ (8006df0 <USB_EPStartXfer+0x3cc>)
 8006b5e:	400b      	ands	r3, r1
 8006b60:	69b9      	ldr	r1, [r7, #24]
 8006b62:	0148      	lsls	r0, r1, #5
 8006b64:	69f9      	ldr	r1, [r7, #28]
 8006b66:	4401      	add	r1, r0
 8006b68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	791b      	ldrb	r3, [r3, #4]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d122      	bne.n	8006bbe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	0151      	lsls	r1, r2, #5
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	440a      	add	r2, r1
 8006b8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b92:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006b96:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	8afb      	ldrh	r3, [r7, #22]
 8006ba8:	075b      	lsls	r3, r3, #29
 8006baa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006bae:	69b9      	ldr	r1, [r7, #24]
 8006bb0:	0148      	lsls	r0, r1, #5
 8006bb2:	69f9      	ldr	r1, [r7, #28]
 8006bb4:	4401      	add	r1, r0
 8006bb6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	0148      	lsls	r0, r1, #5
 8006bd8:	69f9      	ldr	r1, [r7, #28]
 8006bda:	4401      	add	r1, r0
 8006bdc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006be0:	4313      	orrs	r3, r2
 8006be2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d14b      	bne.n	8006c82 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	791b      	ldrb	r3, [r3, #4]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d128      	bne.n	8006c60 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d110      	bne.n	8006c40 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e00f      	b.n	8006c60 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c5e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	0151      	lsls	r1, r2, #5
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	440a      	add	r2, r1
 8006c76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	e166      	b.n	8006f50 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ca0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	791b      	ldrb	r3, [r3, #4]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d015      	beq.n	8006cd6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 814e 	beq.w	8006f50 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cca:	69f9      	ldr	r1, [r7, #28]
 8006ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	634b      	str	r3, [r1, #52]	@ 0x34
 8006cd4:	e13c      	b.n	8006f50 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d110      	bne.n	8006d08 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	e00f      	b.n	8006d28 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	0151      	lsls	r1, r2, #5
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	440a      	add	r2, r1
 8006d1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d26:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	68d9      	ldr	r1, [r3, #12]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	781a      	ldrb	r2, [r3, #0]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	b298      	uxth	r0, r3
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f9b9 	bl	80070b4 <USB_WritePacket>
 8006d42:	e105      	b.n	8006f50 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d5e:	0cdb      	lsrs	r3, r3, #19
 8006d60:	04db      	lsls	r3, r3, #19
 8006d62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d7e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d82:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d86:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d132      	bne.n	8006df4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dbc:	69b9      	ldr	r1, [r7, #24]
 8006dbe:	0148      	lsls	r0, r1, #5
 8006dc0:	69f9      	ldr	r1, [r7, #28]
 8006dc2:	4401      	add	r1, r0
 8006dc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006dea:	6113      	str	r3, [r2, #16]
 8006dec:	e062      	b.n	8006eb4 <USB_EPStartXfer+0x490>
 8006dee:	bf00      	nop
 8006df0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d123      	bne.n	8006e44 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e12:	69b9      	ldr	r1, [r7, #24]
 8006e14:	0148      	lsls	r0, r1, #5
 8006e16:	69f9      	ldr	r1, [r7, #28]
 8006e18:	4401      	add	r1, r0
 8006e1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e40:	6113      	str	r3, [r2, #16]
 8006e42:	e037      	b.n	8006eb4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	1e5a      	subs	r2, r3, #1
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e58:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	8afa      	ldrh	r2, [r7, #22]
 8006e60:	fb03 f202 	mul.w	r2, r3, r2
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e74:	691a      	ldr	r2, [r3, #16]
 8006e76:	8afb      	ldrh	r3, [r7, #22]
 8006e78:	04d9      	lsls	r1, r3, #19
 8006e7a:	4b38      	ldr	r3, [pc, #224]	@ (8006f5c <USB_EPStartXfer+0x538>)
 8006e7c:	400b      	ands	r3, r1
 8006e7e:	69b9      	ldr	r1, [r7, #24]
 8006e80:	0148      	lsls	r0, r1, #5
 8006e82:	69f9      	ldr	r1, [r7, #28]
 8006e84:	4401      	add	r1, r0
 8006e86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9a:	691a      	ldr	r2, [r3, #16]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ea4:	69b9      	ldr	r1, [r7, #24]
 8006ea6:	0148      	lsls	r0, r1, #5
 8006ea8:	69f9      	ldr	r1, [r7, #28]
 8006eaa:	4401      	add	r1, r0
 8006eac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d10d      	bne.n	8006ed6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	68d9      	ldr	r1, [r3, #12]
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed2:	460a      	mov	r2, r1
 8006ed4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	791b      	ldrb	r3, [r3, #4]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d128      	bne.n	8006f30 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d110      	bne.n	8006f10 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e00f      	b.n	8006f30 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	0151      	lsls	r1, r2, #5
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	440a      	add	r2, r1
 8006f26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	0151      	lsls	r1, r2, #5
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	440a      	add	r2, r1
 8006f46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3720      	adds	r7, #32
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	1ff80000 	.word	0x1ff80000

08006f60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d14a      	bne.n	8007014 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f96:	f040 8086 	bne.w	80070a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	7812      	ldrb	r2, [r2, #0]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006fbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	7812      	ldrb	r2, [r2, #0]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fe0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d902      	bls.n	8006ff8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ff6:	e056      	b.n	80070a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800700c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007010:	d0e7      	beq.n	8006fe2 <USB_EPStopXfer+0x82>
 8007012:	e048      	b.n	80070a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800702c:	d13b      	bne.n	80070a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	7812      	ldrb	r2, [r2, #0]
 8007042:	0151      	lsls	r1, r2, #5
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	440a      	add	r2, r1
 8007048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800704c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007050:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	7812      	ldrb	r2, [r2, #0]
 8007066:	0151      	lsls	r1, r2, #5
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	440a      	add	r2, r1
 800706c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007070:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007074:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007082:	4293      	cmp	r3, r2
 8007084:	d902      	bls.n	800708c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	75fb      	strb	r3, [r7, #23]
          break;
 800708a:	e00c      	b.n	80070a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070a4:	d0e7      	beq.n	8007076 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b089      	sub	sp, #36	@ 0x24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4611      	mov	r1, r2
 80070c0:	461a      	mov	r2, r3
 80070c2:	460b      	mov	r3, r1
 80070c4:	71fb      	strb	r3, [r7, #7]
 80070c6:	4613      	mov	r3, r2
 80070c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80070d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d123      	bne.n	8007122 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80070da:	88bb      	ldrh	r3, [r7, #4]
 80070dc:	3303      	adds	r3, #3
 80070de:	089b      	lsrs	r3, r3, #2
 80070e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070e2:	2300      	movs	r3, #0
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	e018      	b.n	800711a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	031a      	lsls	r2, r3, #12
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070f4:	461a      	mov	r2, r3
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	3301      	adds	r3, #1
 8007100:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	3301      	adds	r3, #1
 8007106:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	3301      	adds	r3, #1
 800710c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	3301      	adds	r3, #1
 8007112:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	3301      	adds	r3, #1
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	429a      	cmp	r2, r3
 8007120:	d3e2      	bcc.n	80070e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3724      	adds	r7, #36	@ 0x24
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007130:	b480      	push	{r7}
 8007132:	b08b      	sub	sp, #44	@ 0x2c
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	4613      	mov	r3, r2
 800713c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	089b      	lsrs	r3, r3, #2
 800714a:	b29b      	uxth	r3, r3
 800714c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007156:	2300      	movs	r3, #0
 8007158:	623b      	str	r3, [r7, #32]
 800715a:	e014      	b.n	8007186 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	601a      	str	r2, [r3, #0]
    pDest++;
 8007168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716a:	3301      	adds	r3, #1
 800716c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	3301      	adds	r3, #1
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	3301      	adds	r3, #1
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	3301      	adds	r3, #1
 800717e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	3301      	adds	r3, #1
 8007184:	623b      	str	r3, [r7, #32]
 8007186:	6a3a      	ldr	r2, [r7, #32]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	429a      	cmp	r2, r3
 800718c:	d3e6      	bcc.n	800715c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800718e:	8bfb      	ldrh	r3, [r7, #30]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d01e      	beq.n	80071d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800719e:	461a      	mov	r2, r3
 80071a0:	f107 0310 	add.w	r3, r7, #16
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	701a      	strb	r2, [r3, #0]
      i++;
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	3301      	adds	r3, #1
 80071be:	623b      	str	r3, [r7, #32]
      pDest++;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	3301      	adds	r3, #1
 80071c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80071c6:	8bfb      	ldrh	r3, [r7, #30]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80071cc:	8bfb      	ldrh	r3, [r7, #30]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1ea      	bne.n	80071a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	372c      	adds	r7, #44	@ 0x2c
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d12c      	bne.n	8007256 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	db12      	blt.n	8007234 <USB_EPSetStall+0x54>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00f      	beq.n	8007234 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	440a      	add	r2, r1
 800722a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800722e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007232:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	0151      	lsls	r1, r2, #5
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	440a      	add	r2, r1
 800724a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800724e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	e02b      	b.n	80072ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	db12      	blt.n	800728e <USB_EPSetStall+0xae>
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00f      	beq.n	800728e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	440a      	add	r2, r1
 8007284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007288:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800728c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d128      	bne.n	800732a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	791b      	ldrb	r3, [r3, #4]
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d003      	beq.n	8007308 <USB_EPClearStall+0x4c>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	791b      	ldrb	r3, [r3, #4]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d138      	bne.n	800737a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	440a      	add	r2, r1
 800731e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	e027      	b.n	800737a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007344:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007348:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	791b      	ldrb	r3, [r3, #4]
 800734e:	2b03      	cmp	r3, #3
 8007350:	d003      	beq.n	800735a <USB_EPClearStall+0x9e>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	791b      	ldrb	r3, [r3, #4]
 8007356:	2b02      	cmp	r3, #2
 8007358:	d10f      	bne.n	800737a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	0151      	lsls	r1, r2, #5
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	440a      	add	r2, r1
 8007370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007378:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80073aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073c2:	4313      	orrs	r3, r2
 80073c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80073ee:	f023 0303 	bic.w	r3, r3, #3
 80073f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007402:	f023 0302 	bic.w	r3, r3, #2
 8007406:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007430:	f023 0303 	bic.w	r3, r3, #3
 8007434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007444:	f043 0302 	orr.w	r3, r3, #2
 8007448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4013      	ands	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007470:	68fb      	ldr	r3, [r7, #12]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	4013      	ands	r3, r2
 80074a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	0c1b      	lsrs	r3, r3, #16
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	4013      	ands	r3, r2
 80074d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	b29b      	uxth	r3, r3
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	4013      	ands	r3, r2
 8007512:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007514:	68bb      	ldr	r3, [r7, #8]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007522:	b480      	push	{r7}
 8007524:	b087      	sub	sp, #28
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007544:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	f003 030f 	and.w	r3, r3, #15
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	fa22 f303 	lsr.w	r3, r2, r3
 8007552:	01db      	lsls	r3, r3, #7
 8007554:	b2db      	uxtb	r3, r3
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	4013      	ands	r3, r2
 800756e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007570:	68bb      	ldr	r3, [r7, #8]
}
 8007572:	4618      	mov	r0, r3
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f003 0301 	and.w	r3, r3, #1
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800759a:	b480      	push	{r7}
 800759c:	b085      	sub	sp, #20
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80075b8:	f023 0307 	bic.w	r3, r3, #7
 80075bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	460b      	mov	r3, r1
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	333c      	adds	r3, #60	@ 0x3c
 80075f6:	3304      	adds	r3, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	4a26      	ldr	r2, [pc, #152]	@ (8007698 <USB_EP0_OutStart+0xb8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d90a      	bls.n	800761a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007614:	d101      	bne.n	800761a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	e037      	b.n	800768a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007620:	461a      	mov	r2, r3
 8007622:	2300      	movs	r3, #0
 8007624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007634:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007648:	f043 0318 	orr.w	r3, r3, #24
 800764c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800765c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007660:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007662:	7afb      	ldrb	r3, [r7, #11]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d10f      	bne.n	8007688 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766e:	461a      	mov	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007682:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	4f54300a 	.word	0x4f54300a

0800769c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076b4:	d901      	bls.n	80076ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e022      	b.n	8007700 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	daf2      	bge.n	80076a8 <USB_CoreReset+0xc>

  count = 10U;
 80076c2:	230a      	movs	r3, #10
 80076c4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80076c6:	e002      	b.n	80076ce <USB_CoreReset+0x32>
  {
    count--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1f9      	bne.n	80076c8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f043 0201 	orr.w	r2, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076ec:	d901      	bls.n	80076f2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e006      	b.n	8007700 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d0f0      	beq.n	80076e0 <USB_CoreReset+0x44>

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007718:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800771c:	f005 faa8 	bl	800cc70 <USBD_static_malloc>
 8007720:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d109      	bne.n	800773c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	32b0      	adds	r2, #176	@ 0xb0
 8007732:	2100      	movs	r1, #0
 8007734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007738:	2302      	movs	r3, #2
 800773a:	e0d4      	b.n	80078e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800773c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007740:	2100      	movs	r1, #0
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f005 fad8 	bl	800ccf8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	32b0      	adds	r2, #176	@ 0xb0
 8007752:	68f9      	ldr	r1, [r7, #12]
 8007754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	32b0      	adds	r2, #176	@ 0xb0
 8007762:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7c1b      	ldrb	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d138      	bne.n	80077e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007774:	4b5e      	ldr	r3, [pc, #376]	@ (80078f0 <USBD_CDC_Init+0x1e4>)
 8007776:	7819      	ldrb	r1, [r3, #0]
 8007778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800777c:	2202      	movs	r2, #2
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f005 f953 	bl	800ca2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007784:	4b5a      	ldr	r3, [pc, #360]	@ (80078f0 <USBD_CDC_Init+0x1e4>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	f003 020f 	and.w	r2, r3, #15
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	440b      	add	r3, r1
 8007798:	3323      	adds	r3, #35	@ 0x23
 800779a:	2201      	movs	r2, #1
 800779c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800779e:	4b55      	ldr	r3, [pc, #340]	@ (80078f4 <USBD_CDC_Init+0x1e8>)
 80077a0:	7819      	ldrb	r1, [r3, #0]
 80077a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077a6:	2202      	movs	r2, #2
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f005 f93e 	bl	800ca2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077ae:	4b51      	ldr	r3, [pc, #324]	@ (80078f4 <USBD_CDC_Init+0x1e8>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	f003 020f 	and.w	r2, r3, #15
 80077b6:	6879      	ldr	r1, [r7, #4]
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	440b      	add	r3, r1
 80077c2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80077c6:	2201      	movs	r2, #1
 80077c8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80077ca:	4b4b      	ldr	r3, [pc, #300]	@ (80078f8 <USBD_CDC_Init+0x1ec>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f003 020f 	and.w	r2, r3, #15
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	440b      	add	r3, r1
 80077de:	331c      	adds	r3, #28
 80077e0:	2210      	movs	r2, #16
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	e035      	b.n	8007852 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077e6:	4b42      	ldr	r3, [pc, #264]	@ (80078f0 <USBD_CDC_Init+0x1e4>)
 80077e8:	7819      	ldrb	r1, [r3, #0]
 80077ea:	2340      	movs	r3, #64	@ 0x40
 80077ec:	2202      	movs	r2, #2
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f005 f91b 	bl	800ca2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077f4:	4b3e      	ldr	r3, [pc, #248]	@ (80078f0 <USBD_CDC_Init+0x1e4>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f003 020f 	and.w	r2, r3, #15
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	440b      	add	r3, r1
 8007808:	3323      	adds	r3, #35	@ 0x23
 800780a:	2201      	movs	r2, #1
 800780c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800780e:	4b39      	ldr	r3, [pc, #228]	@ (80078f4 <USBD_CDC_Init+0x1e8>)
 8007810:	7819      	ldrb	r1, [r3, #0]
 8007812:	2340      	movs	r3, #64	@ 0x40
 8007814:	2202      	movs	r2, #2
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f005 f907 	bl	800ca2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800781c:	4b35      	ldr	r3, [pc, #212]	@ (80078f4 <USBD_CDC_Init+0x1e8>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	f003 020f 	and.w	r2, r3, #15
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	440b      	add	r3, r1
 8007830:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007834:	2201      	movs	r2, #1
 8007836:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007838:	4b2f      	ldr	r3, [pc, #188]	@ (80078f8 <USBD_CDC_Init+0x1ec>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 020f 	and.w	r2, r3, #15
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	4613      	mov	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	331c      	adds	r3, #28
 800784e:	2210      	movs	r2, #16
 8007850:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007852:	4b29      	ldr	r3, [pc, #164]	@ (80078f8 <USBD_CDC_Init+0x1ec>)
 8007854:	7819      	ldrb	r1, [r3, #0]
 8007856:	2308      	movs	r3, #8
 8007858:	2203      	movs	r2, #3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f005 f8e5 	bl	800ca2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007860:	4b25      	ldr	r3, [pc, #148]	@ (80078f8 <USBD_CDC_Init+0x1ec>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	f003 020f 	and.w	r2, r3, #15
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	3323      	adds	r3, #35	@ 0x23
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	33b0      	adds	r3, #176	@ 0xb0
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80078b0:	2302      	movs	r3, #2
 80078b2:	e018      	b.n	80078e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7c1b      	ldrb	r3, [r3, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078bc:	4b0d      	ldr	r3, [pc, #52]	@ (80078f4 <USBD_CDC_Init+0x1e8>)
 80078be:	7819      	ldrb	r1, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f005 f99c 	bl	800cc08 <USBD_LL_PrepareReceive>
 80078d0:	e008      	b.n	80078e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078d2:	4b08      	ldr	r3, [pc, #32]	@ (80078f4 <USBD_CDC_Init+0x1e8>)
 80078d4:	7819      	ldrb	r1, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078dc:	2340      	movs	r3, #64	@ 0x40
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f005 f992 	bl	800cc08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20000093 	.word	0x20000093
 80078f4:	20000094 	.word	0x20000094
 80078f8:	20000095 	.word	0x20000095

080078fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007908:	4b3a      	ldr	r3, [pc, #232]	@ (80079f4 <USBD_CDC_DeInit+0xf8>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f005 f8b1 	bl	800ca76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007914:	4b37      	ldr	r3, [pc, #220]	@ (80079f4 <USBD_CDC_DeInit+0xf8>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 020f 	and.w	r2, r3, #15
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	3323      	adds	r3, #35	@ 0x23
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800792e:	4b32      	ldr	r3, [pc, #200]	@ (80079f8 <USBD_CDC_DeInit+0xfc>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f005 f89e 	bl	800ca76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800793a:	4b2f      	ldr	r3, [pc, #188]	@ (80079f8 <USBD_CDC_DeInit+0xfc>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	f003 020f 	and.w	r2, r3, #15
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007956:	4b29      	ldr	r3, [pc, #164]	@ (80079fc <USBD_CDC_DeInit+0x100>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f005 f88a 	bl	800ca76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007962:	4b26      	ldr	r3, [pc, #152]	@ (80079fc <USBD_CDC_DeInit+0x100>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f003 020f 	and.w	r2, r3, #15
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	3323      	adds	r3, #35	@ 0x23
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800797c:	4b1f      	ldr	r3, [pc, #124]	@ (80079fc <USBD_CDC_DeInit+0x100>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	f003 020f 	and.w	r2, r3, #15
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	440b      	add	r3, r1
 8007990:	331c      	adds	r3, #28
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	32b0      	adds	r2, #176	@ 0xb0
 80079a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d01f      	beq.n	80079e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	33b0      	adds	r3, #176	@ 0xb0
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	32b0      	adds	r2, #176	@ 0xb0
 80079c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f005 f95e 	bl	800cc8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	32b0      	adds	r2, #176	@ 0xb0
 80079da:	2100      	movs	r1, #0
 80079dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20000093 	.word	0x20000093
 80079f8:	20000094 	.word	0x20000094
 80079fc:	20000095 	.word	0x20000095

08007a00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	32b0      	adds	r2, #176	@ 0xb0
 8007a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e0bf      	b.n	8007bb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d050      	beq.n	8007ade <USBD_CDC_Setup+0xde>
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	f040 80af 	bne.w	8007ba0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	88db      	ldrh	r3, [r3, #6]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d03a      	beq.n	8007ac0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	b25b      	sxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da1b      	bge.n	8007a8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	33b0      	adds	r3, #176	@ 0xb0
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007a6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	88d2      	ldrh	r2, [r2, #6]
 8007a70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	88db      	ldrh	r3, [r3, #6]
 8007a76:	2b07      	cmp	r3, #7
 8007a78:	bf28      	it	cs
 8007a7a:	2307      	movcs	r3, #7
 8007a7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	89fa      	ldrh	r2, [r7, #14]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 fda9 	bl	80095dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007a8a:	e090      	b.n	8007bae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	785a      	ldrb	r2, [r3, #1]
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	88db      	ldrh	r3, [r3, #6]
 8007a9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8007a9c:	d803      	bhi.n	8007aa6 <USBD_CDC_Setup+0xa6>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	88db      	ldrh	r3, [r3, #6]
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	e000      	b.n	8007aa8 <USBD_CDC_Setup+0xa8>
 8007aa6:	2240      	movs	r2, #64	@ 0x40
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007aae:	6939      	ldr	r1, [r7, #16]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 fdbe 	bl	800963a <USBD_CtlPrepareRx>
      break;
 8007abe:	e076      	b.n	8007bae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	33b0      	adds	r3, #176	@ 0xb0
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	7850      	ldrb	r0, [r2, #1]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	4798      	blx	r3
      break;
 8007adc:	e067      	b.n	8007bae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	2b0b      	cmp	r3, #11
 8007ae4:	d851      	bhi.n	8007b8a <USBD_CDC_Setup+0x18a>
 8007ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8007aec <USBD_CDC_Setup+0xec>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b1d 	.word	0x08007b1d
 8007af0:	08007b99 	.word	0x08007b99
 8007af4:	08007b8b 	.word	0x08007b8b
 8007af8:	08007b8b 	.word	0x08007b8b
 8007afc:	08007b8b 	.word	0x08007b8b
 8007b00:	08007b8b 	.word	0x08007b8b
 8007b04:	08007b8b 	.word	0x08007b8b
 8007b08:	08007b8b 	.word	0x08007b8b
 8007b0c:	08007b8b 	.word	0x08007b8b
 8007b10:	08007b8b 	.word	0x08007b8b
 8007b14:	08007b47 	.word	0x08007b47
 8007b18:	08007b71 	.word	0x08007b71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d107      	bne.n	8007b38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b28:	f107 030a 	add.w	r3, r7, #10
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 fd53 	bl	80095dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b36:	e032      	b.n	8007b9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f001 fcd1 	bl	80094e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b40:	2303      	movs	r3, #3
 8007b42:	75fb      	strb	r3, [r7, #23]
          break;
 8007b44:	e02b      	b.n	8007b9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d107      	bne.n	8007b62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b52:	f107 030d 	add.w	r3, r7, #13
 8007b56:	2201      	movs	r2, #1
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fd3e 	bl	80095dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b60:	e01d      	b.n	8007b9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 fcbc 	bl	80094e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b6e:	e016      	b.n	8007b9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d00f      	beq.n	8007b9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 fcaf 	bl	80094e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b84:	2303      	movs	r3, #3
 8007b86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b88:	e008      	b.n	8007b9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fca8 	bl	80094e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b92:	2303      	movs	r3, #3
 8007b94:	75fb      	strb	r3, [r7, #23]
          break;
 8007b96:	e002      	b.n	8007b9e <USBD_CDC_Setup+0x19e>
          break;
 8007b98:	bf00      	nop
 8007b9a:	e008      	b.n	8007bae <USBD_CDC_Setup+0x1ae>
          break;
 8007b9c:	bf00      	nop
      }
      break;
 8007b9e:	e006      	b.n	8007bae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f001 fc9d 	bl	80094e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	75fb      	strb	r3, [r7, #23]
      break;
 8007bac:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	32b0      	adds	r2, #176	@ 0xb0
 8007bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e065      	b.n	8007cae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	32b0      	adds	r2, #176	@ 0xb0
 8007bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	f003 020f 	and.w	r2, r3, #15
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	3314      	adds	r3, #20
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d02f      	beq.n	8007c6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	f003 020f 	and.w	r2, r3, #15
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	3314      	adds	r3, #20
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	f003 010f 	and.w	r1, r3, #15
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	440b      	add	r3, r1
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4403      	add	r3, r0
 8007c34:	331c      	adds	r3, #28
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c3c:	fb01 f303 	mul.w	r3, r1, r3
 8007c40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d112      	bne.n	8007c6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	f003 020f 	and.w	r2, r3, #15
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	3314      	adds	r3, #20
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c5e:	78f9      	ldrb	r1, [r7, #3]
 8007c60:	2300      	movs	r3, #0
 8007c62:	2200      	movs	r2, #0
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f004 ffae 	bl	800cbc6 <USBD_LL_Transmit>
 8007c6a:	e01f      	b.n	8007cac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	33b0      	adds	r3, #176	@ 0xb0
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d010      	beq.n	8007cac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	33b0      	adds	r3, #176	@ 0xb0
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007ca8:	78fa      	ldrb	r2, [r7, #3]
 8007caa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	32b0      	adds	r2, #176	@ 0xb0
 8007ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	32b0      	adds	r2, #176	@ 0xb0
 8007cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e01a      	b.n	8007d1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f004 ffac 	bl	800cc4a <USBD_LL_GetRxDataSize>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	33b0      	adds	r3, #176	@ 0xb0
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	32b0      	adds	r2, #176	@ 0xb0
 8007d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e024      	b.n	8007d92 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	33b0      	adds	r3, #176	@ 0xb0
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d019      	beq.n	8007d90 <USBD_CDC_EP0_RxReady+0x6a>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007d62:	2bff      	cmp	r3, #255	@ 0xff
 8007d64:	d014      	beq.n	8007d90 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	33b0      	adds	r3, #176	@ 0xb0
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007d7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d86:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	22ff      	movs	r2, #255	@ 0xff
 8007d8c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007da4:	2182      	movs	r1, #130	@ 0x82
 8007da6:	4818      	ldr	r0, [pc, #96]	@ (8007e08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007da8:	f000 fd62 	bl	8008870 <USBD_GetEpDesc>
 8007dac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dae:	2101      	movs	r1, #1
 8007db0:	4815      	ldr	r0, [pc, #84]	@ (8007e08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007db2:	f000 fd5d 	bl	8008870 <USBD_GetEpDesc>
 8007db6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007db8:	2181      	movs	r1, #129	@ 0x81
 8007dba:	4813      	ldr	r0, [pc, #76]	@ (8007e08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dbc:	f000 fd58 	bl	8008870 <USBD_GetEpDesc>
 8007dc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	2210      	movs	r2, #16
 8007dcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d006      	beq.n	8007de2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ddc:	711a      	strb	r2, [r3, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d006      	beq.n	8007df6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007df0:	711a      	strb	r2, [r3, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2243      	movs	r2, #67	@ 0x43
 8007dfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dfc:	4b02      	ldr	r3, [pc, #8]	@ (8007e08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000050 	.word	0x20000050

08007e0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e14:	2182      	movs	r1, #130	@ 0x82
 8007e16:	4818      	ldr	r0, [pc, #96]	@ (8007e78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e18:	f000 fd2a 	bl	8008870 <USBD_GetEpDesc>
 8007e1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e1e:	2101      	movs	r1, #1
 8007e20:	4815      	ldr	r0, [pc, #84]	@ (8007e78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e22:	f000 fd25 	bl	8008870 <USBD_GetEpDesc>
 8007e26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e28:	2181      	movs	r1, #129	@ 0x81
 8007e2a:	4813      	ldr	r0, [pc, #76]	@ (8007e78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e2c:	f000 fd20 	bl	8008870 <USBD_GetEpDesc>
 8007e30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2210      	movs	r2, #16
 8007e3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d006      	beq.n	8007e52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	2200      	movs	r2, #0
 8007e48:	711a      	strb	r2, [r3, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f042 0202 	orr.w	r2, r2, #2
 8007e50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d006      	beq.n	8007e66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	711a      	strb	r2, [r3, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f042 0202 	orr.w	r2, r2, #2
 8007e64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2243      	movs	r2, #67	@ 0x43
 8007e6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e6c:	4b02      	ldr	r3, [pc, #8]	@ (8007e78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000050 	.word	0x20000050

08007e7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e84:	2182      	movs	r1, #130	@ 0x82
 8007e86:	4818      	ldr	r0, [pc, #96]	@ (8007ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e88:	f000 fcf2 	bl	8008870 <USBD_GetEpDesc>
 8007e8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e8e:	2101      	movs	r1, #1
 8007e90:	4815      	ldr	r0, [pc, #84]	@ (8007ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e92:	f000 fced 	bl	8008870 <USBD_GetEpDesc>
 8007e96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e98:	2181      	movs	r1, #129	@ 0x81
 8007e9a:	4813      	ldr	r0, [pc, #76]	@ (8007ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007e9c:	f000 fce8 	bl	8008870 <USBD_GetEpDesc>
 8007ea0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2210      	movs	r2, #16
 8007eac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d006      	beq.n	8007ec2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ebc:	711a      	strb	r2, [r3, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d006      	beq.n	8007ed6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ed0:	711a      	strb	r2, [r3, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2243      	movs	r2, #67	@ 0x43
 8007eda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007edc:	4b02      	ldr	r3, [pc, #8]	@ (8007ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000050 	.word	0x20000050

08007eec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	220a      	movs	r2, #10
 8007ef8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007efa:	4b03      	ldr	r3, [pc, #12]	@ (8007f08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	2000000c 	.word	0x2000000c

08007f0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e009      	b.n	8007f34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	33b0      	adds	r3, #176	@ 0xb0
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	32b0      	adds	r2, #176	@ 0xb0
 8007f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e008      	b.n	8007f78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	32b0      	adds	r2, #176	@ 0xb0
 8007f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e004      	b.n	8007fb2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	32b0      	adds	r2, #176	@ 0xb0
 8007fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e025      	b.n	8008032 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d11f      	bne.n	8008030 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007ff8:	4b10      	ldr	r3, [pc, #64]	@ (800803c <USBD_CDC_TransmitPacket+0x7c>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	f003 020f 	and.w	r2, r3, #15
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4613      	mov	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4403      	add	r3, r0
 8008012:	3314      	adds	r3, #20
 8008014:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008016:	4b09      	ldr	r3, [pc, #36]	@ (800803c <USBD_CDC_TransmitPacket+0x7c>)
 8008018:	7819      	ldrb	r1, [r3, #0]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f004 fdcd 	bl	800cbc6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000093 	.word	0x20000093

08008040 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	32b0      	adds	r2, #176	@ 0xb0
 8008052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008056:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	32b0      	adds	r2, #176	@ 0xb0
 8008062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800806a:	2303      	movs	r3, #3
 800806c:	e018      	b.n	80080a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	7c1b      	ldrb	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10a      	bne.n	800808c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008076:	4b0c      	ldr	r3, [pc, #48]	@ (80080a8 <USBD_CDC_ReceivePacket+0x68>)
 8008078:	7819      	ldrb	r1, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f004 fdbf 	bl	800cc08 <USBD_LL_PrepareReceive>
 800808a:	e008      	b.n	800809e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800808c:	4b06      	ldr	r3, [pc, #24]	@ (80080a8 <USBD_CDC_ReceivePacket+0x68>)
 800808e:	7819      	ldrb	r1, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008096:	2340      	movs	r3, #64	@ 0x40
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f004 fdb5 	bl	800cc08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20000094 	.word	0x20000094

080080ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4613      	mov	r3, r2
 80080b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e01f      	b.n	8008104 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	79fa      	ldrb	r2, [r7, #7]
 80080f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f004 fc2f 	bl	800c95c <USBD_LL_Init>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008120:	2303      	movs	r3, #3
 8008122:	e025      	b.n	8008170 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	32ae      	adds	r2, #174	@ 0xae
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00f      	beq.n	8008160 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	32ae      	adds	r2, #174	@ 0xae
 800814a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008150:	f107 020e 	add.w	r2, r7, #14
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
 8008158:	4602      	mov	r2, r0
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f004 fc37 	bl	800c9f4 <USBD_LL_Start>
 8008186:	4603      	mov	r3, r0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008198:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800819a:	4618      	mov	r0, r3
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	78fa      	ldrb	r2, [r7, #3]
 80081ca:	4611      	mov	r1, r2
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	4798      	blx	r3
 80081d0:	4603      	mov	r3, r0
 80081d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	4611      	mov	r1, r2
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	4798      	blx	r3
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008204:	2303      	movs	r3, #3
 8008206:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	4618      	mov	r0, r3
 8008226:	f001 f922 	bl	800946e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008238:	461a      	mov	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008246:	f003 031f 	and.w	r3, r3, #31
 800824a:	2b02      	cmp	r3, #2
 800824c:	d01a      	beq.n	8008284 <USBD_LL_SetupStage+0x72>
 800824e:	2b02      	cmp	r3, #2
 8008250:	d822      	bhi.n	8008298 <USBD_LL_SetupStage+0x86>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <USBD_LL_SetupStage+0x4a>
 8008256:	2b01      	cmp	r3, #1
 8008258:	d00a      	beq.n	8008270 <USBD_LL_SetupStage+0x5e>
 800825a:	e01d      	b.n	8008298 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fb77 	bl	8008958 <USBD_StdDevReq>
 800826a:	4603      	mov	r3, r0
 800826c:	73fb      	strb	r3, [r7, #15]
      break;
 800826e:	e020      	b.n	80082b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fbdf 	bl	8008a3c <USBD_StdItfReq>
 800827e:	4603      	mov	r3, r0
 8008280:	73fb      	strb	r3, [r7, #15]
      break;
 8008282:	e016      	b.n	80082b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fc41 	bl	8008b14 <USBD_StdEPReq>
 8008292:	4603      	mov	r3, r0
 8008294:	73fb      	strb	r3, [r7, #15]
      break;
 8008296:	e00c      	b.n	80082b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800829e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f004 fc04 	bl	800cab4 <USBD_LL_StallEP>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]
      break;
 80082b0:	bf00      	nop
  }

  return ret;
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	460b      	mov	r3, r1
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80082ce:	7afb      	ldrb	r3, [r7, #11]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d177      	bne.n	80083c4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80082da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	f040 80a1 	bne.w	800842a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	8992      	ldrh	r2, [r2, #12]
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d91c      	bls.n	800832e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	8992      	ldrh	r2, [r2, #12]
 80082fc:	1a9a      	subs	r2, r3, r2
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	8992      	ldrh	r2, [r2, #12]
 800830a:	441a      	add	r2, r3
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	6919      	ldr	r1, [r3, #16]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	899b      	ldrh	r3, [r3, #12]
 8008318:	461a      	mov	r2, r3
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	4293      	cmp	r3, r2
 8008320:	bf38      	it	cc
 8008322:	4613      	movcc	r3, r2
 8008324:	461a      	mov	r2, r3
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f001 f9a8 	bl	800967c <USBD_CtlContinueRx>
 800832c:	e07d      	b.n	800842a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008334:	f003 031f 	and.w	r3, r3, #31
 8008338:	2b02      	cmp	r3, #2
 800833a:	d014      	beq.n	8008366 <USBD_LL_DataOutStage+0xaa>
 800833c:	2b02      	cmp	r3, #2
 800833e:	d81d      	bhi.n	800837c <USBD_LL_DataOutStage+0xc0>
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <USBD_LL_DataOutStage+0x8e>
 8008344:	2b01      	cmp	r3, #1
 8008346:	d003      	beq.n	8008350 <USBD_LL_DataOutStage+0x94>
 8008348:	e018      	b.n	800837c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	75bb      	strb	r3, [r7, #22]
            break;
 800834e:	e018      	b.n	8008382 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008356:	b2db      	uxtb	r3, r3
 8008358:	4619      	mov	r1, r3
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 fa6e 	bl	800883c <USBD_CoreFindIF>
 8008360:	4603      	mov	r3, r0
 8008362:	75bb      	strb	r3, [r7, #22]
            break;
 8008364:	e00d      	b.n	8008382 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800836c:	b2db      	uxtb	r3, r3
 800836e:	4619      	mov	r1, r3
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 fa70 	bl	8008856 <USBD_CoreFindEP>
 8008376:	4603      	mov	r3, r0
 8008378:	75bb      	strb	r3, [r7, #22]
            break;
 800837a:	e002      	b.n	8008382 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	75bb      	strb	r3, [r7, #22]
            break;
 8008380:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008382:	7dbb      	ldrb	r3, [r7, #22]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d119      	bne.n	80083bc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b03      	cmp	r3, #3
 8008392:	d113      	bne.n	80083bc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008394:	7dba      	ldrb	r2, [r7, #22]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	32ae      	adds	r2, #174	@ 0xae
 800839a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80083a4:	7dba      	ldrb	r2, [r7, #22]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80083ac:	7dba      	ldrb	r2, [r7, #22]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	32ae      	adds	r2, #174	@ 0xae
 80083b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f001 f96e 	bl	800969e <USBD_CtlSendStatus>
 80083c2:	e032      	b.n	800842a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	4619      	mov	r1, r3
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 fa41 	bl	8008856 <USBD_CoreFindEP>
 80083d4:	4603      	mov	r3, r0
 80083d6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083d8:	7dbb      	ldrb	r3, [r7, #22]
 80083da:	2bff      	cmp	r3, #255	@ 0xff
 80083dc:	d025      	beq.n	800842a <USBD_LL_DataOutStage+0x16e>
 80083de:	7dbb      	ldrb	r3, [r7, #22]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d122      	bne.n	800842a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d117      	bne.n	8008420 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80083f0:	7dba      	ldrb	r2, [r7, #22]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	32ae      	adds	r2, #174	@ 0xae
 80083f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00f      	beq.n	8008420 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008400:	7dba      	ldrb	r2, [r7, #22]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008408:	7dba      	ldrb	r2, [r7, #22]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	32ae      	adds	r2, #174	@ 0xae
 800840e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	7afa      	ldrb	r2, [r7, #11]
 8008416:	4611      	mov	r1, r2
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	4798      	blx	r3
 800841c:	4603      	mov	r3, r0
 800841e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008426:	7dfb      	ldrb	r3, [r7, #23]
 8008428:	e000      	b.n	800842c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	460b      	mov	r3, r1
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008442:	7afb      	ldrb	r3, [r7, #11]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d178      	bne.n	800853a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3314      	adds	r3, #20
 800844c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008454:	2b02      	cmp	r3, #2
 8008456:	d163      	bne.n	8008520 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	8992      	ldrh	r2, [r2, #12]
 8008460:	4293      	cmp	r3, r2
 8008462:	d91c      	bls.n	800849e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	8992      	ldrh	r2, [r2, #12]
 800846c:	1a9a      	subs	r2, r3, r2
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	8992      	ldrh	r2, [r2, #12]
 800847a:	441a      	add	r2, r3
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	6919      	ldr	r1, [r3, #16]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	461a      	mov	r2, r3
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f001 f8c4 	bl	8009618 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008490:	2300      	movs	r3, #0
 8008492:	2200      	movs	r2, #0
 8008494:	2100      	movs	r1, #0
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f004 fbb6 	bl	800cc08 <USBD_LL_PrepareReceive>
 800849c:	e040      	b.n	8008520 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	899b      	ldrh	r3, [r3, #12]
 80084a2:	461a      	mov	r2, r3
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d11c      	bne.n	80084e6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d316      	bcc.n	80084e6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d20f      	bcs.n	80084e6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084c6:	2200      	movs	r2, #0
 80084c8:	2100      	movs	r1, #0
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f001 f8a4 	bl	8009618 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084d8:	2300      	movs	r3, #0
 80084da:	2200      	movs	r2, #0
 80084dc:	2100      	movs	r1, #0
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f004 fb92 	bl	800cc08 <USBD_LL_PrepareReceive>
 80084e4:	e01c      	b.n	8008520 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d10f      	bne.n	8008512 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008512:	2180      	movs	r1, #128	@ 0x80
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f004 facd 	bl	800cab4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f001 f8d2 	bl	80096c4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d03a      	beq.n	80085a0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7ff fe30 	bl	8008190 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008538:	e032      	b.n	80085a0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800853a:	7afb      	ldrb	r3, [r7, #11]
 800853c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008540:	b2db      	uxtb	r3, r3
 8008542:	4619      	mov	r1, r3
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 f986 	bl	8008856 <USBD_CoreFindEP>
 800854a:	4603      	mov	r3, r0
 800854c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800854e:	7dfb      	ldrb	r3, [r7, #23]
 8008550:	2bff      	cmp	r3, #255	@ 0xff
 8008552:	d025      	beq.n	80085a0 <USBD_LL_DataInStage+0x16c>
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d122      	bne.n	80085a0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d11c      	bne.n	80085a0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008566:	7dfa      	ldrb	r2, [r7, #23]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	32ae      	adds	r2, #174	@ 0xae
 800856c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d014      	beq.n	80085a0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8008576:	7dfa      	ldrb	r2, [r7, #23]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800857e:	7dfa      	ldrb	r2, [r7, #23]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	32ae      	adds	r2, #174	@ 0xae
 8008584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	7afa      	ldrb	r2, [r7, #11]
 800858c:	4611      	mov	r1, r2
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	4798      	blx	r3
 8008592:	4603      	mov	r3, r0
 8008594:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008596:	7dbb      	ldrb	r3, [r7, #22]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800859c:	7dbb      	ldrb	r3, [r7, #22]
 800859e:	e000      	b.n	80085a2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d014      	beq.n	8008610 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00e      	beq.n	8008610 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6852      	ldr	r2, [r2, #4]
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	4611      	mov	r1, r2
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800860c:	2303      	movs	r3, #3
 800860e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008610:	2340      	movs	r3, #64	@ 0x40
 8008612:	2200      	movs	r2, #0
 8008614:	2100      	movs	r1, #0
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f004 fa07 	bl	800ca2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2240      	movs	r2, #64	@ 0x40
 8008628:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800862c:	2340      	movs	r3, #64	@ 0x40
 800862e:	2200      	movs	r2, #0
 8008630:	2180      	movs	r1, #128	@ 0x80
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f004 f9f9 	bl	800ca2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2240      	movs	r2, #64	@ 0x40
 8008644:	841a      	strh	r2, [r3, #32]

  return ret;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	78fa      	ldrb	r2, [r7, #3]
 8008660:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b04      	cmp	r3, #4
 8008682:	d006      	beq.n	8008692 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800868a:	b2da      	uxtb	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2204      	movs	r2, #4
 8008696:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d106      	bne.n	80086ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d110      	bne.n	800870e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	32ae      	adds	r2, #174	@ 0xae
 800872e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008736:	2303      	movs	r3, #3
 8008738:	e01c      	b.n	8008774 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b03      	cmp	r3, #3
 8008744:	d115      	bne.n	8008772 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	32ae      	adds	r2, #174	@ 0xae
 8008750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00b      	beq.n	8008772 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	32ae      	adds	r2, #174	@ 0xae
 8008764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	78fa      	ldrb	r2, [r7, #3]
 800876c:	4611      	mov	r1, r2
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32ae      	adds	r2, #174	@ 0xae
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800879a:	2303      	movs	r3, #3
 800879c:	e01c      	b.n	80087d8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d115      	bne.n	80087d6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	32ae      	adds	r2, #174	@ 0xae
 80087b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	32ae      	adds	r2, #174	@ 0xae
 80087c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	4611      	mov	r1, r2
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00e      	beq.n	8008832 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6852      	ldr	r2, [r2, #4]
 8008820:	b2d2      	uxtb	r2, r2
 8008822:	4611      	mov	r1, r2
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	4798      	blx	r3
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800882e:	2303      	movs	r3, #3
 8008830:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008832:	7bfb      	ldrb	r3, [r7, #15]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008848:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800884a:	4618      	mov	r0, r3
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008862:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008884:	2300      	movs	r3, #0
 8008886:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	885b      	ldrh	r3, [r3, #2]
 800888c:	b29b      	uxth	r3, r3
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	7812      	ldrb	r2, [r2, #0]
 8008892:	4293      	cmp	r3, r2
 8008894:	d91f      	bls.n	80088d6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800889c:	e013      	b.n	80088c6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800889e:	f107 030a 	add.w	r3, r7, #10
 80088a2:	4619      	mov	r1, r3
 80088a4:	6978      	ldr	r0, [r7, #20]
 80088a6:	f000 f81b 	bl	80088e0 <USBD_GetNextDesc>
 80088aa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	2b05      	cmp	r3, #5
 80088b2:	d108      	bne.n	80088c6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	789b      	ldrb	r3, [r3, #2]
 80088bc:	78fa      	ldrb	r2, [r7, #3]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d008      	beq.n	80088d4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	885b      	ldrh	r3, [r3, #2]
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	897b      	ldrh	r3, [r7, #10]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d8e5      	bhi.n	800889e <USBD_GetEpDesc+0x2e>
 80088d2:	e000      	b.n	80088d6 <USBD_GetEpDesc+0x66>
          break;
 80088d4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80088d6:	693b      	ldr	r3, [r7, #16]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	7812      	ldrb	r2, [r2, #0]
 80088f6:	4413      	add	r3, r2
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4413      	add	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800890a:	68fb      	ldr	r3, [r7, #12]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	3301      	adds	r3, #1
 800892e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008936:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800893a:	021b      	lsls	r3, r3, #8
 800893c:	b21a      	sxth	r2, r3
 800893e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008942:	4313      	orrs	r3, r2
 8008944:	b21b      	sxth	r3, r3
 8008946:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008948:	89fb      	ldrh	r3, [r7, #14]
}
 800894a:	4618      	mov	r0, r3
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
	...

08008958 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800896e:	2b40      	cmp	r3, #64	@ 0x40
 8008970:	d005      	beq.n	800897e <USBD_StdDevReq+0x26>
 8008972:	2b40      	cmp	r3, #64	@ 0x40
 8008974:	d857      	bhi.n	8008a26 <USBD_StdDevReq+0xce>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00f      	beq.n	800899a <USBD_StdDevReq+0x42>
 800897a:	2b20      	cmp	r3, #32
 800897c:	d153      	bne.n	8008a26 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	32ae      	adds	r2, #174	@ 0xae
 8008988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	4798      	blx	r3
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
      break;
 8008998:	e04a      	b.n	8008a30 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	2b09      	cmp	r3, #9
 80089a0:	d83b      	bhi.n	8008a1a <USBD_StdDevReq+0xc2>
 80089a2:	a201      	add	r2, pc, #4	@ (adr r2, 80089a8 <USBD_StdDevReq+0x50>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089fd 	.word	0x080089fd
 80089ac:	08008a11 	.word	0x08008a11
 80089b0:	08008a1b 	.word	0x08008a1b
 80089b4:	08008a07 	.word	0x08008a07
 80089b8:	08008a1b 	.word	0x08008a1b
 80089bc:	080089db 	.word	0x080089db
 80089c0:	080089d1 	.word	0x080089d1
 80089c4:	08008a1b 	.word	0x08008a1b
 80089c8:	080089f3 	.word	0x080089f3
 80089cc:	080089e5 	.word	0x080089e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa3e 	bl	8008e54 <USBD_GetDescriptor>
          break;
 80089d8:	e024      	b.n	8008a24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fba3 	bl	8009128 <USBD_SetAddress>
          break;
 80089e2:	e01f      	b.n	8008a24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fbe2 	bl	80091b0 <USBD_SetConfig>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
          break;
 80089f0:	e018      	b.n	8008a24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fc85 	bl	8009304 <USBD_GetConfig>
          break;
 80089fa:	e013      	b.n	8008a24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fcb6 	bl	8009370 <USBD_GetStatus>
          break;
 8008a04:	e00e      	b.n	8008a24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fce5 	bl	80093d8 <USBD_SetFeature>
          break;
 8008a0e:	e009      	b.n	8008a24 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fd09 	bl	800942a <USBD_ClrFeature>
          break;
 8008a18:	e004      	b.n	8008a24 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fd60 	bl	80094e2 <USBD_CtlError>
          break;
 8008a22:	bf00      	nop
      }
      break;
 8008a24:	e004      	b.n	8008a30 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fd5a 	bl	80094e2 <USBD_CtlError>
      break;
 8008a2e:	bf00      	nop
  }

  return ret;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop

08008a3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a52:	2b40      	cmp	r3, #64	@ 0x40
 8008a54:	d005      	beq.n	8008a62 <USBD_StdItfReq+0x26>
 8008a56:	2b40      	cmp	r3, #64	@ 0x40
 8008a58:	d852      	bhi.n	8008b00 <USBD_StdItfReq+0xc4>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <USBD_StdItfReq+0x26>
 8008a5e:	2b20      	cmp	r3, #32
 8008a60:	d14e      	bne.n	8008b00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d840      	bhi.n	8008af2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	889b      	ldrh	r3, [r3, #4]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d836      	bhi.n	8008ae8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	889b      	ldrh	r3, [r3, #4]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7ff feda 	bl	800883c <USBD_CoreFindIF>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	2bff      	cmp	r3, #255	@ 0xff
 8008a90:	d01d      	beq.n	8008ace <USBD_StdItfReq+0x92>
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d11a      	bne.n	8008ace <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008a98:	7bba      	ldrb	r2, [r7, #14]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	32ae      	adds	r2, #174	@ 0xae
 8008a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00f      	beq.n	8008ac8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008aa8:	7bba      	ldrb	r2, [r7, #14]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ab0:	7bba      	ldrb	r2, [r7, #14]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	32ae      	adds	r2, #174	@ 0xae
 8008ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	4798      	blx	r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ac6:	e004      	b.n	8008ad2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008acc:	e001      	b.n	8008ad2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	88db      	ldrh	r3, [r3, #6]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d110      	bne.n	8008afc <USBD_StdItfReq+0xc0>
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10d      	bne.n	8008afc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fddc 	bl	800969e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ae6:	e009      	b.n	8008afc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fcf9 	bl	80094e2 <USBD_CtlError>
          break;
 8008af0:	e004      	b.n	8008afc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fcf4 	bl	80094e2 <USBD_CtlError>
          break;
 8008afa:	e000      	b.n	8008afe <USBD_StdItfReq+0xc2>
          break;
 8008afc:	bf00      	nop
      }
      break;
 8008afe:	e004      	b.n	8008b0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fced 	bl	80094e2 <USBD_CtlError>
      break;
 8008b08:	bf00      	nop
  }

  return ret;
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	889b      	ldrh	r3, [r3, #4]
 8008b26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b30:	2b40      	cmp	r3, #64	@ 0x40
 8008b32:	d007      	beq.n	8008b44 <USBD_StdEPReq+0x30>
 8008b34:	2b40      	cmp	r3, #64	@ 0x40
 8008b36:	f200 8181 	bhi.w	8008e3c <USBD_StdEPReq+0x328>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d02a      	beq.n	8008b94 <USBD_StdEPReq+0x80>
 8008b3e:	2b20      	cmp	r3, #32
 8008b40:	f040 817c 	bne.w	8008e3c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff fe84 	bl	8008856 <USBD_CoreFindEP>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b52:	7b7b      	ldrb	r3, [r7, #13]
 8008b54:	2bff      	cmp	r3, #255	@ 0xff
 8008b56:	f000 8176 	beq.w	8008e46 <USBD_StdEPReq+0x332>
 8008b5a:	7b7b      	ldrb	r3, [r7, #13]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f040 8172 	bne.w	8008e46 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008b62:	7b7a      	ldrb	r2, [r7, #13]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b6a:	7b7a      	ldrb	r2, [r7, #13]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	32ae      	adds	r2, #174	@ 0xae
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 8165 	beq.w	8008e46 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b7c:	7b7a      	ldrb	r2, [r7, #13]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	32ae      	adds	r2, #174	@ 0xae
 8008b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	4798      	blx	r3
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b92:	e158      	b.n	8008e46 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d008      	beq.n	8008bae <USBD_StdEPReq+0x9a>
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	f300 8147 	bgt.w	8008e30 <USBD_StdEPReq+0x31c>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 809b 	beq.w	8008cde <USBD_StdEPReq+0x1ca>
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d03c      	beq.n	8008c26 <USBD_StdEPReq+0x112>
 8008bac:	e140      	b.n	8008e30 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d002      	beq.n	8008bc0 <USBD_StdEPReq+0xac>
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d016      	beq.n	8008bec <USBD_StdEPReq+0xd8>
 8008bbe:	e02c      	b.n	8008c1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00d      	beq.n	8008be2 <USBD_StdEPReq+0xce>
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
 8008bc8:	2b80      	cmp	r3, #128	@ 0x80
 8008bca:	d00a      	beq.n	8008be2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f003 ff6f 	bl	800cab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bd6:	2180      	movs	r1, #128	@ 0x80
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f003 ff6b 	bl	800cab4 <USBD_LL_StallEP>
 8008bde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008be0:	e020      	b.n	8008c24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fc7c 	bl	80094e2 <USBD_CtlError>
              break;
 8008bea:	e01b      	b.n	8008c24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	885b      	ldrh	r3, [r3, #2]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10e      	bne.n	8008c12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00b      	beq.n	8008c12 <USBD_StdEPReq+0xfe>
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	2b80      	cmp	r3, #128	@ 0x80
 8008bfe:	d008      	beq.n	8008c12 <USBD_StdEPReq+0xfe>
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	88db      	ldrh	r3, [r3, #6]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d104      	bne.n	8008c12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f003 ff51 	bl	800cab4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fd43 	bl	800969e <USBD_CtlSendStatus>

              break;
 8008c18:	e004      	b.n	8008c24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fc60 	bl	80094e2 <USBD_CtlError>
              break;
 8008c22:	bf00      	nop
          }
          break;
 8008c24:	e109      	b.n	8008e3a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d002      	beq.n	8008c38 <USBD_StdEPReq+0x124>
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d016      	beq.n	8008c64 <USBD_StdEPReq+0x150>
 8008c36:	e04b      	b.n	8008cd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00d      	beq.n	8008c5a <USBD_StdEPReq+0x146>
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	2b80      	cmp	r3, #128	@ 0x80
 8008c42:	d00a      	beq.n	8008c5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f003 ff33 	bl	800cab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c4e:	2180      	movs	r1, #128	@ 0x80
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f003 ff2f 	bl	800cab4 <USBD_LL_StallEP>
 8008c56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c58:	e040      	b.n	8008cdc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fc40 	bl	80094e2 <USBD_CtlError>
              break;
 8008c62:	e03b      	b.n	8008cdc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	885b      	ldrh	r3, [r3, #2]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d136      	bne.n	8008cda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d004      	beq.n	8008c80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f003 ff39 	bl	800caf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fd0c 	bl	800969e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff fde3 	bl	8008856 <USBD_CoreFindEP>
 8008c90:	4603      	mov	r3, r0
 8008c92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c94:	7b7b      	ldrb	r3, [r7, #13]
 8008c96:	2bff      	cmp	r3, #255	@ 0xff
 8008c98:	d01f      	beq.n	8008cda <USBD_StdEPReq+0x1c6>
 8008c9a:	7b7b      	ldrb	r3, [r7, #13]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d11c      	bne.n	8008cda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ca0:	7b7a      	ldrb	r2, [r7, #13]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ca8:	7b7a      	ldrb	r2, [r7, #13]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	32ae      	adds	r2, #174	@ 0xae
 8008cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d010      	beq.n	8008cda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008cb8:	7b7a      	ldrb	r2, [r7, #13]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	32ae      	adds	r2, #174	@ 0xae
 8008cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	4798      	blx	r3
 8008cca:	4603      	mov	r3, r0
 8008ccc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008cce:	e004      	b.n	8008cda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fc05 	bl	80094e2 <USBD_CtlError>
              break;
 8008cd8:	e000      	b.n	8008cdc <USBD_StdEPReq+0x1c8>
              break;
 8008cda:	bf00      	nop
          }
          break;
 8008cdc:	e0ad      	b.n	8008e3a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d002      	beq.n	8008cf0 <USBD_StdEPReq+0x1dc>
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d033      	beq.n	8008d56 <USBD_StdEPReq+0x242>
 8008cee:	e099      	b.n	8008e24 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <USBD_StdEPReq+0x1f2>
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	2b80      	cmp	r3, #128	@ 0x80
 8008cfa:	d004      	beq.n	8008d06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fbef 	bl	80094e2 <USBD_CtlError>
                break;
 8008d04:	e093      	b.n	8008e2e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	da0b      	bge.n	8008d26 <USBD_StdEPReq+0x212>
 8008d0e:	7bbb      	ldrb	r3, [r7, #14]
 8008d10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	3310      	adds	r3, #16
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	4413      	add	r3, r2
 8008d22:	3304      	adds	r3, #4
 8008d24:	e00b      	b.n	8008d3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2200      	movs	r2, #0
 8008d44:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	330e      	adds	r3, #14
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fc44 	bl	80095dc <USBD_CtlSendData>
              break;
 8008d54:	e06b      	b.n	8008e2e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	da11      	bge.n	8008d82 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	f003 020f 	and.w	r2, r3, #15
 8008d64:	6879      	ldr	r1, [r7, #4]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	440b      	add	r3, r1
 8008d70:	3323      	adds	r3, #35	@ 0x23
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d117      	bne.n	8008da8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fbb1 	bl	80094e2 <USBD_CtlError>
                  break;
 8008d80:	e055      	b.n	8008e2e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	f003 020f 	and.w	r2, r3, #15
 8008d88:	6879      	ldr	r1, [r7, #4]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	440b      	add	r3, r1
 8008d94:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d104      	bne.n	8008da8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fb9e 	bl	80094e2 <USBD_CtlError>
                  break;
 8008da6:	e042      	b.n	8008e2e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	da0b      	bge.n	8008dc8 <USBD_StdEPReq+0x2b4>
 8008db0:	7bbb      	ldrb	r3, [r7, #14]
 8008db2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008db6:	4613      	mov	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	3310      	adds	r3, #16
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	e00b      	b.n	8008de0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	4413      	add	r3, r2
 8008dde:	3304      	adds	r3, #4
 8008de0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <USBD_StdEPReq+0x2da>
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	2b80      	cmp	r3, #128	@ 0x80
 8008dec:	d103      	bne.n	8008df6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2200      	movs	r2, #0
 8008df2:	739a      	strb	r2, [r3, #14]
 8008df4:	e00e      	b.n	8008e14 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f003 fe98 	bl	800cb30 <USBD_LL_IsStallEP>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	739a      	strb	r2, [r3, #14]
 8008e0c:	e002      	b.n	8008e14 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2200      	movs	r2, #0
 8008e12:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	330e      	adds	r3, #14
 8008e18:	2202      	movs	r2, #2
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fbdd 	bl	80095dc <USBD_CtlSendData>
              break;
 8008e22:	e004      	b.n	8008e2e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fb5b 	bl	80094e2 <USBD_CtlError>
              break;
 8008e2c:	bf00      	nop
          }
          break;
 8008e2e:	e004      	b.n	8008e3a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fb55 	bl	80094e2 <USBD_CtlError>
          break;
 8008e38:	bf00      	nop
      }
      break;
 8008e3a:	e005      	b.n	8008e48 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fb4f 	bl	80094e2 <USBD_CtlError>
      break;
 8008e44:	e000      	b.n	8008e48 <USBD_StdEPReq+0x334>
      break;
 8008e46:	bf00      	nop
  }

  return ret;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	0a1b      	lsrs	r3, r3, #8
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	3b01      	subs	r3, #1
 8008e74:	2b06      	cmp	r3, #6
 8008e76:	f200 8128 	bhi.w	80090ca <USBD_GetDescriptor+0x276>
 8008e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e80 <USBD_GetDescriptor+0x2c>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008e9d 	.word	0x08008e9d
 8008e84:	08008eb5 	.word	0x08008eb5
 8008e88:	08008ef5 	.word	0x08008ef5
 8008e8c:	080090cb 	.word	0x080090cb
 8008e90:	080090cb 	.word	0x080090cb
 8008e94:	0800906b 	.word	0x0800906b
 8008e98:	08009097 	.word	0x08009097
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	7c12      	ldrb	r2, [r2, #16]
 8008ea8:	f107 0108 	add.w	r1, r7, #8
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
 8008eb0:	60f8      	str	r0, [r7, #12]
      break;
 8008eb2:	e112      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7c1b      	ldrb	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10d      	bne.n	8008ed8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec4:	f107 0208 	add.w	r2, r7, #8
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ed6:	e100      	b.n	80090da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee0:	f107 0208 	add.w	r2, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3301      	adds	r3, #1
 8008eee:	2202      	movs	r2, #2
 8008ef0:	701a      	strb	r2, [r3, #0]
      break;
 8008ef2:	e0f2      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	885b      	ldrh	r3, [r3, #2]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b05      	cmp	r3, #5
 8008efc:	f200 80ac 	bhi.w	8009058 <USBD_GetDescriptor+0x204>
 8008f00:	a201      	add	r2, pc, #4	@ (adr r2, 8008f08 <USBD_GetDescriptor+0xb4>)
 8008f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f06:	bf00      	nop
 8008f08:	08008f21 	.word	0x08008f21
 8008f0c:	08008f55 	.word	0x08008f55
 8008f10:	08008f89 	.word	0x08008f89
 8008f14:	08008fbd 	.word	0x08008fbd
 8008f18:	08008ff1 	.word	0x08008ff1
 8008f1c:	08009025 	.word	0x08009025
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7c12      	ldrb	r2, [r2, #16]
 8008f38:	f107 0108 	add.w	r1, r7, #8
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f42:	e091      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 facb 	bl	80094e2 <USBD_CtlError>
            err++;
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	72fb      	strb	r3, [r7, #11]
          break;
 8008f52:	e089      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7c12      	ldrb	r2, [r2, #16]
 8008f6c:	f107 0108 	add.w	r1, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f76:	e077      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fab1 	bl	80094e2 <USBD_CtlError>
            err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
          break;
 8008f86:	e06f      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	7c12      	ldrb	r2, [r2, #16]
 8008fa0:	f107 0108 	add.w	r1, r7, #8
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4798      	blx	r3
 8008fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008faa:	e05d      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa97 	bl	80094e2 <USBD_CtlError>
            err++;
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fba:	e055      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	7c12      	ldrb	r2, [r2, #16]
 8008fd4:	f107 0108 	add.w	r1, r7, #8
 8008fd8:	4610      	mov	r0, r2
 8008fda:	4798      	blx	r3
 8008fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fde:	e043      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa7d 	bl	80094e2 <USBD_CtlError>
            err++;
 8008fe8:	7afb      	ldrb	r3, [r7, #11]
 8008fea:	3301      	adds	r3, #1
 8008fec:	72fb      	strb	r3, [r7, #11]
          break;
 8008fee:	e03b      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00b      	beq.n	8009014 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	7c12      	ldrb	r2, [r2, #16]
 8009008:	f107 0108 	add.w	r1, r7, #8
 800900c:	4610      	mov	r0, r2
 800900e:	4798      	blx	r3
 8009010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009012:	e029      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa63 	bl	80094e2 <USBD_CtlError>
            err++;
 800901c:	7afb      	ldrb	r3, [r7, #11]
 800901e:	3301      	adds	r3, #1
 8009020:	72fb      	strb	r3, [r7, #11]
          break;
 8009022:	e021      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00b      	beq.n	8009048 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	7c12      	ldrb	r2, [r2, #16]
 800903c:	f107 0108 	add.w	r1, r7, #8
 8009040:	4610      	mov	r0, r2
 8009042:	4798      	blx	r3
 8009044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009046:	e00f      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa49 	bl	80094e2 <USBD_CtlError>
            err++;
 8009050:	7afb      	ldrb	r3, [r7, #11]
 8009052:	3301      	adds	r3, #1
 8009054:	72fb      	strb	r3, [r7, #11]
          break;
 8009056:	e007      	b.n	8009068 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa41 	bl	80094e2 <USBD_CtlError>
          err++;
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	3301      	adds	r3, #1
 8009064:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009066:	bf00      	nop
      }
      break;
 8009068:	e037      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	7c1b      	ldrb	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800907a:	f107 0208 	add.w	r2, r7, #8
 800907e:	4610      	mov	r0, r2
 8009080:	4798      	blx	r3
 8009082:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009084:	e029      	b.n	80090da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fa2a 	bl	80094e2 <USBD_CtlError>
        err++;
 800908e:	7afb      	ldrb	r3, [r7, #11]
 8009090:	3301      	adds	r3, #1
 8009092:	72fb      	strb	r3, [r7, #11]
      break;
 8009094:	e021      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	7c1b      	ldrb	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10d      	bne.n	80090ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a6:	f107 0208 	add.w	r2, r7, #8
 80090aa:	4610      	mov	r0, r2
 80090ac:	4798      	blx	r3
 80090ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3301      	adds	r3, #1
 80090b4:	2207      	movs	r2, #7
 80090b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090b8:	e00f      	b.n	80090da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa10 	bl	80094e2 <USBD_CtlError>
        err++;
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	3301      	adds	r3, #1
 80090c6:	72fb      	strb	r3, [r7, #11]
      break;
 80090c8:	e007      	b.n	80090da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fa08 	bl	80094e2 <USBD_CtlError>
      err++;
 80090d2:	7afb      	ldrb	r3, [r7, #11]
 80090d4:	3301      	adds	r3, #1
 80090d6:	72fb      	strb	r3, [r7, #11]
      break;
 80090d8:	bf00      	nop
  }

  if (err != 0U)
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d11e      	bne.n	800911e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	88db      	ldrh	r3, [r3, #6]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d016      	beq.n	8009116 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80090e8:	893b      	ldrh	r3, [r7, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00e      	beq.n	800910c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	88da      	ldrh	r2, [r3, #6]
 80090f2:	893b      	ldrh	r3, [r7, #8]
 80090f4:	4293      	cmp	r3, r2
 80090f6:	bf28      	it	cs
 80090f8:	4613      	movcs	r3, r2
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090fe:	893b      	ldrh	r3, [r7, #8]
 8009100:	461a      	mov	r2, r3
 8009102:	68f9      	ldr	r1, [r7, #12]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fa69 	bl	80095dc <USBD_CtlSendData>
 800910a:	e009      	b.n	8009120 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f9e7 	bl	80094e2 <USBD_CtlError>
 8009114:	e004      	b.n	8009120 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fac1 	bl	800969e <USBD_CtlSendStatus>
 800911c:	e000      	b.n	8009120 <USBD_GetDescriptor+0x2cc>
    return;
 800911e:	bf00      	nop
  }
}
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop

08009128 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	889b      	ldrh	r3, [r3, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d131      	bne.n	800919e <USBD_SetAddress+0x76>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	88db      	ldrh	r3, [r3, #6]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d12d      	bne.n	800919e <USBD_SetAddress+0x76>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	885b      	ldrh	r3, [r3, #2]
 8009146:	2b7f      	cmp	r3, #127	@ 0x7f
 8009148:	d829      	bhi.n	800919e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	885b      	ldrh	r3, [r3, #2]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009154:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b03      	cmp	r3, #3
 8009160:	d104      	bne.n	800916c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f9bc 	bl	80094e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916a:	e01d      	b.n	80091a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7bfa      	ldrb	r2, [r7, #15]
 8009170:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f003 fd05 	bl	800cb88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa8d 	bl	800969e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d004      	beq.n	8009194 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2202      	movs	r2, #2
 800918e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009192:	e009      	b.n	80091a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919c:	e004      	b.n	80091a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f99e 	bl	80094e2 <USBD_CtlError>
  }
}
 80091a6:	bf00      	nop
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	4b4e      	ldr	r3, [pc, #312]	@ (8009300 <USBD_SetConfig+0x150>)
 80091c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091c8:	4b4d      	ldr	r3, [pc, #308]	@ (8009300 <USBD_SetConfig+0x150>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d905      	bls.n	80091dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f985 	bl	80094e2 <USBD_CtlError>
    return USBD_FAIL;
 80091d8:	2303      	movs	r3, #3
 80091da:	e08c      	b.n	80092f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d002      	beq.n	80091ee <USBD_SetConfig+0x3e>
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d029      	beq.n	8009240 <USBD_SetConfig+0x90>
 80091ec:	e075      	b.n	80092da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80091ee:	4b44      	ldr	r3, [pc, #272]	@ (8009300 <USBD_SetConfig+0x150>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d020      	beq.n	8009238 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80091f6:	4b42      	ldr	r3, [pc, #264]	@ (8009300 <USBD_SetConfig+0x150>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009200:	4b3f      	ldr	r3, [pc, #252]	@ (8009300 <USBD_SetConfig+0x150>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7fe ffcd 	bl	80081a6 <USBD_SetClassConfig>
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d008      	beq.n	8009228 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f962 	bl	80094e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2202      	movs	r2, #2
 8009222:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009226:	e065      	b.n	80092f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fa38 	bl	800969e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2203      	movs	r2, #3
 8009232:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009236:	e05d      	b.n	80092f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa30 	bl	800969e <USBD_CtlSendStatus>
      break;
 800923e:	e059      	b.n	80092f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009240:	4b2f      	ldr	r3, [pc, #188]	@ (8009300 <USBD_SetConfig+0x150>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d112      	bne.n	800926e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009250:	4b2b      	ldr	r3, [pc, #172]	@ (8009300 <USBD_SetConfig+0x150>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800925a:	4b29      	ldr	r3, [pc, #164]	@ (8009300 <USBD_SetConfig+0x150>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7fe ffbc 	bl	80081de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa19 	bl	800969e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800926c:	e042      	b.n	80092f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800926e:	4b24      	ldr	r3, [pc, #144]	@ (8009300 <USBD_SetConfig+0x150>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	429a      	cmp	r2, r3
 800927a:	d02a      	beq.n	80092d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	b2db      	uxtb	r3, r3
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7fe ffaa 	bl	80081de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800928a:	4b1d      	ldr	r3, [pc, #116]	@ (8009300 <USBD_SetConfig+0x150>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009294:	4b1a      	ldr	r3, [pc, #104]	@ (8009300 <USBD_SetConfig+0x150>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7fe ff83 	bl	80081a6 <USBD_SetClassConfig>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00f      	beq.n	80092ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f918 	bl	80094e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fe ff8f 	bl	80081de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092c8:	e014      	b.n	80092f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f9e7 	bl	800969e <USBD_CtlSendStatus>
      break;
 80092d0:	e010      	b.n	80092f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f9e3 	bl	800969e <USBD_CtlSendStatus>
      break;
 80092d8:	e00c      	b.n	80092f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f900 	bl	80094e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092e2:	4b07      	ldr	r3, [pc, #28]	@ (8009300 <USBD_SetConfig+0x150>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7fe ff78 	bl	80081de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80092ee:	2303      	movs	r3, #3
 80092f0:	73fb      	strb	r3, [r7, #15]
      break;
 80092f2:	bf00      	nop
  }

  return ret;
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20000344 	.word	0x20000344

08009304 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	88db      	ldrh	r3, [r3, #6]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d004      	beq.n	8009320 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f8e2 	bl	80094e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800931e:	e023      	b.n	8009368 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b02      	cmp	r3, #2
 800932a:	dc02      	bgt.n	8009332 <USBD_GetConfig+0x2e>
 800932c:	2b00      	cmp	r3, #0
 800932e:	dc03      	bgt.n	8009338 <USBD_GetConfig+0x34>
 8009330:	e015      	b.n	800935e <USBD_GetConfig+0x5a>
 8009332:	2b03      	cmp	r3, #3
 8009334:	d00b      	beq.n	800934e <USBD_GetConfig+0x4a>
 8009336:	e012      	b.n	800935e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3308      	adds	r3, #8
 8009342:	2201      	movs	r2, #1
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f948 	bl	80095dc <USBD_CtlSendData>
        break;
 800934c:	e00c      	b.n	8009368 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	3304      	adds	r3, #4
 8009352:	2201      	movs	r2, #1
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f940 	bl	80095dc <USBD_CtlSendData>
        break;
 800935c:	e004      	b.n	8009368 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f8be 	bl	80094e2 <USBD_CtlError>
        break;
 8009366:	bf00      	nop
}
 8009368:	bf00      	nop
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009380:	b2db      	uxtb	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	2b02      	cmp	r3, #2
 8009386:	d81e      	bhi.n	80093c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	88db      	ldrh	r3, [r3, #6]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d004      	beq.n	800939a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f8a5 	bl	80094e2 <USBD_CtlError>
        break;
 8009398:	e01a      	b.n	80093d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d005      	beq.n	80093b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	f043 0202 	orr.w	r2, r3, #2
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	330c      	adds	r3, #12
 80093ba:	2202      	movs	r2, #2
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f90c 	bl	80095dc <USBD_CtlSendData>
      break;
 80093c4:	e004      	b.n	80093d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f88a 	bl	80094e2 <USBD_CtlError>
      break;
 80093ce:	bf00      	nop
  }
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	885b      	ldrh	r3, [r3, #2]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d107      	bne.n	80093fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f953 	bl	800969e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80093f8:	e013      	b.n	8009422 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	885b      	ldrh	r3, [r3, #2]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d10b      	bne.n	800941a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	889b      	ldrh	r3, [r3, #4]
 8009406:	0a1b      	lsrs	r3, r3, #8
 8009408:	b29b      	uxth	r3, r3
 800940a:	b2da      	uxtb	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f943 	bl	800969e <USBD_CtlSendStatus>
}
 8009418:	e003      	b.n	8009422 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f860 	bl	80094e2 <USBD_CtlError>
}
 8009422:	bf00      	nop
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800943a:	b2db      	uxtb	r3, r3
 800943c:	3b01      	subs	r3, #1
 800943e:	2b02      	cmp	r3, #2
 8009440:	d80b      	bhi.n	800945a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	885b      	ldrh	r3, [r3, #2]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d10c      	bne.n	8009464 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f923 	bl	800969e <USBD_CtlSendStatus>
      }
      break;
 8009458:	e004      	b.n	8009464 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f840 	bl	80094e2 <USBD_CtlError>
      break;
 8009462:	e000      	b.n	8009466 <USBD_ClrFeature+0x3c>
      break;
 8009464:	bf00      	nop
  }
}
 8009466:	bf00      	nop
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	781a      	ldrb	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3301      	adds	r3, #1
 8009488:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	781a      	ldrb	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f7ff fa3d 	bl	8008918 <SWAPBYTE>
 800949e:	4603      	mov	r3, r0
 80094a0:	461a      	mov	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3301      	adds	r3, #1
 80094aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7ff fa30 	bl	8008918 <SWAPBYTE>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3301      	adds	r3, #1
 80094c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3301      	adds	r3, #1
 80094ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff fa23 	bl	8008918 <SWAPBYTE>
 80094d2:	4603      	mov	r3, r0
 80094d4:	461a      	mov	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	80da      	strh	r2, [r3, #6]
}
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094ec:	2180      	movs	r1, #128	@ 0x80
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f003 fae0 	bl	800cab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094f4:	2100      	movs	r1, #0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f003 fadc 	bl	800cab4 <USBD_LL_StallEP>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d042      	beq.n	80095a0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800951e:	6938      	ldr	r0, [r7, #16]
 8009520:	f000 f842 	bl	80095a8 <USBD_GetLen>
 8009524:	4603      	mov	r3, r0
 8009526:	3301      	adds	r3, #1
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800952e:	d808      	bhi.n	8009542 <USBD_GetString+0x3e>
 8009530:	6938      	ldr	r0, [r7, #16]
 8009532:	f000 f839 	bl	80095a8 <USBD_GetLen>
 8009536:	4603      	mov	r3, r0
 8009538:	3301      	adds	r3, #1
 800953a:	b29b      	uxth	r3, r3
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	b29a      	uxth	r2, r3
 8009540:	e001      	b.n	8009546 <USBD_GetString+0x42>
 8009542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	4413      	add	r3, r2
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	7812      	ldrb	r2, [r2, #0]
 8009554:	701a      	strb	r2, [r3, #0]
  idx++;
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	3301      	adds	r3, #1
 800955a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	4413      	add	r3, r2
 8009562:	2203      	movs	r2, #3
 8009564:	701a      	strb	r2, [r3, #0]
  idx++;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	3301      	adds	r3, #1
 800956a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800956c:	e013      	b.n	8009596 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	4413      	add	r3, r2
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	7812      	ldrb	r2, [r2, #0]
 8009578:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	3301      	adds	r3, #1
 800957e:	613b      	str	r3, [r7, #16]
    idx++;
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	3301      	adds	r3, #1
 8009584:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009586:	7dfb      	ldrb	r3, [r7, #23]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	4413      	add	r3, r2
 800958c:	2200      	movs	r2, #0
 800958e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	3301      	adds	r3, #1
 8009594:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1e7      	bne.n	800956e <USBD_GetString+0x6a>
 800959e:	e000      	b.n	80095a2 <USBD_GetString+0x9e>
    return;
 80095a0:	bf00      	nop
  }
}
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095b8:	e005      	b.n	80095c6 <USBD_GetLen+0x1e>
  {
    len++;
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	3301      	adds	r3, #1
 80095be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	3301      	adds	r3, #1
 80095c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f5      	bne.n	80095ba <USBD_GetLen+0x12>
  }

  return len;
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	2100      	movs	r1, #0
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f003 fadc 	bl	800cbc6 <USBD_LL_Transmit>

  return USBD_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	2100      	movs	r1, #0
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f003 facb 	bl	800cbc6 <USBD_LL_Transmit>

  return USBD_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2203      	movs	r2, #3
 800964a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	2100      	movs	r1, #0
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f003 facb 	bl	800cc08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	2100      	movs	r1, #0
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f003 faba 	bl	800cc08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2204      	movs	r2, #4
 80096aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096ae:	2300      	movs	r3, #0
 80096b0:	2200      	movs	r2, #0
 80096b2:	2100      	movs	r1, #0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f003 fa86 	bl	800cbc6 <USBD_LL_Transmit>

  return USBD_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2205      	movs	r2, #5
 80096d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096d4:	2300      	movs	r3, #0
 80096d6:	2200      	movs	r2, #0
 80096d8:	2100      	movs	r1, #0
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f003 fa94 	bl	800cc08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <__NVIC_SetPriority>:
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	6039      	str	r1, [r7, #0]
 80096f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	db0a      	blt.n	8009716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	b2da      	uxtb	r2, r3
 8009704:	490c      	ldr	r1, [pc, #48]	@ (8009738 <__NVIC_SetPriority+0x4c>)
 8009706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800970a:	0112      	lsls	r2, r2, #4
 800970c:	b2d2      	uxtb	r2, r2
 800970e:	440b      	add	r3, r1
 8009710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009714:	e00a      	b.n	800972c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	b2da      	uxtb	r2, r3
 800971a:	4908      	ldr	r1, [pc, #32]	@ (800973c <__NVIC_SetPriority+0x50>)
 800971c:	79fb      	ldrb	r3, [r7, #7]
 800971e:	f003 030f 	and.w	r3, r3, #15
 8009722:	3b04      	subs	r3, #4
 8009724:	0112      	lsls	r2, r2, #4
 8009726:	b2d2      	uxtb	r2, r2
 8009728:	440b      	add	r3, r1
 800972a:	761a      	strb	r2, [r3, #24]
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	e000e100 	.word	0xe000e100
 800973c:	e000ed00 	.word	0xe000ed00

08009740 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009740:	b580      	push	{r7, lr}
 8009742:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009744:	4b05      	ldr	r3, [pc, #20]	@ (800975c <SysTick_Handler+0x1c>)
 8009746:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009748:	f001 fd46 	bl	800b1d8 <xTaskGetSchedulerState>
 800974c:	4603      	mov	r3, r0
 800974e:	2b01      	cmp	r3, #1
 8009750:	d001      	beq.n	8009756 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009752:	f002 fb41 	bl	800bdd8 <xPortSysTickHandler>
  }
}
 8009756:	bf00      	nop
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	e000e010 	.word	0xe000e010

08009760 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009760:	b580      	push	{r7, lr}
 8009762:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009764:	2100      	movs	r1, #0
 8009766:	f06f 0004 	mvn.w	r0, #4
 800976a:	f7ff ffbf 	bl	80096ec <__NVIC_SetPriority>
#endif
}
 800976e:	bf00      	nop
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800977a:	f3ef 8305 	mrs	r3, IPSR
 800977e:	603b      	str	r3, [r7, #0]
  return(result);
 8009780:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009782:	2b00      	cmp	r3, #0
 8009784:	d003      	beq.n	800978e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009786:	f06f 0305 	mvn.w	r3, #5
 800978a:	607b      	str	r3, [r7, #4]
 800978c:	e00c      	b.n	80097a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800978e:	4b0a      	ldr	r3, [pc, #40]	@ (80097b8 <osKernelInitialize+0x44>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009796:	4b08      	ldr	r3, [pc, #32]	@ (80097b8 <osKernelInitialize+0x44>)
 8009798:	2201      	movs	r2, #1
 800979a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800979c:	2300      	movs	r3, #0
 800979e:	607b      	str	r3, [r7, #4]
 80097a0:	e002      	b.n	80097a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80097a2:	f04f 33ff 	mov.w	r3, #4294967295
 80097a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097a8:	687b      	ldr	r3, [r7, #4]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20000348 	.word	0x20000348

080097bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097c2:	f3ef 8305 	mrs	r3, IPSR
 80097c6:	603b      	str	r3, [r7, #0]
  return(result);
 80097c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80097ce:	f06f 0305 	mvn.w	r3, #5
 80097d2:	607b      	str	r3, [r7, #4]
 80097d4:	e010      	b.n	80097f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009804 <osKernelStart+0x48>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d109      	bne.n	80097f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80097de:	f7ff ffbf 	bl	8009760 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80097e2:	4b08      	ldr	r3, [pc, #32]	@ (8009804 <osKernelStart+0x48>)
 80097e4:	2202      	movs	r2, #2
 80097e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80097e8:	f001 f892 	bl	800a910 <vTaskStartScheduler>
      stat = osOK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	607b      	str	r3, [r7, #4]
 80097f0:	e002      	b.n	80097f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80097f2:	f04f 33ff 	mov.w	r3, #4294967295
 80097f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097f8:	687b      	ldr	r3, [r7, #4]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20000348 	.word	0x20000348

08009808 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009808:	b580      	push	{r7, lr}
 800980a:	b08e      	sub	sp, #56	@ 0x38
 800980c:	af04      	add	r7, sp, #16
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009814:	2300      	movs	r3, #0
 8009816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009818:	f3ef 8305 	mrs	r3, IPSR
 800981c:	617b      	str	r3, [r7, #20]
  return(result);
 800981e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009820:	2b00      	cmp	r3, #0
 8009822:	d17e      	bne.n	8009922 <osThreadNew+0x11a>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d07b      	beq.n	8009922 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800982a:	2380      	movs	r3, #128	@ 0x80
 800982c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800982e:	2318      	movs	r3, #24
 8009830:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009836:	f04f 33ff 	mov.w	r3, #4294967295
 800983a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d045      	beq.n	80098ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d002      	beq.n	8009850 <osThreadNew+0x48>
        name = attr->name;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d008      	beq.n	8009876 <osThreadNew+0x6e>
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	2b38      	cmp	r3, #56	@ 0x38
 8009868:	d805      	bhi.n	8009876 <osThreadNew+0x6e>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <osThreadNew+0x72>
        return (NULL);
 8009876:	2300      	movs	r3, #0
 8009878:	e054      	b.n	8009924 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	089b      	lsrs	r3, r3, #2
 8009888:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00e      	beq.n	80098b0 <osThreadNew+0xa8>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	2ba7      	cmp	r3, #167	@ 0xa7
 8009898:	d90a      	bls.n	80098b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d006      	beq.n	80098b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <osThreadNew+0xa8>
        mem = 1;
 80098aa:	2301      	movs	r3, #1
 80098ac:	61bb      	str	r3, [r7, #24]
 80098ae:	e010      	b.n	80098d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10c      	bne.n	80098d2 <osThreadNew+0xca>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d108      	bne.n	80098d2 <osThreadNew+0xca>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d104      	bne.n	80098d2 <osThreadNew+0xca>
          mem = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	61bb      	str	r3, [r7, #24]
 80098cc:	e001      	b.n	80098d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d110      	bne.n	80098fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098e0:	9202      	str	r2, [sp, #8]
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	6a3a      	ldr	r2, [r7, #32]
 80098ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 fe1a 	bl	800a528 <xTaskCreateStatic>
 80098f4:	4603      	mov	r3, r0
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	e013      	b.n	8009922 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d110      	bne.n	8009922 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	b29a      	uxth	r2, r3
 8009904:	f107 0310 	add.w	r3, r7, #16
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f000 fe68 	bl	800a5e8 <xTaskCreate>
 8009918:	4603      	mov	r3, r0
 800991a:	2b01      	cmp	r3, #1
 800991c:	d001      	beq.n	8009922 <osThreadNew+0x11a>
            hTask = NULL;
 800991e:	2300      	movs	r3, #0
 8009920:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009922:	693b      	ldr	r3, [r7, #16]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3728      	adds	r7, #40	@ 0x28
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009934:	f3ef 8305 	mrs	r3, IPSR
 8009938:	60bb      	str	r3, [r7, #8]
  return(result);
 800993a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <osDelay+0x1c>
    stat = osErrorISR;
 8009940:	f06f 0305 	mvn.w	r3, #5
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	e007      	b.n	8009958 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009948:	2300      	movs	r3, #0
 800994a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 ffa6 	bl	800a8a4 <vTaskDelay>
    }
  }

  return (stat);
 8009958:	68fb      	ldr	r3, [r7, #12]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4a07      	ldr	r2, [pc, #28]	@ (8009990 <vApplicationGetIdleTaskMemory+0x2c>)
 8009974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4a06      	ldr	r2, [pc, #24]	@ (8009994 <vApplicationGetIdleTaskMemory+0x30>)
 800997a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2280      	movs	r2, #128	@ 0x80
 8009980:	601a      	str	r2, [r3, #0]
}
 8009982:	bf00      	nop
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	2000034c 	.word	0x2000034c
 8009994:	200003f4 	.word	0x200003f4

08009998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4a07      	ldr	r2, [pc, #28]	@ (80099c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80099a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	4a06      	ldr	r2, [pc, #24]	@ (80099c8 <vApplicationGetTimerTaskMemory+0x30>)
 80099ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099b6:	601a      	str	r2, [r3, #0]
}
 80099b8:	bf00      	nop
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	200005f4 	.word	0x200005f4
 80099c8:	2000069c 	.word	0x2000069c

080099cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f103 0208 	add.w	r2, r3, #8
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f04f 32ff 	mov.w	r2, #4294967295
 80099e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f103 0208 	add.w	r2, r3, #8
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f103 0208 	add.w	r2, r3, #8
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a1a:	bf00      	nop
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a26:	b480      	push	{r7}
 8009a28:	b085      	sub	sp, #20
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	601a      	str	r2, [r3, #0]
}
 8009a62:	bf00      	nop
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b085      	sub	sp, #20
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a84:	d103      	bne.n	8009a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	e00c      	b.n	8009aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	3308      	adds	r3, #8
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	e002      	b.n	8009a9c <vListInsert+0x2e>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d2f6      	bcs.n	8009a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	1c5a      	adds	r2, r3, #1
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	601a      	str	r2, [r3, #0]
}
 8009ad4:	bf00      	nop
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	6892      	ldr	r2, [r2, #8]
 8009af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	6852      	ldr	r2, [r2, #4]
 8009b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d103      	bne.n	8009b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	1e5a      	subs	r2, r3, #1
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10b      	bne.n	8009b60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b5a:	bf00      	nop
 8009b5c:	bf00      	nop
 8009b5e:	e7fd      	b.n	8009b5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009b60:	f002 f8aa 	bl	800bcb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b6c:	68f9      	ldr	r1, [r7, #12]
 8009b6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009b70:	fb01 f303 	mul.w	r3, r1, r3
 8009b74:	441a      	add	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b90:	3b01      	subs	r3, #1
 8009b92:	68f9      	ldr	r1, [r7, #12]
 8009b94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009b96:	fb01 f303 	mul.w	r3, r1, r3
 8009b9a:	441a      	add	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	22ff      	movs	r2, #255	@ 0xff
 8009ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	22ff      	movs	r2, #255	@ 0xff
 8009bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d114      	bne.n	8009be0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d01a      	beq.n	8009bf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3310      	adds	r3, #16
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 f942 	bl	800ae4c <xTaskRemoveFromEventList>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d012      	beq.n	8009bf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009bce:	4b0d      	ldr	r3, [pc, #52]	@ (8009c04 <xQueueGenericReset+0xd0>)
 8009bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	e009      	b.n	8009bf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3310      	adds	r3, #16
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7ff fef1 	bl	80099cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3324      	adds	r3, #36	@ 0x24
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff feec 	bl	80099cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009bf4:	f002 f892 	bl	800bd1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009bf8:	2301      	movs	r3, #1
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	e000ed04 	.word	0xe000ed04

08009c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08e      	sub	sp, #56	@ 0x38
 8009c0c:	af02      	add	r7, sp, #8
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c2e:	bf00      	nop
 8009c30:	bf00      	nop
 8009c32:	e7fd      	b.n	8009c30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10b      	bne.n	8009c52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	e7fd      	b.n	8009c4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <xQueueGenericCreateStatic+0x56>
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <xQueueGenericCreateStatic+0x5a>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e000      	b.n	8009c64 <xQueueGenericCreateStatic+0x5c>
 8009c62:	2300      	movs	r3, #0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10b      	bne.n	8009c80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	623b      	str	r3, [r7, #32]
}
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	e7fd      	b.n	8009c7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d102      	bne.n	8009c8c <xQueueGenericCreateStatic+0x84>
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <xQueueGenericCreateStatic+0x88>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e000      	b.n	8009c92 <xQueueGenericCreateStatic+0x8a>
 8009c90:	2300      	movs	r3, #0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10b      	bne.n	8009cae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	61fb      	str	r3, [r7, #28]
}
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	e7fd      	b.n	8009caa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cae:	2350      	movs	r3, #80	@ 0x50
 8009cb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b50      	cmp	r3, #80	@ 0x50
 8009cb6:	d00b      	beq.n	8009cd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	61bb      	str	r3, [r7, #24]
}
 8009cca:	bf00      	nop
 8009ccc:	bf00      	nop
 8009cce:	e7fd      	b.n	8009ccc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009cd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00d      	beq.n	8009cf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ce4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	4613      	mov	r3, r2
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	68b9      	ldr	r1, [r7, #8]
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 f805 	bl	8009d02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3730      	adds	r7, #48	@ 0x30
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	60f8      	str	r0, [r7, #12]
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	607a      	str	r2, [r7, #4]
 8009d0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d103      	bne.n	8009d1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	e002      	b.n	8009d24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d30:	2101      	movs	r1, #1
 8009d32:	69b8      	ldr	r0, [r7, #24]
 8009d34:	f7ff fefe 	bl	8009b34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	78fa      	ldrb	r2, [r7, #3]
 8009d3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d40:	bf00      	nop
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08e      	sub	sp, #56	@ 0x38
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d56:	2300      	movs	r3, #0
 8009d58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10b      	bne.n	8009d7c <xQueueGenericSend+0x34>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d76:	bf00      	nop
 8009d78:	bf00      	nop
 8009d7a:	e7fd      	b.n	8009d78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d103      	bne.n	8009d8a <xQueueGenericSend+0x42>
 8009d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <xQueueGenericSend+0x46>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e000      	b.n	8009d90 <xQueueGenericSend+0x48>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10b      	bne.n	8009dac <xQueueGenericSend+0x64>
	__asm volatile
 8009d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009da6:	bf00      	nop
 8009da8:	bf00      	nop
 8009daa:	e7fd      	b.n	8009da8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d103      	bne.n	8009dba <xQueueGenericSend+0x72>
 8009db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d101      	bne.n	8009dbe <xQueueGenericSend+0x76>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e000      	b.n	8009dc0 <xQueueGenericSend+0x78>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10b      	bne.n	8009ddc <xQueueGenericSend+0x94>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	623b      	str	r3, [r7, #32]
}
 8009dd6:	bf00      	nop
 8009dd8:	bf00      	nop
 8009dda:	e7fd      	b.n	8009dd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ddc:	f001 f9fc 	bl	800b1d8 <xTaskGetSchedulerState>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d102      	bne.n	8009dec <xQueueGenericSend+0xa4>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <xQueueGenericSend+0xa8>
 8009dec:	2301      	movs	r3, #1
 8009dee:	e000      	b.n	8009df2 <xQueueGenericSend+0xaa>
 8009df0:	2300      	movs	r3, #0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10b      	bne.n	8009e0e <xQueueGenericSend+0xc6>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	61fb      	str	r3, [r7, #28]
}
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
 8009e0c:	e7fd      	b.n	8009e0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e0e:	f001 ff53 	bl	800bcb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d302      	bcc.n	8009e24 <xQueueGenericSend+0xdc>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d129      	bne.n	8009e78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e24:	683a      	ldr	r2, [r7, #0]
 8009e26:	68b9      	ldr	r1, [r7, #8]
 8009e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e2a:	f000 fa0f 	bl	800a24c <prvCopyDataToQueue>
 8009e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d010      	beq.n	8009e5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3a:	3324      	adds	r3, #36	@ 0x24
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 f805 	bl	800ae4c <xTaskRemoveFromEventList>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d013      	beq.n	8009e70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e48:	4b3f      	ldr	r3, [pc, #252]	@ (8009f48 <xQueueGenericSend+0x200>)
 8009e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	e00a      	b.n	8009e70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d007      	beq.n	8009e70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e60:	4b39      	ldr	r3, [pc, #228]	@ (8009f48 <xQueueGenericSend+0x200>)
 8009e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e70:	f001 ff54 	bl	800bd1c <vPortExitCritical>
				return pdPASS;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e063      	b.n	8009f40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d103      	bne.n	8009e86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e7e:	f001 ff4d 	bl	800bd1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	e05c      	b.n	8009f40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d106      	bne.n	8009e9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e8c:	f107 0314 	add.w	r3, r7, #20
 8009e90:	4618      	mov	r0, r3
 8009e92:	f001 f83f 	bl	800af14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e96:	2301      	movs	r3, #1
 8009e98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e9a:	f001 ff3f 	bl	800bd1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e9e:	f000 fda7 	bl	800a9f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ea2:	f001 ff09 	bl	800bcb8 <vPortEnterCritical>
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009eac:	b25b      	sxtb	r3, r3
 8009eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb2:	d103      	bne.n	8009ebc <xQueueGenericSend+0x174>
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ec2:	b25b      	sxtb	r3, r3
 8009ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec8:	d103      	bne.n	8009ed2 <xQueueGenericSend+0x18a>
 8009eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ed2:	f001 ff23 	bl	800bd1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ed6:	1d3a      	adds	r2, r7, #4
 8009ed8:	f107 0314 	add.w	r3, r7, #20
 8009edc:	4611      	mov	r1, r2
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f001 f82e 	bl	800af40 <xTaskCheckForTimeOut>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d124      	bne.n	8009f34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009eea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009eec:	f000 faa6 	bl	800a43c <prvIsQueueFull>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d018      	beq.n	8009f28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef8:	3310      	adds	r3, #16
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	4611      	mov	r1, r2
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 ff52 	bl	800ada8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f06:	f000 fa31 	bl	800a36c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f0a:	f000 fd7f 	bl	800aa0c <xTaskResumeAll>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f47f af7c 	bne.w	8009e0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009f16:	4b0c      	ldr	r3, [pc, #48]	@ (8009f48 <xQueueGenericSend+0x200>)
 8009f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	e772      	b.n	8009e0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f2a:	f000 fa1f 	bl	800a36c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f2e:	f000 fd6d 	bl	800aa0c <xTaskResumeAll>
 8009f32:	e76c      	b.n	8009e0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f36:	f000 fa19 	bl	800a36c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f3a:	f000 fd67 	bl	800aa0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3738      	adds	r7, #56	@ 0x38
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	e000ed04 	.word	0xe000ed04

08009f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b090      	sub	sp, #64	@ 0x40
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10b      	bne.n	8009f7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f76:	bf00      	nop
 8009f78:	bf00      	nop
 8009f7a:	e7fd      	b.n	8009f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d103      	bne.n	8009f8a <xQueueGenericSendFromISR+0x3e>
 8009f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <xQueueGenericSendFromISR+0x42>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <xQueueGenericSendFromISR+0x44>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10b      	bne.n	8009fac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009fa6:	bf00      	nop
 8009fa8:	bf00      	nop
 8009faa:	e7fd      	b.n	8009fa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d103      	bne.n	8009fba <xQueueGenericSendFromISR+0x6e>
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d101      	bne.n	8009fbe <xQueueGenericSendFromISR+0x72>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e000      	b.n	8009fc0 <xQueueGenericSendFromISR+0x74>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10b      	bne.n	8009fdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	623b      	str	r3, [r7, #32]
}
 8009fd6:	bf00      	nop
 8009fd8:	bf00      	nop
 8009fda:	e7fd      	b.n	8009fd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fdc:	f001 ff4c 	bl	800be78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fe0:	f3ef 8211 	mrs	r2, BASEPRI
 8009fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	61fa      	str	r2, [r7, #28]
 8009ff6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ff8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ffa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a004:	429a      	cmp	r2, r3
 800a006:	d302      	bcc.n	800a00e <xQueueGenericSendFromISR+0xc2>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d12f      	bne.n	800a06e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a014:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a01c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a024:	f000 f912 	bl	800a24c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a028:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a030:	d112      	bne.n	800a058 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a036:	2b00      	cmp	r3, #0
 800a038:	d016      	beq.n	800a068 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03c:	3324      	adds	r3, #36	@ 0x24
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 ff04 	bl	800ae4c <xTaskRemoveFromEventList>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00e      	beq.n	800a068 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00b      	beq.n	800a068 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	e007      	b.n	800a068 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a058:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a05c:	3301      	adds	r3, #1
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	b25a      	sxtb	r2, r3
 800a062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a068:	2301      	movs	r3, #1
 800a06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a06c:	e001      	b.n	800a072 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a074:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a07c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a080:	4618      	mov	r0, r3
 800a082:	3740      	adds	r7, #64	@ 0x40
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08c      	sub	sp, #48	@ 0x30
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a094:	2300      	movs	r3, #0
 800a096:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10b      	bne.n	800a0ba <xQueueReceive+0x32>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	623b      	str	r3, [r7, #32]
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop
 800a0b8:	e7fd      	b.n	800a0b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d103      	bne.n	800a0c8 <xQueueReceive+0x40>
 800a0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <xQueueReceive+0x44>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e000      	b.n	800a0ce <xQueueReceive+0x46>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10b      	bne.n	800a0ea <xQueueReceive+0x62>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	61fb      	str	r3, [r7, #28]
}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop
 800a0e8:	e7fd      	b.n	800a0e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0ea:	f001 f875 	bl	800b1d8 <xTaskGetSchedulerState>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d102      	bne.n	800a0fa <xQueueReceive+0x72>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <xQueueReceive+0x76>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e000      	b.n	800a100 <xQueueReceive+0x78>
 800a0fe:	2300      	movs	r3, #0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10b      	bne.n	800a11c <xQueueReceive+0x94>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	61bb      	str	r3, [r7, #24]
}
 800a116:	bf00      	nop
 800a118:	bf00      	nop
 800a11a:	e7fd      	b.n	800a118 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a11c:	f001 fdcc 	bl	800bcb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a124:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01f      	beq.n	800a16c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a12c:	68b9      	ldr	r1, [r7, #8]
 800a12e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a130:	f000 f8f6 	bl	800a320 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	1e5a      	subs	r2, r3, #1
 800a138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00f      	beq.n	800a164 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a146:	3310      	adds	r3, #16
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fe7f 	bl	800ae4c <xTaskRemoveFromEventList>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d007      	beq.n	800a164 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a154:	4b3c      	ldr	r3, [pc, #240]	@ (800a248 <xQueueReceive+0x1c0>)
 800a156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a164:	f001 fdda 	bl	800bd1c <vPortExitCritical>
				return pdPASS;
 800a168:	2301      	movs	r3, #1
 800a16a:	e069      	b.n	800a240 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d103      	bne.n	800a17a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a172:	f001 fdd3 	bl	800bd1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a176:	2300      	movs	r3, #0
 800a178:	e062      	b.n	800a240 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d106      	bne.n	800a18e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a180:	f107 0310 	add.w	r3, r7, #16
 800a184:	4618      	mov	r0, r3
 800a186:	f000 fec5 	bl	800af14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a18a:	2301      	movs	r3, #1
 800a18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a18e:	f001 fdc5 	bl	800bd1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a192:	f000 fc2d 	bl	800a9f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a196:	f001 fd8f 	bl	800bcb8 <vPortEnterCritical>
 800a19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1a0:	b25b      	sxtb	r3, r3
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	d103      	bne.n	800a1b0 <xQueueReceive+0x128>
 800a1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1b6:	b25b      	sxtb	r3, r3
 800a1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1bc:	d103      	bne.n	800a1c6 <xQueueReceive+0x13e>
 800a1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1c6:	f001 fda9 	bl	800bd1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1ca:	1d3a      	adds	r2, r7, #4
 800a1cc:	f107 0310 	add.w	r3, r7, #16
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 feb4 	bl	800af40 <xTaskCheckForTimeOut>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d123      	bne.n	800a226 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1e0:	f000 f916 	bl	800a410 <prvIsQueueEmpty>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d017      	beq.n	800a21a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ec:	3324      	adds	r3, #36	@ 0x24
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fdd8 	bl	800ada8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1fa:	f000 f8b7 	bl	800a36c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1fe:	f000 fc05 	bl	800aa0c <xTaskResumeAll>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d189      	bne.n	800a11c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a208:	4b0f      	ldr	r3, [pc, #60]	@ (800a248 <xQueueReceive+0x1c0>)
 800a20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	e780      	b.n	800a11c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a21a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a21c:	f000 f8a6 	bl	800a36c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a220:	f000 fbf4 	bl	800aa0c <xTaskResumeAll>
 800a224:	e77a      	b.n	800a11c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a228:	f000 f8a0 	bl	800a36c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a22c:	f000 fbee 	bl	800aa0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a232:	f000 f8ed 	bl	800a410 <prvIsQueueEmpty>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f43f af6f 	beq.w	800a11c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a23e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a240:	4618      	mov	r0, r3
 800a242:	3730      	adds	r7, #48	@ 0x30
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	e000ed04 	.word	0xe000ed04

0800a24c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a258:	2300      	movs	r3, #0
 800a25a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a260:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10d      	bne.n	800a286 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d14d      	bne.n	800a30e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	4618      	mov	r0, r3
 800a278:	f000 ffcc 	bl	800b214 <xTaskPriorityDisinherit>
 800a27c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	609a      	str	r2, [r3, #8]
 800a284:	e043      	b.n	800a30e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d119      	bne.n	800a2c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6858      	ldr	r0, [r3, #4]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a294:	461a      	mov	r2, r3
 800a296:	68b9      	ldr	r1, [r7, #8]
 800a298:	f002 fdba 	bl	800ce10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2a4:	441a      	add	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d32b      	bcc.n	800a30e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	605a      	str	r2, [r3, #4]
 800a2be:	e026      	b.n	800a30e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	68d8      	ldr	r0, [r3, #12]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	68b9      	ldr	r1, [r7, #8]
 800a2cc:	f002 fda0 	bl	800ce10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	68da      	ldr	r2, [r3, #12]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d8:	425b      	negs	r3, r3
 800a2da:	441a      	add	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d207      	bcs.n	800a2fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f4:	425b      	negs	r3, r3
 800a2f6:	441a      	add	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d105      	bne.n	800a30e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a316:	697b      	ldr	r3, [r7, #20]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d018      	beq.n	800a364 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33a:	441a      	add	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d303      	bcc.n	800a354 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68d9      	ldr	r1, [r3, #12]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a35c:	461a      	mov	r2, r3
 800a35e:	6838      	ldr	r0, [r7, #0]
 800a360:	f002 fd56 	bl	800ce10 <memcpy>
	}
}
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a374:	f001 fca0 	bl	800bcb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a37e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a380:	e011      	b.n	800a3a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d012      	beq.n	800a3b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3324      	adds	r3, #36	@ 0x24
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 fd5c 	bl	800ae4c <xTaskRemoveFromEventList>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a39a:	f000 fe35 	bl	800b008 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	dce9      	bgt.n	800a382 <prvUnlockQueue+0x16>
 800a3ae:	e000      	b.n	800a3b2 <prvUnlockQueue+0x46>
					break;
 800a3b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	22ff      	movs	r2, #255	@ 0xff
 800a3b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a3ba:	f001 fcaf 	bl	800bd1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3be:	f001 fc7b 	bl	800bcb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3ca:	e011      	b.n	800a3f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d012      	beq.n	800a3fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3310      	adds	r3, #16
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fd37 	bl	800ae4c <xTaskRemoveFromEventList>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3e4:	f000 fe10 	bl	800b008 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dce9      	bgt.n	800a3cc <prvUnlockQueue+0x60>
 800a3f8:	e000      	b.n	800a3fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a3fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	22ff      	movs	r2, #255	@ 0xff
 800a400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a404:	f001 fc8a 	bl	800bd1c <vPortExitCritical>
}
 800a408:	bf00      	nop
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a418:	f001 fc4e 	bl	800bcb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a420:	2b00      	cmp	r3, #0
 800a422:	d102      	bne.n	800a42a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a424:	2301      	movs	r3, #1
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	e001      	b.n	800a42e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a42e:	f001 fc75 	bl	800bd1c <vPortExitCritical>

	return xReturn;
 800a432:	68fb      	ldr	r3, [r7, #12]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a444:	f001 fc38 	bl	800bcb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a450:	429a      	cmp	r2, r3
 800a452:	d102      	bne.n	800a45a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a454:	2301      	movs	r3, #1
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	e001      	b.n	800a45e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a45e:	f001 fc5d 	bl	800bd1c <vPortExitCritical>

	return xReturn;
 800a462:	68fb      	ldr	r3, [r7, #12]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a476:	2300      	movs	r3, #0
 800a478:	60fb      	str	r3, [r7, #12]
 800a47a:	e014      	b.n	800a4a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a47c:	4a0f      	ldr	r2, [pc, #60]	@ (800a4bc <vQueueAddToRegistry+0x50>)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10b      	bne.n	800a4a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a488:	490c      	ldr	r1, [pc, #48]	@ (800a4bc <vQueueAddToRegistry+0x50>)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a492:	4a0a      	ldr	r2, [pc, #40]	@ (800a4bc <vQueueAddToRegistry+0x50>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	4413      	add	r3, r2
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a49e:	e006      	b.n	800a4ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b07      	cmp	r3, #7
 800a4aa:	d9e7      	bls.n	800a47c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4ac:	bf00      	nop
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	20000a9c 	.word	0x20000a9c

0800a4c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a4d0:	f001 fbf2 	bl	800bcb8 <vPortEnterCritical>
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4da:	b25b      	sxtb	r3, r3
 800a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e0:	d103      	bne.n	800a4ea <vQueueWaitForMessageRestricted+0x2a>
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4f0:	b25b      	sxtb	r3, r3
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f6:	d103      	bne.n	800a500 <vQueueWaitForMessageRestricted+0x40>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a500:	f001 fc0c 	bl	800bd1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d106      	bne.n	800a51a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	3324      	adds	r3, #36	@ 0x24
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	4618      	mov	r0, r3
 800a516:	f000 fc6d 	bl	800adf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a51a:	6978      	ldr	r0, [r7, #20]
 800a51c:	f7ff ff26 	bl	800a36c <prvUnlockQueue>
	}
 800a520:	bf00      	nop
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08e      	sub	sp, #56	@ 0x38
 800a52c:	af04      	add	r7, sp, #16
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10b      	bne.n	800a554 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	623b      	str	r3, [r7, #32]
}
 800a54e:	bf00      	nop
 800a550:	bf00      	nop
 800a552:	e7fd      	b.n	800a550 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10b      	bne.n	800a572 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	61fb      	str	r3, [r7, #28]
}
 800a56c:	bf00      	nop
 800a56e:	bf00      	nop
 800a570:	e7fd      	b.n	800a56e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a572:	23a8      	movs	r3, #168	@ 0xa8
 800a574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	2ba8      	cmp	r3, #168	@ 0xa8
 800a57a:	d00b      	beq.n	800a594 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	61bb      	str	r3, [r7, #24]
}
 800a58e:	bf00      	nop
 800a590:	bf00      	nop
 800a592:	e7fd      	b.n	800a590 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a594:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01e      	beq.n	800a5da <xTaskCreateStatic+0xb2>
 800a59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d01b      	beq.n	800a5da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ba:	9302      	str	r3, [sp, #8]
 800a5bc:	f107 0314 	add.w	r3, r7, #20
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 f851 	bl	800a674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a5d4:	f000 f8f6 	bl	800a7c4 <prvAddNewTaskToReadyList>
 800a5d8:	e001      	b.n	800a5de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a5de:	697b      	ldr	r3, [r7, #20]
	}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3728      	adds	r7, #40	@ 0x28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08c      	sub	sp, #48	@ 0x30
 800a5ec:	af04      	add	r7, sp, #16
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	603b      	str	r3, [r7, #0]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f001 fc7d 	bl	800befc <pvPortMalloc>
 800a602:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00e      	beq.n	800a628 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a60a:	20a8      	movs	r0, #168	@ 0xa8
 800a60c:	f001 fc76 	bl	800befc <pvPortMalloc>
 800a610:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d003      	beq.n	800a620 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a61e:	e005      	b.n	800a62c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a620:	6978      	ldr	r0, [r7, #20]
 800a622:	f001 fd39 	bl	800c098 <vPortFree>
 800a626:	e001      	b.n	800a62c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d017      	beq.n	800a662 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a63a:	88fa      	ldrh	r2, [r7, #6]
 800a63c:	2300      	movs	r3, #0
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	9302      	str	r3, [sp, #8]
 800a644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 f80f 	bl	800a674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a656:	69f8      	ldr	r0, [r7, #28]
 800a658:	f000 f8b4 	bl	800a7c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a65c:	2301      	movs	r3, #1
 800a65e:	61bb      	str	r3, [r7, #24]
 800a660:	e002      	b.n	800a668 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a662:	f04f 33ff 	mov.w	r3, #4294967295
 800a666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a668:	69bb      	ldr	r3, [r7, #24]
	}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a684:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	461a      	mov	r2, r3
 800a68c:	21a5      	movs	r1, #165	@ 0xa5
 800a68e:	f002 fb33 	bl	800ccf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a69c:	3b01      	subs	r3, #1
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	f023 0307 	bic.w	r3, r3, #7
 800a6aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	f003 0307 	and.w	r3, r3, #7
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00b      	beq.n	800a6ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	617b      	str	r3, [r7, #20]
}
 800a6c8:	bf00      	nop
 800a6ca:	bf00      	nop
 800a6cc:	e7fd      	b.n	800a6ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d01f      	beq.n	800a714 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	61fb      	str	r3, [r7, #28]
 800a6d8:	e012      	b.n	800a700 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	4413      	add	r3, r2
 800a6e0:	7819      	ldrb	r1, [r3, #0]
 800a6e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	3334      	adds	r3, #52	@ 0x34
 800a6ea:	460a      	mov	r2, r1
 800a6ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d006      	beq.n	800a708 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	61fb      	str	r3, [r7, #28]
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	2b0f      	cmp	r3, #15
 800a704:	d9e9      	bls.n	800a6da <prvInitialiseNewTask+0x66>
 800a706:	e000      	b.n	800a70a <prvInitialiseNewTask+0x96>
			{
				break;
 800a708:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a712:	e003      	b.n	800a71c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a716:	2200      	movs	r2, #0
 800a718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71e:	2b37      	cmp	r3, #55	@ 0x37
 800a720:	d901      	bls.n	800a726 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a722:	2337      	movs	r3, #55	@ 0x37
 800a724:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a72a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a730:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a734:	2200      	movs	r2, #0
 800a736:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73a:	3304      	adds	r3, #4
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7ff f965 	bl	8009a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a744:	3318      	adds	r3, #24
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff f960 	bl	8009a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a750:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a754:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a760:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a764:	2200      	movs	r2, #0
 800a766:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a774:	3354      	adds	r3, #84	@ 0x54
 800a776:	224c      	movs	r2, #76	@ 0x4c
 800a778:	2100      	movs	r1, #0
 800a77a:	4618      	mov	r0, r3
 800a77c:	f002 fabc 	bl	800ccf8 <memset>
 800a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a782:	4a0d      	ldr	r2, [pc, #52]	@ (800a7b8 <prvInitialiseNewTask+0x144>)
 800a784:	659a      	str	r2, [r3, #88]	@ 0x58
 800a786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a788:	4a0c      	ldr	r2, [pc, #48]	@ (800a7bc <prvInitialiseNewTask+0x148>)
 800a78a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78e:	4a0c      	ldr	r2, [pc, #48]	@ (800a7c0 <prvInitialiseNewTask+0x14c>)
 800a790:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	68f9      	ldr	r1, [r7, #12]
 800a796:	69b8      	ldr	r0, [r7, #24]
 800a798:	f001 f95a 	bl	800ba50 <pxPortInitialiseStack>
 800a79c:	4602      	mov	r2, r0
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7ae:	bf00      	nop
 800a7b0:	3720      	adds	r7, #32
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20006910 	.word	0x20006910
 800a7bc:	20006978 	.word	0x20006978
 800a7c0:	200069e0 	.word	0x200069e0

0800a7c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7cc:	f001 fa74 	bl	800bcb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7d0:	4b2d      	ldr	r3, [pc, #180]	@ (800a888 <prvAddNewTaskToReadyList+0xc4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	4a2c      	ldr	r2, [pc, #176]	@ (800a888 <prvAddNewTaskToReadyList+0xc4>)
 800a7d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7da:	4b2c      	ldr	r3, [pc, #176]	@ (800a88c <prvAddNewTaskToReadyList+0xc8>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d109      	bne.n	800a7f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a88c <prvAddNewTaskToReadyList+0xc8>)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7e8:	4b27      	ldr	r3, [pc, #156]	@ (800a888 <prvAddNewTaskToReadyList+0xc4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d110      	bne.n	800a812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a7f0:	f000 fc2e 	bl	800b050 <prvInitialiseTaskLists>
 800a7f4:	e00d      	b.n	800a812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a7f6:	4b26      	ldr	r3, [pc, #152]	@ (800a890 <prvAddNewTaskToReadyList+0xcc>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d109      	bne.n	800a812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a7fe:	4b23      	ldr	r3, [pc, #140]	@ (800a88c <prvAddNewTaskToReadyList+0xc8>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a808:	429a      	cmp	r2, r3
 800a80a:	d802      	bhi.n	800a812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a80c:	4a1f      	ldr	r2, [pc, #124]	@ (800a88c <prvAddNewTaskToReadyList+0xc8>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a812:	4b20      	ldr	r3, [pc, #128]	@ (800a894 <prvAddNewTaskToReadyList+0xd0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3301      	adds	r3, #1
 800a818:	4a1e      	ldr	r2, [pc, #120]	@ (800a894 <prvAddNewTaskToReadyList+0xd0>)
 800a81a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a81c:	4b1d      	ldr	r3, [pc, #116]	@ (800a894 <prvAddNewTaskToReadyList+0xd0>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a828:	4b1b      	ldr	r3, [pc, #108]	@ (800a898 <prvAddNewTaskToReadyList+0xd4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d903      	bls.n	800a838 <prvAddNewTaskToReadyList+0x74>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a834:	4a18      	ldr	r2, [pc, #96]	@ (800a898 <prvAddNewTaskToReadyList+0xd4>)
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a83c:	4613      	mov	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4a15      	ldr	r2, [pc, #84]	@ (800a89c <prvAddNewTaskToReadyList+0xd8>)
 800a846:	441a      	add	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	3304      	adds	r3, #4
 800a84c:	4619      	mov	r1, r3
 800a84e:	4610      	mov	r0, r2
 800a850:	f7ff f8e9 	bl	8009a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a854:	f001 fa62 	bl	800bd1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a858:	4b0d      	ldr	r3, [pc, #52]	@ (800a890 <prvAddNewTaskToReadyList+0xcc>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00e      	beq.n	800a87e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a860:	4b0a      	ldr	r3, [pc, #40]	@ (800a88c <prvAddNewTaskToReadyList+0xc8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d207      	bcs.n	800a87e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a86e:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a0 <prvAddNewTaskToReadyList+0xdc>)
 800a870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a87e:	bf00      	nop
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20000fb0 	.word	0x20000fb0
 800a88c:	20000adc 	.word	0x20000adc
 800a890:	20000fbc 	.word	0x20000fbc
 800a894:	20000fcc 	.word	0x20000fcc
 800a898:	20000fb8 	.word	0x20000fb8
 800a89c:	20000ae0 	.word	0x20000ae0
 800a8a0:	e000ed04 	.word	0xe000ed04

0800a8a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d018      	beq.n	800a8e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8b6:	4b14      	ldr	r3, [pc, #80]	@ (800a908 <vTaskDelay+0x64>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00b      	beq.n	800a8d6 <vTaskDelay+0x32>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	60bb      	str	r3, [r7, #8]
}
 800a8d0:	bf00      	nop
 800a8d2:	bf00      	nop
 800a8d4:	e7fd      	b.n	800a8d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a8d6:	f000 f88b 	bl	800a9f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8da:	2100      	movs	r1, #0
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fd09 	bl	800b2f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8e2:	f000 f893 	bl	800aa0c <xTaskResumeAll>
 800a8e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d107      	bne.n	800a8fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a8ee:	4b07      	ldr	r3, [pc, #28]	@ (800a90c <vTaskDelay+0x68>)
 800a8f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8fe:	bf00      	nop
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20000fd8 	.word	0x20000fd8
 800a90c:	e000ed04 	.word	0xe000ed04

0800a910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08a      	sub	sp, #40	@ 0x28
 800a914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a916:	2300      	movs	r3, #0
 800a918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a91e:	463a      	mov	r2, r7
 800a920:	1d39      	adds	r1, r7, #4
 800a922:	f107 0308 	add.w	r3, r7, #8
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff f81c 	bl	8009964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	9202      	str	r2, [sp, #8]
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	2300      	movs	r3, #0
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	2300      	movs	r3, #0
 800a93c:	460a      	mov	r2, r1
 800a93e:	4924      	ldr	r1, [pc, #144]	@ (800a9d0 <vTaskStartScheduler+0xc0>)
 800a940:	4824      	ldr	r0, [pc, #144]	@ (800a9d4 <vTaskStartScheduler+0xc4>)
 800a942:	f7ff fdf1 	bl	800a528 <xTaskCreateStatic>
 800a946:	4603      	mov	r3, r0
 800a948:	4a23      	ldr	r2, [pc, #140]	@ (800a9d8 <vTaskStartScheduler+0xc8>)
 800a94a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a94c:	4b22      	ldr	r3, [pc, #136]	@ (800a9d8 <vTaskStartScheduler+0xc8>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a954:	2301      	movs	r3, #1
 800a956:	617b      	str	r3, [r7, #20]
 800a958:	e001      	b.n	800a95e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d102      	bne.n	800a96a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a964:	f000 fd1a 	bl	800b39c <xTimerCreateTimerTask>
 800a968:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d11b      	bne.n	800a9a8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	613b      	str	r3, [r7, #16]
}
 800a982:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a984:	4b15      	ldr	r3, [pc, #84]	@ (800a9dc <vTaskStartScheduler+0xcc>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3354      	adds	r3, #84	@ 0x54
 800a98a:	4a15      	ldr	r2, [pc, #84]	@ (800a9e0 <vTaskStartScheduler+0xd0>)
 800a98c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a98e:	4b15      	ldr	r3, [pc, #84]	@ (800a9e4 <vTaskStartScheduler+0xd4>)
 800a990:	f04f 32ff 	mov.w	r2, #4294967295
 800a994:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a996:	4b14      	ldr	r3, [pc, #80]	@ (800a9e8 <vTaskStartScheduler+0xd8>)
 800a998:	2201      	movs	r2, #1
 800a99a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a99c:	4b13      	ldr	r3, [pc, #76]	@ (800a9ec <vTaskStartScheduler+0xdc>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9a2:	f001 f8e5 	bl	800bb70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9a6:	e00f      	b.n	800a9c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ae:	d10b      	bne.n	800a9c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	60fb      	str	r3, [r7, #12]
}
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
 800a9c6:	e7fd      	b.n	800a9c4 <vTaskStartScheduler+0xb4>
}
 800a9c8:	bf00      	nop
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	0800cfe8 	.word	0x0800cfe8
 800a9d4:	0800b021 	.word	0x0800b021
 800a9d8:	20000fd4 	.word	0x20000fd4
 800a9dc:	20000adc 	.word	0x20000adc
 800a9e0:	20000100 	.word	0x20000100
 800a9e4:	20000fd0 	.word	0x20000fd0
 800a9e8:	20000fbc 	.word	0x20000fbc
 800a9ec:	20000fb4 	.word	0x20000fb4

0800a9f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a9f4:	4b04      	ldr	r3, [pc, #16]	@ (800aa08 <vTaskSuspendAll+0x18>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	4a03      	ldr	r2, [pc, #12]	@ (800aa08 <vTaskSuspendAll+0x18>)
 800a9fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a9fe:	bf00      	nop
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	20000fd8 	.word	0x20000fd8

0800aa0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa16:	2300      	movs	r3, #0
 800aa18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa1a:	4b42      	ldr	r3, [pc, #264]	@ (800ab24 <xTaskResumeAll+0x118>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10b      	bne.n	800aa3a <xTaskResumeAll+0x2e>
	__asm volatile
 800aa22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	603b      	str	r3, [r7, #0]
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop
 800aa38:	e7fd      	b.n	800aa36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa3a:	f001 f93d 	bl	800bcb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa3e:	4b39      	ldr	r3, [pc, #228]	@ (800ab24 <xTaskResumeAll+0x118>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	4a37      	ldr	r2, [pc, #220]	@ (800ab24 <xTaskResumeAll+0x118>)
 800aa46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa48:	4b36      	ldr	r3, [pc, #216]	@ (800ab24 <xTaskResumeAll+0x118>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d162      	bne.n	800ab16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa50:	4b35      	ldr	r3, [pc, #212]	@ (800ab28 <xTaskResumeAll+0x11c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d05e      	beq.n	800ab16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa58:	e02f      	b.n	800aaba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5a:	4b34      	ldr	r3, [pc, #208]	@ (800ab2c <xTaskResumeAll+0x120>)
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3318      	adds	r3, #24
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7ff f83a 	bl	8009ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff f835 	bl	8009ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa7a:	4b2d      	ldr	r3, [pc, #180]	@ (800ab30 <xTaskResumeAll+0x124>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d903      	bls.n	800aa8a <xTaskResumeAll+0x7e>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa86:	4a2a      	ldr	r2, [pc, #168]	@ (800ab30 <xTaskResumeAll+0x124>)
 800aa88:	6013      	str	r3, [r2, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4a27      	ldr	r2, [pc, #156]	@ (800ab34 <xTaskResumeAll+0x128>)
 800aa98:	441a      	add	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	f7fe ffc0 	bl	8009a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaaa:	4b23      	ldr	r3, [pc, #140]	@ (800ab38 <xTaskResumeAll+0x12c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d302      	bcc.n	800aaba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aab4:	4b21      	ldr	r3, [pc, #132]	@ (800ab3c <xTaskResumeAll+0x130>)
 800aab6:	2201      	movs	r2, #1
 800aab8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaba:	4b1c      	ldr	r3, [pc, #112]	@ (800ab2c <xTaskResumeAll+0x120>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1cb      	bne.n	800aa5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aac8:	f000 fb66 	bl	800b198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aacc:	4b1c      	ldr	r3, [pc, #112]	@ (800ab40 <xTaskResumeAll+0x134>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d010      	beq.n	800aafa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aad8:	f000 f846 	bl	800ab68 <xTaskIncrementTick>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d002      	beq.n	800aae8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800aae2:	4b16      	ldr	r3, [pc, #88]	@ (800ab3c <xTaskResumeAll+0x130>)
 800aae4:	2201      	movs	r2, #1
 800aae6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1f1      	bne.n	800aad8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800aaf4:	4b12      	ldr	r3, [pc, #72]	@ (800ab40 <xTaskResumeAll+0x134>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aafa:	4b10      	ldr	r3, [pc, #64]	@ (800ab3c <xTaskResumeAll+0x130>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d009      	beq.n	800ab16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab02:	2301      	movs	r3, #1
 800ab04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab06:	4b0f      	ldr	r3, [pc, #60]	@ (800ab44 <xTaskResumeAll+0x138>)
 800ab08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab16:	f001 f901 	bl	800bd1c <vPortExitCritical>

	return xAlreadyYielded;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	20000fd8 	.word	0x20000fd8
 800ab28:	20000fb0 	.word	0x20000fb0
 800ab2c:	20000f70 	.word	0x20000f70
 800ab30:	20000fb8 	.word	0x20000fb8
 800ab34:	20000ae0 	.word	0x20000ae0
 800ab38:	20000adc 	.word	0x20000adc
 800ab3c:	20000fc4 	.word	0x20000fc4
 800ab40:	20000fc0 	.word	0x20000fc0
 800ab44:	e000ed04 	.word	0xe000ed04

0800ab48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab4e:	4b05      	ldr	r3, [pc, #20]	@ (800ab64 <xTaskGetTickCount+0x1c>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab54:	687b      	ldr	r3, [r7, #4]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	20000fb4 	.word	0x20000fb4

0800ab68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab72:	4b4f      	ldr	r3, [pc, #316]	@ (800acb0 <xTaskIncrementTick+0x148>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f040 8090 	bne.w	800ac9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab7c:	4b4d      	ldr	r3, [pc, #308]	@ (800acb4 <xTaskIncrementTick+0x14c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3301      	adds	r3, #1
 800ab82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab84:	4a4b      	ldr	r2, [pc, #300]	@ (800acb4 <xTaskIncrementTick+0x14c>)
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d121      	bne.n	800abd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab90:	4b49      	ldr	r3, [pc, #292]	@ (800acb8 <xTaskIncrementTick+0x150>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00b      	beq.n	800abb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	603b      	str	r3, [r7, #0]
}
 800abac:	bf00      	nop
 800abae:	bf00      	nop
 800abb0:	e7fd      	b.n	800abae <xTaskIncrementTick+0x46>
 800abb2:	4b41      	ldr	r3, [pc, #260]	@ (800acb8 <xTaskIncrementTick+0x150>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	4b40      	ldr	r3, [pc, #256]	@ (800acbc <xTaskIncrementTick+0x154>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a3e      	ldr	r2, [pc, #248]	@ (800acb8 <xTaskIncrementTick+0x150>)
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	4a3e      	ldr	r2, [pc, #248]	@ (800acbc <xTaskIncrementTick+0x154>)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6013      	str	r3, [r2, #0]
 800abc6:	4b3e      	ldr	r3, [pc, #248]	@ (800acc0 <xTaskIncrementTick+0x158>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3301      	adds	r3, #1
 800abcc:	4a3c      	ldr	r2, [pc, #240]	@ (800acc0 <xTaskIncrementTick+0x158>)
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	f000 fae2 	bl	800b198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abd4:	4b3b      	ldr	r3, [pc, #236]	@ (800acc4 <xTaskIncrementTick+0x15c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d349      	bcc.n	800ac72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abde:	4b36      	ldr	r3, [pc, #216]	@ (800acb8 <xTaskIncrementTick+0x150>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d104      	bne.n	800abf2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abe8:	4b36      	ldr	r3, [pc, #216]	@ (800acc4 <xTaskIncrementTick+0x15c>)
 800abea:	f04f 32ff 	mov.w	r2, #4294967295
 800abee:	601a      	str	r2, [r3, #0]
					break;
 800abf0:	e03f      	b.n	800ac72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abf2:	4b31      	ldr	r3, [pc, #196]	@ (800acb8 <xTaskIncrementTick+0x150>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d203      	bcs.n	800ac12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac0a:	4a2e      	ldr	r2, [pc, #184]	@ (800acc4 <xTaskIncrementTick+0x15c>)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac10:	e02f      	b.n	800ac72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	3304      	adds	r3, #4
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fe ff62 	bl	8009ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d004      	beq.n	800ac2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	3318      	adds	r3, #24
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe ff59 	bl	8009ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac32:	4b25      	ldr	r3, [pc, #148]	@ (800acc8 <xTaskIncrementTick+0x160>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d903      	bls.n	800ac42 <xTaskIncrementTick+0xda>
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3e:	4a22      	ldr	r2, [pc, #136]	@ (800acc8 <xTaskIncrementTick+0x160>)
 800ac40:	6013      	str	r3, [r2, #0]
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4a1f      	ldr	r2, [pc, #124]	@ (800accc <xTaskIncrementTick+0x164>)
 800ac50:	441a      	add	r2, r3
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	3304      	adds	r3, #4
 800ac56:	4619      	mov	r1, r3
 800ac58:	4610      	mov	r0, r2
 800ac5a:	f7fe fee4 	bl	8009a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac62:	4b1b      	ldr	r3, [pc, #108]	@ (800acd0 <xTaskIncrementTick+0x168>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d3b8      	bcc.n	800abde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac70:	e7b5      	b.n	800abde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac72:	4b17      	ldr	r3, [pc, #92]	@ (800acd0 <xTaskIncrementTick+0x168>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac78:	4914      	ldr	r1, [pc, #80]	@ (800accc <xTaskIncrementTick+0x164>)
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d901      	bls.n	800ac8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac8e:	4b11      	ldr	r3, [pc, #68]	@ (800acd4 <xTaskIncrementTick+0x16c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d007      	beq.n	800aca6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ac96:	2301      	movs	r3, #1
 800ac98:	617b      	str	r3, [r7, #20]
 800ac9a:	e004      	b.n	800aca6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac9c:	4b0e      	ldr	r3, [pc, #56]	@ (800acd8 <xTaskIncrementTick+0x170>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3301      	adds	r3, #1
 800aca2:	4a0d      	ldr	r2, [pc, #52]	@ (800acd8 <xTaskIncrementTick+0x170>)
 800aca4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aca6:	697b      	ldr	r3, [r7, #20]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	20000fd8 	.word	0x20000fd8
 800acb4:	20000fb4 	.word	0x20000fb4
 800acb8:	20000f68 	.word	0x20000f68
 800acbc:	20000f6c 	.word	0x20000f6c
 800acc0:	20000fc8 	.word	0x20000fc8
 800acc4:	20000fd0 	.word	0x20000fd0
 800acc8:	20000fb8 	.word	0x20000fb8
 800accc:	20000ae0 	.word	0x20000ae0
 800acd0:	20000adc 	.word	0x20000adc
 800acd4:	20000fc4 	.word	0x20000fc4
 800acd8:	20000fc0 	.word	0x20000fc0

0800acdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ace2:	4b2b      	ldr	r3, [pc, #172]	@ (800ad90 <vTaskSwitchContext+0xb4>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800acea:	4b2a      	ldr	r3, [pc, #168]	@ (800ad94 <vTaskSwitchContext+0xb8>)
 800acec:	2201      	movs	r2, #1
 800acee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800acf0:	e047      	b.n	800ad82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800acf2:	4b28      	ldr	r3, [pc, #160]	@ (800ad94 <vTaskSwitchContext+0xb8>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf8:	4b27      	ldr	r3, [pc, #156]	@ (800ad98 <vTaskSwitchContext+0xbc>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	e011      	b.n	800ad24 <vTaskSwitchContext+0x48>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10b      	bne.n	800ad1e <vTaskSwitchContext+0x42>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	607b      	str	r3, [r7, #4]
}
 800ad18:	bf00      	nop
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <vTaskSwitchContext+0x3e>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	491d      	ldr	r1, [pc, #116]	@ (800ad9c <vTaskSwitchContext+0xc0>)
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	440b      	add	r3, r1
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d0e3      	beq.n	800ad00 <vTaskSwitchContext+0x24>
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4a16      	ldr	r2, [pc, #88]	@ (800ad9c <vTaskSwitchContext+0xc0>)
 800ad44:	4413      	add	r3, r2
 800ad46:	60bb      	str	r3, [r7, #8]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	605a      	str	r2, [r3, #4]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	3308      	adds	r3, #8
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d104      	bne.n	800ad68 <vTaskSwitchContext+0x8c>
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	605a      	str	r2, [r3, #4]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	4a0c      	ldr	r2, [pc, #48]	@ (800ada0 <vTaskSwitchContext+0xc4>)
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	4a09      	ldr	r2, [pc, #36]	@ (800ad98 <vTaskSwitchContext+0xbc>)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad78:	4b09      	ldr	r3, [pc, #36]	@ (800ada0 <vTaskSwitchContext+0xc4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3354      	adds	r3, #84	@ 0x54
 800ad7e:	4a09      	ldr	r2, [pc, #36]	@ (800ada4 <vTaskSwitchContext+0xc8>)
 800ad80:	6013      	str	r3, [r2, #0]
}
 800ad82:	bf00      	nop
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	20000fd8 	.word	0x20000fd8
 800ad94:	20000fc4 	.word	0x20000fc4
 800ad98:	20000fb8 	.word	0x20000fb8
 800ad9c:	20000ae0 	.word	0x20000ae0
 800ada0:	20000adc 	.word	0x20000adc
 800ada4:	20000100 	.word	0x20000100

0800ada8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10b      	bne.n	800add0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	60fb      	str	r3, [r7, #12]
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	e7fd      	b.n	800adcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800add0:	4b07      	ldr	r3, [pc, #28]	@ (800adf0 <vTaskPlaceOnEventList+0x48>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3318      	adds	r3, #24
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7fe fe48 	bl	8009a6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800adde:	2101      	movs	r1, #1
 800ade0:	6838      	ldr	r0, [r7, #0]
 800ade2:	f000 fa87 	bl	800b2f4 <prvAddCurrentTaskToDelayedList>
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	20000adc 	.word	0x20000adc

0800adf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10b      	bne.n	800ae1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	617b      	str	r3, [r7, #20]
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	e7fd      	b.n	800ae1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae48 <vTaskPlaceOnEventListRestricted+0x54>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3318      	adds	r3, #24
 800ae24:	4619      	mov	r1, r3
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f7fe fdfd 	bl	8009a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ae32:	f04f 33ff 	mov.w	r3, #4294967295
 800ae36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae38:	6879      	ldr	r1, [r7, #4]
 800ae3a:	68b8      	ldr	r0, [r7, #8]
 800ae3c:	f000 fa5a 	bl	800b2f4 <prvAddCurrentTaskToDelayedList>
	}
 800ae40:	bf00      	nop
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	20000adc 	.word	0x20000adc

0800ae4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10b      	bne.n	800ae7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	60fb      	str	r3, [r7, #12]
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	e7fd      	b.n	800ae76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	3318      	adds	r3, #24
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fe2e 	bl	8009ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae84:	4b1d      	ldr	r3, [pc, #116]	@ (800aefc <xTaskRemoveFromEventList+0xb0>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d11d      	bne.n	800aec8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe fe25 	bl	8009ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae9a:	4b19      	ldr	r3, [pc, #100]	@ (800af00 <xTaskRemoveFromEventList+0xb4>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d903      	bls.n	800aeaa <xTaskRemoveFromEventList+0x5e>
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea6:	4a16      	ldr	r2, [pc, #88]	@ (800af00 <xTaskRemoveFromEventList+0xb4>)
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4a13      	ldr	r2, [pc, #76]	@ (800af04 <xTaskRemoveFromEventList+0xb8>)
 800aeb8:	441a      	add	r2, r3
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4619      	mov	r1, r3
 800aec0:	4610      	mov	r0, r2
 800aec2:	f7fe fdb0 	bl	8009a26 <vListInsertEnd>
 800aec6:	e005      	b.n	800aed4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	3318      	adds	r3, #24
 800aecc:	4619      	mov	r1, r3
 800aece:	480e      	ldr	r0, [pc, #56]	@ (800af08 <xTaskRemoveFromEventList+0xbc>)
 800aed0:	f7fe fda9 	bl	8009a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed8:	4b0c      	ldr	r3, [pc, #48]	@ (800af0c <xTaskRemoveFromEventList+0xc0>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aede:	429a      	cmp	r2, r3
 800aee0:	d905      	bls.n	800aeee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aee2:	2301      	movs	r3, #1
 800aee4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aee6:	4b0a      	ldr	r3, [pc, #40]	@ (800af10 <xTaskRemoveFromEventList+0xc4>)
 800aee8:	2201      	movs	r2, #1
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	e001      	b.n	800aef2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aef2:	697b      	ldr	r3, [r7, #20]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20000fd8 	.word	0x20000fd8
 800af00:	20000fb8 	.word	0x20000fb8
 800af04:	20000ae0 	.word	0x20000ae0
 800af08:	20000f70 	.word	0x20000f70
 800af0c:	20000adc 	.word	0x20000adc
 800af10:	20000fc4 	.word	0x20000fc4

0800af14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af1c:	4b06      	ldr	r3, [pc, #24]	@ (800af38 <vTaskInternalSetTimeOutState+0x24>)
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af24:	4b05      	ldr	r3, [pc, #20]	@ (800af3c <vTaskInternalSetTimeOutState+0x28>)
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	605a      	str	r2, [r3, #4]
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	20000fc8 	.word	0x20000fc8
 800af3c:	20000fb4 	.word	0x20000fb4

0800af40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10b      	bne.n	800af68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	613b      	str	r3, [r7, #16]
}
 800af62:	bf00      	nop
 800af64:	bf00      	nop
 800af66:	e7fd      	b.n	800af64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10b      	bne.n	800af86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	60fb      	str	r3, [r7, #12]
}
 800af80:	bf00      	nop
 800af82:	bf00      	nop
 800af84:	e7fd      	b.n	800af82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800af86:	f000 fe97 	bl	800bcb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af8a:	4b1d      	ldr	r3, [pc, #116]	@ (800b000 <xTaskCheckForTimeOut+0xc0>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	69ba      	ldr	r2, [r7, #24]
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa2:	d102      	bne.n	800afaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800afa4:	2300      	movs	r3, #0
 800afa6:	61fb      	str	r3, [r7, #28]
 800afa8:	e023      	b.n	800aff2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	4b15      	ldr	r3, [pc, #84]	@ (800b004 <xTaskCheckForTimeOut+0xc4>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d007      	beq.n	800afc6 <xTaskCheckForTimeOut+0x86>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	69ba      	ldr	r2, [r7, #24]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d302      	bcc.n	800afc6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800afc0:	2301      	movs	r3, #1
 800afc2:	61fb      	str	r3, [r7, #28]
 800afc4:	e015      	b.n	800aff2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d20b      	bcs.n	800afe8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	1ad2      	subs	r2, r2, r3
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff ff99 	bl	800af14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800afe2:	2300      	movs	r3, #0
 800afe4:	61fb      	str	r3, [r7, #28]
 800afe6:	e004      	b.n	800aff2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2200      	movs	r2, #0
 800afec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800afee:	2301      	movs	r3, #1
 800aff0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aff2:	f000 fe93 	bl	800bd1c <vPortExitCritical>

	return xReturn;
 800aff6:	69fb      	ldr	r3, [r7, #28]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3720      	adds	r7, #32
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	20000fb4 	.word	0x20000fb4
 800b004:	20000fc8 	.word	0x20000fc8

0800b008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b00c:	4b03      	ldr	r3, [pc, #12]	@ (800b01c <vTaskMissedYield+0x14>)
 800b00e:	2201      	movs	r2, #1
 800b010:	601a      	str	r2, [r3, #0]
}
 800b012:	bf00      	nop
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	20000fc4 	.word	0x20000fc4

0800b020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b028:	f000 f852 	bl	800b0d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b02c:	4b06      	ldr	r3, [pc, #24]	@ (800b048 <prvIdleTask+0x28>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d9f9      	bls.n	800b028 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b034:	4b05      	ldr	r3, [pc, #20]	@ (800b04c <prvIdleTask+0x2c>)
 800b036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b044:	e7f0      	b.n	800b028 <prvIdleTask+0x8>
 800b046:	bf00      	nop
 800b048:	20000ae0 	.word	0x20000ae0
 800b04c:	e000ed04 	.word	0xe000ed04

0800b050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b056:	2300      	movs	r3, #0
 800b058:	607b      	str	r3, [r7, #4]
 800b05a:	e00c      	b.n	800b076 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	4613      	mov	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4a12      	ldr	r2, [pc, #72]	@ (800b0b0 <prvInitialiseTaskLists+0x60>)
 800b068:	4413      	add	r3, r2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fe fcae 	bl	80099cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	3301      	adds	r3, #1
 800b074:	607b      	str	r3, [r7, #4]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b37      	cmp	r3, #55	@ 0x37
 800b07a:	d9ef      	bls.n	800b05c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b07c:	480d      	ldr	r0, [pc, #52]	@ (800b0b4 <prvInitialiseTaskLists+0x64>)
 800b07e:	f7fe fca5 	bl	80099cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b082:	480d      	ldr	r0, [pc, #52]	@ (800b0b8 <prvInitialiseTaskLists+0x68>)
 800b084:	f7fe fca2 	bl	80099cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b088:	480c      	ldr	r0, [pc, #48]	@ (800b0bc <prvInitialiseTaskLists+0x6c>)
 800b08a:	f7fe fc9f 	bl	80099cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b08e:	480c      	ldr	r0, [pc, #48]	@ (800b0c0 <prvInitialiseTaskLists+0x70>)
 800b090:	f7fe fc9c 	bl	80099cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b094:	480b      	ldr	r0, [pc, #44]	@ (800b0c4 <prvInitialiseTaskLists+0x74>)
 800b096:	f7fe fc99 	bl	80099cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b09a:	4b0b      	ldr	r3, [pc, #44]	@ (800b0c8 <prvInitialiseTaskLists+0x78>)
 800b09c:	4a05      	ldr	r2, [pc, #20]	@ (800b0b4 <prvInitialiseTaskLists+0x64>)
 800b09e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b0cc <prvInitialiseTaskLists+0x7c>)
 800b0a2:	4a05      	ldr	r2, [pc, #20]	@ (800b0b8 <prvInitialiseTaskLists+0x68>)
 800b0a4:	601a      	str	r2, [r3, #0]
}
 800b0a6:	bf00      	nop
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20000ae0 	.word	0x20000ae0
 800b0b4:	20000f40 	.word	0x20000f40
 800b0b8:	20000f54 	.word	0x20000f54
 800b0bc:	20000f70 	.word	0x20000f70
 800b0c0:	20000f84 	.word	0x20000f84
 800b0c4:	20000f9c 	.word	0x20000f9c
 800b0c8:	20000f68 	.word	0x20000f68
 800b0cc:	20000f6c 	.word	0x20000f6c

0800b0d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0d6:	e019      	b.n	800b10c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b0d8:	f000 fdee 	bl	800bcb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0dc:	4b10      	ldr	r3, [pc, #64]	@ (800b120 <prvCheckTasksWaitingTermination+0x50>)
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fe fcf9 	bl	8009ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <prvCheckTasksWaitingTermination+0x54>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	4a0b      	ldr	r2, [pc, #44]	@ (800b124 <prvCheckTasksWaitingTermination+0x54>)
 800b0f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b0f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b128 <prvCheckTasksWaitingTermination+0x58>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	4a0a      	ldr	r2, [pc, #40]	@ (800b128 <prvCheckTasksWaitingTermination+0x58>)
 800b100:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b102:	f000 fe0b 	bl	800bd1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f810 	bl	800b12c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b10c:	4b06      	ldr	r3, [pc, #24]	@ (800b128 <prvCheckTasksWaitingTermination+0x58>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e1      	bne.n	800b0d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b114:	bf00      	nop
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20000f84 	.word	0x20000f84
 800b124:	20000fb0 	.word	0x20000fb0
 800b128:	20000f98 	.word	0x20000f98

0800b12c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3354      	adds	r3, #84	@ 0x54
 800b138:	4618      	mov	r0, r3
 800b13a:	f001 fde5 	bl	800cd08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b144:	2b00      	cmp	r3, #0
 800b146:	d108      	bne.n	800b15a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 ffa3 	bl	800c098 <vPortFree>
				vPortFree( pxTCB );
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 ffa0 	bl	800c098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b158:	e019      	b.n	800b18e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b160:	2b01      	cmp	r3, #1
 800b162:	d103      	bne.n	800b16c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 ff97 	bl	800c098 <vPortFree>
	}
 800b16a:	e010      	b.n	800b18e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b172:	2b02      	cmp	r3, #2
 800b174:	d00b      	beq.n	800b18e <prvDeleteTCB+0x62>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	60fb      	str	r3, [r7, #12]
}
 800b188:	bf00      	nop
 800b18a:	bf00      	nop
 800b18c:	e7fd      	b.n	800b18a <prvDeleteTCB+0x5e>
	}
 800b18e:	bf00      	nop
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b19e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d0 <prvResetNextTaskUnblockTime+0x38>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d104      	bne.n	800b1b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d4 <prvResetNextTaskUnblockTime+0x3c>)
 800b1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1b0:	e008      	b.n	800b1c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1b2:	4b07      	ldr	r3, [pc, #28]	@ (800b1d0 <prvResetNextTaskUnblockTime+0x38>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	4a04      	ldr	r2, [pc, #16]	@ (800b1d4 <prvResetNextTaskUnblockTime+0x3c>)
 800b1c2:	6013      	str	r3, [r2, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	20000f68 	.word	0x20000f68
 800b1d4:	20000fd0 	.word	0x20000fd0

0800b1d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b1de:	4b0b      	ldr	r3, [pc, #44]	@ (800b20c <xTaskGetSchedulerState+0x34>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d102      	bne.n	800b1ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	607b      	str	r3, [r7, #4]
 800b1ea:	e008      	b.n	800b1fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ec:	4b08      	ldr	r3, [pc, #32]	@ (800b210 <xTaskGetSchedulerState+0x38>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d102      	bne.n	800b1fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	607b      	str	r3, [r7, #4]
 800b1f8:	e001      	b.n	800b1fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b1fe:	687b      	ldr	r3, [r7, #4]
	}
 800b200:	4618      	mov	r0, r3
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	20000fbc 	.word	0x20000fbc
 800b210:	20000fd8 	.word	0x20000fd8

0800b214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b220:	2300      	movs	r3, #0
 800b222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d058      	beq.n	800b2dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b22a:	4b2f      	ldr	r3, [pc, #188]	@ (800b2e8 <xTaskPriorityDisinherit+0xd4>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	429a      	cmp	r2, r3
 800b232:	d00b      	beq.n	800b24c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	60fb      	str	r3, [r7, #12]
}
 800b246:	bf00      	nop
 800b248:	bf00      	nop
 800b24a:	e7fd      	b.n	800b248 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10b      	bne.n	800b26c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	60bb      	str	r3, [r7, #8]
}
 800b266:	bf00      	nop
 800b268:	bf00      	nop
 800b26a:	e7fd      	b.n	800b268 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b270:	1e5a      	subs	r2, r3, #1
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b27e:	429a      	cmp	r2, r3
 800b280:	d02c      	beq.n	800b2dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b286:	2b00      	cmp	r3, #0
 800b288:	d128      	bne.n	800b2dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	3304      	adds	r3, #4
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fc26 	bl	8009ae0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ac:	4b0f      	ldr	r3, [pc, #60]	@ (800b2ec <xTaskPriorityDisinherit+0xd8>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d903      	bls.n	800b2bc <xTaskPriorityDisinherit+0xa8>
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b8:	4a0c      	ldr	r2, [pc, #48]	@ (800b2ec <xTaskPriorityDisinherit+0xd8>)
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4a09      	ldr	r2, [pc, #36]	@ (800b2f0 <xTaskPriorityDisinherit+0xdc>)
 800b2ca:	441a      	add	r2, r3
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	4610      	mov	r0, r2
 800b2d4:	f7fe fba7 	bl	8009a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2dc:	697b      	ldr	r3, [r7, #20]
	}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20000adc 	.word	0x20000adc
 800b2ec:	20000fb8 	.word	0x20000fb8
 800b2f0:	20000ae0 	.word	0x20000ae0

0800b2f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2fe:	4b21      	ldr	r3, [pc, #132]	@ (800b384 <prvAddCurrentTaskToDelayedList+0x90>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b304:	4b20      	ldr	r3, [pc, #128]	@ (800b388 <prvAddCurrentTaskToDelayedList+0x94>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3304      	adds	r3, #4
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fe fbe8 	bl	8009ae0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b316:	d10a      	bne.n	800b32e <prvAddCurrentTaskToDelayedList+0x3a>
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d007      	beq.n	800b32e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b31e:	4b1a      	ldr	r3, [pc, #104]	@ (800b388 <prvAddCurrentTaskToDelayedList+0x94>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3304      	adds	r3, #4
 800b324:	4619      	mov	r1, r3
 800b326:	4819      	ldr	r0, [pc, #100]	@ (800b38c <prvAddCurrentTaskToDelayedList+0x98>)
 800b328:	f7fe fb7d 	bl	8009a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b32c:	e026      	b.n	800b37c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4413      	add	r3, r2
 800b334:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b336:	4b14      	ldr	r3, [pc, #80]	@ (800b388 <prvAddCurrentTaskToDelayedList+0x94>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	429a      	cmp	r2, r3
 800b344:	d209      	bcs.n	800b35a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b346:	4b12      	ldr	r3, [pc, #72]	@ (800b390 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	4b0f      	ldr	r3, [pc, #60]	@ (800b388 <prvAddCurrentTaskToDelayedList+0x94>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	3304      	adds	r3, #4
 800b350:	4619      	mov	r1, r3
 800b352:	4610      	mov	r0, r2
 800b354:	f7fe fb8b 	bl	8009a6e <vListInsert>
}
 800b358:	e010      	b.n	800b37c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b35a:	4b0e      	ldr	r3, [pc, #56]	@ (800b394 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	4b0a      	ldr	r3, [pc, #40]	@ (800b388 <prvAddCurrentTaskToDelayedList+0x94>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	3304      	adds	r3, #4
 800b364:	4619      	mov	r1, r3
 800b366:	4610      	mov	r0, r2
 800b368:	f7fe fb81 	bl	8009a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b36c:	4b0a      	ldr	r3, [pc, #40]	@ (800b398 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	429a      	cmp	r2, r3
 800b374:	d202      	bcs.n	800b37c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b376:	4a08      	ldr	r2, [pc, #32]	@ (800b398 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	6013      	str	r3, [r2, #0]
}
 800b37c:	bf00      	nop
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	20000fb4 	.word	0x20000fb4
 800b388:	20000adc 	.word	0x20000adc
 800b38c:	20000f9c 	.word	0x20000f9c
 800b390:	20000f6c 	.word	0x20000f6c
 800b394:	20000f68 	.word	0x20000f68
 800b398:	20000fd0 	.word	0x20000fd0

0800b39c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08a      	sub	sp, #40	@ 0x28
 800b3a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b3a6:	f000 fb13 	bl	800b9d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b3aa:	4b1d      	ldr	r3, [pc, #116]	@ (800b420 <xTimerCreateTimerTask+0x84>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d021      	beq.n	800b3f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3ba:	1d3a      	adds	r2, r7, #4
 800b3bc:	f107 0108 	add.w	r1, r7, #8
 800b3c0:	f107 030c 	add.w	r3, r7, #12
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fe fae7 	bl	8009998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3ca:	6879      	ldr	r1, [r7, #4]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	9202      	str	r2, [sp, #8]
 800b3d2:	9301      	str	r3, [sp, #4]
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	2300      	movs	r3, #0
 800b3da:	460a      	mov	r2, r1
 800b3dc:	4911      	ldr	r1, [pc, #68]	@ (800b424 <xTimerCreateTimerTask+0x88>)
 800b3de:	4812      	ldr	r0, [pc, #72]	@ (800b428 <xTimerCreateTimerTask+0x8c>)
 800b3e0:	f7ff f8a2 	bl	800a528 <xTaskCreateStatic>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	4a11      	ldr	r2, [pc, #68]	@ (800b42c <xTimerCreateTimerTask+0x90>)
 800b3e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3ea:	4b10      	ldr	r3, [pc, #64]	@ (800b42c <xTimerCreateTimerTask+0x90>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10b      	bne.n	800b414 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	613b      	str	r3, [r7, #16]
}
 800b40e:	bf00      	nop
 800b410:	bf00      	nop
 800b412:	e7fd      	b.n	800b410 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b414:	697b      	ldr	r3, [r7, #20]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	2000100c 	.word	0x2000100c
 800b424:	0800cff0 	.word	0x0800cff0
 800b428:	0800b569 	.word	0x0800b569
 800b42c:	20001010 	.word	0x20001010

0800b430 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b08a      	sub	sp, #40	@ 0x28
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b43e:	2300      	movs	r3, #0
 800b440:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10b      	bne.n	800b460 <xTimerGenericCommand+0x30>
	__asm volatile
 800b448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	623b      	str	r3, [r7, #32]
}
 800b45a:	bf00      	nop
 800b45c:	bf00      	nop
 800b45e:	e7fd      	b.n	800b45c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b460:	4b19      	ldr	r3, [pc, #100]	@ (800b4c8 <xTimerGenericCommand+0x98>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d02a      	beq.n	800b4be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2b05      	cmp	r3, #5
 800b478:	dc18      	bgt.n	800b4ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b47a:	f7ff fead 	bl	800b1d8 <xTaskGetSchedulerState>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b02      	cmp	r3, #2
 800b482:	d109      	bne.n	800b498 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b484:	4b10      	ldr	r3, [pc, #64]	@ (800b4c8 <xTimerGenericCommand+0x98>)
 800b486:	6818      	ldr	r0, [r3, #0]
 800b488:	f107 0110 	add.w	r1, r7, #16
 800b48c:	2300      	movs	r3, #0
 800b48e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b490:	f7fe fc5a 	bl	8009d48 <xQueueGenericSend>
 800b494:	6278      	str	r0, [r7, #36]	@ 0x24
 800b496:	e012      	b.n	800b4be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b498:	4b0b      	ldr	r3, [pc, #44]	@ (800b4c8 <xTimerGenericCommand+0x98>)
 800b49a:	6818      	ldr	r0, [r3, #0]
 800b49c:	f107 0110 	add.w	r1, r7, #16
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f7fe fc50 	bl	8009d48 <xQueueGenericSend>
 800b4a8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b4aa:	e008      	b.n	800b4be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b4ac:	4b06      	ldr	r3, [pc, #24]	@ (800b4c8 <xTimerGenericCommand+0x98>)
 800b4ae:	6818      	ldr	r0, [r3, #0]
 800b4b0:	f107 0110 	add.w	r1, r7, #16
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	f7fe fd48 	bl	8009f4c <xQueueGenericSendFromISR>
 800b4bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3728      	adds	r7, #40	@ 0x28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	2000100c 	.word	0x2000100c

0800b4cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af02      	add	r7, sp, #8
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4d6:	4b23      	ldr	r3, [pc, #140]	@ (800b564 <prvProcessExpiredTimer+0x98>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7fe fafb 	bl	8009ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4f0:	f003 0304 	and.w	r3, r3, #4
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d023      	beq.n	800b540 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	699a      	ldr	r2, [r3, #24]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	18d1      	adds	r1, r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	6978      	ldr	r0, [r7, #20]
 800b506:	f000 f8d5 	bl	800b6b4 <prvInsertTimerInActiveList>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d020      	beq.n	800b552 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b510:	2300      	movs	r3, #0
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	2300      	movs	r3, #0
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	2100      	movs	r1, #0
 800b51a:	6978      	ldr	r0, [r7, #20]
 800b51c:	f7ff ff88 	bl	800b430 <xTimerGenericCommand>
 800b520:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d114      	bne.n	800b552 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	60fb      	str	r3, [r7, #12]
}
 800b53a:	bf00      	nop
 800b53c:	bf00      	nop
 800b53e:	e7fd      	b.n	800b53c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b546:	f023 0301 	bic.w	r3, r3, #1
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	6978      	ldr	r0, [r7, #20]
 800b558:	4798      	blx	r3
}
 800b55a:	bf00      	nop
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20001004 	.word	0x20001004

0800b568 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b570:	f107 0308 	add.w	r3, r7, #8
 800b574:	4618      	mov	r0, r3
 800b576:	f000 f859 	bl	800b62c <prvGetNextExpireTime>
 800b57a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	4619      	mov	r1, r3
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 f805 	bl	800b590 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b586:	f000 f8d7 	bl	800b738 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b58a:	bf00      	nop
 800b58c:	e7f0      	b.n	800b570 <prvTimerTask+0x8>
	...

0800b590 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b59a:	f7ff fa29 	bl	800a9f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b59e:	f107 0308 	add.w	r3, r7, #8
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 f866 	bl	800b674 <prvSampleTimeNow>
 800b5a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d130      	bne.n	800b612 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10a      	bne.n	800b5cc <prvProcessTimerOrBlockTask+0x3c>
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d806      	bhi.n	800b5cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5be:	f7ff fa25 	bl	800aa0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b5c2:	68f9      	ldr	r1, [r7, #12]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff ff81 	bl	800b4cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5ca:	e024      	b.n	800b616 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d008      	beq.n	800b5e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5d2:	4b13      	ldr	r3, [pc, #76]	@ (800b620 <prvProcessTimerOrBlockTask+0x90>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <prvProcessTimerOrBlockTask+0x50>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e000      	b.n	800b5e2 <prvProcessTimerOrBlockTask+0x52>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b624 <prvProcessTimerOrBlockTask+0x94>)
 800b5e6:	6818      	ldr	r0, [r3, #0]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	f7fe ff65 	bl	800a4c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5f6:	f7ff fa09 	bl	800aa0c <xTaskResumeAll>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10a      	bne.n	800b616 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b600:	4b09      	ldr	r3, [pc, #36]	@ (800b628 <prvProcessTimerOrBlockTask+0x98>)
 800b602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	f3bf 8f6f 	isb	sy
}
 800b610:	e001      	b.n	800b616 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b612:	f7ff f9fb 	bl	800aa0c <xTaskResumeAll>
}
 800b616:	bf00      	nop
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20001008 	.word	0x20001008
 800b624:	2000100c 	.word	0x2000100c
 800b628:	e000ed04 	.word	0xe000ed04

0800b62c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b634:	4b0e      	ldr	r3, [pc, #56]	@ (800b670 <prvGetNextExpireTime+0x44>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <prvGetNextExpireTime+0x16>
 800b63e:	2201      	movs	r2, #1
 800b640:	e000      	b.n	800b644 <prvGetNextExpireTime+0x18>
 800b642:	2200      	movs	r2, #0
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d105      	bne.n	800b65c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b650:	4b07      	ldr	r3, [pc, #28]	@ (800b670 <prvGetNextExpireTime+0x44>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	60fb      	str	r3, [r7, #12]
 800b65a:	e001      	b.n	800b660 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b660:	68fb      	ldr	r3, [r7, #12]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	20001004 	.word	0x20001004

0800b674 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b67c:	f7ff fa64 	bl	800ab48 <xTaskGetTickCount>
 800b680:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b682:	4b0b      	ldr	r3, [pc, #44]	@ (800b6b0 <prvSampleTimeNow+0x3c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d205      	bcs.n	800b698 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b68c:	f000 f93a 	bl	800b904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	e002      	b.n	800b69e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b69e:	4a04      	ldr	r2, [pc, #16]	@ (800b6b0 <prvSampleTimeNow+0x3c>)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20001014 	.word	0x20001014

0800b6b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d812      	bhi.n	800b700 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	1ad2      	subs	r2, r2, r3
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d302      	bcc.n	800b6ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	617b      	str	r3, [r7, #20]
 800b6ec:	e01b      	b.n	800b726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6ee:	4b10      	ldr	r3, [pc, #64]	@ (800b730 <prvInsertTimerInActiveList+0x7c>)
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	f7fe f9b8 	bl	8009a6e <vListInsert>
 800b6fe:	e012      	b.n	800b726 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d206      	bcs.n	800b716 <prvInsertTimerInActiveList+0x62>
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d302      	bcc.n	800b716 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b710:	2301      	movs	r3, #1
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	e007      	b.n	800b726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b716:	4b07      	ldr	r3, [pc, #28]	@ (800b734 <prvInsertTimerInActiveList+0x80>)
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3304      	adds	r3, #4
 800b71e:	4619      	mov	r1, r3
 800b720:	4610      	mov	r0, r2
 800b722:	f7fe f9a4 	bl	8009a6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b726:	697b      	ldr	r3, [r7, #20]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	20001008 	.word	0x20001008
 800b734:	20001004 	.word	0x20001004

0800b738 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08e      	sub	sp, #56	@ 0x38
 800b73c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b73e:	e0ce      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	da19      	bge.n	800b77a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b746:	1d3b      	adds	r3, r7, #4
 800b748:	3304      	adds	r3, #4
 800b74a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10b      	bne.n	800b76a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	61fb      	str	r3, [r7, #28]
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	e7fd      	b.n	800b766 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b770:	6850      	ldr	r0, [r2, #4]
 800b772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b774:	6892      	ldr	r2, [r2, #8]
 800b776:	4611      	mov	r1, r2
 800b778:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f2c0 80ae 	blt.w	800b8de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d004      	beq.n	800b798 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b790:	3304      	adds	r3, #4
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe f9a4 	bl	8009ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b798:	463b      	mov	r3, r7
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff ff6a 	bl	800b674 <prvSampleTimeNow>
 800b7a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b09      	cmp	r3, #9
 800b7a6:	f200 8097 	bhi.w	800b8d8 <prvProcessReceivedCommands+0x1a0>
 800b7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b7b0 <prvProcessReceivedCommands+0x78>)
 800b7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b0:	0800b7d9 	.word	0x0800b7d9
 800b7b4:	0800b7d9 	.word	0x0800b7d9
 800b7b8:	0800b7d9 	.word	0x0800b7d9
 800b7bc:	0800b84f 	.word	0x0800b84f
 800b7c0:	0800b863 	.word	0x0800b863
 800b7c4:	0800b8af 	.word	0x0800b8af
 800b7c8:	0800b7d9 	.word	0x0800b7d9
 800b7cc:	0800b7d9 	.word	0x0800b7d9
 800b7d0:	0800b84f 	.word	0x0800b84f
 800b7d4:	0800b863 	.word	0x0800b863
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7de:	f043 0301 	orr.w	r3, r3, #1
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	18d1      	adds	r1, r2, r3
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7f8:	f7ff ff5c 	bl	800b6b4 <prvInsertTimerInActiveList>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d06c      	beq.n	800b8dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b808:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b810:	f003 0304 	and.w	r3, r3, #4
 800b814:	2b00      	cmp	r3, #0
 800b816:	d061      	beq.n	800b8dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	441a      	add	r2, r3
 800b820:	2300      	movs	r3, #0
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	2300      	movs	r3, #0
 800b826:	2100      	movs	r1, #0
 800b828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b82a:	f7ff fe01 	bl	800b430 <xTimerGenericCommand>
 800b82e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b830:	6a3b      	ldr	r3, [r7, #32]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d152      	bne.n	800b8dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b83a:	f383 8811 	msr	BASEPRI, r3
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	61bb      	str	r3, [r7, #24]
}
 800b848:	bf00      	nop
 800b84a:	bf00      	nop
 800b84c:	e7fd      	b.n	800b84a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b854:	f023 0301 	bic.w	r3, r3, #1
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b860:	e03d      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b868:	f043 0301 	orr.w	r3, r3, #1
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b870:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b878:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10b      	bne.n	800b89a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	617b      	str	r3, [r7, #20]
}
 800b894:	bf00      	nop
 800b896:	bf00      	nop
 800b898:	e7fd      	b.n	800b896 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89c:	699a      	ldr	r2, [r3, #24]
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	18d1      	adds	r1, r2, r3
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8a8:	f7ff ff04 	bl	800b6b4 <prvInsertTimerInActiveList>
					break;
 800b8ac:	e017      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8b4:	f003 0302 	and.w	r3, r3, #2
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d103      	bne.n	800b8c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b8bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8be:	f000 fbeb 	bl	800c098 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8c2:	e00c      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8ca:	f023 0301 	bic.w	r3, r3, #1
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b8d6:	e002      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b8d8:	bf00      	nop
 800b8da:	e000      	b.n	800b8de <prvProcessReceivedCommands+0x1a6>
					break;
 800b8dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8de:	4b08      	ldr	r3, [pc, #32]	@ (800b900 <prvProcessReceivedCommands+0x1c8>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	1d39      	adds	r1, r7, #4
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe fbce 	bl	800a088 <xQueueReceive>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f47f af26 	bne.w	800b740 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b8f4:	bf00      	nop
 800b8f6:	bf00      	nop
 800b8f8:	3730      	adds	r7, #48	@ 0x30
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	2000100c 	.word	0x2000100c

0800b904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b90a:	e049      	b.n	800b9a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b90c:	4b2e      	ldr	r3, [pc, #184]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b916:	4b2c      	ldr	r3, [pc, #176]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3304      	adds	r3, #4
 800b924:	4618      	mov	r0, r3
 800b926:	f7fe f8db 	bl	8009ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b938:	f003 0304 	and.w	r3, r3, #4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d02f      	beq.n	800b9a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	4413      	add	r3, r2
 800b948:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d90e      	bls.n	800b970 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b95e:	4b1a      	ldr	r3, [pc, #104]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3304      	adds	r3, #4
 800b966:	4619      	mov	r1, r3
 800b968:	4610      	mov	r0, r2
 800b96a:	f7fe f880 	bl	8009a6e <vListInsert>
 800b96e:	e017      	b.n	800b9a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b970:	2300      	movs	r3, #0
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	2300      	movs	r3, #0
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	2100      	movs	r1, #0
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f7ff fd58 	bl	800b430 <xTimerGenericCommand>
 800b980:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10b      	bne.n	800b9a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	603b      	str	r3, [r7, #0]
}
 800b99a:	bf00      	nop
 800b99c:	bf00      	nop
 800b99e:	e7fd      	b.n	800b99c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9a0:	4b09      	ldr	r3, [pc, #36]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1b0      	bne.n	800b90c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9aa:	4b07      	ldr	r3, [pc, #28]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b9b0:	4b06      	ldr	r3, [pc, #24]	@ (800b9cc <prvSwitchTimerLists+0xc8>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a04      	ldr	r2, [pc, #16]	@ (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b9b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b9b8:	4a04      	ldr	r2, [pc, #16]	@ (800b9cc <prvSwitchTimerLists+0xc8>)
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	6013      	str	r3, [r2, #0]
}
 800b9be:	bf00      	nop
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20001004 	.word	0x20001004
 800b9cc:	20001008 	.word	0x20001008

0800b9d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9d6:	f000 f96f 	bl	800bcb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9da:	4b15      	ldr	r3, [pc, #84]	@ (800ba30 <prvCheckForValidListAndQueue+0x60>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d120      	bne.n	800ba24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9e2:	4814      	ldr	r0, [pc, #80]	@ (800ba34 <prvCheckForValidListAndQueue+0x64>)
 800b9e4:	f7fd fff2 	bl	80099cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9e8:	4813      	ldr	r0, [pc, #76]	@ (800ba38 <prvCheckForValidListAndQueue+0x68>)
 800b9ea:	f7fd ffef 	bl	80099cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9ee:	4b13      	ldr	r3, [pc, #76]	@ (800ba3c <prvCheckForValidListAndQueue+0x6c>)
 800b9f0:	4a10      	ldr	r2, [pc, #64]	@ (800ba34 <prvCheckForValidListAndQueue+0x64>)
 800b9f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9f4:	4b12      	ldr	r3, [pc, #72]	@ (800ba40 <prvCheckForValidListAndQueue+0x70>)
 800b9f6:	4a10      	ldr	r2, [pc, #64]	@ (800ba38 <prvCheckForValidListAndQueue+0x68>)
 800b9f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	4b11      	ldr	r3, [pc, #68]	@ (800ba44 <prvCheckForValidListAndQueue+0x74>)
 800ba00:	4a11      	ldr	r2, [pc, #68]	@ (800ba48 <prvCheckForValidListAndQueue+0x78>)
 800ba02:	2110      	movs	r1, #16
 800ba04:	200a      	movs	r0, #10
 800ba06:	f7fe f8ff 	bl	8009c08 <xQueueGenericCreateStatic>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	4a08      	ldr	r2, [pc, #32]	@ (800ba30 <prvCheckForValidListAndQueue+0x60>)
 800ba0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba10:	4b07      	ldr	r3, [pc, #28]	@ (800ba30 <prvCheckForValidListAndQueue+0x60>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d005      	beq.n	800ba24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba18:	4b05      	ldr	r3, [pc, #20]	@ (800ba30 <prvCheckForValidListAndQueue+0x60>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	490b      	ldr	r1, [pc, #44]	@ (800ba4c <prvCheckForValidListAndQueue+0x7c>)
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fe fd24 	bl	800a46c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba24:	f000 f97a 	bl	800bd1c <vPortExitCritical>
}
 800ba28:	bf00      	nop
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	2000100c 	.word	0x2000100c
 800ba34:	20000fdc 	.word	0x20000fdc
 800ba38:	20000ff0 	.word	0x20000ff0
 800ba3c:	20001004 	.word	0x20001004
 800ba40:	20001008 	.word	0x20001008
 800ba44:	200010b8 	.word	0x200010b8
 800ba48:	20001018 	.word	0x20001018
 800ba4c:	0800cff8 	.word	0x0800cff8

0800ba50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	3b04      	subs	r3, #4
 800ba60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ba68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	3b04      	subs	r3, #4
 800ba6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f023 0201 	bic.w	r2, r3, #1
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	3b04      	subs	r3, #4
 800ba7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba80:	4a0c      	ldr	r2, [pc, #48]	@ (800bab4 <pxPortInitialiseStack+0x64>)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3b14      	subs	r3, #20
 800ba8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3b04      	subs	r3, #4
 800ba96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f06f 0202 	mvn.w	r2, #2
 800ba9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3b20      	subs	r3, #32
 800baa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800baa6:	68fb      	ldr	r3, [r7, #12]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3714      	adds	r7, #20
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	0800bab9 	.word	0x0800bab9

0800bab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bac2:	4b13      	ldr	r3, [pc, #76]	@ (800bb10 <prvTaskExitError+0x58>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baca:	d00b      	beq.n	800bae4 <prvTaskExitError+0x2c>
	__asm volatile
 800bacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad0:	f383 8811 	msr	BASEPRI, r3
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	60fb      	str	r3, [r7, #12]
}
 800bade:	bf00      	nop
 800bae0:	bf00      	nop
 800bae2:	e7fd      	b.n	800bae0 <prvTaskExitError+0x28>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	60bb      	str	r3, [r7, #8]
}
 800baf6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800baf8:	bf00      	nop
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d0fc      	beq.n	800bafa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb00:	bf00      	nop
 800bb02:	bf00      	nop
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20000098 	.word	0x20000098
	...

0800bb20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb20:	4b07      	ldr	r3, [pc, #28]	@ (800bb40 <pxCurrentTCBConst2>)
 800bb22:	6819      	ldr	r1, [r3, #0]
 800bb24:	6808      	ldr	r0, [r1, #0]
 800bb26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2a:	f380 8809 	msr	PSP, r0
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f04f 0000 	mov.w	r0, #0
 800bb36:	f380 8811 	msr	BASEPRI, r0
 800bb3a:	4770      	bx	lr
 800bb3c:	f3af 8000 	nop.w

0800bb40 <pxCurrentTCBConst2>:
 800bb40:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop

0800bb48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb48:	4808      	ldr	r0, [pc, #32]	@ (800bb6c <prvPortStartFirstTask+0x24>)
 800bb4a:	6800      	ldr	r0, [r0, #0]
 800bb4c:	6800      	ldr	r0, [r0, #0]
 800bb4e:	f380 8808 	msr	MSP, r0
 800bb52:	f04f 0000 	mov.w	r0, #0
 800bb56:	f380 8814 	msr	CONTROL, r0
 800bb5a:	b662      	cpsie	i
 800bb5c:	b661      	cpsie	f
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	df00      	svc	0
 800bb68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb6a:	bf00      	nop
 800bb6c:	e000ed08 	.word	0xe000ed08

0800bb70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb76:	4b47      	ldr	r3, [pc, #284]	@ (800bc94 <xPortStartScheduler+0x124>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a47      	ldr	r2, [pc, #284]	@ (800bc98 <xPortStartScheduler+0x128>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d10b      	bne.n	800bb98 <xPortStartScheduler+0x28>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	60fb      	str	r3, [r7, #12]
}
 800bb92:	bf00      	nop
 800bb94:	bf00      	nop
 800bb96:	e7fd      	b.n	800bb94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb98:	4b3e      	ldr	r3, [pc, #248]	@ (800bc94 <xPortStartScheduler+0x124>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a3f      	ldr	r2, [pc, #252]	@ (800bc9c <xPortStartScheduler+0x12c>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d10b      	bne.n	800bbba <xPortStartScheduler+0x4a>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	613b      	str	r3, [r7, #16]
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop
 800bbb8:	e7fd      	b.n	800bbb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bbba:	4b39      	ldr	r3, [pc, #228]	@ (800bca0 <xPortStartScheduler+0x130>)
 800bbbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	22ff      	movs	r2, #255	@ 0xff
 800bbca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bbd4:	78fb      	ldrb	r3, [r7, #3]
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	4b31      	ldr	r3, [pc, #196]	@ (800bca4 <xPortStartScheduler+0x134>)
 800bbe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bbe2:	4b31      	ldr	r3, [pc, #196]	@ (800bca8 <xPortStartScheduler+0x138>)
 800bbe4:	2207      	movs	r2, #7
 800bbe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbe8:	e009      	b.n	800bbfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bbea:	4b2f      	ldr	r3, [pc, #188]	@ (800bca8 <xPortStartScheduler+0x138>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	4a2d      	ldr	r2, [pc, #180]	@ (800bca8 <xPortStartScheduler+0x138>)
 800bbf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bbf4:	78fb      	ldrb	r3, [r7, #3]
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	005b      	lsls	r3, r3, #1
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbfe:	78fb      	ldrb	r3, [r7, #3]
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc06:	2b80      	cmp	r3, #128	@ 0x80
 800bc08:	d0ef      	beq.n	800bbea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc0a:	4b27      	ldr	r3, [pc, #156]	@ (800bca8 <xPortStartScheduler+0x138>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f1c3 0307 	rsb	r3, r3, #7
 800bc12:	2b04      	cmp	r3, #4
 800bc14:	d00b      	beq.n	800bc2e <xPortStartScheduler+0xbe>
	__asm volatile
 800bc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc1a:	f383 8811 	msr	BASEPRI, r3
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	60bb      	str	r3, [r7, #8]
}
 800bc28:	bf00      	nop
 800bc2a:	bf00      	nop
 800bc2c:	e7fd      	b.n	800bc2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc2e:	4b1e      	ldr	r3, [pc, #120]	@ (800bca8 <xPortStartScheduler+0x138>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	021b      	lsls	r3, r3, #8
 800bc34:	4a1c      	ldr	r2, [pc, #112]	@ (800bca8 <xPortStartScheduler+0x138>)
 800bc36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc38:	4b1b      	ldr	r3, [pc, #108]	@ (800bca8 <xPortStartScheduler+0x138>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bc40:	4a19      	ldr	r2, [pc, #100]	@ (800bca8 <xPortStartScheduler+0x138>)
 800bc42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc4c:	4b17      	ldr	r3, [pc, #92]	@ (800bcac <xPortStartScheduler+0x13c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a16      	ldr	r2, [pc, #88]	@ (800bcac <xPortStartScheduler+0x13c>)
 800bc52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bc56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc58:	4b14      	ldr	r3, [pc, #80]	@ (800bcac <xPortStartScheduler+0x13c>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a13      	ldr	r2, [pc, #76]	@ (800bcac <xPortStartScheduler+0x13c>)
 800bc5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bc62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc64:	f000 f8da 	bl	800be1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc68:	4b11      	ldr	r3, [pc, #68]	@ (800bcb0 <xPortStartScheduler+0x140>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc6e:	f000 f8f9 	bl	800be64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc72:	4b10      	ldr	r3, [pc, #64]	@ (800bcb4 <xPortStartScheduler+0x144>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a0f      	ldr	r2, [pc, #60]	@ (800bcb4 <xPortStartScheduler+0x144>)
 800bc78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bc7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc7e:	f7ff ff63 	bl	800bb48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc82:	f7ff f82b 	bl	800acdc <vTaskSwitchContext>
	prvTaskExitError();
 800bc86:	f7ff ff17 	bl	800bab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	e000ed00 	.word	0xe000ed00
 800bc98:	410fc271 	.word	0x410fc271
 800bc9c:	410fc270 	.word	0x410fc270
 800bca0:	e000e400 	.word	0xe000e400
 800bca4:	20001108 	.word	0x20001108
 800bca8:	2000110c 	.word	0x2000110c
 800bcac:	e000ed20 	.word	0xe000ed20
 800bcb0:	20000098 	.word	0x20000098
 800bcb4:	e000ef34 	.word	0xe000ef34

0800bcb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	607b      	str	r3, [r7, #4]
}
 800bcd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bcd2:	4b10      	ldr	r3, [pc, #64]	@ (800bd14 <vPortEnterCritical+0x5c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	4a0e      	ldr	r2, [pc, #56]	@ (800bd14 <vPortEnterCritical+0x5c>)
 800bcda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bcdc:	4b0d      	ldr	r3, [pc, #52]	@ (800bd14 <vPortEnterCritical+0x5c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d110      	bne.n	800bd06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bce4:	4b0c      	ldr	r3, [pc, #48]	@ (800bd18 <vPortEnterCritical+0x60>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00b      	beq.n	800bd06 <vPortEnterCritical+0x4e>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	603b      	str	r3, [r7, #0]
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	e7fd      	b.n	800bd02 <vPortEnterCritical+0x4a>
	}
}
 800bd06:	bf00      	nop
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	20000098 	.word	0x20000098
 800bd18:	e000ed04 	.word	0xe000ed04

0800bd1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd22:	4b12      	ldr	r3, [pc, #72]	@ (800bd6c <vPortExitCritical+0x50>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10b      	bne.n	800bd42 <vPortExitCritical+0x26>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	607b      	str	r3, [r7, #4]
}
 800bd3c:	bf00      	nop
 800bd3e:	bf00      	nop
 800bd40:	e7fd      	b.n	800bd3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd42:	4b0a      	ldr	r3, [pc, #40]	@ (800bd6c <vPortExitCritical+0x50>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	4a08      	ldr	r2, [pc, #32]	@ (800bd6c <vPortExitCritical+0x50>)
 800bd4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd4c:	4b07      	ldr	r3, [pc, #28]	@ (800bd6c <vPortExitCritical+0x50>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d105      	bne.n	800bd60 <vPortExitCritical+0x44>
 800bd54:	2300      	movs	r3, #0
 800bd56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	f383 8811 	msr	BASEPRI, r3
}
 800bd5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	20000098 	.word	0x20000098

0800bd70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd70:	f3ef 8009 	mrs	r0, PSP
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	4b15      	ldr	r3, [pc, #84]	@ (800bdd0 <pxCurrentTCBConst>)
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	f01e 0f10 	tst.w	lr, #16
 800bd80:	bf08      	it	eq
 800bd82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8a:	6010      	str	r0, [r2, #0]
 800bd8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bd94:	f380 8811 	msr	BASEPRI, r0
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f7fe ff9c 	bl	800acdc <vTaskSwitchContext>
 800bda4:	f04f 0000 	mov.w	r0, #0
 800bda8:	f380 8811 	msr	BASEPRI, r0
 800bdac:	bc09      	pop	{r0, r3}
 800bdae:	6819      	ldr	r1, [r3, #0]
 800bdb0:	6808      	ldr	r0, [r1, #0]
 800bdb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb6:	f01e 0f10 	tst.w	lr, #16
 800bdba:	bf08      	it	eq
 800bdbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bdc0:	f380 8809 	msr	PSP, r0
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	f3af 8000 	nop.w

0800bdd0 <pxCurrentTCBConst>:
 800bdd0:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bdd4:	bf00      	nop
 800bdd6:	bf00      	nop

0800bdd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	607b      	str	r3, [r7, #4]
}
 800bdf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bdf2:	f7fe feb9 	bl	800ab68 <xTaskIncrementTick>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d003      	beq.n	800be04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdfc:	4b06      	ldr	r3, [pc, #24]	@ (800be18 <xPortSysTickHandler+0x40>)
 800bdfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	2300      	movs	r3, #0
 800be06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	f383 8811 	msr	BASEPRI, r3
}
 800be0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be10:	bf00      	nop
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	e000ed04 	.word	0xe000ed04

0800be1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be1c:	b480      	push	{r7}
 800be1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be20:	4b0b      	ldr	r3, [pc, #44]	@ (800be50 <vPortSetupTimerInterrupt+0x34>)
 800be22:	2200      	movs	r2, #0
 800be24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be26:	4b0b      	ldr	r3, [pc, #44]	@ (800be54 <vPortSetupTimerInterrupt+0x38>)
 800be28:	2200      	movs	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be2c:	4b0a      	ldr	r3, [pc, #40]	@ (800be58 <vPortSetupTimerInterrupt+0x3c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a0a      	ldr	r2, [pc, #40]	@ (800be5c <vPortSetupTimerInterrupt+0x40>)
 800be32:	fba2 2303 	umull	r2, r3, r2, r3
 800be36:	099b      	lsrs	r3, r3, #6
 800be38:	4a09      	ldr	r2, [pc, #36]	@ (800be60 <vPortSetupTimerInterrupt+0x44>)
 800be3a:	3b01      	subs	r3, #1
 800be3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be3e:	4b04      	ldr	r3, [pc, #16]	@ (800be50 <vPortSetupTimerInterrupt+0x34>)
 800be40:	2207      	movs	r2, #7
 800be42:	601a      	str	r2, [r3, #0]
}
 800be44:	bf00      	nop
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	e000e010 	.word	0xe000e010
 800be54:	e000e018 	.word	0xe000e018
 800be58:	20000000 	.word	0x20000000
 800be5c:	10624dd3 	.word	0x10624dd3
 800be60:	e000e014 	.word	0xe000e014

0800be64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800be74 <vPortEnableVFP+0x10>
 800be68:	6801      	ldr	r1, [r0, #0]
 800be6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800be6e:	6001      	str	r1, [r0, #0]
 800be70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be72:	bf00      	nop
 800be74:	e000ed88 	.word	0xe000ed88

0800be78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be7e:	f3ef 8305 	mrs	r3, IPSR
 800be82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b0f      	cmp	r3, #15
 800be88:	d915      	bls.n	800beb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be8a:	4a18      	ldr	r2, [pc, #96]	@ (800beec <vPortValidateInterruptPriority+0x74>)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4413      	add	r3, r2
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be94:	4b16      	ldr	r3, [pc, #88]	@ (800bef0 <vPortValidateInterruptPriority+0x78>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	7afa      	ldrb	r2, [r7, #11]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d20b      	bcs.n	800beb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	607b      	str	r3, [r7, #4]
}
 800beb0:	bf00      	nop
 800beb2:	bf00      	nop
 800beb4:	e7fd      	b.n	800beb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800beb6:	4b0f      	ldr	r3, [pc, #60]	@ (800bef4 <vPortValidateInterruptPriority+0x7c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bebe:	4b0e      	ldr	r3, [pc, #56]	@ (800bef8 <vPortValidateInterruptPriority+0x80>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d90b      	bls.n	800bede <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	603b      	str	r3, [r7, #0]
}
 800bed8:	bf00      	nop
 800beda:	bf00      	nop
 800bedc:	e7fd      	b.n	800beda <vPortValidateInterruptPriority+0x62>
	}
 800bede:	bf00      	nop
 800bee0:	3714      	adds	r7, #20
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	e000e3f0 	.word	0xe000e3f0
 800bef0:	20001108 	.word	0x20001108
 800bef4:	e000ed0c 	.word	0xe000ed0c
 800bef8:	2000110c 	.word	0x2000110c

0800befc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b08a      	sub	sp, #40	@ 0x28
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf04:	2300      	movs	r3, #0
 800bf06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf08:	f7fe fd72 	bl	800a9f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf0c:	4b5c      	ldr	r3, [pc, #368]	@ (800c080 <pvPortMalloc+0x184>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf14:	f000 f924 	bl	800c160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf18:	4b5a      	ldr	r3, [pc, #360]	@ (800c084 <pvPortMalloc+0x188>)
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4013      	ands	r3, r2
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f040 8095 	bne.w	800c050 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d01e      	beq.n	800bf6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bf2c:	2208      	movs	r2, #8
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4413      	add	r3, r2
 800bf32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f003 0307 	and.w	r3, r3, #7
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d015      	beq.n	800bf6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f023 0307 	bic.w	r3, r3, #7
 800bf44:	3308      	adds	r3, #8
 800bf46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f003 0307 	and.w	r3, r3, #7
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00b      	beq.n	800bf6a <pvPortMalloc+0x6e>
	__asm volatile
 800bf52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	617b      	str	r3, [r7, #20]
}
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop
 800bf68:	e7fd      	b.n	800bf66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d06f      	beq.n	800c050 <pvPortMalloc+0x154>
 800bf70:	4b45      	ldr	r3, [pc, #276]	@ (800c088 <pvPortMalloc+0x18c>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d86a      	bhi.n	800c050 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf7a:	4b44      	ldr	r3, [pc, #272]	@ (800c08c <pvPortMalloc+0x190>)
 800bf7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf7e:	4b43      	ldr	r3, [pc, #268]	@ (800c08c <pvPortMalloc+0x190>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf84:	e004      	b.n	800bf90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bf86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d903      	bls.n	800bfa2 <pvPortMalloc+0xa6>
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1f1      	bne.n	800bf86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfa2:	4b37      	ldr	r3, [pc, #220]	@ (800c080 <pvPortMalloc+0x184>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d051      	beq.n	800c050 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bfac:	6a3b      	ldr	r3, [r7, #32]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2208      	movs	r2, #8
 800bfb2:	4413      	add	r3, r2
 800bfb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc0:	685a      	ldr	r2, [r3, #4]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	1ad2      	subs	r2, r2, r3
 800bfc6:	2308      	movs	r3, #8
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d920      	bls.n	800c010 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bfce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	f003 0307 	and.w	r3, r3, #7
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <pvPortMalloc+0xfc>
	__asm volatile
 800bfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe4:	f383 8811 	msr	BASEPRI, r3
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	613b      	str	r3, [r7, #16]
}
 800bff2:	bf00      	nop
 800bff4:	bf00      	nop
 800bff6:	e7fd      	b.n	800bff4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	1ad2      	subs	r2, r2, r3
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c00a:	69b8      	ldr	r0, [r7, #24]
 800c00c:	f000 f90a 	bl	800c224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c010:	4b1d      	ldr	r3, [pc, #116]	@ (800c088 <pvPortMalloc+0x18c>)
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	4a1b      	ldr	r2, [pc, #108]	@ (800c088 <pvPortMalloc+0x18c>)
 800c01c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c01e:	4b1a      	ldr	r3, [pc, #104]	@ (800c088 <pvPortMalloc+0x18c>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	4b1b      	ldr	r3, [pc, #108]	@ (800c090 <pvPortMalloc+0x194>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	429a      	cmp	r2, r3
 800c028:	d203      	bcs.n	800c032 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c02a:	4b17      	ldr	r3, [pc, #92]	@ (800c088 <pvPortMalloc+0x18c>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a18      	ldr	r2, [pc, #96]	@ (800c090 <pvPortMalloc+0x194>)
 800c030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	4b13      	ldr	r3, [pc, #76]	@ (800c084 <pvPortMalloc+0x188>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	431a      	orrs	r2, r3
 800c03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c042:	2200      	movs	r2, #0
 800c044:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c046:	4b13      	ldr	r3, [pc, #76]	@ (800c094 <pvPortMalloc+0x198>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3301      	adds	r3, #1
 800c04c:	4a11      	ldr	r2, [pc, #68]	@ (800c094 <pvPortMalloc+0x198>)
 800c04e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c050:	f7fe fcdc 	bl	800aa0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	f003 0307 	and.w	r3, r3, #7
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00b      	beq.n	800c076 <pvPortMalloc+0x17a>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	60fb      	str	r3, [r7, #12]
}
 800c070:	bf00      	nop
 800c072:	bf00      	nop
 800c074:	e7fd      	b.n	800c072 <pvPortMalloc+0x176>
	return pvReturn;
 800c076:	69fb      	ldr	r3, [r7, #28]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3728      	adds	r7, #40	@ 0x28
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	20004d18 	.word	0x20004d18
 800c084:	20004d2c 	.word	0x20004d2c
 800c088:	20004d1c 	.word	0x20004d1c
 800c08c:	20004d10 	.word	0x20004d10
 800c090:	20004d20 	.word	0x20004d20
 800c094:	20004d24 	.word	0x20004d24

0800c098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b086      	sub	sp, #24
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d04f      	beq.n	800c14a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0aa:	2308      	movs	r3, #8
 800c0ac:	425b      	negs	r3, r3
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	4b25      	ldr	r3, [pc, #148]	@ (800c154 <vPortFree+0xbc>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4013      	ands	r3, r2
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10b      	bne.n	800c0de <vPortFree+0x46>
	__asm volatile
 800c0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	60fb      	str	r3, [r7, #12]
}
 800c0d8:	bf00      	nop
 800c0da:	bf00      	nop
 800c0dc:	e7fd      	b.n	800c0da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00b      	beq.n	800c0fe <vPortFree+0x66>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	60bb      	str	r3, [r7, #8]
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop
 800c0fc:	e7fd      	b.n	800c0fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	4b14      	ldr	r3, [pc, #80]	@ (800c154 <vPortFree+0xbc>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4013      	ands	r3, r2
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01e      	beq.n	800c14a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d11a      	bne.n	800c14a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	4b0e      	ldr	r3, [pc, #56]	@ (800c154 <vPortFree+0xbc>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	43db      	mvns	r3, r3
 800c11e:	401a      	ands	r2, r3
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c124:	f7fe fc64 	bl	800a9f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	4b0a      	ldr	r3, [pc, #40]	@ (800c158 <vPortFree+0xc0>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4413      	add	r3, r2
 800c132:	4a09      	ldr	r2, [pc, #36]	@ (800c158 <vPortFree+0xc0>)
 800c134:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c136:	6938      	ldr	r0, [r7, #16]
 800c138:	f000 f874 	bl	800c224 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c13c:	4b07      	ldr	r3, [pc, #28]	@ (800c15c <vPortFree+0xc4>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3301      	adds	r3, #1
 800c142:	4a06      	ldr	r2, [pc, #24]	@ (800c15c <vPortFree+0xc4>)
 800c144:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c146:	f7fe fc61 	bl	800aa0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c14a:	bf00      	nop
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	20004d2c 	.word	0x20004d2c
 800c158:	20004d1c 	.word	0x20004d1c
 800c15c:	20004d28 	.word	0x20004d28

0800c160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c166:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c16a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c16c:	4b27      	ldr	r3, [pc, #156]	@ (800c20c <prvHeapInit+0xac>)
 800c16e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f003 0307 	and.w	r3, r3, #7
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00c      	beq.n	800c194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3307      	adds	r3, #7
 800c17e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f023 0307 	bic.w	r3, r3, #7
 800c186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	4a1f      	ldr	r2, [pc, #124]	@ (800c20c <prvHeapInit+0xac>)
 800c190:	4413      	add	r3, r2
 800c192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c198:	4a1d      	ldr	r2, [pc, #116]	@ (800c210 <prvHeapInit+0xb0>)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c19e:	4b1c      	ldr	r3, [pc, #112]	@ (800c210 <prvHeapInit+0xb0>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1ac:	2208      	movs	r2, #8
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	1a9b      	subs	r3, r3, r2
 800c1b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f023 0307 	bic.w	r3, r3, #7
 800c1ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4a15      	ldr	r2, [pc, #84]	@ (800c214 <prvHeapInit+0xb4>)
 800c1c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c1c2:	4b14      	ldr	r3, [pc, #80]	@ (800c214 <prvHeapInit+0xb4>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c1ca:	4b12      	ldr	r3, [pc, #72]	@ (800c214 <prvHeapInit+0xb4>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	1ad2      	subs	r2, r2, r3
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c1e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c214 <prvHeapInit+0xb4>)
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	4a0a      	ldr	r2, [pc, #40]	@ (800c218 <prvHeapInit+0xb8>)
 800c1ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	4a09      	ldr	r2, [pc, #36]	@ (800c21c <prvHeapInit+0xbc>)
 800c1f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c1f8:	4b09      	ldr	r3, [pc, #36]	@ (800c220 <prvHeapInit+0xc0>)
 800c1fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c1fe:	601a      	str	r2, [r3, #0]
}
 800c200:	bf00      	nop
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	20001110 	.word	0x20001110
 800c210:	20004d10 	.word	0x20004d10
 800c214:	20004d18 	.word	0x20004d18
 800c218:	20004d20 	.word	0x20004d20
 800c21c:	20004d1c 	.word	0x20004d1c
 800c220:	20004d2c 	.word	0x20004d2c

0800c224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c22c:	4b28      	ldr	r3, [pc, #160]	@ (800c2d0 <prvInsertBlockIntoFreeList+0xac>)
 800c22e:	60fb      	str	r3, [r7, #12]
 800c230:	e002      	b.n	800c238 <prvInsertBlockIntoFreeList+0x14>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	60fb      	str	r3, [r7, #12]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d8f7      	bhi.n	800c232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	4413      	add	r3, r2
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	429a      	cmp	r2, r3
 800c252:	d108      	bne.n	800c266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	685a      	ldr	r2, [r3, #4]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	441a      	add	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	441a      	add	r2, r3
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	429a      	cmp	r2, r3
 800c278:	d118      	bne.n	800c2ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	4b15      	ldr	r3, [pc, #84]	@ (800c2d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	429a      	cmp	r2, r3
 800c284:	d00d      	beq.n	800c2a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685a      	ldr	r2, [r3, #4]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	441a      	add	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	601a      	str	r2, [r3, #0]
 800c2a0:	e008      	b.n	800c2b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c2d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	e003      	b.n	800c2b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d002      	beq.n	800c2c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2c2:	bf00      	nop
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	20004d10 	.word	0x20004d10
 800c2d4:	20004d18 	.word	0x20004d18

0800c2d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c2dc:	2200      	movs	r2, #0
 800c2de:	4912      	ldr	r1, [pc, #72]	@ (800c328 <MX_USB_DEVICE_Init+0x50>)
 800c2e0:	4812      	ldr	r0, [pc, #72]	@ (800c32c <MX_USB_DEVICE_Init+0x54>)
 800c2e2:	f7fb fee3 	bl	80080ac <USBD_Init>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c2ec:	f7f4 fbd3 	bl	8000a96 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c2f0:	490f      	ldr	r1, [pc, #60]	@ (800c330 <MX_USB_DEVICE_Init+0x58>)
 800c2f2:	480e      	ldr	r0, [pc, #56]	@ (800c32c <MX_USB_DEVICE_Init+0x54>)
 800c2f4:	f7fb ff0a 	bl	800810c <USBD_RegisterClass>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c2fe:	f7f4 fbca 	bl	8000a96 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c302:	490c      	ldr	r1, [pc, #48]	@ (800c334 <MX_USB_DEVICE_Init+0x5c>)
 800c304:	4809      	ldr	r0, [pc, #36]	@ (800c32c <MX_USB_DEVICE_Init+0x54>)
 800c306:	f7fb fe01 	bl	8007f0c <USBD_CDC_RegisterInterface>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d001      	beq.n	800c314 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c310:	f7f4 fbc1 	bl	8000a96 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c314:	4805      	ldr	r0, [pc, #20]	@ (800c32c <MX_USB_DEVICE_Init+0x54>)
 800c316:	f7fb ff2f 	bl	8008178 <USBD_Start>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d001      	beq.n	800c324 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c320:	f7f4 fbb9 	bl	8000a96 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c324:	bf00      	nop
 800c326:	bd80      	pop	{r7, pc}
 800c328:	200000b0 	.word	0x200000b0
 800c32c:	20004d30 	.word	0x20004d30
 800c330:	20000018 	.word	0x20000018
 800c334:	2000009c 	.word	0x2000009c

0800c338 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c33c:	2200      	movs	r2, #0
 800c33e:	4905      	ldr	r1, [pc, #20]	@ (800c354 <CDC_Init_FS+0x1c>)
 800c340:	4805      	ldr	r0, [pc, #20]	@ (800c358 <CDC_Init_FS+0x20>)
 800c342:	f7fb fdfd 	bl	8007f40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c346:	4905      	ldr	r1, [pc, #20]	@ (800c35c <CDC_Init_FS+0x24>)
 800c348:	4803      	ldr	r0, [pc, #12]	@ (800c358 <CDC_Init_FS+0x20>)
 800c34a:	f7fb fe1b 	bl	8007f84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c34e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c350:	4618      	mov	r0, r3
 800c352:	bd80      	pop	{r7, pc}
 800c354:	2000580c 	.word	0x2000580c
 800c358:	20004d30 	.word	0x20004d30
 800c35c:	2000500c 	.word	0x2000500c

0800c360 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c360:	b480      	push	{r7}
 800c362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c364:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c366:	4618      	mov	r0, r3
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	6039      	str	r1, [r7, #0]
 800c37a:	71fb      	strb	r3, [r7, #7]
 800c37c:	4613      	mov	r3, r2
 800c37e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b23      	cmp	r3, #35	@ 0x23
 800c384:	d84a      	bhi.n	800c41c <CDC_Control_FS+0xac>
 800c386:	a201      	add	r2, pc, #4	@ (adr r2, 800c38c <CDC_Control_FS+0x1c>)
 800c388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38c:	0800c41d 	.word	0x0800c41d
 800c390:	0800c41d 	.word	0x0800c41d
 800c394:	0800c41d 	.word	0x0800c41d
 800c398:	0800c41d 	.word	0x0800c41d
 800c39c:	0800c41d 	.word	0x0800c41d
 800c3a0:	0800c41d 	.word	0x0800c41d
 800c3a4:	0800c41d 	.word	0x0800c41d
 800c3a8:	0800c41d 	.word	0x0800c41d
 800c3ac:	0800c41d 	.word	0x0800c41d
 800c3b0:	0800c41d 	.word	0x0800c41d
 800c3b4:	0800c41d 	.word	0x0800c41d
 800c3b8:	0800c41d 	.word	0x0800c41d
 800c3bc:	0800c41d 	.word	0x0800c41d
 800c3c0:	0800c41d 	.word	0x0800c41d
 800c3c4:	0800c41d 	.word	0x0800c41d
 800c3c8:	0800c41d 	.word	0x0800c41d
 800c3cc:	0800c41d 	.word	0x0800c41d
 800c3d0:	0800c41d 	.word	0x0800c41d
 800c3d4:	0800c41d 	.word	0x0800c41d
 800c3d8:	0800c41d 	.word	0x0800c41d
 800c3dc:	0800c41d 	.word	0x0800c41d
 800c3e0:	0800c41d 	.word	0x0800c41d
 800c3e4:	0800c41d 	.word	0x0800c41d
 800c3e8:	0800c41d 	.word	0x0800c41d
 800c3ec:	0800c41d 	.word	0x0800c41d
 800c3f0:	0800c41d 	.word	0x0800c41d
 800c3f4:	0800c41d 	.word	0x0800c41d
 800c3f8:	0800c41d 	.word	0x0800c41d
 800c3fc:	0800c41d 	.word	0x0800c41d
 800c400:	0800c41d 	.word	0x0800c41d
 800c404:	0800c41d 	.word	0x0800c41d
 800c408:	0800c41d 	.word	0x0800c41d
 800c40c:	0800c41d 	.word	0x0800c41d
 800c410:	0800c41d 	.word	0x0800c41d
 800c414:	0800c41d 	.word	0x0800c41d
 800c418:	0800c41d 	.word	0x0800c41d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c41c:	bf00      	nop
  }

  return (USBD_OK);
 800c41e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c420:	4618      	mov	r0, r3
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c436:	6879      	ldr	r1, [r7, #4]
 800c438:	4805      	ldr	r0, [pc, #20]	@ (800c450 <CDC_Receive_FS+0x24>)
 800c43a:	f7fb fda3 	bl	8007f84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c43e:	4804      	ldr	r0, [pc, #16]	@ (800c450 <CDC_Receive_FS+0x24>)
 800c440:	f7fb fdfe 	bl	8008040 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c444:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c446:	4618      	mov	r0, r3
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20004d30 	.word	0x20004d30

0800c454 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	460b      	mov	r3, r1
 800c45e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c464:	4b0d      	ldr	r3, [pc, #52]	@ (800c49c <CDC_Transmit_FS+0x48>)
 800c466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c46a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c472:	2b00      	cmp	r3, #0
 800c474:	d001      	beq.n	800c47a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c476:	2301      	movs	r3, #1
 800c478:	e00b      	b.n	800c492 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c47a:	887b      	ldrh	r3, [r7, #2]
 800c47c:	461a      	mov	r2, r3
 800c47e:	6879      	ldr	r1, [r7, #4]
 800c480:	4806      	ldr	r0, [pc, #24]	@ (800c49c <CDC_Transmit_FS+0x48>)
 800c482:	f7fb fd5d 	bl	8007f40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c486:	4805      	ldr	r0, [pc, #20]	@ (800c49c <CDC_Transmit_FS+0x48>)
 800c488:	f7fb fd9a 	bl	8007fc0 <USBD_CDC_TransmitPacket>
 800c48c:	4603      	mov	r3, r0
 800c48e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c490:	7bfb      	ldrb	r3, [r7, #15]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	20004d30 	.word	0x20004d30

0800c4a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b087      	sub	sp, #28
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c4b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	371c      	adds	r7, #28
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	6039      	str	r1, [r7, #0]
 800c4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2212      	movs	r2, #18
 800c4d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c4d6:	4b03      	ldr	r3, [pc, #12]	@ (800c4e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr
 800c4e4:	200000cc 	.word	0x200000cc

0800c4e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	6039      	str	r1, [r7, #0]
 800c4f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	2204      	movs	r2, #4
 800c4f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c4fa:	4b03      	ldr	r3, [pc, #12]	@ (800c508 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr
 800c508:	200000e0 	.word	0x200000e0

0800c50c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	4603      	mov	r3, r0
 800c514:	6039      	str	r1, [r7, #0]
 800c516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c518:	79fb      	ldrb	r3, [r7, #7]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d105      	bne.n	800c52a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	4907      	ldr	r1, [pc, #28]	@ (800c540 <USBD_FS_ProductStrDescriptor+0x34>)
 800c522:	4808      	ldr	r0, [pc, #32]	@ (800c544 <USBD_FS_ProductStrDescriptor+0x38>)
 800c524:	f7fc ffee 	bl	8009504 <USBD_GetString>
 800c528:	e004      	b.n	800c534 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	4904      	ldr	r1, [pc, #16]	@ (800c540 <USBD_FS_ProductStrDescriptor+0x34>)
 800c52e:	4805      	ldr	r0, [pc, #20]	@ (800c544 <USBD_FS_ProductStrDescriptor+0x38>)
 800c530:	f7fc ffe8 	bl	8009504 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c534:	4b02      	ldr	r3, [pc, #8]	@ (800c540 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	2000600c 	.word	0x2000600c
 800c544:	0800d000 	.word	0x0800d000

0800c548 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	4603      	mov	r3, r0
 800c550:	6039      	str	r1, [r7, #0]
 800c552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	4904      	ldr	r1, [pc, #16]	@ (800c568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c558:	4804      	ldr	r0, [pc, #16]	@ (800c56c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c55a:	f7fc ffd3 	bl	8009504 <USBD_GetString>
  return USBD_StrDesc;
 800c55e:	4b02      	ldr	r3, [pc, #8]	@ (800c568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c560:	4618      	mov	r0, r3
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	2000600c 	.word	0x2000600c
 800c56c:	0800d018 	.word	0x0800d018

0800c570 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	4603      	mov	r3, r0
 800c578:	6039      	str	r1, [r7, #0]
 800c57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	221a      	movs	r2, #26
 800c580:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c582:	f000 f843 	bl	800c60c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c586:	4b02      	ldr	r3, [pc, #8]	@ (800c590 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	200000e4 	.word	0x200000e4

0800c594 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	4603      	mov	r3, r0
 800c59c:	6039      	str	r1, [r7, #0]
 800c59e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5a0:	79fb      	ldrb	r3, [r7, #7]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d105      	bne.n	800c5b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	4907      	ldr	r1, [pc, #28]	@ (800c5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5aa:	4808      	ldr	r0, [pc, #32]	@ (800c5cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5ac:	f7fc ffaa 	bl	8009504 <USBD_GetString>
 800c5b0:	e004      	b.n	800c5bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	4904      	ldr	r1, [pc, #16]	@ (800c5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5b6:	4805      	ldr	r0, [pc, #20]	@ (800c5cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5b8:	f7fc ffa4 	bl	8009504 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5bc:	4b02      	ldr	r3, [pc, #8]	@ (800c5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	2000600c 	.word	0x2000600c
 800c5cc:	0800d02c 	.word	0x0800d02c

0800c5d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	6039      	str	r1, [r7, #0]
 800c5da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5dc:	79fb      	ldrb	r3, [r7, #7]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d105      	bne.n	800c5ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	4907      	ldr	r1, [pc, #28]	@ (800c604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5e6:	4808      	ldr	r0, [pc, #32]	@ (800c608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5e8:	f7fc ff8c 	bl	8009504 <USBD_GetString>
 800c5ec:	e004      	b.n	800c5f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	4904      	ldr	r1, [pc, #16]	@ (800c604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5f2:	4805      	ldr	r0, [pc, #20]	@ (800c608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5f4:	f7fc ff86 	bl	8009504 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5f8:	4b02      	ldr	r3, [pc, #8]	@ (800c604 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	2000600c 	.word	0x2000600c
 800c608:	0800d038 	.word	0x0800d038

0800c60c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c612:	4b0f      	ldr	r3, [pc, #60]	@ (800c650 <Get_SerialNum+0x44>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c618:	4b0e      	ldr	r3, [pc, #56]	@ (800c654 <Get_SerialNum+0x48>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c61e:	4b0e      	ldr	r3, [pc, #56]	@ (800c658 <Get_SerialNum+0x4c>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	4413      	add	r3, r2
 800c62a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d009      	beq.n	800c646 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c632:	2208      	movs	r2, #8
 800c634:	4909      	ldr	r1, [pc, #36]	@ (800c65c <Get_SerialNum+0x50>)
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f000 f814 	bl	800c664 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c63c:	2204      	movs	r2, #4
 800c63e:	4908      	ldr	r1, [pc, #32]	@ (800c660 <Get_SerialNum+0x54>)
 800c640:	68b8      	ldr	r0, [r7, #8]
 800c642:	f000 f80f 	bl	800c664 <IntToUnicode>
  }
}
 800c646:	bf00      	nop
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	1fff7a10 	.word	0x1fff7a10
 800c654:	1fff7a14 	.word	0x1fff7a14
 800c658:	1fff7a18 	.word	0x1fff7a18
 800c65c:	200000e6 	.word	0x200000e6
 800c660:	200000f6 	.word	0x200000f6

0800c664 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c664:	b480      	push	{r7}
 800c666:	b087      	sub	sp, #28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	4613      	mov	r3, r2
 800c670:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c676:	2300      	movs	r3, #0
 800c678:	75fb      	strb	r3, [r7, #23]
 800c67a:	e027      	b.n	800c6cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	0f1b      	lsrs	r3, r3, #28
 800c680:	2b09      	cmp	r3, #9
 800c682:	d80b      	bhi.n	800c69c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	0f1b      	lsrs	r3, r3, #28
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
 800c68c:	005b      	lsls	r3, r3, #1
 800c68e:	4619      	mov	r1, r3
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	440b      	add	r3, r1
 800c694:	3230      	adds	r2, #48	@ 0x30
 800c696:	b2d2      	uxtb	r2, r2
 800c698:	701a      	strb	r2, [r3, #0]
 800c69a:	e00a      	b.n	800c6b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	0f1b      	lsrs	r3, r3, #28
 800c6a0:	b2da      	uxtb	r2, r3
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
 800c6a4:	005b      	lsls	r3, r3, #1
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	440b      	add	r3, r1
 800c6ac:	3237      	adds	r2, #55	@ 0x37
 800c6ae:	b2d2      	uxtb	r2, r2
 800c6b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	011b      	lsls	r3, r3, #4
 800c6b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ba:	005b      	lsls	r3, r3, #1
 800c6bc:	3301      	adds	r3, #1
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c6c6:	7dfb      	ldrb	r3, [r7, #23]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	75fb      	strb	r3, [r7, #23]
 800c6cc:	7dfa      	ldrb	r2, [r7, #23]
 800c6ce:	79fb      	ldrb	r3, [r7, #7]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d3d3      	bcc.n	800c67c <IntToUnicode+0x18>
  }
}
 800c6d4:	bf00      	nop
 800c6d6:	bf00      	nop
 800c6d8:	371c      	adds	r7, #28
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
	...

0800c6e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b08a      	sub	sp, #40	@ 0x28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6ec:	f107 0314 	add.w	r3, r7, #20
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	601a      	str	r2, [r3, #0]
 800c6f4:	605a      	str	r2, [r3, #4]
 800c6f6:	609a      	str	r2, [r3, #8]
 800c6f8:	60da      	str	r2, [r3, #12]
 800c6fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c704:	d13a      	bne.n	800c77c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c706:	2300      	movs	r3, #0
 800c708:	613b      	str	r3, [r7, #16]
 800c70a:	4b1e      	ldr	r3, [pc, #120]	@ (800c784 <HAL_PCD_MspInit+0xa0>)
 800c70c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c70e:	4a1d      	ldr	r2, [pc, #116]	@ (800c784 <HAL_PCD_MspInit+0xa0>)
 800c710:	f043 0301 	orr.w	r3, r3, #1
 800c714:	6313      	str	r3, [r2, #48]	@ 0x30
 800c716:	4b1b      	ldr	r3, [pc, #108]	@ (800c784 <HAL_PCD_MspInit+0xa0>)
 800c718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c71a:	f003 0301 	and.w	r3, r3, #1
 800c71e:	613b      	str	r3, [r7, #16]
 800c720:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c722:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c728:	2302      	movs	r3, #2
 800c72a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c72c:	2300      	movs	r3, #0
 800c72e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c730:	2303      	movs	r3, #3
 800c732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c734:	230a      	movs	r3, #10
 800c736:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c738:	f107 0314 	add.w	r3, r7, #20
 800c73c:	4619      	mov	r1, r3
 800c73e:	4812      	ldr	r0, [pc, #72]	@ (800c788 <HAL_PCD_MspInit+0xa4>)
 800c740:	f7f6 fd3e 	bl	80031c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c744:	4b0f      	ldr	r3, [pc, #60]	@ (800c784 <HAL_PCD_MspInit+0xa0>)
 800c746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c748:	4a0e      	ldr	r2, [pc, #56]	@ (800c784 <HAL_PCD_MspInit+0xa0>)
 800c74a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c74e:	6353      	str	r3, [r2, #52]	@ 0x34
 800c750:	2300      	movs	r3, #0
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	4b0b      	ldr	r3, [pc, #44]	@ (800c784 <HAL_PCD_MspInit+0xa0>)
 800c756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c758:	4a0a      	ldr	r2, [pc, #40]	@ (800c784 <HAL_PCD_MspInit+0xa0>)
 800c75a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c75e:	6453      	str	r3, [r2, #68]	@ 0x44
 800c760:	4b08      	ldr	r3, [pc, #32]	@ (800c784 <HAL_PCD_MspInit+0xa0>)
 800c762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c768:	60fb      	str	r3, [r7, #12]
 800c76a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c76c:	2200      	movs	r2, #0
 800c76e:	2105      	movs	r1, #5
 800c770:	2043      	movs	r0, #67	@ 0x43
 800c772:	f7f6 f98b 	bl	8002a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c776:	2043      	movs	r0, #67	@ 0x43
 800c778:	f7f6 f9a4 	bl	8002ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c77c:	bf00      	nop
 800c77e:	3728      	adds	r7, #40	@ 0x28
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	40023800 	.word	0x40023800
 800c788:	40020000 	.word	0x40020000

0800c78c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	4610      	mov	r0, r2
 800c7a4:	f7fb fd35 	bl	8008212 <USBD_LL_SetupStage>
}
 800c7a8:	bf00      	nop
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c7c2:	78fa      	ldrb	r2, [r7, #3]
 800c7c4:	6879      	ldr	r1, [r7, #4]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	4413      	add	r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	440b      	add	r3, r1
 800c7d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	78fb      	ldrb	r3, [r7, #3]
 800c7d8:	4619      	mov	r1, r3
 800c7da:	f7fb fd6f 	bl	80082bc <USBD_LL_DataOutStage>
}
 800c7de:	bf00      	nop
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b082      	sub	sp, #8
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c7f8:	78fa      	ldrb	r2, [r7, #3]
 800c7fa:	6879      	ldr	r1, [r7, #4]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	4413      	add	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	440b      	add	r3, r1
 800c806:	3320      	adds	r3, #32
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	78fb      	ldrb	r3, [r7, #3]
 800c80c:	4619      	mov	r1, r3
 800c80e:	f7fb fe11 	bl	8008434 <USBD_LL_DataInStage>
}
 800c812:	bf00      	nop
 800c814:	3708      	adds	r7, #8
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b082      	sub	sp, #8
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fb ff55 	bl	80086d8 <USBD_LL_SOF>
}
 800c82e:	bf00      	nop
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b084      	sub	sp, #16
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c83e:	2301      	movs	r3, #1
 800c840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	79db      	ldrb	r3, [r3, #7]
 800c846:	2b02      	cmp	r3, #2
 800c848:	d001      	beq.n	800c84e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c84a:	f7f4 f924 	bl	8000a96 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c854:	7bfa      	ldrb	r2, [r7, #15]
 800c856:	4611      	mov	r1, r2
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fb fef9 	bl	8008650 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c864:	4618      	mov	r0, r3
 800c866:	f7fb fea0 	bl	80085aa <USBD_LL_Reset>
}
 800c86a:	bf00      	nop
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c882:	4618      	mov	r0, r3
 800c884:	f7fb fef4 	bl	8008670 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	6812      	ldr	r2, [r2, #0]
 800c896:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c89a:	f043 0301 	orr.w	r3, r3, #1
 800c89e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	7adb      	ldrb	r3, [r3, #11]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d005      	beq.n	800c8b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8a8:	4b04      	ldr	r3, [pc, #16]	@ (800c8bc <HAL_PCD_SuspendCallback+0x48>)
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	4a03      	ldr	r2, [pc, #12]	@ (800c8bc <HAL_PCD_SuspendCallback+0x48>)
 800c8ae:	f043 0306 	orr.w	r3, r3, #6
 800c8b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c8b4:	bf00      	nop
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	e000ed00 	.word	0xe000ed00

0800c8c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fb feea 	bl	80086a8 <USBD_LL_Resume>
}
 800c8d4:	bf00      	nop
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c8ee:	78fa      	ldrb	r2, [r7, #3]
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fb ff42 	bl	800877c <USBD_LL_IsoOUTIncomplete>
}
 800c8f8:	bf00      	nop
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	460b      	mov	r3, r1
 800c90a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c912:	78fa      	ldrb	r2, [r7, #3]
 800c914:	4611      	mov	r1, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f7fb fefe 	bl	8008718 <USBD_LL_IsoINIncomplete>
}
 800c91c:	bf00      	nop
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c932:	4618      	mov	r0, r3
 800c934:	f7fb ff54 	bl	80087e0 <USBD_LL_DevConnected>
}
 800c938:	bf00      	nop
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fb ff51 	bl	80087f6 <USBD_LL_DevDisconnected>
}
 800c954:	bf00      	nop
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d13c      	bne.n	800c9e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c96c:	4a20      	ldr	r2, [pc, #128]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	4a1e      	ldr	r2, [pc, #120]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c978:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c97c:	4b1c      	ldr	r3, [pc, #112]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c97e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c984:	4b1a      	ldr	r3, [pc, #104]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c986:	2204      	movs	r2, #4
 800c988:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c98a:	4b19      	ldr	r3, [pc, #100]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c98c:	2202      	movs	r2, #2
 800c98e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c990:	4b17      	ldr	r3, [pc, #92]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c992:	2200      	movs	r2, #0
 800c994:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c996:	4b16      	ldr	r3, [pc, #88]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c998:	2202      	movs	r2, #2
 800c99a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c99c:	4b14      	ldr	r3, [pc, #80]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c99e:	2200      	movs	r2, #0
 800c9a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c9a2:	4b13      	ldr	r3, [pc, #76]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c9a8:	4b11      	ldr	r3, [pc, #68]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c9ae:	4b10      	ldr	r3, [pc, #64]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c9b4:	4b0e      	ldr	r3, [pc, #56]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c9ba:	480d      	ldr	r0, [pc, #52]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c9bc:	f7f6 ff14 	bl	80037e8 <HAL_PCD_Init>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d001      	beq.n	800c9ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c9c6:	f7f4 f866 	bl	8000a96 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c9ca:	2180      	movs	r1, #128	@ 0x80
 800c9cc:	4808      	ldr	r0, [pc, #32]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c9ce:	f7f8 f940 	bl	8004c52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c9d2:	2240      	movs	r2, #64	@ 0x40
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	4806      	ldr	r0, [pc, #24]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c9d8:	f7f8 f8f4 	bl	8004bc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c9dc:	2280      	movs	r2, #128	@ 0x80
 800c9de:	2101      	movs	r1, #1
 800c9e0:	4803      	ldr	r0, [pc, #12]	@ (800c9f0 <USBD_LL_Init+0x94>)
 800c9e2:	f7f8 f8ef 	bl	8004bc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	2000620c 	.word	0x2000620c

0800c9f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7f6 fffb 	bl	8003a06 <HAL_PCD_Start>
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 f942 	bl	800cca0 <USBD_Get_USB_Status>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b084      	sub	sp, #16
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
 800ca32:	4608      	mov	r0, r1
 800ca34:	4611      	mov	r1, r2
 800ca36:	461a      	mov	r2, r3
 800ca38:	4603      	mov	r3, r0
 800ca3a:	70fb      	strb	r3, [r7, #3]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	70bb      	strb	r3, [r7, #2]
 800ca40:	4613      	mov	r3, r2
 800ca42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ca52:	78bb      	ldrb	r3, [r7, #2]
 800ca54:	883a      	ldrh	r2, [r7, #0]
 800ca56:	78f9      	ldrb	r1, [r7, #3]
 800ca58:	f7f7 fccf 	bl	80043fa <HAL_PCD_EP_Open>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 f91c 	bl	800cca0 <USBD_Get_USB_Status>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b084      	sub	sp, #16
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	460b      	mov	r3, r1
 800ca80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca90:	78fa      	ldrb	r2, [r7, #3]
 800ca92:	4611      	mov	r1, r2
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7f7 fd1a 	bl	80044ce <HAL_PCD_EP_Close>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 f8fd 	bl	800cca0 <USBD_Get_USB_Status>
 800caa6:	4603      	mov	r3, r0
 800caa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	460b      	mov	r3, r1
 800cabe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac0:	2300      	movs	r3, #0
 800cac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cace:	78fa      	ldrb	r2, [r7, #3]
 800cad0:	4611      	mov	r1, r2
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f7 fdd2 	bl	800467c <HAL_PCD_EP_SetStall>
 800cad8:	4603      	mov	r3, r0
 800cada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	4618      	mov	r0, r3
 800cae0:	f000 f8de 	bl	800cca0 <USBD_Get_USB_Status>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cae8:	7bbb      	ldrb	r3, [r7, #14]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b084      	sub	sp, #16
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	460b      	mov	r3, r1
 800cafc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cafe:	2300      	movs	r3, #0
 800cb00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb0c:	78fa      	ldrb	r2, [r7, #3]
 800cb0e:	4611      	mov	r1, r2
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7f7 fe16 	bl	8004742 <HAL_PCD_EP_ClrStall>
 800cb16:	4603      	mov	r3, r0
 800cb18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 f8bf 	bl	800cca0 <USBD_Get_USB_Status>
 800cb22:	4603      	mov	r3, r0
 800cb24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb26:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	460b      	mov	r3, r1
 800cb3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	da0b      	bge.n	800cb64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb4c:	78fb      	ldrb	r3, [r7, #3]
 800cb4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cb52:	68f9      	ldr	r1, [r7, #12]
 800cb54:	4613      	mov	r3, r2
 800cb56:	00db      	lsls	r3, r3, #3
 800cb58:	4413      	add	r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	440b      	add	r3, r1
 800cb5e:	3316      	adds	r3, #22
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	e00b      	b.n	800cb7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb64:	78fb      	ldrb	r3, [r7, #3]
 800cb66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cb6a:	68f9      	ldr	r1, [r7, #12]
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	4413      	add	r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	440b      	add	r3, r1
 800cb76:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cb7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	460b      	mov	r3, r1
 800cb92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cba2:	78fa      	ldrb	r2, [r7, #3]
 800cba4:	4611      	mov	r1, r2
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7f7 fc03 	bl	80043b2 <HAL_PCD_SetAddress>
 800cbac:	4603      	mov	r3, r0
 800cbae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f000 f874 	bl	800cca0 <USBD_Get_USB_Status>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b086      	sub	sp, #24
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	60f8      	str	r0, [r7, #12]
 800cbce:	607a      	str	r2, [r7, #4]
 800cbd0:	603b      	str	r3, [r7, #0]
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cbe4:	7af9      	ldrb	r1, [r7, #11]
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	f7f7 fd0d 	bl	8004608 <HAL_PCD_EP_Transmit>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbf2:	7dfb      	ldrb	r3, [r7, #23]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f000 f853 	bl	800cca0 <USBD_Get_USB_Status>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cbfe:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3718      	adds	r7, #24
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	607a      	str	r2, [r7, #4]
 800cc12:	603b      	str	r3, [r7, #0]
 800cc14:	460b      	mov	r3, r1
 800cc16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cc26:	7af9      	ldrb	r1, [r7, #11]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	f7f7 fc99 	bl	8004562 <HAL_PCD_EP_Receive>
 800cc30:	4603      	mov	r3, r0
 800cc32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 f832 	bl	800cca0 <USBD_Get_USB_Status>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc40:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3718      	adds	r7, #24
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b082      	sub	sp, #8
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	460b      	mov	r3, r1
 800cc54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc5c:	78fa      	ldrb	r2, [r7, #3]
 800cc5e:	4611      	mov	r1, r2
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7f7 fcb9 	bl	80045d8 <HAL_PCD_EP_GetRxCount>
 800cc66:	4603      	mov	r3, r0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cc78:	4b03      	ldr	r3, [pc, #12]	@ (800cc88 <USBD_static_malloc+0x18>)
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	370c      	adds	r7, #12
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	200066f0 	.word	0x200066f0

0800cc8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]

}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccae:	79fb      	ldrb	r3, [r7, #7]
 800ccb0:	2b03      	cmp	r3, #3
 800ccb2:	d817      	bhi.n	800cce4 <USBD_Get_USB_Status+0x44>
 800ccb4:	a201      	add	r2, pc, #4	@ (adr r2, 800ccbc <USBD_Get_USB_Status+0x1c>)
 800ccb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccba:	bf00      	nop
 800ccbc:	0800cccd 	.word	0x0800cccd
 800ccc0:	0800ccd3 	.word	0x0800ccd3
 800ccc4:	0800ccd9 	.word	0x0800ccd9
 800ccc8:	0800ccdf 	.word	0x0800ccdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73fb      	strb	r3, [r7, #15]
    break;
 800ccd0:	e00b      	b.n	800ccea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	73fb      	strb	r3, [r7, #15]
    break;
 800ccd6:	e008      	b.n	800ccea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	73fb      	strb	r3, [r7, #15]
    break;
 800ccdc:	e005      	b.n	800ccea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccde:	2303      	movs	r3, #3
 800cce0:	73fb      	strb	r3, [r7, #15]
    break;
 800cce2:	e002      	b.n	800ccea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cce4:	2303      	movs	r3, #3
 800cce6:	73fb      	strb	r3, [r7, #15]
    break;
 800cce8:	bf00      	nop
  }
  return usb_status;
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3714      	adds	r7, #20
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <memset>:
 800ccf8:	4402      	add	r2, r0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d100      	bne.n	800cd02 <memset+0xa>
 800cd00:	4770      	bx	lr
 800cd02:	f803 1b01 	strb.w	r1, [r3], #1
 800cd06:	e7f9      	b.n	800ccfc <memset+0x4>

0800cd08 <_reclaim_reent>:
 800cd08:	4b2d      	ldr	r3, [pc, #180]	@ (800cdc0 <_reclaim_reent+0xb8>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4283      	cmp	r3, r0
 800cd0e:	b570      	push	{r4, r5, r6, lr}
 800cd10:	4604      	mov	r4, r0
 800cd12:	d053      	beq.n	800cdbc <_reclaim_reent+0xb4>
 800cd14:	69c3      	ldr	r3, [r0, #28]
 800cd16:	b31b      	cbz	r3, 800cd60 <_reclaim_reent+0x58>
 800cd18:	68db      	ldr	r3, [r3, #12]
 800cd1a:	b163      	cbz	r3, 800cd36 <_reclaim_reent+0x2e>
 800cd1c:	2500      	movs	r5, #0
 800cd1e:	69e3      	ldr	r3, [r4, #28]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	5959      	ldr	r1, [r3, r5]
 800cd24:	b9b1      	cbnz	r1, 800cd54 <_reclaim_reent+0x4c>
 800cd26:	3504      	adds	r5, #4
 800cd28:	2d80      	cmp	r5, #128	@ 0x80
 800cd2a:	d1f8      	bne.n	800cd1e <_reclaim_reent+0x16>
 800cd2c:	69e3      	ldr	r3, [r4, #28]
 800cd2e:	4620      	mov	r0, r4
 800cd30:	68d9      	ldr	r1, [r3, #12]
 800cd32:	f000 f87b 	bl	800ce2c <_free_r>
 800cd36:	69e3      	ldr	r3, [r4, #28]
 800cd38:	6819      	ldr	r1, [r3, #0]
 800cd3a:	b111      	cbz	r1, 800cd42 <_reclaim_reent+0x3a>
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f000 f875 	bl	800ce2c <_free_r>
 800cd42:	69e3      	ldr	r3, [r4, #28]
 800cd44:	689d      	ldr	r5, [r3, #8]
 800cd46:	b15d      	cbz	r5, 800cd60 <_reclaim_reent+0x58>
 800cd48:	4629      	mov	r1, r5
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	682d      	ldr	r5, [r5, #0]
 800cd4e:	f000 f86d 	bl	800ce2c <_free_r>
 800cd52:	e7f8      	b.n	800cd46 <_reclaim_reent+0x3e>
 800cd54:	680e      	ldr	r6, [r1, #0]
 800cd56:	4620      	mov	r0, r4
 800cd58:	f000 f868 	bl	800ce2c <_free_r>
 800cd5c:	4631      	mov	r1, r6
 800cd5e:	e7e1      	b.n	800cd24 <_reclaim_reent+0x1c>
 800cd60:	6961      	ldr	r1, [r4, #20]
 800cd62:	b111      	cbz	r1, 800cd6a <_reclaim_reent+0x62>
 800cd64:	4620      	mov	r0, r4
 800cd66:	f000 f861 	bl	800ce2c <_free_r>
 800cd6a:	69e1      	ldr	r1, [r4, #28]
 800cd6c:	b111      	cbz	r1, 800cd74 <_reclaim_reent+0x6c>
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f000 f85c 	bl	800ce2c <_free_r>
 800cd74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cd76:	b111      	cbz	r1, 800cd7e <_reclaim_reent+0x76>
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f000 f857 	bl	800ce2c <_free_r>
 800cd7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd80:	b111      	cbz	r1, 800cd88 <_reclaim_reent+0x80>
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 f852 	bl	800ce2c <_free_r>
 800cd88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cd8a:	b111      	cbz	r1, 800cd92 <_reclaim_reent+0x8a>
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	f000 f84d 	bl	800ce2c <_free_r>
 800cd92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cd94:	b111      	cbz	r1, 800cd9c <_reclaim_reent+0x94>
 800cd96:	4620      	mov	r0, r4
 800cd98:	f000 f848 	bl	800ce2c <_free_r>
 800cd9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cd9e:	b111      	cbz	r1, 800cda6 <_reclaim_reent+0x9e>
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 f843 	bl	800ce2c <_free_r>
 800cda6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cda8:	b111      	cbz	r1, 800cdb0 <_reclaim_reent+0xa8>
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f000 f83e 	bl	800ce2c <_free_r>
 800cdb0:	6a23      	ldr	r3, [r4, #32]
 800cdb2:	b11b      	cbz	r3, 800cdbc <_reclaim_reent+0xb4>
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdba:	4718      	bx	r3
 800cdbc:	bd70      	pop	{r4, r5, r6, pc}
 800cdbe:	bf00      	nop
 800cdc0:	20000100 	.word	0x20000100

0800cdc4 <__libc_init_array>:
 800cdc4:	b570      	push	{r4, r5, r6, lr}
 800cdc6:	4d0d      	ldr	r5, [pc, #52]	@ (800cdfc <__libc_init_array+0x38>)
 800cdc8:	4c0d      	ldr	r4, [pc, #52]	@ (800ce00 <__libc_init_array+0x3c>)
 800cdca:	1b64      	subs	r4, r4, r5
 800cdcc:	10a4      	asrs	r4, r4, #2
 800cdce:	2600      	movs	r6, #0
 800cdd0:	42a6      	cmp	r6, r4
 800cdd2:	d109      	bne.n	800cde8 <__libc_init_array+0x24>
 800cdd4:	4d0b      	ldr	r5, [pc, #44]	@ (800ce04 <__libc_init_array+0x40>)
 800cdd6:	4c0c      	ldr	r4, [pc, #48]	@ (800ce08 <__libc_init_array+0x44>)
 800cdd8:	f000 f87e 	bl	800ced8 <_init>
 800cddc:	1b64      	subs	r4, r4, r5
 800cdde:	10a4      	asrs	r4, r4, #2
 800cde0:	2600      	movs	r6, #0
 800cde2:	42a6      	cmp	r6, r4
 800cde4:	d105      	bne.n	800cdf2 <__libc_init_array+0x2e>
 800cde6:	bd70      	pop	{r4, r5, r6, pc}
 800cde8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdec:	4798      	blx	r3
 800cdee:	3601      	adds	r6, #1
 800cdf0:	e7ee      	b.n	800cdd0 <__libc_init_array+0xc>
 800cdf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdf6:	4798      	blx	r3
 800cdf8:	3601      	adds	r6, #1
 800cdfa:	e7f2      	b.n	800cde2 <__libc_init_array+0x1e>
 800cdfc:	0800d118 	.word	0x0800d118
 800ce00:	0800d118 	.word	0x0800d118
 800ce04:	0800d118 	.word	0x0800d118
 800ce08:	0800d11c 	.word	0x0800d11c

0800ce0c <__retarget_lock_acquire_recursive>:
 800ce0c:	4770      	bx	lr

0800ce0e <__retarget_lock_release_recursive>:
 800ce0e:	4770      	bx	lr

0800ce10 <memcpy>:
 800ce10:	440a      	add	r2, r1
 800ce12:	4291      	cmp	r1, r2
 800ce14:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce18:	d100      	bne.n	800ce1c <memcpy+0xc>
 800ce1a:	4770      	bx	lr
 800ce1c:	b510      	push	{r4, lr}
 800ce1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce26:	4291      	cmp	r1, r2
 800ce28:	d1f9      	bne.n	800ce1e <memcpy+0xe>
 800ce2a:	bd10      	pop	{r4, pc}

0800ce2c <_free_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4605      	mov	r5, r0
 800ce30:	2900      	cmp	r1, #0
 800ce32:	d041      	beq.n	800ceb8 <_free_r+0x8c>
 800ce34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce38:	1f0c      	subs	r4, r1, #4
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	bfb8      	it	lt
 800ce3e:	18e4      	addlt	r4, r4, r3
 800ce40:	f000 f83e 	bl	800cec0 <__malloc_lock>
 800ce44:	4a1d      	ldr	r2, [pc, #116]	@ (800cebc <_free_r+0x90>)
 800ce46:	6813      	ldr	r3, [r2, #0]
 800ce48:	b933      	cbnz	r3, 800ce58 <_free_r+0x2c>
 800ce4a:	6063      	str	r3, [r4, #4]
 800ce4c:	6014      	str	r4, [r2, #0]
 800ce4e:	4628      	mov	r0, r5
 800ce50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce54:	f000 b83a 	b.w	800cecc <__malloc_unlock>
 800ce58:	42a3      	cmp	r3, r4
 800ce5a:	d908      	bls.n	800ce6e <_free_r+0x42>
 800ce5c:	6820      	ldr	r0, [r4, #0]
 800ce5e:	1821      	adds	r1, r4, r0
 800ce60:	428b      	cmp	r3, r1
 800ce62:	bf01      	itttt	eq
 800ce64:	6819      	ldreq	r1, [r3, #0]
 800ce66:	685b      	ldreq	r3, [r3, #4]
 800ce68:	1809      	addeq	r1, r1, r0
 800ce6a:	6021      	streq	r1, [r4, #0]
 800ce6c:	e7ed      	b.n	800ce4a <_free_r+0x1e>
 800ce6e:	461a      	mov	r2, r3
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	b10b      	cbz	r3, 800ce78 <_free_r+0x4c>
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	d9fa      	bls.n	800ce6e <_free_r+0x42>
 800ce78:	6811      	ldr	r1, [r2, #0]
 800ce7a:	1850      	adds	r0, r2, r1
 800ce7c:	42a0      	cmp	r0, r4
 800ce7e:	d10b      	bne.n	800ce98 <_free_r+0x6c>
 800ce80:	6820      	ldr	r0, [r4, #0]
 800ce82:	4401      	add	r1, r0
 800ce84:	1850      	adds	r0, r2, r1
 800ce86:	4283      	cmp	r3, r0
 800ce88:	6011      	str	r1, [r2, #0]
 800ce8a:	d1e0      	bne.n	800ce4e <_free_r+0x22>
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	6053      	str	r3, [r2, #4]
 800ce92:	4408      	add	r0, r1
 800ce94:	6010      	str	r0, [r2, #0]
 800ce96:	e7da      	b.n	800ce4e <_free_r+0x22>
 800ce98:	d902      	bls.n	800cea0 <_free_r+0x74>
 800ce9a:	230c      	movs	r3, #12
 800ce9c:	602b      	str	r3, [r5, #0]
 800ce9e:	e7d6      	b.n	800ce4e <_free_r+0x22>
 800cea0:	6820      	ldr	r0, [r4, #0]
 800cea2:	1821      	adds	r1, r4, r0
 800cea4:	428b      	cmp	r3, r1
 800cea6:	bf04      	itt	eq
 800cea8:	6819      	ldreq	r1, [r3, #0]
 800ceaa:	685b      	ldreq	r3, [r3, #4]
 800ceac:	6063      	str	r3, [r4, #4]
 800ceae:	bf04      	itt	eq
 800ceb0:	1809      	addeq	r1, r1, r0
 800ceb2:	6021      	streq	r1, [r4, #0]
 800ceb4:	6054      	str	r4, [r2, #4]
 800ceb6:	e7ca      	b.n	800ce4e <_free_r+0x22>
 800ceb8:	bd38      	pop	{r3, r4, r5, pc}
 800ceba:	bf00      	nop
 800cebc:	20006a4c 	.word	0x20006a4c

0800cec0 <__malloc_lock>:
 800cec0:	4801      	ldr	r0, [pc, #4]	@ (800cec8 <__malloc_lock+0x8>)
 800cec2:	f7ff bfa3 	b.w	800ce0c <__retarget_lock_acquire_recursive>
 800cec6:	bf00      	nop
 800cec8:	20006a48 	.word	0x20006a48

0800cecc <__malloc_unlock>:
 800cecc:	4801      	ldr	r0, [pc, #4]	@ (800ced4 <__malloc_unlock+0x8>)
 800cece:	f7ff bf9e 	b.w	800ce0e <__retarget_lock_release_recursive>
 800ced2:	bf00      	nop
 800ced4:	20006a48 	.word	0x20006a48

0800ced8 <_init>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr

0800cee4 <_fini>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr
